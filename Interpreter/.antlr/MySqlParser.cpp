
// Generated from d:\University\sophomore\Lower\DataBase\Lab\MiniSQL\ours\Interpreter\MySqlParser.g4 by ANTLR 4.8



#include "MySqlParser.h"


using namespace antlrcpp;
using namespace antlr4;

MySqlParser::MySqlParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

MySqlParser::~MySqlParser() {
  delete _interpreter;
}

std::string MySqlParser::getGrammarFileName() const {
  return "MySqlParser.g4";
}

const std::vector<std::string>& MySqlParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& MySqlParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- RootContext ------------------------------------------------------------------

MySqlParser::RootContext::RootContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RootContext::EOF() {
  return getToken(MySqlParser::EOF, 0);
}

MySqlParser::SqlStatementsContext* MySqlParser::RootContext::sqlStatements() {
  return getRuleContext<MySqlParser::SqlStatementsContext>(0);
}

tree::TerminalNode* MySqlParser::RootContext::MINUSMINUS() {
  return getToken(MySqlParser::MINUSMINUS, 0);
}


size_t MySqlParser::RootContext::getRuleIndex() const {
  return MySqlParser::RuleRoot;
}


MySqlParser::RootContext* MySqlParser::root() {
  RootContext *_localctx = _tracker.createInstance<RootContext>(_ctx, getState());
  enterRule(_localctx, 0, MySqlParser::RuleRoot);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(637);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::ALTER)
      | (1ULL << MySqlParser::ANALYZE)
      | (1ULL << MySqlParser::CALL)
      | (1ULL << MySqlParser::CHANGE)
      | (1ULL << MySqlParser::CHECK)
      | (1ULL << MySqlParser::CREATE)
      | (1ULL << MySqlParser::DELETE)
      | (1ULL << MySqlParser::DESC)
      | (1ULL << MySqlParser::DESCRIBE)
      | (1ULL << MySqlParser::DROP)
      | (1ULL << MySqlParser::EXPLAIN))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (MySqlParser::GET - 64))
      | (1ULL << (MySqlParser::GRANT - 64))
      | (1ULL << (MySqlParser::INSERT - 64))
      | (1ULL << (MySqlParser::KILL - 64))
      | (1ULL << (MySqlParser::LOAD - 64))
      | (1ULL << (MySqlParser::LOCK - 64))
      | (1ULL << (MySqlParser::OPTIMIZE - 64))
      | (1ULL << (MySqlParser::PURGE - 64))
      | (1ULL << (MySqlParser::RELEASE - 64))
      | (1ULL << (MySqlParser::RENAME - 64))
      | (1ULL << (MySqlParser::REPLACE - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (MySqlParser::RESIGNAL - 129))
      | (1ULL << (MySqlParser::REVOKE - 129))
      | (1ULL << (MySqlParser::SELECT - 129))
      | (1ULL << (MySqlParser::SET - 129))
      | (1ULL << (MySqlParser::SHOW - 129))
      | (1ULL << (MySqlParser::SIGNAL - 129))
      | (1ULL << (MySqlParser::UNLOCK - 129))
      | (1ULL << (MySqlParser::UPDATE - 129))
      | (1ULL << (MySqlParser::USE - 129)))) != 0) || ((((_la - 282) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 282)) & ((1ULL << (MySqlParser::BEGIN - 282))
      | (1ULL << (MySqlParser::BINLOG - 282))
      | (1ULL << (MySqlParser::CACHE - 282))
      | (1ULL << (MySqlParser::CHECKSUM - 282))
      | (1ULL << (MySqlParser::COMMIT - 282))
      | (1ULL << (MySqlParser::DEALLOCATE - 282))
      | (1ULL << (MySqlParser::DO - 282)))) != 0) || ((((_la - 364) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 364)) & ((1ULL << (MySqlParser::FLUSH - 364))
      | (1ULL << (MySqlParser::HANDLER - 364))
      | (1ULL << (MySqlParser::HELP - 364))
      | (1ULL << (MySqlParser::INSTALL - 364)))) != 0) || ((((_la - 477) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 477)) & ((1ULL << (MySqlParser::PREPARE - 477))
      | (1ULL << (MySqlParser::REPAIR - 477))
      | (1ULL << (MySqlParser::RESET - 477))
      | (1ULL << (MySqlParser::ROLLBACK - 477))
      | (1ULL << (MySqlParser::SAVEPOINT - 477))
      | (1ULL << (MySqlParser::START - 477)))) != 0) || ((((_la - 546) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 546)) & ((1ULL << (MySqlParser::STOP - 546))
      | (1ULL << (MySqlParser::TRUNCATE - 546))
      | (1ULL << (MySqlParser::UNINSTALL - 546))
      | (1ULL << (MySqlParser::XA - 546))
      | (1ULL << (MySqlParser::EXECUTE - 546)))) != 0) || _la == MySqlParser::SHUTDOWN || _la == MySqlParser::LR_BRACKET

    || _la == MySqlParser::SEMI) {
      setState(636);
      sqlStatements();
    }
    setState(640);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MINUSMINUS) {
      setState(639);
      match(MySqlParser::MINUSMINUS);
    }
    setState(642);
    match(MySqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlStatementsContext ------------------------------------------------------------------

MySqlParser::SqlStatementsContext::SqlStatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::SqlStatementContext *> MySqlParser::SqlStatementsContext::sqlStatement() {
  return getRuleContexts<MySqlParser::SqlStatementContext>();
}

MySqlParser::SqlStatementContext* MySqlParser::SqlStatementsContext::sqlStatement(size_t i) {
  return getRuleContext<MySqlParser::SqlStatementContext>(i);
}

std::vector<MySqlParser::EmptyStatementContext *> MySqlParser::SqlStatementsContext::emptyStatement() {
  return getRuleContexts<MySqlParser::EmptyStatementContext>();
}

MySqlParser::EmptyStatementContext* MySqlParser::SqlStatementsContext::emptyStatement(size_t i) {
  return getRuleContext<MySqlParser::EmptyStatementContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::SqlStatementsContext::SEMI() {
  return getTokens(MySqlParser::SEMI);
}

tree::TerminalNode* MySqlParser::SqlStatementsContext::SEMI(size_t i) {
  return getToken(MySqlParser::SEMI, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SqlStatementsContext::MINUSMINUS() {
  return getTokens(MySqlParser::MINUSMINUS);
}

tree::TerminalNode* MySqlParser::SqlStatementsContext::MINUSMINUS(size_t i) {
  return getToken(MySqlParser::MINUSMINUS, i);
}


size_t MySqlParser::SqlStatementsContext::getRuleIndex() const {
  return MySqlParser::RuleSqlStatements;
}


MySqlParser::SqlStatementsContext* MySqlParser::sqlStatements() {
  SqlStatementsContext *_localctx = _tracker.createInstance<SqlStatementsContext>(_ctx, getState());
  enterRule(_localctx, 2, MySqlParser::RuleSqlStatements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(654);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(652);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ALTER:
          case MySqlParser::ANALYZE:
          case MySqlParser::CALL:
          case MySqlParser::CHANGE:
          case MySqlParser::CHECK:
          case MySqlParser::CREATE:
          case MySqlParser::DELETE:
          case MySqlParser::DESC:
          case MySqlParser::DESCRIBE:
          case MySqlParser::DROP:
          case MySqlParser::EXPLAIN:
          case MySqlParser::GET:
          case MySqlParser::GRANT:
          case MySqlParser::INSERT:
          case MySqlParser::KILL:
          case MySqlParser::LOAD:
          case MySqlParser::LOCK:
          case MySqlParser::OPTIMIZE:
          case MySqlParser::PURGE:
          case MySqlParser::RELEASE:
          case MySqlParser::RENAME:
          case MySqlParser::REPLACE:
          case MySqlParser::RESIGNAL:
          case MySqlParser::REVOKE:
          case MySqlParser::SELECT:
          case MySqlParser::SET:
          case MySqlParser::SHOW:
          case MySqlParser::SIGNAL:
          case MySqlParser::UNLOCK:
          case MySqlParser::UPDATE:
          case MySqlParser::USE:
          case MySqlParser::BEGIN:
          case MySqlParser::BINLOG:
          case MySqlParser::CACHE:
          case MySqlParser::CHECKSUM:
          case MySqlParser::COMMIT:
          case MySqlParser::DEALLOCATE:
          case MySqlParser::DO:
          case MySqlParser::FLUSH:
          case MySqlParser::HANDLER:
          case MySqlParser::HELP:
          case MySqlParser::INSTALL:
          case MySqlParser::PREPARE:
          case MySqlParser::REPAIR:
          case MySqlParser::RESET:
          case MySqlParser::ROLLBACK:
          case MySqlParser::SAVEPOINT:
          case MySqlParser::START:
          case MySqlParser::STOP:
          case MySqlParser::TRUNCATE:
          case MySqlParser::UNINSTALL:
          case MySqlParser::XA:
          case MySqlParser::EXECUTE:
          case MySqlParser::SHUTDOWN:
          case MySqlParser::LR_BRACKET: {
            setState(644);
            sqlStatement();
            setState(646);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::MINUSMINUS) {
              setState(645);
              match(MySqlParser::MINUSMINUS);
            }
            setState(649);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
            case 1: {
              setState(648);
              match(MySqlParser::SEMI);
              break;
            }

            }
            break;
          }

          case MySqlParser::SEMI: {
            setState(651);
            emptyStatement();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(656);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    }
    setState(665);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALTER:
      case MySqlParser::ANALYZE:
      case MySqlParser::CALL:
      case MySqlParser::CHANGE:
      case MySqlParser::CHECK:
      case MySqlParser::CREATE:
      case MySqlParser::DELETE:
      case MySqlParser::DESC:
      case MySqlParser::DESCRIBE:
      case MySqlParser::DROP:
      case MySqlParser::EXPLAIN:
      case MySqlParser::GET:
      case MySqlParser::GRANT:
      case MySqlParser::INSERT:
      case MySqlParser::KILL:
      case MySqlParser::LOAD:
      case MySqlParser::LOCK:
      case MySqlParser::OPTIMIZE:
      case MySqlParser::PURGE:
      case MySqlParser::RELEASE:
      case MySqlParser::RENAME:
      case MySqlParser::REPLACE:
      case MySqlParser::RESIGNAL:
      case MySqlParser::REVOKE:
      case MySqlParser::SELECT:
      case MySqlParser::SET:
      case MySqlParser::SHOW:
      case MySqlParser::SIGNAL:
      case MySqlParser::UNLOCK:
      case MySqlParser::UPDATE:
      case MySqlParser::USE:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::CACHE:
      case MySqlParser::CHECKSUM:
      case MySqlParser::COMMIT:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DO:
      case MySqlParser::FLUSH:
      case MySqlParser::HANDLER:
      case MySqlParser::HELP:
      case MySqlParser::INSTALL:
      case MySqlParser::PREPARE:
      case MySqlParser::REPAIR:
      case MySqlParser::RESET:
      case MySqlParser::ROLLBACK:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::START:
      case MySqlParser::STOP:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::XA:
      case MySqlParser::EXECUTE:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::LR_BRACKET: {
        setState(657);
        sqlStatement();
        setState(662);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(659);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::MINUSMINUS) {
            setState(658);
            match(MySqlParser::MINUSMINUS);
          }
          setState(661);
          match(MySqlParser::SEMI);
          break;
        }

        }
        break;
      }

      case MySqlParser::SEMI: {
        setState(664);
        emptyStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlStatementContext ------------------------------------------------------------------

MySqlParser::SqlStatementContext::SqlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::DdlStatementContext* MySqlParser::SqlStatementContext::ddlStatement() {
  return getRuleContext<MySqlParser::DdlStatementContext>(0);
}

MySqlParser::DmlStatementContext* MySqlParser::SqlStatementContext::dmlStatement() {
  return getRuleContext<MySqlParser::DmlStatementContext>(0);
}

MySqlParser::TransactionStatementContext* MySqlParser::SqlStatementContext::transactionStatement() {
  return getRuleContext<MySqlParser::TransactionStatementContext>(0);
}

MySqlParser::ReplicationStatementContext* MySqlParser::SqlStatementContext::replicationStatement() {
  return getRuleContext<MySqlParser::ReplicationStatementContext>(0);
}

MySqlParser::PreparedStatementContext* MySqlParser::SqlStatementContext::preparedStatement() {
  return getRuleContext<MySqlParser::PreparedStatementContext>(0);
}

MySqlParser::AdministrationStatementContext* MySqlParser::SqlStatementContext::administrationStatement() {
  return getRuleContext<MySqlParser::AdministrationStatementContext>(0);
}

MySqlParser::UtilityStatementContext* MySqlParser::SqlStatementContext::utilityStatement() {
  return getRuleContext<MySqlParser::UtilityStatementContext>(0);
}


size_t MySqlParser::SqlStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSqlStatement;
}


MySqlParser::SqlStatementContext* MySqlParser::sqlStatement() {
  SqlStatementContext *_localctx = _tracker.createInstance<SqlStatementContext>(_ctx, getState());
  enterRule(_localctx, 4, MySqlParser::RuleSqlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(674);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(667);
      ddlStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(668);
      dmlStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(669);
      transactionStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(670);
      replicationStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(671);
      preparedStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(672);
      administrationStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(673);
      utilityStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatementContext ------------------------------------------------------------------

MySqlParser::EmptyStatementContext::EmptyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::EmptyStatementContext::SEMI() {
  return getToken(MySqlParser::SEMI, 0);
}


size_t MySqlParser::EmptyStatementContext::getRuleIndex() const {
  return MySqlParser::RuleEmptyStatement;
}


MySqlParser::EmptyStatementContext* MySqlParser::emptyStatement() {
  EmptyStatementContext *_localctx = _tracker.createInstance<EmptyStatementContext>(_ctx, getState());
  enterRule(_localctx, 6, MySqlParser::RuleEmptyStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(676);
    match(MySqlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DdlStatementContext ------------------------------------------------------------------

MySqlParser::DdlStatementContext::DdlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::CreateDatabaseContext* MySqlParser::DdlStatementContext::createDatabase() {
  return getRuleContext<MySqlParser::CreateDatabaseContext>(0);
}

MySqlParser::CreateEventContext* MySqlParser::DdlStatementContext::createEvent() {
  return getRuleContext<MySqlParser::CreateEventContext>(0);
}

MySqlParser::CreateIndexContext* MySqlParser::DdlStatementContext::createIndex() {
  return getRuleContext<MySqlParser::CreateIndexContext>(0);
}

MySqlParser::CreateLogfileGroupContext* MySqlParser::DdlStatementContext::createLogfileGroup() {
  return getRuleContext<MySqlParser::CreateLogfileGroupContext>(0);
}

MySqlParser::CreateProcedureContext* MySqlParser::DdlStatementContext::createProcedure() {
  return getRuleContext<MySqlParser::CreateProcedureContext>(0);
}

MySqlParser::CreateFunctionContext* MySqlParser::DdlStatementContext::createFunction() {
  return getRuleContext<MySqlParser::CreateFunctionContext>(0);
}

MySqlParser::CreateServerContext* MySqlParser::DdlStatementContext::createServer() {
  return getRuleContext<MySqlParser::CreateServerContext>(0);
}

MySqlParser::CreateTableContext* MySqlParser::DdlStatementContext::createTable() {
  return getRuleContext<MySqlParser::CreateTableContext>(0);
}

MySqlParser::CreateTablespaceInnodbContext* MySqlParser::DdlStatementContext::createTablespaceInnodb() {
  return getRuleContext<MySqlParser::CreateTablespaceInnodbContext>(0);
}

MySqlParser::CreateTablespaceNdbContext* MySqlParser::DdlStatementContext::createTablespaceNdb() {
  return getRuleContext<MySqlParser::CreateTablespaceNdbContext>(0);
}

MySqlParser::CreateTriggerContext* MySqlParser::DdlStatementContext::createTrigger() {
  return getRuleContext<MySqlParser::CreateTriggerContext>(0);
}

MySqlParser::CreateViewContext* MySqlParser::DdlStatementContext::createView() {
  return getRuleContext<MySqlParser::CreateViewContext>(0);
}

MySqlParser::AlterDatabaseContext* MySqlParser::DdlStatementContext::alterDatabase() {
  return getRuleContext<MySqlParser::AlterDatabaseContext>(0);
}

MySqlParser::AlterEventContext* MySqlParser::DdlStatementContext::alterEvent() {
  return getRuleContext<MySqlParser::AlterEventContext>(0);
}

MySqlParser::AlterFunctionContext* MySqlParser::DdlStatementContext::alterFunction() {
  return getRuleContext<MySqlParser::AlterFunctionContext>(0);
}

MySqlParser::AlterInstanceContext* MySqlParser::DdlStatementContext::alterInstance() {
  return getRuleContext<MySqlParser::AlterInstanceContext>(0);
}

MySqlParser::AlterLogfileGroupContext* MySqlParser::DdlStatementContext::alterLogfileGroup() {
  return getRuleContext<MySqlParser::AlterLogfileGroupContext>(0);
}

MySqlParser::AlterProcedureContext* MySqlParser::DdlStatementContext::alterProcedure() {
  return getRuleContext<MySqlParser::AlterProcedureContext>(0);
}

MySqlParser::AlterServerContext* MySqlParser::DdlStatementContext::alterServer() {
  return getRuleContext<MySqlParser::AlterServerContext>(0);
}

MySqlParser::AlterTableContext* MySqlParser::DdlStatementContext::alterTable() {
  return getRuleContext<MySqlParser::AlterTableContext>(0);
}

MySqlParser::AlterTablespaceContext* MySqlParser::DdlStatementContext::alterTablespace() {
  return getRuleContext<MySqlParser::AlterTablespaceContext>(0);
}

MySqlParser::AlterViewContext* MySqlParser::DdlStatementContext::alterView() {
  return getRuleContext<MySqlParser::AlterViewContext>(0);
}

MySqlParser::DropDatabaseContext* MySqlParser::DdlStatementContext::dropDatabase() {
  return getRuleContext<MySqlParser::DropDatabaseContext>(0);
}

MySqlParser::DropEventContext* MySqlParser::DdlStatementContext::dropEvent() {
  return getRuleContext<MySqlParser::DropEventContext>(0);
}

MySqlParser::DropIndexContext* MySqlParser::DdlStatementContext::dropIndex() {
  return getRuleContext<MySqlParser::DropIndexContext>(0);
}

MySqlParser::DropLogfileGroupContext* MySqlParser::DdlStatementContext::dropLogfileGroup() {
  return getRuleContext<MySqlParser::DropLogfileGroupContext>(0);
}

MySqlParser::DropProcedureContext* MySqlParser::DdlStatementContext::dropProcedure() {
  return getRuleContext<MySqlParser::DropProcedureContext>(0);
}

MySqlParser::DropFunctionContext* MySqlParser::DdlStatementContext::dropFunction() {
  return getRuleContext<MySqlParser::DropFunctionContext>(0);
}

MySqlParser::DropServerContext* MySqlParser::DdlStatementContext::dropServer() {
  return getRuleContext<MySqlParser::DropServerContext>(0);
}

MySqlParser::DropTableContext* MySqlParser::DdlStatementContext::dropTable() {
  return getRuleContext<MySqlParser::DropTableContext>(0);
}

MySqlParser::DropTablespaceContext* MySqlParser::DdlStatementContext::dropTablespace() {
  return getRuleContext<MySqlParser::DropTablespaceContext>(0);
}

MySqlParser::DropTriggerContext* MySqlParser::DdlStatementContext::dropTrigger() {
  return getRuleContext<MySqlParser::DropTriggerContext>(0);
}

MySqlParser::DropViewContext* MySqlParser::DdlStatementContext::dropView() {
  return getRuleContext<MySqlParser::DropViewContext>(0);
}

MySqlParser::RenameTableContext* MySqlParser::DdlStatementContext::renameTable() {
  return getRuleContext<MySqlParser::RenameTableContext>(0);
}

MySqlParser::TruncateTableContext* MySqlParser::DdlStatementContext::truncateTable() {
  return getRuleContext<MySqlParser::TruncateTableContext>(0);
}


size_t MySqlParser::DdlStatementContext::getRuleIndex() const {
  return MySqlParser::RuleDdlStatement;
}


MySqlParser::DdlStatementContext* MySqlParser::ddlStatement() {
  DdlStatementContext *_localctx = _tracker.createInstance<DdlStatementContext>(_ctx, getState());
  enterRule(_localctx, 8, MySqlParser::RuleDdlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(713);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(678);
      createDatabase();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(679);
      createEvent();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(680);
      createIndex();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(681);
      createLogfileGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(682);
      createProcedure();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(683);
      createFunction();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(684);
      createServer();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(685);
      createTable();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(686);
      createTablespaceInnodb();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(687);
      createTablespaceNdb();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(688);
      createTrigger();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(689);
      createView();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(690);
      alterDatabase();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(691);
      alterEvent();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(692);
      alterFunction();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(693);
      alterInstance();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(694);
      alterLogfileGroup();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(695);
      alterProcedure();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(696);
      alterServer();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(697);
      alterTable();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(698);
      alterTablespace();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(699);
      alterView();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(700);
      dropDatabase();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(701);
      dropEvent();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(702);
      dropIndex();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(703);
      dropLogfileGroup();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(704);
      dropProcedure();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(705);
      dropFunction();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(706);
      dropServer();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(707);
      dropTable();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(708);
      dropTablespace();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(709);
      dropTrigger();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(710);
      dropView();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(711);
      renameTable();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(712);
      truncateTable();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DmlStatementContext ------------------------------------------------------------------

MySqlParser::DmlStatementContext::DmlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::SelectStatementContext* MySqlParser::DmlStatementContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

MySqlParser::InsertStatementContext* MySqlParser::DmlStatementContext::insertStatement() {
  return getRuleContext<MySqlParser::InsertStatementContext>(0);
}

MySqlParser::UpdateStatementContext* MySqlParser::DmlStatementContext::updateStatement() {
  return getRuleContext<MySqlParser::UpdateStatementContext>(0);
}

MySqlParser::DeleteStatementContext* MySqlParser::DmlStatementContext::deleteStatement() {
  return getRuleContext<MySqlParser::DeleteStatementContext>(0);
}

MySqlParser::ReplaceStatementContext* MySqlParser::DmlStatementContext::replaceStatement() {
  return getRuleContext<MySqlParser::ReplaceStatementContext>(0);
}

MySqlParser::CallStatementContext* MySqlParser::DmlStatementContext::callStatement() {
  return getRuleContext<MySqlParser::CallStatementContext>(0);
}

MySqlParser::LoadDataStatementContext* MySqlParser::DmlStatementContext::loadDataStatement() {
  return getRuleContext<MySqlParser::LoadDataStatementContext>(0);
}

MySqlParser::LoadXmlStatementContext* MySqlParser::DmlStatementContext::loadXmlStatement() {
  return getRuleContext<MySqlParser::LoadXmlStatementContext>(0);
}

MySqlParser::DoStatementContext* MySqlParser::DmlStatementContext::doStatement() {
  return getRuleContext<MySqlParser::DoStatementContext>(0);
}

MySqlParser::HandlerStatementContext* MySqlParser::DmlStatementContext::handlerStatement() {
  return getRuleContext<MySqlParser::HandlerStatementContext>(0);
}


size_t MySqlParser::DmlStatementContext::getRuleIndex() const {
  return MySqlParser::RuleDmlStatement;
}


MySqlParser::DmlStatementContext* MySqlParser::dmlStatement() {
  DmlStatementContext *_localctx = _tracker.createInstance<DmlStatementContext>(_ctx, getState());
  enterRule(_localctx, 10, MySqlParser::RuleDmlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(725);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(715);
      selectStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(716);
      insertStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(717);
      updateStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(718);
      deleteStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(719);
      replaceStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(720);
      callStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(721);
      loadDataStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(722);
      loadXmlStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(723);
      doStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(724);
      handlerStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionStatementContext ------------------------------------------------------------------

MySqlParser::TransactionStatementContext::TransactionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::StartTransactionContext* MySqlParser::TransactionStatementContext::startTransaction() {
  return getRuleContext<MySqlParser::StartTransactionContext>(0);
}

MySqlParser::BeginWorkContext* MySqlParser::TransactionStatementContext::beginWork() {
  return getRuleContext<MySqlParser::BeginWorkContext>(0);
}

MySqlParser::CommitWorkContext* MySqlParser::TransactionStatementContext::commitWork() {
  return getRuleContext<MySqlParser::CommitWorkContext>(0);
}

MySqlParser::RollbackWorkContext* MySqlParser::TransactionStatementContext::rollbackWork() {
  return getRuleContext<MySqlParser::RollbackWorkContext>(0);
}

MySqlParser::SavepointStatementContext* MySqlParser::TransactionStatementContext::savepointStatement() {
  return getRuleContext<MySqlParser::SavepointStatementContext>(0);
}

MySqlParser::RollbackStatementContext* MySqlParser::TransactionStatementContext::rollbackStatement() {
  return getRuleContext<MySqlParser::RollbackStatementContext>(0);
}

MySqlParser::ReleaseStatementContext* MySqlParser::TransactionStatementContext::releaseStatement() {
  return getRuleContext<MySqlParser::ReleaseStatementContext>(0);
}

MySqlParser::LockTablesContext* MySqlParser::TransactionStatementContext::lockTables() {
  return getRuleContext<MySqlParser::LockTablesContext>(0);
}

MySqlParser::UnlockTablesContext* MySqlParser::TransactionStatementContext::unlockTables() {
  return getRuleContext<MySqlParser::UnlockTablesContext>(0);
}


size_t MySqlParser::TransactionStatementContext::getRuleIndex() const {
  return MySqlParser::RuleTransactionStatement;
}


MySqlParser::TransactionStatementContext* MySqlParser::transactionStatement() {
  TransactionStatementContext *_localctx = _tracker.createInstance<TransactionStatementContext>(_ctx, getState());
  enterRule(_localctx, 12, MySqlParser::RuleTransactionStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(736);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(727);
      startTransaction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(728);
      beginWork();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(729);
      commitWork();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(730);
      rollbackWork();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(731);
      savepointStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(732);
      rollbackStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(733);
      releaseStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(734);
      lockTables();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(735);
      unlockTables();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplicationStatementContext ------------------------------------------------------------------

MySqlParser::ReplicationStatementContext::ReplicationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ChangeMasterContext* MySqlParser::ReplicationStatementContext::changeMaster() {
  return getRuleContext<MySqlParser::ChangeMasterContext>(0);
}

MySqlParser::ChangeReplicationFilterContext* MySqlParser::ReplicationStatementContext::changeReplicationFilter() {
  return getRuleContext<MySqlParser::ChangeReplicationFilterContext>(0);
}

MySqlParser::PurgeBinaryLogsContext* MySqlParser::ReplicationStatementContext::purgeBinaryLogs() {
  return getRuleContext<MySqlParser::PurgeBinaryLogsContext>(0);
}

MySqlParser::ResetMasterContext* MySqlParser::ReplicationStatementContext::resetMaster() {
  return getRuleContext<MySqlParser::ResetMasterContext>(0);
}

MySqlParser::ResetSlaveContext* MySqlParser::ReplicationStatementContext::resetSlave() {
  return getRuleContext<MySqlParser::ResetSlaveContext>(0);
}

MySqlParser::StartSlaveContext* MySqlParser::ReplicationStatementContext::startSlave() {
  return getRuleContext<MySqlParser::StartSlaveContext>(0);
}

MySqlParser::StopSlaveContext* MySqlParser::ReplicationStatementContext::stopSlave() {
  return getRuleContext<MySqlParser::StopSlaveContext>(0);
}

MySqlParser::StartGroupReplicationContext* MySqlParser::ReplicationStatementContext::startGroupReplication() {
  return getRuleContext<MySqlParser::StartGroupReplicationContext>(0);
}

MySqlParser::StopGroupReplicationContext* MySqlParser::ReplicationStatementContext::stopGroupReplication() {
  return getRuleContext<MySqlParser::StopGroupReplicationContext>(0);
}

MySqlParser::XaStartTransactionContext* MySqlParser::ReplicationStatementContext::xaStartTransaction() {
  return getRuleContext<MySqlParser::XaStartTransactionContext>(0);
}

MySqlParser::XaEndTransactionContext* MySqlParser::ReplicationStatementContext::xaEndTransaction() {
  return getRuleContext<MySqlParser::XaEndTransactionContext>(0);
}

MySqlParser::XaPrepareStatementContext* MySqlParser::ReplicationStatementContext::xaPrepareStatement() {
  return getRuleContext<MySqlParser::XaPrepareStatementContext>(0);
}

MySqlParser::XaCommitWorkContext* MySqlParser::ReplicationStatementContext::xaCommitWork() {
  return getRuleContext<MySqlParser::XaCommitWorkContext>(0);
}

MySqlParser::XaRollbackWorkContext* MySqlParser::ReplicationStatementContext::xaRollbackWork() {
  return getRuleContext<MySqlParser::XaRollbackWorkContext>(0);
}

MySqlParser::XaRecoverWorkContext* MySqlParser::ReplicationStatementContext::xaRecoverWork() {
  return getRuleContext<MySqlParser::XaRecoverWorkContext>(0);
}


size_t MySqlParser::ReplicationStatementContext::getRuleIndex() const {
  return MySqlParser::RuleReplicationStatement;
}


MySqlParser::ReplicationStatementContext* MySqlParser::replicationStatement() {
  ReplicationStatementContext *_localctx = _tracker.createInstance<ReplicationStatementContext>(_ctx, getState());
  enterRule(_localctx, 14, MySqlParser::RuleReplicationStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(738);
      changeMaster();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(739);
      changeReplicationFilter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(740);
      purgeBinaryLogs();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(741);
      resetMaster();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(742);
      resetSlave();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(743);
      startSlave();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(744);
      stopSlave();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(745);
      startGroupReplication();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(746);
      stopGroupReplication();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(747);
      xaStartTransaction();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(748);
      xaEndTransaction();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(749);
      xaPrepareStatement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(750);
      xaCommitWork();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(751);
      xaRollbackWork();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(752);
      xaRecoverWork();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreparedStatementContext ------------------------------------------------------------------

MySqlParser::PreparedStatementContext::PreparedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::PrepareStatementContext* MySqlParser::PreparedStatementContext::prepareStatement() {
  return getRuleContext<MySqlParser::PrepareStatementContext>(0);
}

MySqlParser::ExecuteStatementContext* MySqlParser::PreparedStatementContext::executeStatement() {
  return getRuleContext<MySqlParser::ExecuteStatementContext>(0);
}

MySqlParser::DeallocatePrepareContext* MySqlParser::PreparedStatementContext::deallocatePrepare() {
  return getRuleContext<MySqlParser::DeallocatePrepareContext>(0);
}


size_t MySqlParser::PreparedStatementContext::getRuleIndex() const {
  return MySqlParser::RulePreparedStatement;
}


MySqlParser::PreparedStatementContext* MySqlParser::preparedStatement() {
  PreparedStatementContext *_localctx = _tracker.createInstance<PreparedStatementContext>(_ctx, getState());
  enterRule(_localctx, 16, MySqlParser::RulePreparedStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(758);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::PREPARE: {
        enterOuterAlt(_localctx, 1);
        setState(755);
        prepareStatement();
        break;
      }

      case MySqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 2);
        setState(756);
        executeStatement();
        break;
      }

      case MySqlParser::DROP:
      case MySqlParser::DEALLOCATE: {
        enterOuterAlt(_localctx, 3);
        setState(757);
        deallocatePrepare();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStatementContext ------------------------------------------------------------------

MySqlParser::CompoundStatementContext::CompoundStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::BlockStatementContext* MySqlParser::CompoundStatementContext::blockStatement() {
  return getRuleContext<MySqlParser::BlockStatementContext>(0);
}

MySqlParser::CaseStatementContext* MySqlParser::CompoundStatementContext::caseStatement() {
  return getRuleContext<MySqlParser::CaseStatementContext>(0);
}

MySqlParser::IfStatementContext* MySqlParser::CompoundStatementContext::ifStatement() {
  return getRuleContext<MySqlParser::IfStatementContext>(0);
}

MySqlParser::LeaveStatementContext* MySqlParser::CompoundStatementContext::leaveStatement() {
  return getRuleContext<MySqlParser::LeaveStatementContext>(0);
}

MySqlParser::LoopStatementContext* MySqlParser::CompoundStatementContext::loopStatement() {
  return getRuleContext<MySqlParser::LoopStatementContext>(0);
}

MySqlParser::RepeatStatementContext* MySqlParser::CompoundStatementContext::repeatStatement() {
  return getRuleContext<MySqlParser::RepeatStatementContext>(0);
}

MySqlParser::WhileStatementContext* MySqlParser::CompoundStatementContext::whileStatement() {
  return getRuleContext<MySqlParser::WhileStatementContext>(0);
}

MySqlParser::IterateStatementContext* MySqlParser::CompoundStatementContext::iterateStatement() {
  return getRuleContext<MySqlParser::IterateStatementContext>(0);
}

MySqlParser::ReturnStatementContext* MySqlParser::CompoundStatementContext::returnStatement() {
  return getRuleContext<MySqlParser::ReturnStatementContext>(0);
}

MySqlParser::CursorStatementContext* MySqlParser::CompoundStatementContext::cursorStatement() {
  return getRuleContext<MySqlParser::CursorStatementContext>(0);
}


size_t MySqlParser::CompoundStatementContext::getRuleIndex() const {
  return MySqlParser::RuleCompoundStatement;
}


MySqlParser::CompoundStatementContext* MySqlParser::compoundStatement() {
  CompoundStatementContext *_localctx = _tracker.createInstance<CompoundStatementContext>(_ctx, getState());
  enterRule(_localctx, 18, MySqlParser::RuleCompoundStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(770);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(760);
      blockStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(761);
      caseStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(762);
      ifStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(763);
      leaveStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(764);
      loopStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(765);
      repeatStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(766);
      whileStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(767);
      iterateStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(768);
      returnStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(769);
      cursorStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdministrationStatementContext ------------------------------------------------------------------

MySqlParser::AdministrationStatementContext::AdministrationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::AlterUserContext* MySqlParser::AdministrationStatementContext::alterUser() {
  return getRuleContext<MySqlParser::AlterUserContext>(0);
}

MySqlParser::CreateUserContext* MySqlParser::AdministrationStatementContext::createUser() {
  return getRuleContext<MySqlParser::CreateUserContext>(0);
}

MySqlParser::DropUserContext* MySqlParser::AdministrationStatementContext::dropUser() {
  return getRuleContext<MySqlParser::DropUserContext>(0);
}

MySqlParser::GrantStatementContext* MySqlParser::AdministrationStatementContext::grantStatement() {
  return getRuleContext<MySqlParser::GrantStatementContext>(0);
}

MySqlParser::GrantProxyContext* MySqlParser::AdministrationStatementContext::grantProxy() {
  return getRuleContext<MySqlParser::GrantProxyContext>(0);
}

MySqlParser::RenameUserContext* MySqlParser::AdministrationStatementContext::renameUser() {
  return getRuleContext<MySqlParser::RenameUserContext>(0);
}

MySqlParser::RevokeStatementContext* MySqlParser::AdministrationStatementContext::revokeStatement() {
  return getRuleContext<MySqlParser::RevokeStatementContext>(0);
}

MySqlParser::RevokeProxyContext* MySqlParser::AdministrationStatementContext::revokeProxy() {
  return getRuleContext<MySqlParser::RevokeProxyContext>(0);
}

MySqlParser::AnalyzeTableContext* MySqlParser::AdministrationStatementContext::analyzeTable() {
  return getRuleContext<MySqlParser::AnalyzeTableContext>(0);
}

MySqlParser::CheckTableContext* MySqlParser::AdministrationStatementContext::checkTable() {
  return getRuleContext<MySqlParser::CheckTableContext>(0);
}

MySqlParser::ChecksumTableContext* MySqlParser::AdministrationStatementContext::checksumTable() {
  return getRuleContext<MySqlParser::ChecksumTableContext>(0);
}

MySqlParser::OptimizeTableContext* MySqlParser::AdministrationStatementContext::optimizeTable() {
  return getRuleContext<MySqlParser::OptimizeTableContext>(0);
}

MySqlParser::RepairTableContext* MySqlParser::AdministrationStatementContext::repairTable() {
  return getRuleContext<MySqlParser::RepairTableContext>(0);
}

MySqlParser::CreateUdfunctionContext* MySqlParser::AdministrationStatementContext::createUdfunction() {
  return getRuleContext<MySqlParser::CreateUdfunctionContext>(0);
}

MySqlParser::InstallPluginContext* MySqlParser::AdministrationStatementContext::installPlugin() {
  return getRuleContext<MySqlParser::InstallPluginContext>(0);
}

MySqlParser::UninstallPluginContext* MySqlParser::AdministrationStatementContext::uninstallPlugin() {
  return getRuleContext<MySqlParser::UninstallPluginContext>(0);
}

MySqlParser::SetStatementContext* MySqlParser::AdministrationStatementContext::setStatement() {
  return getRuleContext<MySqlParser::SetStatementContext>(0);
}

MySqlParser::ShowStatementContext* MySqlParser::AdministrationStatementContext::showStatement() {
  return getRuleContext<MySqlParser::ShowStatementContext>(0);
}

MySqlParser::BinlogStatementContext* MySqlParser::AdministrationStatementContext::binlogStatement() {
  return getRuleContext<MySqlParser::BinlogStatementContext>(0);
}

MySqlParser::CacheIndexStatementContext* MySqlParser::AdministrationStatementContext::cacheIndexStatement() {
  return getRuleContext<MySqlParser::CacheIndexStatementContext>(0);
}

MySqlParser::FlushStatementContext* MySqlParser::AdministrationStatementContext::flushStatement() {
  return getRuleContext<MySqlParser::FlushStatementContext>(0);
}

MySqlParser::KillStatementContext* MySqlParser::AdministrationStatementContext::killStatement() {
  return getRuleContext<MySqlParser::KillStatementContext>(0);
}

MySqlParser::LoadIndexIntoCacheContext* MySqlParser::AdministrationStatementContext::loadIndexIntoCache() {
  return getRuleContext<MySqlParser::LoadIndexIntoCacheContext>(0);
}

MySqlParser::ResetStatementContext* MySqlParser::AdministrationStatementContext::resetStatement() {
  return getRuleContext<MySqlParser::ResetStatementContext>(0);
}

MySqlParser::ShutdownStatementContext* MySqlParser::AdministrationStatementContext::shutdownStatement() {
  return getRuleContext<MySqlParser::ShutdownStatementContext>(0);
}


size_t MySqlParser::AdministrationStatementContext::getRuleIndex() const {
  return MySqlParser::RuleAdministrationStatement;
}


MySqlParser::AdministrationStatementContext* MySqlParser::administrationStatement() {
  AdministrationStatementContext *_localctx = _tracker.createInstance<AdministrationStatementContext>(_ctx, getState());
  enterRule(_localctx, 20, MySqlParser::RuleAdministrationStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(797);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(772);
      alterUser();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(773);
      createUser();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(774);
      dropUser();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(775);
      grantStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(776);
      grantProxy();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(777);
      renameUser();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(778);
      revokeStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(779);
      revokeProxy();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(780);
      analyzeTable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(781);
      checkTable();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(782);
      checksumTable();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(783);
      optimizeTable();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(784);
      repairTable();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(785);
      createUdfunction();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(786);
      installPlugin();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(787);
      uninstallPlugin();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(788);
      setStatement();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(789);
      showStatement();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(790);
      binlogStatement();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(791);
      cacheIndexStatement();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(792);
      flushStatement();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(793);
      killStatement();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(794);
      loadIndexIntoCache();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(795);
      resetStatement();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(796);
      shutdownStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UtilityStatementContext ------------------------------------------------------------------

MySqlParser::UtilityStatementContext::UtilityStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::SimpleDescribeStatementContext* MySqlParser::UtilityStatementContext::simpleDescribeStatement() {
  return getRuleContext<MySqlParser::SimpleDescribeStatementContext>(0);
}

MySqlParser::FullDescribeStatementContext* MySqlParser::UtilityStatementContext::fullDescribeStatement() {
  return getRuleContext<MySqlParser::FullDescribeStatementContext>(0);
}

MySqlParser::HelpStatementContext* MySqlParser::UtilityStatementContext::helpStatement() {
  return getRuleContext<MySqlParser::HelpStatementContext>(0);
}

MySqlParser::UseStatementContext* MySqlParser::UtilityStatementContext::useStatement() {
  return getRuleContext<MySqlParser::UseStatementContext>(0);
}

MySqlParser::SignalStatementContext* MySqlParser::UtilityStatementContext::signalStatement() {
  return getRuleContext<MySqlParser::SignalStatementContext>(0);
}

MySqlParser::ResignalStatementContext* MySqlParser::UtilityStatementContext::resignalStatement() {
  return getRuleContext<MySqlParser::ResignalStatementContext>(0);
}

MySqlParser::DiagnosticsStatementContext* MySqlParser::UtilityStatementContext::diagnosticsStatement() {
  return getRuleContext<MySqlParser::DiagnosticsStatementContext>(0);
}


size_t MySqlParser::UtilityStatementContext::getRuleIndex() const {
  return MySqlParser::RuleUtilityStatement;
}


MySqlParser::UtilityStatementContext* MySqlParser::utilityStatement() {
  UtilityStatementContext *_localctx = _tracker.createInstance<UtilityStatementContext>(_ctx, getState());
  enterRule(_localctx, 22, MySqlParser::RuleUtilityStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(806);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(799);
      simpleDescribeStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(800);
      fullDescribeStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(801);
      helpStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(802);
      useStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(803);
      signalStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(804);
      resignalStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(805);
      diagnosticsStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDatabaseContext ------------------------------------------------------------------

MySqlParser::CreateDatabaseContext::CreateDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateDatabaseContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

MySqlParser::UidContext* MySqlParser::CreateDatabaseContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::CreateDatabaseContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::CreateDatabaseContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::IfNotExistsContext* MySqlParser::CreateDatabaseContext::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

std::vector<MySqlParser::CreateDatabaseOptionContext *> MySqlParser::CreateDatabaseContext::createDatabaseOption() {
  return getRuleContexts<MySqlParser::CreateDatabaseOptionContext>();
}

MySqlParser::CreateDatabaseOptionContext* MySqlParser::CreateDatabaseContext::createDatabaseOption(size_t i) {
  return getRuleContext<MySqlParser::CreateDatabaseOptionContext>(i);
}


size_t MySqlParser::CreateDatabaseContext::getRuleIndex() const {
  return MySqlParser::RuleCreateDatabase;
}


MySqlParser::CreateDatabaseContext* MySqlParser::createDatabase() {
  CreateDatabaseContext *_localctx = _tracker.createInstance<CreateDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 24, MySqlParser::RuleCreateDatabase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    match(MySqlParser::CREATE);
    setState(809);
    dynamic_cast<CreateDatabaseContext *>(_localctx)->dbFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
      dynamic_cast<CreateDatabaseContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(810);
      ifNotExists();
    }
    setState(813);
    uid();
    setState(817);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::CHARACTER)
      | (1ULL << MySqlParser::COLLATE)
      | (1ULL << MySqlParser::DEFAULT))) != 0) || _la == MySqlParser::CHARSET) {
      setState(814);
      createDatabaseOption();
      setState(819);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateEventContext ------------------------------------------------------------------

MySqlParser::CreateEventContext::CreateEventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateEventContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

MySqlParser::FullIdContext* MySqlParser::CreateEventContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateEventContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::CreateEventContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::CreateEventContext::SCHEDULE() {
  return getToken(MySqlParser::SCHEDULE, 0);
}

MySqlParser::ScheduleExpressionContext* MySqlParser::CreateEventContext::scheduleExpression() {
  return getRuleContext<MySqlParser::ScheduleExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

MySqlParser::RoutineBodyContext* MySqlParser::CreateEventContext::routineBody() {
  return getRuleContext<MySqlParser::RoutineBodyContext>(0);
}

MySqlParser::OwnerStatementContext* MySqlParser::CreateEventContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

MySqlParser::IfNotExistsContext* MySqlParser::CreateEventContext::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::COMPLETION() {
  return getToken(MySqlParser::COMPLETION, 0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::PRESERVE() {
  return getToken(MySqlParser::PRESERVE, 0);
}

MySqlParser::EnableTypeContext* MySqlParser::CreateEventContext::enableType() {
  return getRuleContext<MySqlParser::EnableTypeContext>(0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::CreateEventContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::CreateEventContext::getRuleIndex() const {
  return MySqlParser::RuleCreateEvent;
}


MySqlParser::CreateEventContext* MySqlParser::createEvent() {
  CreateEventContext *_localctx = _tracker.createInstance<CreateEventContext>(_ctx, getState());
  enterRule(_localctx, 26, MySqlParser::RuleCreateEvent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(820);
    match(MySqlParser::CREATE);
    setState(822);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(821);
      ownerStatement();
    }
    setState(824);
    match(MySqlParser::EVENT);
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(825);
      ifNotExists();
    }
    setState(828);
    fullId();
    setState(829);
    match(MySqlParser::ON);
    setState(830);
    match(MySqlParser::SCHEDULE);
    setState(831);
    scheduleExpression();
    setState(838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(832);
      match(MySqlParser::ON);
      setState(833);
      match(MySqlParser::COMPLETION);
      setState(835);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(834);
        match(MySqlParser::NOT);
      }
      setState(837);
      match(MySqlParser::PRESERVE);
    }
    setState(841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DISABLE

    || _la == MySqlParser::ENABLE) {
      setState(840);
      enableType();
    }
    setState(845);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(843);
      match(MySqlParser::COMMENT);
      setState(844);
      match(MySqlParser::STRING_LITERAL);
    }
    setState(847);
    match(MySqlParser::DO);
    setState(848);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateIndexContext ------------------------------------------------------------------

MySqlParser::CreateIndexContext::CreateIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateIndexContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

MySqlParser::UidContext* MySqlParser::CreateIndexContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::TableNameContext* MySqlParser::CreateIndexContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::CreateIndexContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

MySqlParser::IndexTypeContext* MySqlParser::CreateIndexContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::CreateIndexContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::CreateIndexContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::ALGORITHM() {
  return getTokens(MySqlParser::ALGORITHM);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::ALGORITHM(size_t i) {
  return getToken(MySqlParser::ALGORITHM, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::LOCK() {
  return getTokens(MySqlParser::LOCK);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::LOCK(size_t i) {
  return getToken(MySqlParser::LOCK, i);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::FULLTEXT() {
  return getToken(MySqlParser::FULLTEXT, 0);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::SPATIAL() {
  return getToken(MySqlParser::SPATIAL, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::DEFAULT() {
  return getTokens(MySqlParser::DEFAULT);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::DEFAULT(size_t i) {
  return getToken(MySqlParser::DEFAULT, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::INPLACE() {
  return getTokens(MySqlParser::INPLACE);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::INPLACE(size_t i) {
  return getToken(MySqlParser::INPLACE, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::COPY() {
  return getTokens(MySqlParser::COPY);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::COPY(size_t i) {
  return getToken(MySqlParser::COPY, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::NONE() {
  return getTokens(MySqlParser::NONE);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::NONE(size_t i) {
  return getToken(MySqlParser::NONE, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::SHARED() {
  return getTokens(MySqlParser::SHARED);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::SHARED(size_t i) {
  return getToken(MySqlParser::SHARED, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::EXCLUSIVE() {
  return getTokens(MySqlParser::EXCLUSIVE);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::EXCLUSIVE(size_t i) {
  return getToken(MySqlParser::EXCLUSIVE, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateIndexContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::CreateIndexContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}


size_t MySqlParser::CreateIndexContext::getRuleIndex() const {
  return MySqlParser::RuleCreateIndex;
}


MySqlParser::CreateIndexContext* MySqlParser::createIndex() {
  CreateIndexContext *_localctx = _tracker.createInstance<CreateIndexContext>(_ctx, getState());
  enterRule(_localctx, 28, MySqlParser::RuleCreateIndex);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(850);
    match(MySqlParser::CREATE);
    setState(852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::OFFLINE

    || _la == MySqlParser::ONLINE) {
      setState(851);
      dynamic_cast<CreateIndexContext *>(_localctx)->intimeAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::OFFLINE

      || _la == MySqlParser::ONLINE)) {
        dynamic_cast<CreateIndexContext *>(_localctx)->intimeAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL

    || _la == MySqlParser::UNIQUE) {
      setState(854);
      dynamic_cast<CreateIndexContext *>(_localctx)->indexCategory = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL

      || _la == MySqlParser::UNIQUE)) {
        dynamic_cast<CreateIndexContext *>(_localctx)->indexCategory = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(857);
    match(MySqlParser::INDEX);
    setState(858);
    uid();
    setState(860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::USING) {
      setState(859);
      indexType();
    }
    setState(862);
    match(MySqlParser::ON);
    setState(863);
    tableName();
    setState(864);
    indexColumnNames();
    setState(868);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::USING

    || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

    || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
      setState(865);
      indexOption();
      setState(870);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(883);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(881);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ALGORITHM: {
            setState(871);
            match(MySqlParser::ALGORITHM);
            setState(873);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::EQUAL_SYMBOL) {
              setState(872);
              match(MySqlParser::EQUAL_SYMBOL);
            }
            setState(875);
            dynamic_cast<CreateIndexContext *>(_localctx)->algType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::COPY

            || _la == MySqlParser::INPLACE)) {
              dynamic_cast<CreateIndexContext *>(_localctx)->algType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case MySqlParser::LOCK: {
            setState(876);
            match(MySqlParser::LOCK);
            setState(878);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::EQUAL_SYMBOL) {
              setState(877);
              match(MySqlParser::EQUAL_SYMBOL);
            }
            setState(880);
            dynamic_cast<CreateIndexContext *>(_localctx)->lockType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::EXCLUSIVE || _la == MySqlParser::NONE || _la == MySqlParser::SHARED)) {
              dynamic_cast<CreateIndexContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(885);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateLogfileGroupContext ------------------------------------------------------------------

MySqlParser::CreateLogfileGroupContext::CreateLogfileGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::CreateLogfileGroupContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::CreateLogfileGroupContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::UNDOFILE() {
  return getToken(MySqlParser::UNDOFILE, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::CreateLogfileGroupContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateLogfileGroupContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::UNDO_BUFFER_SIZE() {
  return getToken(MySqlParser::UNDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::REDO_BUFFER_SIZE() {
  return getToken(MySqlParser::REDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateLogfileGroupContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::CreateLogfileGroupContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

std::vector<MySqlParser::FileSizeLiteralContext *> MySqlParser::CreateLogfileGroupContext::fileSizeLiteral() {
  return getRuleContexts<MySqlParser::FileSizeLiteralContext>();
}

MySqlParser::FileSizeLiteralContext* MySqlParser::CreateLogfileGroupContext::fileSizeLiteral(size_t i) {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(i);
}


size_t MySqlParser::CreateLogfileGroupContext::getRuleIndex() const {
  return MySqlParser::RuleCreateLogfileGroup;
}


MySqlParser::CreateLogfileGroupContext* MySqlParser::createLogfileGroup() {
  CreateLogfileGroupContext *_localctx = _tracker.createInstance<CreateLogfileGroupContext>(_ctx, getState());
  enterRule(_localctx, 30, MySqlParser::RuleCreateLogfileGroup);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(886);
    match(MySqlParser::CREATE);
    setState(887);
    match(MySqlParser::LOGFILE);
    setState(888);
    match(MySqlParser::GROUP);
    setState(889);
    uid();
    setState(890);
    match(MySqlParser::ADD);
    setState(891);
    match(MySqlParser::UNDOFILE);
    setState(892);
    dynamic_cast<CreateLogfileGroupContext *>(_localctx)->undoFile = match(MySqlParser::STRING_LITERAL);
    setState(898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(893);
      match(MySqlParser::INITIAL_SIZE);
      setState(895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(894);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(897);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->initSize = fileSizeLiteral();
    }
    setState(905);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::UNDO_BUFFER_SIZE) {
      setState(900);
      match(MySqlParser::UNDO_BUFFER_SIZE);
      setState(902);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(901);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(904);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->undoSize = fileSizeLiteral();
    }
    setState(912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::REDO_BUFFER_SIZE) {
      setState(907);
      match(MySqlParser::REDO_BUFFER_SIZE);
      setState(909);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(908);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(911);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->redoSize = fileSizeLiteral();
    }
    setState(919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NODEGROUP) {
      setState(914);
      match(MySqlParser::NODEGROUP);
      setState(916);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(915);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(918);
      uid();
    }
    setState(922);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(921);
      match(MySqlParser::WAIT);
    }
    setState(929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(924);
      match(MySqlParser::COMMENT);
      setState(926);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(925);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(928);
      dynamic_cast<CreateLogfileGroupContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
    }
    setState(931);
    match(MySqlParser::ENGINE);
    setState(933);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(932);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(935);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateProcedureContext ------------------------------------------------------------------

MySqlParser::CreateProcedureContext::CreateProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateProcedureContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateProcedureContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::FullIdContext* MySqlParser::CreateProcedureContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::CreateProcedureContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CreateProcedureContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::RoutineBodyContext* MySqlParser::CreateProcedureContext::routineBody() {
  return getRuleContext<MySqlParser::RoutineBodyContext>(0);
}

MySqlParser::OwnerStatementContext* MySqlParser::CreateProcedureContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

std::vector<MySqlParser::ProcedureParameterContext *> MySqlParser::CreateProcedureContext::procedureParameter() {
  return getRuleContexts<MySqlParser::ProcedureParameterContext>();
}

MySqlParser::ProcedureParameterContext* MySqlParser::CreateProcedureContext::procedureParameter(size_t i) {
  return getRuleContext<MySqlParser::ProcedureParameterContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateProcedureContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CreateProcedureContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

std::vector<MySqlParser::RoutineOptionContext *> MySqlParser::CreateProcedureContext::routineOption() {
  return getRuleContexts<MySqlParser::RoutineOptionContext>();
}

MySqlParser::RoutineOptionContext* MySqlParser::CreateProcedureContext::routineOption(size_t i) {
  return getRuleContext<MySqlParser::RoutineOptionContext>(i);
}


size_t MySqlParser::CreateProcedureContext::getRuleIndex() const {
  return MySqlParser::RuleCreateProcedure;
}


MySqlParser::CreateProcedureContext* MySqlParser::createProcedure() {
  CreateProcedureContext *_localctx = _tracker.createInstance<CreateProcedureContext>(_ctx, getState());
  enterRule(_localctx, 32, MySqlParser::RuleCreateProcedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(937);
    match(MySqlParser::CREATE);
    setState(939);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(938);
      ownerStatement();
    }
    setState(941);
    match(MySqlParser::PROCEDURE);
    setState(942);
    fullId();
    setState(943);
    match(MySqlParser::LR_BRACKET);
    setState(945);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::IN - 32))
      | (1ULL << (MySqlParser::INOUT - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::OUT - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(944);
      procedureParameter();
    }
    setState(951);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(947);
      match(MySqlParser::COMMA);
      setState(948);
      procedureParameter();
      setState(953);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(954);
    match(MySqlParser::RR_BRACKET);
    setState(958);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(955);
        routineOption(); 
      }
      setState(960);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
    setState(961);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateFunctionContext ------------------------------------------------------------------

MySqlParser::CreateFunctionContext::CreateFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateFunctionContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateFunctionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::FullIdContext* MySqlParser::CreateFunctionContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::CreateFunctionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CreateFunctionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CreateFunctionContext::RETURNS() {
  return getToken(MySqlParser::RETURNS, 0);
}

MySqlParser::DataTypeContext* MySqlParser::CreateFunctionContext::dataType() {
  return getRuleContext<MySqlParser::DataTypeContext>(0);
}

MySqlParser::RoutineBodyContext* MySqlParser::CreateFunctionContext::routineBody() {
  return getRuleContext<MySqlParser::RoutineBodyContext>(0);
}

MySqlParser::ReturnStatementContext* MySqlParser::CreateFunctionContext::returnStatement() {
  return getRuleContext<MySqlParser::ReturnStatementContext>(0);
}

MySqlParser::OwnerStatementContext* MySqlParser::CreateFunctionContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

std::vector<MySqlParser::FunctionParameterContext *> MySqlParser::CreateFunctionContext::functionParameter() {
  return getRuleContexts<MySqlParser::FunctionParameterContext>();
}

MySqlParser::FunctionParameterContext* MySqlParser::CreateFunctionContext::functionParameter(size_t i) {
  return getRuleContext<MySqlParser::FunctionParameterContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateFunctionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CreateFunctionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

std::vector<MySqlParser::RoutineOptionContext *> MySqlParser::CreateFunctionContext::routineOption() {
  return getRuleContexts<MySqlParser::RoutineOptionContext>();
}

MySqlParser::RoutineOptionContext* MySqlParser::CreateFunctionContext::routineOption(size_t i) {
  return getRuleContext<MySqlParser::RoutineOptionContext>(i);
}


size_t MySqlParser::CreateFunctionContext::getRuleIndex() const {
  return MySqlParser::RuleCreateFunction;
}


MySqlParser::CreateFunctionContext* MySqlParser::createFunction() {
  CreateFunctionContext *_localctx = _tracker.createInstance<CreateFunctionContext>(_ctx, getState());
  enterRule(_localctx, 34, MySqlParser::RuleCreateFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(963);
    match(MySqlParser::CREATE);
    setState(965);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(964);
      ownerStatement();
    }
    setState(967);
    match(MySqlParser::FUNCTION);
    setState(968);
    fullId();
    setState(969);
    match(MySqlParser::LR_BRACKET);
    setState(971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(970);
      functionParameter();
    }
    setState(977);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(973);
      match(MySqlParser::COMMA);
      setState(974);
      functionParameter();
      setState(979);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(980);
    match(MySqlParser::RR_BRACKET);
    setState(981);
    match(MySqlParser::RETURNS);
    setState(982);
    dataType();
    setState(986);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(983);
        routineOption(); 
      }
      setState(988);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(991);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALTER:
      case MySqlParser::ANALYZE:
      case MySqlParser::CALL:
      case MySqlParser::CHANGE:
      case MySqlParser::CHECK:
      case MySqlParser::CREATE:
      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DELETE:
      case MySqlParser::DESC:
      case MySqlParser::DESCRIBE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::DROP:
      case MySqlParser::EXPLAIN:
      case MySqlParser::GET:
      case MySqlParser::GRANT:
      case MySqlParser::GROUP:
      case MySqlParser::INSERT:
      case MySqlParser::KILL:
      case MySqlParser::LEFT:
      case MySqlParser::LOAD:
      case MySqlParser::LOCK:
      case MySqlParser::NUMBER:
      case MySqlParser::OPTIMIZE:
      case MySqlParser::ORDER:
      case MySqlParser::PURGE:
      case MySqlParser::RELEASE:
      case MySqlParser::RENAME:
      case MySqlParser::REPLACE:
      case MySqlParser::RESIGNAL:
      case MySqlParser::REVOKE:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::SELECT:
      case MySqlParser::SET:
      case MySqlParser::SHOW:
      case MySqlParser::SIGNAL:
      case MySqlParser::STACKED:
      case MySqlParser::UNLOCK:
      case MySqlParser::UPDATE:
      case MySqlParser::USE:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::LR_BRACKET:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        setState(989);
        routineBody();
        break;
      }

      case MySqlParser::RETURN: {
        setState(990);
        returnStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateServerContext ------------------------------------------------------------------

MySqlParser::CreateServerContext::CreateServerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateServerContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

MySqlParser::UidContext* MySqlParser::CreateServerContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::WRAPPER() {
  return getToken(MySqlParser::WRAPPER, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::OPTIONS() {
  return getToken(MySqlParser::OPTIONS, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::ServerOptionContext *> MySqlParser::CreateServerContext::serverOption() {
  return getRuleContexts<MySqlParser::ServerOptionContext>();
}

MySqlParser::ServerOptionContext* MySqlParser::CreateServerContext::serverOption(size_t i) {
  return getRuleContext<MySqlParser::ServerOptionContext>(i);
}

tree::TerminalNode* MySqlParser::CreateServerContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::MYSQL() {
  return getToken(MySqlParser::MYSQL, 0);
}

tree::TerminalNode* MySqlParser::CreateServerContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateServerContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CreateServerContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::CreateServerContext::getRuleIndex() const {
  return MySqlParser::RuleCreateServer;
}


MySqlParser::CreateServerContext* MySqlParser::createServer() {
  CreateServerContext *_localctx = _tracker.createInstance<CreateServerContext>(_ctx, getState());
  enterRule(_localctx, 36, MySqlParser::RuleCreateServer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    match(MySqlParser::CREATE);
    setState(994);
    match(MySqlParser::SERVER);
    setState(995);
    uid();
    setState(996);
    match(MySqlParser::FOREIGN);
    setState(997);
    match(MySqlParser::DATA);
    setState(998);
    match(MySqlParser::WRAPPER);
    setState(999);
    dynamic_cast<CreateServerContext *>(_localctx)->wrapperName = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::MYSQL || _la == MySqlParser::STRING_LITERAL)) {
      dynamic_cast<CreateServerContext *>(_localctx)->wrapperName = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1000);
    match(MySqlParser::OPTIONS);
    setState(1001);
    match(MySqlParser::LR_BRACKET);
    setState(1002);
    serverOption();
    setState(1007);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(1003);
      match(MySqlParser::COMMA);
      setState(1004);
      serverOption();
      setState(1009);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1010);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTableContext ------------------------------------------------------------------

MySqlParser::CreateTableContext::CreateTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::CreateTableContext::getRuleIndex() const {
  return MySqlParser::RuleCreateTable;
}

void MySqlParser::CreateTableContext::copyFrom(CreateTableContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CopyCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CopyCreateTableContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

std::vector<MySqlParser::TableNameContext *> MySqlParser::CopyCreateTableContext::tableName() {
  return getRuleContexts<MySqlParser::TableNameContext>();
}

MySqlParser::TableNameContext* MySqlParser::CopyCreateTableContext::tableName(size_t i) {
  return getRuleContext<MySqlParser::TableNameContext>(i);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::IfNotExistsContext* MySqlParser::CopyCreateTableContext::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

MySqlParser::CopyCreateTableContext::CopyCreateTableContext(CreateTableContext *ctx) { copyFrom(ctx); }


//----------------- ColumnCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColumnCreateTableContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::ColumnCreateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TableNameContext* MySqlParser::ColumnCreateTableContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::CreateDefinitionsContext* MySqlParser::ColumnCreateTableContext::createDefinitions() {
  return getRuleContext<MySqlParser::CreateDefinitionsContext>(0);
}

tree::TerminalNode* MySqlParser::ColumnCreateTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::IfNotExistsContext* MySqlParser::ColumnCreateTableContext::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

std::vector<MySqlParser::TableOptionContext *> MySqlParser::ColumnCreateTableContext::tableOption() {
  return getRuleContexts<MySqlParser::TableOptionContext>();
}

MySqlParser::TableOptionContext* MySqlParser::ColumnCreateTableContext::tableOption(size_t i) {
  return getRuleContext<MySqlParser::TableOptionContext>(i);
}

MySqlParser::PartitionDefinitionsContext* MySqlParser::ColumnCreateTableContext::partitionDefinitions() {
  return getRuleContext<MySqlParser::PartitionDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::ColumnCreateTableContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ColumnCreateTableContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::ColumnCreateTableContext::ColumnCreateTableContext(CreateTableContext *ctx) { copyFrom(ctx); }


//----------------- QueryCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::QueryCreateTableContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TableNameContext* MySqlParser::QueryCreateTableContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::SelectStatementContext* MySqlParser::QueryCreateTableContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::IfNotExistsContext* MySqlParser::QueryCreateTableContext::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

MySqlParser::CreateDefinitionsContext* MySqlParser::QueryCreateTableContext::createDefinitions() {
  return getRuleContext<MySqlParser::CreateDefinitionsContext>(0);
}

std::vector<MySqlParser::TableOptionContext *> MySqlParser::QueryCreateTableContext::tableOption() {
  return getRuleContexts<MySqlParser::TableOptionContext>();
}

MySqlParser::TableOptionContext* MySqlParser::QueryCreateTableContext::tableOption(size_t i) {
  return getRuleContext<MySqlParser::TableOptionContext>(i);
}

MySqlParser::PartitionDefinitionsContext* MySqlParser::QueryCreateTableContext::partitionDefinitions() {
  return getRuleContext<MySqlParser::PartitionDefinitionsContext>(0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::QueryCreateTableContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::QueryCreateTableContext::QueryCreateTableContext(CreateTableContext *ctx) { copyFrom(ctx); }


MySqlParser::CreateTableContext* MySqlParser::createTable() {
  CreateTableContext *_localctx = _tracker.createInstance<CreateTableContext>(_ctx, getState());
  enterRule(_localctx, 38, MySqlParser::RuleCreateTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(1090);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<CreateTableContext *>(_tracker.createInstance<MySqlParser::CopyCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1012);
      match(MySqlParser::CREATE);
      setState(1014);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TEMPORARY) {
        setState(1013);
        match(MySqlParser::TEMPORARY);
      }
      setState(1016);
      match(MySqlParser::TABLE);
      setState(1018);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(1017);
        ifNotExists();
      }
      setState(1020);
      tableName();
      setState(1028);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LIKE: {
          setState(1021);
          match(MySqlParser::LIKE);
          setState(1022);
          tableName();
          break;
        }

        case MySqlParser::LR_BRACKET: {
          setState(1023);
          match(MySqlParser::LR_BRACKET);
          setState(1024);
          match(MySqlParser::LIKE);
          setState(1025);
          dynamic_cast<CopyCreateTableContext *>(_localctx)->parenthesisTable = tableName();
          setState(1026);
          match(MySqlParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<CreateTableContext *>(_tracker.createInstance<MySqlParser::QueryCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1030);
      match(MySqlParser::CREATE);
      setState(1032);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TEMPORARY) {
        setState(1031);
        match(MySqlParser::TEMPORARY);
      }
      setState(1034);
      match(MySqlParser::TABLE);
      setState(1036);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(1035);
        ifNotExists();
      }
      setState(1038);
      tableName();
      setState(1040);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
      case 1: {
        setState(1039);
        createDefinitions();
        break;
      }

      }
      setState(1052);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 22) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 22)) & ((1ULL << (MySqlParser::CHARACTER - 22))
        | (1ULL << (MySqlParser::COLLATE - 22))
        | (1ULL << (MySqlParser::DEFAULT - 22))
        | (1ULL << (MySqlParser::INDEX - 22)))) != 0) || _la == MySqlParser::UNION || ((((_la - 280) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 280)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 280))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 280))
        | (1ULL << (MySqlParser::CHECKSUM - 280))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 280))
        | (1ULL << (MySqlParser::COMMENT - 280))
        | (1ULL << (MySqlParser::COMPRESSION - 280))
        | (1ULL << (MySqlParser::CONNECTION - 280))
        | (1ULL << (MySqlParser::DATA - 280))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 280))
        | (1ULL << (MySqlParser::ENCRYPTION - 280))
        | (1ULL << (MySqlParser::ENGINE - 280)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 384)) & ((1ULL << (MySqlParser::INSERT_METHOD - 384))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 384))
        | (1ULL << (MySqlParser::MAX_ROWS - 384))
        | (1ULL << (MySqlParser::MIN_ROWS - 384)))) != 0) || ((((_la - 464) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 464)) & ((1ULL << (MySqlParser::PACK_KEYS - 464))
        | (1ULL << (MySqlParser::PASSWORD - 464))
        | (1ULL << (MySqlParser::ROW_FORMAT - 464)))) != 0) || ((((_la - 542) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 542)) & ((1ULL << (MySqlParser::STATS_AUTO_RECALC - 542))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 542))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 542))
        | (1ULL << (MySqlParser::STORAGE - 542))
        | (1ULL << (MySqlParser::TABLESPACE - 542)))) != 0) || _la == MySqlParser::CHARSET) {
        setState(1042);
        tableOption();
        setState(1049);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 22) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 22)) & ((1ULL << (MySqlParser::CHARACTER - 22))
          | (1ULL << (MySqlParser::COLLATE - 22))
          | (1ULL << (MySqlParser::DEFAULT - 22))
          | (1ULL << (MySqlParser::INDEX - 22)))) != 0) || _la == MySqlParser::UNION || ((((_la - 280) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 280)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 280))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 280))
          | (1ULL << (MySqlParser::CHECKSUM - 280))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 280))
          | (1ULL << (MySqlParser::COMMENT - 280))
          | (1ULL << (MySqlParser::COMPRESSION - 280))
          | (1ULL << (MySqlParser::CONNECTION - 280))
          | (1ULL << (MySqlParser::DATA - 280))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 280))
          | (1ULL << (MySqlParser::ENCRYPTION - 280))
          | (1ULL << (MySqlParser::ENGINE - 280)))) != 0) || ((((_la - 384) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 384)) & ((1ULL << (MySqlParser::INSERT_METHOD - 384))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 384))
          | (1ULL << (MySqlParser::MAX_ROWS - 384))
          | (1ULL << (MySqlParser::MIN_ROWS - 384)))) != 0) || ((((_la - 464) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 464)) & ((1ULL << (MySqlParser::PACK_KEYS - 464))
          | (1ULL << (MySqlParser::PASSWORD - 464))
          | (1ULL << (MySqlParser::ROW_FORMAT - 464)))) != 0) || ((((_la - 542) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 542)) & ((1ULL << (MySqlParser::STATS_AUTO_RECALC - 542))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 542))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 542))
          | (1ULL << (MySqlParser::STORAGE - 542))
          | (1ULL << (MySqlParser::TABLESPACE - 542)))) != 0) || _la == MySqlParser::CHARSET || _la == MySqlParser::COMMA) {
          setState(1044);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::COMMA) {
            setState(1043);
            match(MySqlParser::COMMA);
          }
          setState(1046);
          tableOption();
          setState(1051);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(1055);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PARTITION) {
        setState(1054);
        partitionDefinitions();
      }
      setState(1058);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IGNORE

      || _la == MySqlParser::REPLACE) {
        setState(1057);
        dynamic_cast<QueryCreateTableContext *>(_localctx)->keyViolate = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::IGNORE

        || _la == MySqlParser::REPLACE)) {
          dynamic_cast<QueryCreateTableContext *>(_localctx)->keyViolate = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1061);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(1060);
        match(MySqlParser::AS);
      }
      setState(1063);
      selectStatement();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<CreateTableContext *>(_tracker.createInstance<MySqlParser::ColumnCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1065);
      match(MySqlParser::CREATE);
      setState(1067);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TEMPORARY) {
        setState(1066);
        match(MySqlParser::TEMPORARY);
      }
      setState(1069);
      match(MySqlParser::TABLE);
      setState(1071);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(1070);
        ifNotExists();
      }
      setState(1073);
      tableName();
      setState(1074);
      createDefinitions();
      setState(1085);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
      case 1: {
        setState(1075);
        tableOption();
        setState(1082);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1077);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::COMMA) {
              setState(1076);
              match(MySqlParser::COMMA);
            }
            setState(1079);
            tableOption(); 
          }
          setState(1084);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
        }
        break;
      }

      }
      setState(1088);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PARTITION) {
        setState(1087);
        partitionDefinitions();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTablespaceInnodbContext ------------------------------------------------------------------

MySqlParser::CreateTablespaceInnodbContext::CreateTablespaceInnodbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidContext* MySqlParser::CreateTablespaceInnodbContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::FILE_BLOCK_SIZE() {
  return getToken(MySqlParser::FILE_BLOCK_SIZE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateTablespaceInnodbContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

tree::TerminalNode* MySqlParser::CreateTablespaceInnodbContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::CreateTablespaceInnodbContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

MySqlParser::FileSizeLiteralContext* MySqlParser::CreateTablespaceInnodbContext::fileSizeLiteral() {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(0);
}


size_t MySqlParser::CreateTablespaceInnodbContext::getRuleIndex() const {
  return MySqlParser::RuleCreateTablespaceInnodb;
}


MySqlParser::CreateTablespaceInnodbContext* MySqlParser::createTablespaceInnodb() {
  CreateTablespaceInnodbContext *_localctx = _tracker.createInstance<CreateTablespaceInnodbContext>(_ctx, getState());
  enterRule(_localctx, 40, MySqlParser::RuleCreateTablespaceInnodb);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    match(MySqlParser::CREATE);
    setState(1093);
    match(MySqlParser::TABLESPACE);
    setState(1094);
    uid();
    setState(1095);
    match(MySqlParser::ADD);
    setState(1096);
    match(MySqlParser::DATAFILE);
    setState(1097);
    dynamic_cast<CreateTablespaceInnodbContext *>(_localctx)->datafile = match(MySqlParser::STRING_LITERAL);
    setState(1101);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FILE_BLOCK_SIZE) {
      setState(1098);
      match(MySqlParser::FILE_BLOCK_SIZE);
      setState(1099);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(1100);
      dynamic_cast<CreateTablespaceInnodbContext *>(_localctx)->fileBlockSize = fileSizeLiteral();
    }
    setState(1108);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ENGINE) {
      setState(1103);
      match(MySqlParser::ENGINE);
      setState(1105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1104);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1107);
      engineName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTablespaceNdbContext ------------------------------------------------------------------

MySqlParser::CreateTablespaceNdbContext::CreateTablespaceNdbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::CreateTablespaceNdbContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::CreateTablespaceNdbContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::USE() {
  return getToken(MySqlParser::USE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::CreateTablespaceNdbContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateTablespaceNdbContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::EXTENT_SIZE() {
  return getToken(MySqlParser::EXTENT_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::AUTOEXTEND_SIZE() {
  return getToken(MySqlParser::AUTOEXTEND_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::MAX_SIZE() {
  return getToken(MySqlParser::MAX_SIZE, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateTablespaceNdbContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::CreateTablespaceNdbContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

std::vector<MySqlParser::FileSizeLiteralContext *> MySqlParser::CreateTablespaceNdbContext::fileSizeLiteral() {
  return getRuleContexts<MySqlParser::FileSizeLiteralContext>();
}

MySqlParser::FileSizeLiteralContext* MySqlParser::CreateTablespaceNdbContext::fileSizeLiteral(size_t i) {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(i);
}


size_t MySqlParser::CreateTablespaceNdbContext::getRuleIndex() const {
  return MySqlParser::RuleCreateTablespaceNdb;
}


MySqlParser::CreateTablespaceNdbContext* MySqlParser::createTablespaceNdb() {
  CreateTablespaceNdbContext *_localctx = _tracker.createInstance<CreateTablespaceNdbContext>(_ctx, getState());
  enterRule(_localctx, 42, MySqlParser::RuleCreateTablespaceNdb);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1110);
    match(MySqlParser::CREATE);
    setState(1111);
    match(MySqlParser::TABLESPACE);
    setState(1112);
    uid();
    setState(1113);
    match(MySqlParser::ADD);
    setState(1114);
    match(MySqlParser::DATAFILE);
    setState(1115);
    dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->datafile = match(MySqlParser::STRING_LITERAL);
    setState(1116);
    match(MySqlParser::USE);
    setState(1117);
    match(MySqlParser::LOGFILE);
    setState(1118);
    match(MySqlParser::GROUP);
    setState(1119);
    uid();
    setState(1125);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENT_SIZE) {
      setState(1120);
      match(MySqlParser::EXTENT_SIZE);
      setState(1122);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1121);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1124);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->extentSize = fileSizeLiteral();
    }
    setState(1132);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(1127);
      match(MySqlParser::INITIAL_SIZE);
      setState(1129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1128);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1131);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->initialSize = fileSizeLiteral();
    }
    setState(1139);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AUTOEXTEND_SIZE) {
      setState(1134);
      match(MySqlParser::AUTOEXTEND_SIZE);
      setState(1136);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1135);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1138);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->autoextendSize = fileSizeLiteral();
    }
    setState(1146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MAX_SIZE) {
      setState(1141);
      match(MySqlParser::MAX_SIZE);
      setState(1143);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1142);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1145);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->maxSize = fileSizeLiteral();
    }
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NODEGROUP) {
      setState(1148);
      match(MySqlParser::NODEGROUP);
      setState(1150);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1149);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1152);
      uid();
    }
    setState(1156);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(1155);
      match(MySqlParser::WAIT);
    }
    setState(1163);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(1158);
      match(MySqlParser::COMMENT);
      setState(1160);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1159);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1162);
      dynamic_cast<CreateTablespaceNdbContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
    }
    setState(1165);
    match(MySqlParser::ENGINE);
    setState(1167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(1166);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(1169);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTriggerContext ------------------------------------------------------------------

MySqlParser::CreateTriggerContext::CreateTriggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::TableNameContext* MySqlParser::CreateTriggerContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::EACH() {
  return getToken(MySqlParser::EACH, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::ROW() {
  return getToken(MySqlParser::ROW, 0);
}

MySqlParser::RoutineBodyContext* MySqlParser::CreateTriggerContext::routineBody() {
  return getRuleContext<MySqlParser::RoutineBodyContext>(0);
}

std::vector<MySqlParser::FullIdContext *> MySqlParser::CreateTriggerContext::fullId() {
  return getRuleContexts<MySqlParser::FullIdContext>();
}

MySqlParser::FullIdContext* MySqlParser::CreateTriggerContext::fullId(size_t i) {
  return getRuleContext<MySqlParser::FullIdContext>(i);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::BEFORE() {
  return getToken(MySqlParser::BEFORE, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

MySqlParser::OwnerStatementContext* MySqlParser::CreateTriggerContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::FOLLOWS() {
  return getToken(MySqlParser::FOLLOWS, 0);
}

tree::TerminalNode* MySqlParser::CreateTriggerContext::PRECEDES() {
  return getToken(MySqlParser::PRECEDES, 0);
}


size_t MySqlParser::CreateTriggerContext::getRuleIndex() const {
  return MySqlParser::RuleCreateTrigger;
}


MySqlParser::CreateTriggerContext* MySqlParser::createTrigger() {
  CreateTriggerContext *_localctx = _tracker.createInstance<CreateTriggerContext>(_ctx, getState());
  enterRule(_localctx, 44, MySqlParser::RuleCreateTrigger);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1171);
    match(MySqlParser::CREATE);
    setState(1173);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(1172);
      ownerStatement();
    }
    setState(1175);
    match(MySqlParser::TRIGGER);
    setState(1176);
    dynamic_cast<CreateTriggerContext *>(_localctx)->thisTrigger = fullId();
    setState(1177);
    dynamic_cast<CreateTriggerContext *>(_localctx)->triggerTime = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BEFORE || _la == MySqlParser::AFTER)) {
      dynamic_cast<CreateTriggerContext *>(_localctx)->triggerTime = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1178);
    dynamic_cast<CreateTriggerContext *>(_localctx)->triggerEvent = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DELETE

    || _la == MySqlParser::INSERT || _la == MySqlParser::UPDATE)) {
      dynamic_cast<CreateTriggerContext *>(_localctx)->triggerEvent = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1179);
    match(MySqlParser::ON);
    setState(1180);
    tableName();
    setState(1181);
    match(MySqlParser::FOR);
    setState(1182);
    match(MySqlParser::EACH);
    setState(1183);
    match(MySqlParser::ROW);
    setState(1186);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      setState(1184);
      dynamic_cast<CreateTriggerContext *>(_localctx)->triggerPlace = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FOLLOWS || _la == MySqlParser::PRECEDES)) {
        dynamic_cast<CreateTriggerContext *>(_localctx)->triggerPlace = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1185);
      dynamic_cast<CreateTriggerContext *>(_localctx)->otherTrigger = fullId();
      break;
    }

    }
    setState(1188);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateViewContext ------------------------------------------------------------------

MySqlParser::CreateViewContext::CreateViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateViewContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

MySqlParser::FullIdContext* MySqlParser::CreateViewContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::CreateViewContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::OR() {
  return getToken(MySqlParser::OR, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::OwnerStatementContext* MySqlParser::CreateViewContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::CreateViewContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::UNDEFINED() {
  return getToken(MySqlParser::UNDEFINED, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::MERGE() {
  return getToken(MySqlParser::MERGE, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::TEMPTABLE() {
  return getToken(MySqlParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::CASCADED() {
  return getToken(MySqlParser::CASCADED, 0);
}

tree::TerminalNode* MySqlParser::CreateViewContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::CreateViewContext::getRuleIndex() const {
  return MySqlParser::RuleCreateView;
}


MySqlParser::CreateViewContext* MySqlParser::createView() {
  CreateViewContext *_localctx = _tracker.createInstance<CreateViewContext>(_ctx, getState());
  enterRule(_localctx, 46, MySqlParser::RuleCreateView);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1190);
    match(MySqlParser::CREATE);
    setState(1193);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::OR) {
      setState(1191);
      match(MySqlParser::OR);
      setState(1192);
      match(MySqlParser::REPLACE);
    }
    setState(1198);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALGORITHM) {
      setState(1195);
      match(MySqlParser::ALGORITHM);
      setState(1196);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(1197);
      dynamic_cast<CreateViewContext *>(_localctx)->algType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::MERGE || _la == MySqlParser::TEMPTABLE

      || _la == MySqlParser::UNDEFINED)) {
        dynamic_cast<CreateViewContext *>(_localctx)->algType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(1200);
      ownerStatement();
    }
    setState(1206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SQL) {
      setState(1203);
      match(MySqlParser::SQL);
      setState(1204);
      match(MySqlParser::SECURITY);
      setState(1205);
      dynamic_cast<CreateViewContext *>(_localctx)->secContext = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFINER

      || _la == MySqlParser::INVOKER)) {
        dynamic_cast<CreateViewContext *>(_localctx)->secContext = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1208);
    match(MySqlParser::VIEW);
    setState(1209);
    fullId();
    setState(1214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(1210);
      match(MySqlParser::LR_BRACKET);
      setState(1211);
      uidList();
      setState(1212);
      match(MySqlParser::RR_BRACKET);
    }
    setState(1216);
    match(MySqlParser::AS);
    setState(1217);
    selectStatement();
    setState(1224);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(1218);
      match(MySqlParser::WITH);
      setState(1220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL) {
        setState(1219);
        dynamic_cast<CreateViewContext *>(_localctx)->checkOption = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL)) {
          dynamic_cast<CreateViewContext *>(_localctx)->checkOption = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1222);
      match(MySqlParser::CHECK);
      setState(1223);
      match(MySqlParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDatabaseOptionContext ------------------------------------------------------------------

MySqlParser::CreateDatabaseOptionContext::CreateDatabaseOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateDatabaseOptionContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::CreateDatabaseOptionContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::CreateDatabaseOptionContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::CreateDatabaseOptionContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateDatabaseOptionContext::DEFAULT() {
  return getTokens(MySqlParser::DEFAULT);
}

tree::TerminalNode* MySqlParser::CreateDatabaseOptionContext::DEFAULT(size_t i) {
  return getToken(MySqlParser::DEFAULT, i);
}

tree::TerminalNode* MySqlParser::CreateDatabaseOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::CreateDatabaseOptionContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::CreateDatabaseOptionContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}


size_t MySqlParser::CreateDatabaseOptionContext::getRuleIndex() const {
  return MySqlParser::RuleCreateDatabaseOption;
}


MySqlParser::CreateDatabaseOptionContext* MySqlParser::createDatabaseOption() {
  CreateDatabaseOptionContext *_localctx = _tracker.createInstance<CreateDatabaseOptionContext>(_ctx, getState());
  enterRule(_localctx, 48, MySqlParser::RuleCreateDatabaseOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1249);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1226);
        match(MySqlParser::DEFAULT);
      }
      setState(1232);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CHARACTER: {
          setState(1229);
          match(MySqlParser::CHARACTER);
          setState(1230);
          match(MySqlParser::SET);
          break;
        }

        case MySqlParser::CHARSET: {
          setState(1231);
          match(MySqlParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1234);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1239);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::BINARY:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL: {
          setState(1237);
          charsetName();
          break;
        }

        case MySqlParser::DEFAULT: {
          setState(1238);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1242);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1241);
        match(MySqlParser::DEFAULT);
      }
      setState(1244);
      match(MySqlParser::COLLATE);
      setState(1246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1245);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1248);
      collationName();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OwnerStatementContext ------------------------------------------------------------------

MySqlParser::OwnerStatementContext::OwnerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::OwnerStatementContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::OwnerStatementContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::UserNameContext* MySqlParser::OwnerStatementContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

tree::TerminalNode* MySqlParser::OwnerStatementContext::CURRENT_USER() {
  return getToken(MySqlParser::CURRENT_USER, 0);
}

tree::TerminalNode* MySqlParser::OwnerStatementContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::OwnerStatementContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}


size_t MySqlParser::OwnerStatementContext::getRuleIndex() const {
  return MySqlParser::RuleOwnerStatement;
}


MySqlParser::OwnerStatementContext* MySqlParser::ownerStatement() {
  OwnerStatementContext *_localctx = _tracker.createInstance<OwnerStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, MySqlParser::RuleOwnerStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1251);
    match(MySqlParser::DEFINER);
    setState(1252);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(1259);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::STRING_USER_NAME: {
        setState(1253);
        userName();
        break;
      }

      case MySqlParser::CURRENT_USER: {
        setState(1254);
        match(MySqlParser::CURRENT_USER);
        setState(1257);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(1255);
          match(MySqlParser::LR_BRACKET);
          setState(1256);
          match(MySqlParser::RR_BRACKET);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScheduleExpressionContext ------------------------------------------------------------------

MySqlParser::ScheduleExpressionContext::ScheduleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ScheduleExpressionContext::getRuleIndex() const {
  return MySqlParser::RuleScheduleExpression;
}

void MySqlParser::ScheduleExpressionContext::copyFrom(ScheduleExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PreciseScheduleContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PreciseScheduleContext::AT() {
  return getToken(MySqlParser::AT, 0);
}

MySqlParser::TimestampValueContext* MySqlParser::PreciseScheduleContext::timestampValue() {
  return getRuleContext<MySqlParser::TimestampValueContext>(0);
}

std::vector<MySqlParser::IntervalExprContext *> MySqlParser::PreciseScheduleContext::intervalExpr() {
  return getRuleContexts<MySqlParser::IntervalExprContext>();
}

MySqlParser::IntervalExprContext* MySqlParser::PreciseScheduleContext::intervalExpr(size_t i) {
  return getRuleContext<MySqlParser::IntervalExprContext>(i);
}

MySqlParser::PreciseScheduleContext::PreciseScheduleContext(ScheduleExpressionContext *ctx) { copyFrom(ctx); }


//----------------- IntervalScheduleContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::IntervalScheduleContext::EVERY() {
  return getToken(MySqlParser::EVERY, 0);
}

MySqlParser::IntervalTypeContext* MySqlParser::IntervalScheduleContext::intervalType() {
  return getRuleContext<MySqlParser::IntervalTypeContext>(0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::IntervalScheduleContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::IntervalScheduleContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::IntervalScheduleContext::STARTS() {
  return getToken(MySqlParser::STARTS, 0);
}

tree::TerminalNode* MySqlParser::IntervalScheduleContext::ENDS() {
  return getToken(MySqlParser::ENDS, 0);
}

std::vector<MySqlParser::TimestampValueContext *> MySqlParser::IntervalScheduleContext::timestampValue() {
  return getRuleContexts<MySqlParser::TimestampValueContext>();
}

MySqlParser::TimestampValueContext* MySqlParser::IntervalScheduleContext::timestampValue(size_t i) {
  return getRuleContext<MySqlParser::TimestampValueContext>(i);
}

std::vector<MySqlParser::IntervalExprContext *> MySqlParser::IntervalScheduleContext::intervalExpr() {
  return getRuleContexts<MySqlParser::IntervalExprContext>();
}

MySqlParser::IntervalExprContext* MySqlParser::IntervalScheduleContext::intervalExpr(size_t i) {
  return getRuleContext<MySqlParser::IntervalExprContext>(i);
}

MySqlParser::IntervalScheduleContext::IntervalScheduleContext(ScheduleExpressionContext *ctx) { copyFrom(ctx); }


MySqlParser::ScheduleExpressionContext* MySqlParser::scheduleExpression() {
  ScheduleExpressionContext *_localctx = _tracker.createInstance<ScheduleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 52, MySqlParser::RuleScheduleExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1295);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::AT: {
        _localctx = dynamic_cast<ScheduleExpressionContext *>(_tracker.createInstance<MySqlParser::PreciseScheduleContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1261);
        match(MySqlParser::AT);
        setState(1262);
        timestampValue();
        setState(1266);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::PLUS) {
          setState(1263);
          intervalExpr();
          setState(1268);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::EVERY: {
        _localctx = dynamic_cast<ScheduleExpressionContext *>(_tracker.createInstance<MySqlParser::IntervalScheduleContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1269);
        match(MySqlParser::EVERY);
        setState(1272);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
        case 1: {
          setState(1270);
          decimalLiteral();
          break;
        }

        case 2: {
          setState(1271);
          expression(0);
          break;
        }

        }
        setState(1274);
        intervalType();
        setState(1283);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::STARTS) {
          setState(1275);
          match(MySqlParser::STARTS);
          setState(1276);
          dynamic_cast<IntervalScheduleContext *>(_localctx)->startTimestamp = timestampValue();
          setState(1280);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::PLUS) {
            setState(1277);
            dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext = intervalExpr();
            dynamic_cast<IntervalScheduleContext *>(_localctx)->startIntervals.push_back(dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext);
            setState(1282);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1293);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ENDS) {
          setState(1285);
          match(MySqlParser::ENDS);
          setState(1286);
          dynamic_cast<IntervalScheduleContext *>(_localctx)->endTimestamp = timestampValue();
          setState(1290);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::PLUS) {
            setState(1287);
            dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext = intervalExpr();
            dynamic_cast<IntervalScheduleContext *>(_localctx)->endIntervals.push_back(dynamic_cast<IntervalScheduleContext *>(_localctx)->intervalExprContext);
            setState(1292);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimestampValueContext ------------------------------------------------------------------

MySqlParser::TimestampValueContext::TimestampValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TimestampValueContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::TimestampValueContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::TimestampValueContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::TimestampValueContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::TimestampValueContext::getRuleIndex() const {
  return MySqlParser::RuleTimestampValue;
}


MySqlParser::TimestampValueContext* MySqlParser::timestampValue() {
  TimestampValueContext *_localctx = _tracker.createInstance<TimestampValueContext>(_ctx, getState());
  enterRule(_localctx, 54, MySqlParser::RuleTimestampValue);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1301);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1297);
      match(MySqlParser::CURRENT_TIMESTAMP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1298);
      stringLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1299);
      decimalLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1300);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalExprContext ------------------------------------------------------------------

MySqlParser::IntervalExprContext::IntervalExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IntervalExprContext::PLUS() {
  return getToken(MySqlParser::PLUS, 0);
}

tree::TerminalNode* MySqlParser::IntervalExprContext::INTERVAL() {
  return getToken(MySqlParser::INTERVAL, 0);
}

MySqlParser::IntervalTypeContext* MySqlParser::IntervalExprContext::intervalType() {
  return getRuleContext<MySqlParser::IntervalTypeContext>(0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::IntervalExprContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::IntervalExprContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::IntervalExprContext::getRuleIndex() const {
  return MySqlParser::RuleIntervalExpr;
}


MySqlParser::IntervalExprContext* MySqlParser::intervalExpr() {
  IntervalExprContext *_localctx = _tracker.createInstance<IntervalExprContext>(_ctx, getState());
  enterRule(_localctx, 56, MySqlParser::RuleIntervalExpr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1303);
    match(MySqlParser::PLUS);
    setState(1304);
    match(MySqlParser::INTERVAL);
    setState(1307);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      setState(1305);
      decimalLiteral();
      break;
    }

    case 2: {
      setState(1306);
      expression(0);
      break;
    }

    }
    setState(1309);
    intervalType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalTypeContext ------------------------------------------------------------------

MySqlParser::IntervalTypeContext::IntervalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::IntervalTypeBaseContext* MySqlParser::IntervalTypeContext::intervalTypeBase() {
  return getRuleContext<MySqlParser::IntervalTypeBaseContext>(0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::YEAR_MONTH() {
  return getToken(MySqlParser::YEAR_MONTH, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::DAY_HOUR() {
  return getToken(MySqlParser::DAY_HOUR, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::DAY_MINUTE() {
  return getToken(MySqlParser::DAY_MINUTE, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::DAY_SECOND() {
  return getToken(MySqlParser::DAY_SECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::HOUR_MINUTE() {
  return getToken(MySqlParser::HOUR_MINUTE, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::HOUR_SECOND() {
  return getToken(MySqlParser::HOUR_SECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::MINUTE_SECOND() {
  return getToken(MySqlParser::MINUTE_SECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::SECOND_MICROSECOND() {
  return getToken(MySqlParser::SECOND_MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::MINUTE_MICROSECOND() {
  return getToken(MySqlParser::MINUTE_MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::HOUR_MICROSECOND() {
  return getToken(MySqlParser::HOUR_MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeContext::DAY_MICROSECOND() {
  return getToken(MySqlParser::DAY_MICROSECOND, 0);
}


size_t MySqlParser::IntervalTypeContext::getRuleIndex() const {
  return MySqlParser::RuleIntervalType;
}


MySqlParser::IntervalTypeContext* MySqlParser::intervalType() {
  IntervalTypeContext *_localctx = _tracker.createInstance<IntervalTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, MySqlParser::RuleIntervalType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1324);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND: {
        enterOuterAlt(_localctx, 1);
        setState(1311);
        intervalTypeBase();
        break;
      }

      case MySqlParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1312);
        match(MySqlParser::YEAR);
        break;
      }

      case MySqlParser::YEAR_MONTH: {
        enterOuterAlt(_localctx, 3);
        setState(1313);
        match(MySqlParser::YEAR_MONTH);
        break;
      }

      case MySqlParser::DAY_HOUR: {
        enterOuterAlt(_localctx, 4);
        setState(1314);
        match(MySqlParser::DAY_HOUR);
        break;
      }

      case MySqlParser::DAY_MINUTE: {
        enterOuterAlt(_localctx, 5);
        setState(1315);
        match(MySqlParser::DAY_MINUTE);
        break;
      }

      case MySqlParser::DAY_SECOND: {
        enterOuterAlt(_localctx, 6);
        setState(1316);
        match(MySqlParser::DAY_SECOND);
        break;
      }

      case MySqlParser::HOUR_MINUTE: {
        enterOuterAlt(_localctx, 7);
        setState(1317);
        match(MySqlParser::HOUR_MINUTE);
        break;
      }

      case MySqlParser::HOUR_SECOND: {
        enterOuterAlt(_localctx, 8);
        setState(1318);
        match(MySqlParser::HOUR_SECOND);
        break;
      }

      case MySqlParser::MINUTE_SECOND: {
        enterOuterAlt(_localctx, 9);
        setState(1319);
        match(MySqlParser::MINUTE_SECOND);
        break;
      }

      case MySqlParser::SECOND_MICROSECOND: {
        enterOuterAlt(_localctx, 10);
        setState(1320);
        match(MySqlParser::SECOND_MICROSECOND);
        break;
      }

      case MySqlParser::MINUTE_MICROSECOND: {
        enterOuterAlt(_localctx, 11);
        setState(1321);
        match(MySqlParser::MINUTE_MICROSECOND);
        break;
      }

      case MySqlParser::HOUR_MICROSECOND: {
        enterOuterAlt(_localctx, 12);
        setState(1322);
        match(MySqlParser::HOUR_MICROSECOND);
        break;
      }

      case MySqlParser::DAY_MICROSECOND: {
        enterOuterAlt(_localctx, 13);
        setState(1323);
        match(MySqlParser::DAY_MICROSECOND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnableTypeContext ------------------------------------------------------------------

MySqlParser::EnableTypeContext::EnableTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::EnableTypeContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::EnableTypeContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::EnableTypeContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::EnableTypeContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}


size_t MySqlParser::EnableTypeContext::getRuleIndex() const {
  return MySqlParser::RuleEnableType;
}


MySqlParser::EnableTypeContext* MySqlParser::enableType() {
  EnableTypeContext *_localctx = _tracker.createInstance<EnableTypeContext>(_ctx, getState());
  enterRule(_localctx, 60, MySqlParser::RuleEnableType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1331);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1326);
      match(MySqlParser::ENABLE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1327);
      match(MySqlParser::DISABLE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1328);
      match(MySqlParser::DISABLE);
      setState(1329);
      match(MySqlParser::ON);
      setState(1330);
      match(MySqlParser::SLAVE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexTypeContext ------------------------------------------------------------------

MySqlParser::IndexTypeContext::IndexTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IndexTypeContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

tree::TerminalNode* MySqlParser::IndexTypeContext::BTREE() {
  return getToken(MySqlParser::BTREE, 0);
}

tree::TerminalNode* MySqlParser::IndexTypeContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}


size_t MySqlParser::IndexTypeContext::getRuleIndex() const {
  return MySqlParser::RuleIndexType;
}


MySqlParser::IndexTypeContext* MySqlParser::indexType() {
  IndexTypeContext *_localctx = _tracker.createInstance<IndexTypeContext>(_ctx, getState());
  enterRule(_localctx, 62, MySqlParser::RuleIndexType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1333);
    match(MySqlParser::USING);
    setState(1334);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BTREE || _la == MySqlParser::HASH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexOptionContext ------------------------------------------------------------------

MySqlParser::IndexOptionContext::IndexOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IndexOptionContext::KEY_BLOCK_SIZE() {
  return getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
}

MySqlParser::FileSizeLiteralContext* MySqlParser::IndexOptionContext::fileSizeLiteral() {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::IndexTypeContext* MySqlParser::IndexOptionContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::PARSER() {
  return getToken(MySqlParser::PARSER, 0);
}

MySqlParser::UidContext* MySqlParser::IndexOptionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::INVISIBLE() {
  return getToken(MySqlParser::INVISIBLE, 0);
}

tree::TerminalNode* MySqlParser::IndexOptionContext::VISIBLE() {
  return getToken(MySqlParser::VISIBLE, 0);
}


size_t MySqlParser::IndexOptionContext::getRuleIndex() const {
  return MySqlParser::RuleIndexOption;
}


MySqlParser::IndexOptionContext* MySqlParser::indexOption() {
  IndexOptionContext *_localctx = _tracker.createInstance<IndexOptionContext>(_ctx, getState());
  enterRule(_localctx, 64, MySqlParser::RuleIndexOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1349);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::KEY_BLOCK_SIZE: {
        enterOuterAlt(_localctx, 1);
        setState(1336);
        match(MySqlParser::KEY_BLOCK_SIZE);
        setState(1338);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(1337);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(1340);
        fileSizeLiteral();
        break;
      }

      case MySqlParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(1341);
        indexType();
        break;
      }

      case MySqlParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1342);
        match(MySqlParser::WITH);
        setState(1343);
        match(MySqlParser::PARSER);
        setState(1344);
        uid();
        break;
      }

      case MySqlParser::COMMENT: {
        enterOuterAlt(_localctx, 4);
        setState(1345);
        match(MySqlParser::COMMENT);
        setState(1346);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::INVISIBLE: {
        enterOuterAlt(_localctx, 5);
        setState(1347);
        match(MySqlParser::INVISIBLE);
        break;
      }

      case MySqlParser::VISIBLE: {
        enterOuterAlt(_localctx, 6);
        setState(1348);
        match(MySqlParser::VISIBLE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureParameterContext ------------------------------------------------------------------

MySqlParser::ProcedureParameterContext::ProcedureParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::ProcedureParameterContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::DataTypeContext* MySqlParser::ProcedureParameterContext::dataType() {
  return getRuleContext<MySqlParser::DataTypeContext>(0);
}

tree::TerminalNode* MySqlParser::ProcedureParameterContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::ProcedureParameterContext::OUT() {
  return getToken(MySqlParser::OUT, 0);
}

tree::TerminalNode* MySqlParser::ProcedureParameterContext::INOUT() {
  return getToken(MySqlParser::INOUT, 0);
}


size_t MySqlParser::ProcedureParameterContext::getRuleIndex() const {
  return MySqlParser::RuleProcedureParameter;
}


MySqlParser::ProcedureParameterContext* MySqlParser::procedureParameter() {
  ProcedureParameterContext *_localctx = _tracker.createInstance<ProcedureParameterContext>(_ctx, getState());
  enterRule(_localctx, 66, MySqlParser::RuleProcedureParameter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::IN - 71))
      | (1ULL << (MySqlParser::INOUT - 71))
      | (1ULL << (MySqlParser::OUT - 71)))) != 0)) {
      setState(1351);
      dynamic_cast<ProcedureParameterContext *>(_localctx)->direction = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::IN - 71))
        | (1ULL << (MySqlParser::INOUT - 71))
        | (1ULL << (MySqlParser::OUT - 71)))) != 0))) {
        dynamic_cast<ProcedureParameterContext *>(_localctx)->direction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1354);
    uid();
    setState(1355);
    dataType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionParameterContext ------------------------------------------------------------------

MySqlParser::FunctionParameterContext::FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::FunctionParameterContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::DataTypeContext* MySqlParser::FunctionParameterContext::dataType() {
  return getRuleContext<MySqlParser::DataTypeContext>(0);
}


size_t MySqlParser::FunctionParameterContext::getRuleIndex() const {
  return MySqlParser::RuleFunctionParameter;
}


MySqlParser::FunctionParameterContext* MySqlParser::functionParameter() {
  FunctionParameterContext *_localctx = _tracker.createInstance<FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 68, MySqlParser::RuleFunctionParameter);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    uid();
    setState(1358);
    dataType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoutineOptionContext ------------------------------------------------------------------

MySqlParser::RoutineOptionContext::RoutineOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::RoutineOptionContext::getRuleIndex() const {
  return MySqlParser::RuleRoutineOption;
}

void MySqlParser::RoutineOptionContext::copyFrom(RoutineOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RoutineBehaviorContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RoutineBehaviorContext::DETERMINISTIC() {
  return getToken(MySqlParser::DETERMINISTIC, 0);
}

tree::TerminalNode* MySqlParser::RoutineBehaviorContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::RoutineBehaviorContext::RoutineBehaviorContext(RoutineOptionContext *ctx) { copyFrom(ctx); }


//----------------- RoutineLanguageContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RoutineLanguageContext::LANGUAGE() {
  return getToken(MySqlParser::LANGUAGE, 0);
}

tree::TerminalNode* MySqlParser::RoutineLanguageContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

MySqlParser::RoutineLanguageContext::RoutineLanguageContext(RoutineOptionContext *ctx) { copyFrom(ctx); }


//----------------- RoutineCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RoutineCommentContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::RoutineCommentContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::RoutineCommentContext::RoutineCommentContext(RoutineOptionContext *ctx) { copyFrom(ctx); }


//----------------- RoutineSecurityContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RoutineSecurityContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::RoutineSecurityContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

tree::TerminalNode* MySqlParser::RoutineSecurityContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::RoutineSecurityContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

MySqlParser::RoutineSecurityContext::RoutineSecurityContext(RoutineOptionContext *ctx) { copyFrom(ctx); }


//----------------- RoutineDataContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RoutineDataContext::CONTAINS() {
  return getToken(MySqlParser::CONTAINS, 0);
}

tree::TerminalNode* MySqlParser::RoutineDataContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::RoutineDataContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::RoutineDataContext::READS() {
  return getToken(MySqlParser::READS, 0);
}

tree::TerminalNode* MySqlParser::RoutineDataContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::RoutineDataContext::MODIFIES() {
  return getToken(MySqlParser::MODIFIES, 0);
}

MySqlParser::RoutineDataContext::RoutineDataContext(RoutineOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::RoutineOptionContext* MySqlParser::routineOption() {
  RoutineOptionContext *_localctx = _tracker.createInstance<RoutineOptionContext>(_ctx, getState());
  enterRule(_localctx, 70, MySqlParser::RuleRoutineOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1383);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::COMMENT: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySqlParser::RoutineCommentContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1360);
        match(MySqlParser::COMMENT);
        setState(1361);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::LANGUAGE: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySqlParser::RoutineLanguageContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1362);
        match(MySqlParser::LANGUAGE);
        setState(1363);
        match(MySqlParser::SQL);
        break;
      }

      case MySqlParser::DETERMINISTIC:
      case MySqlParser::NOT: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySqlParser::RoutineBehaviorContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1365);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::NOT) {
          setState(1364);
          match(MySqlParser::NOT);
        }
        setState(1367);
        match(MySqlParser::DETERMINISTIC);
        break;
      }

      case MySqlParser::MODIFIES:
      case MySqlParser::READS:
      case MySqlParser::CONTAINS:
      case MySqlParser::NO: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySqlParser::RoutineDataContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1378);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::CONTAINS: {
            setState(1368);
            match(MySqlParser::CONTAINS);
            setState(1369);
            match(MySqlParser::SQL);
            break;
          }

          case MySqlParser::NO: {
            setState(1370);
            match(MySqlParser::NO);
            setState(1371);
            match(MySqlParser::SQL);
            break;
          }

          case MySqlParser::READS: {
            setState(1372);
            match(MySqlParser::READS);
            setState(1373);
            match(MySqlParser::SQL);
            setState(1374);
            match(MySqlParser::DATA);
            break;
          }

          case MySqlParser::MODIFIES: {
            setState(1375);
            match(MySqlParser::MODIFIES);
            setState(1376);
            match(MySqlParser::SQL);
            setState(1377);
            match(MySqlParser::DATA);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::SQL: {
        _localctx = dynamic_cast<RoutineOptionContext *>(_tracker.createInstance<MySqlParser::RoutineSecurityContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1380);
        match(MySqlParser::SQL);
        setState(1381);
        match(MySqlParser::SECURITY);
        setState(1382);
        dynamic_cast<RoutineSecurityContext *>(_localctx)->context = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFINER

        || _la == MySqlParser::INVOKER)) {
          dynamic_cast<RoutineSecurityContext *>(_localctx)->context = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ServerOptionContext ------------------------------------------------------------------

MySqlParser::ServerOptionContext::ServerOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ServerOptionContext::HOST() {
  return getToken(MySqlParser::HOST, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::SOCKET() {
  return getToken(MySqlParser::SOCKET, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::OWNER() {
  return getToken(MySqlParser::OWNER, 0);
}

tree::TerminalNode* MySqlParser::ServerOptionContext::PORT() {
  return getToken(MySqlParser::PORT, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::ServerOptionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}


size_t MySqlParser::ServerOptionContext::getRuleIndex() const {
  return MySqlParser::RuleServerOption;
}


MySqlParser::ServerOptionContext* MySqlParser::serverOption() {
  ServerOptionContext *_localctx = _tracker.createInstance<ServerOptionContext>(_ctx, getState());
  enterRule(_localctx, 72, MySqlParser::RuleServerOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1399);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::HOST: {
        enterOuterAlt(_localctx, 1);
        setState(1385);
        match(MySqlParser::HOST);
        setState(1386);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::DATABASE: {
        enterOuterAlt(_localctx, 2);
        setState(1387);
        match(MySqlParser::DATABASE);
        setState(1388);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::USER: {
        enterOuterAlt(_localctx, 3);
        setState(1389);
        match(MySqlParser::USER);
        setState(1390);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PASSWORD: {
        enterOuterAlt(_localctx, 4);
        setState(1391);
        match(MySqlParser::PASSWORD);
        setState(1392);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::SOCKET: {
        enterOuterAlt(_localctx, 5);
        setState(1393);
        match(MySqlParser::SOCKET);
        setState(1394);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::OWNER: {
        enterOuterAlt(_localctx, 6);
        setState(1395);
        match(MySqlParser::OWNER);
        setState(1396);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PORT: {
        enterOuterAlt(_localctx, 7);
        setState(1397);
        match(MySqlParser::PORT);
        setState(1398);
        decimalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDefinitionsContext ------------------------------------------------------------------

MySqlParser::CreateDefinitionsContext::CreateDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateDefinitionsContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::CreateDefinitionContext *> MySqlParser::CreateDefinitionsContext::createDefinition() {
  return getRuleContexts<MySqlParser::CreateDefinitionContext>();
}

MySqlParser::CreateDefinitionContext* MySqlParser::CreateDefinitionsContext::createDefinition(size_t i) {
  return getRuleContext<MySqlParser::CreateDefinitionContext>(i);
}

tree::TerminalNode* MySqlParser::CreateDefinitionsContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateDefinitionsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CreateDefinitionsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::CreateDefinitionsContext::getRuleIndex() const {
  return MySqlParser::RuleCreateDefinitions;
}


MySqlParser::CreateDefinitionsContext* MySqlParser::createDefinitions() {
  CreateDefinitionsContext *_localctx = _tracker.createInstance<CreateDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 74, MySqlParser::RuleCreateDefinitions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1401);
    match(MySqlParser::LR_BRACKET);
    setState(1402);
    createDefinition();
    setState(1407);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(1403);
      match(MySqlParser::COMMA);
      setState(1404);
      createDefinition();
      setState(1409);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1410);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateDefinitionContext ------------------------------------------------------------------

MySqlParser::CreateDefinitionContext::CreateDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::CreateDefinitionContext::getRuleIndex() const {
  return MySqlParser::RuleCreateDefinition;
}

void MySqlParser::CreateDefinitionContext::copyFrom(CreateDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnDeclarationContext ------------------------------------------------------------------

MySqlParser::UidContext* MySqlParser::ColumnDeclarationContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::ColumnDefinitionContext* MySqlParser::ColumnDeclarationContext::columnDefinition() {
  return getRuleContext<MySqlParser::ColumnDefinitionContext>(0);
}

MySqlParser::ColumnDeclarationContext::ColumnDeclarationContext(CreateDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- ConstraintDeclarationContext ------------------------------------------------------------------

MySqlParser::TableConstraintContext* MySqlParser::ConstraintDeclarationContext::tableConstraint() {
  return getRuleContext<MySqlParser::TableConstraintContext>(0);
}

MySqlParser::ConstraintDeclarationContext::ConstraintDeclarationContext(CreateDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- IndexDeclarationContext ------------------------------------------------------------------

MySqlParser::IndexColumnDefinitionContext* MySqlParser::IndexDeclarationContext::indexColumnDefinition() {
  return getRuleContext<MySqlParser::IndexColumnDefinitionContext>(0);
}

MySqlParser::IndexDeclarationContext::IndexDeclarationContext(CreateDefinitionContext *ctx) { copyFrom(ctx); }


MySqlParser::CreateDefinitionContext* MySqlParser::createDefinition() {
  CreateDefinitionContext *_localctx = _tracker.createInstance<CreateDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 76, MySqlParser::RuleCreateDefinition);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1417);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        _localctx = dynamic_cast<CreateDefinitionContext *>(_tracker.createInstance<MySqlParser::ColumnDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1412);
        uid();
        setState(1413);
        columnDefinition();
        break;
      }

      case MySqlParser::CHECK:
      case MySqlParser::CONSTRAINT:
      case MySqlParser::FOREIGN:
      case MySqlParser::PRIMARY:
      case MySqlParser::UNIQUE: {
        _localctx = dynamic_cast<CreateDefinitionContext *>(_tracker.createInstance<MySqlParser::ConstraintDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1415);
        tableConstraint();
        break;
      }

      case MySqlParser::FULLTEXT:
      case MySqlParser::INDEX:
      case MySqlParser::KEY:
      case MySqlParser::SPATIAL: {
        _localctx = dynamic_cast<CreateDefinitionContext *>(_tracker.createInstance<MySqlParser::IndexDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1416);
        indexColumnDefinition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnDefinitionContext ------------------------------------------------------------------

MySqlParser::ColumnDefinitionContext::ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::DataTypeContext* MySqlParser::ColumnDefinitionContext::dataType() {
  return getRuleContext<MySqlParser::DataTypeContext>(0);
}

std::vector<MySqlParser::ColumnConstraintContext *> MySqlParser::ColumnDefinitionContext::columnConstraint() {
  return getRuleContexts<MySqlParser::ColumnConstraintContext>();
}

MySqlParser::ColumnConstraintContext* MySqlParser::ColumnDefinitionContext::columnConstraint(size_t i) {
  return getRuleContext<MySqlParser::ColumnConstraintContext>(i);
}


size_t MySqlParser::ColumnDefinitionContext::getRuleIndex() const {
  return MySqlParser::RuleColumnDefinition;
}


MySqlParser::ColumnDefinitionContext* MySqlParser::columnDefinition() {
  ColumnDefinitionContext *_localctx = _tracker.createInstance<ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 78, MySqlParser::RuleColumnDefinition);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1419);
    dataType();
    setState(1423);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1420);
        columnConstraint(); 
      }
      setState(1425);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnConstraintContext ------------------------------------------------------------------

MySqlParser::ColumnConstraintContext::ColumnConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ColumnConstraintContext::getRuleIndex() const {
  return MySqlParser::RuleColumnConstraint;
}

void MySqlParser::ColumnConstraintContext::copyFrom(ColumnConstraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StorageColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::StorageColumnConstraintContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::StorageColumnConstraintContext::DISK() {
  return getToken(MySqlParser::DISK, 0);
}

tree::TerminalNode* MySqlParser::StorageColumnConstraintContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::StorageColumnConstraintContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::StorageColumnConstraintContext::StorageColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- AutoIncrementColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AutoIncrementColumnConstraintContext::AUTO_INCREMENT() {
  return getToken(MySqlParser::AUTO_INCREMENT, 0);
}

tree::TerminalNode* MySqlParser::AutoIncrementColumnConstraintContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::AutoIncrementColumnConstraintContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

MySqlParser::CurrentTimestampContext* MySqlParser::AutoIncrementColumnConstraintContext::currentTimestamp() {
  return getRuleContext<MySqlParser::CurrentTimestampContext>(0);
}

MySqlParser::AutoIncrementColumnConstraintContext::AutoIncrementColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- CommentColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CommentColumnConstraintContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::CommentColumnConstraintContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::CommentColumnConstraintContext::CommentColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- UniqueKeyColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::UniqueKeyColumnConstraintContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

tree::TerminalNode* MySqlParser::UniqueKeyColumnConstraintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::UniqueKeyColumnConstraintContext::UniqueKeyColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- SerialDefaultColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SerialDefaultColumnConstraintContext::SERIAL() {
  return getToken(MySqlParser::SERIAL, 0);
}

tree::TerminalNode* MySqlParser::SerialDefaultColumnConstraintContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::SerialDefaultColumnConstraintContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}

MySqlParser::SerialDefaultColumnConstraintContext::SerialDefaultColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- GeneratedColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::GeneratedColumnConstraintContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::GENERATED() {
  return getToken(MySqlParser::GENERATED, 0);
}

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::ALWAYS() {
  return getToken(MySqlParser::ALWAYS, 0);
}

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::VIRTUAL() {
  return getToken(MySqlParser::VIRTUAL, 0);
}

tree::TerminalNode* MySqlParser::GeneratedColumnConstraintContext::STORED() {
  return getToken(MySqlParser::STORED, 0);
}

MySqlParser::GeneratedColumnConstraintContext::GeneratedColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- FormatColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::FormatColumnConstraintContext::COLUMN_FORMAT() {
  return getToken(MySqlParser::COLUMN_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::FormatColumnConstraintContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::FormatColumnConstraintContext::DYNAMIC() {
  return getToken(MySqlParser::DYNAMIC, 0);
}

tree::TerminalNode* MySqlParser::FormatColumnConstraintContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::FormatColumnConstraintContext::FormatColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- CollateColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CollateColumnConstraintContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::CollateColumnConstraintContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

MySqlParser::CollateColumnConstraintContext::CollateColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- PrimaryKeyColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PrimaryKeyColumnConstraintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::PrimaryKeyColumnConstraintContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

MySqlParser::PrimaryKeyColumnConstraintContext::PrimaryKeyColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- CheckColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CheckColumnConstraintContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::CheckColumnConstraintContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::CheckColumnConstraintContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::CheckColumnConstraintContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CheckColumnConstraintContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::UidContext* MySqlParser::CheckColumnConstraintContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::CheckColumnConstraintContext::CheckColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- NullColumnConstraintContext ------------------------------------------------------------------

MySqlParser::NullNotnullContext* MySqlParser::NullColumnConstraintContext::nullNotnull() {
  return getRuleContext<MySqlParser::NullNotnullContext>(0);
}

MySqlParser::NullColumnConstraintContext::NullColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- DefaultColumnConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DefaultColumnConstraintContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::DefaultValueContext* MySqlParser::DefaultColumnConstraintContext::defaultValue() {
  return getRuleContext<MySqlParser::DefaultValueContext>(0);
}

MySqlParser::DefaultColumnConstraintContext::DefaultColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


//----------------- ReferenceColumnConstraintContext ------------------------------------------------------------------

MySqlParser::ReferenceDefinitionContext* MySqlParser::ReferenceColumnConstraintContext::referenceDefinition() {
  return getRuleContext<MySqlParser::ReferenceDefinitionContext>(0);
}

MySqlParser::ReferenceColumnConstraintContext::ReferenceColumnConstraintContext(ColumnConstraintContext *ctx) { copyFrom(ctx); }


MySqlParser::ColumnConstraintContext* MySqlParser::columnConstraint() {
  ColumnConstraintContext *_localctx = _tracker.createInstance<ColumnConstraintContext>(_ctx, getState());
  enterRule(_localctx, 80, MySqlParser::RuleColumnConstraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1477);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::NOT:
      case MySqlParser::NULL_LITERAL:
      case MySqlParser::NULL_SPEC_LITERAL: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::NullColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1426);
        nullNotnull();
        break;
      }

      case MySqlParser::DEFAULT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::DefaultColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1427);
        match(MySqlParser::DEFAULT);
        setState(1428);
        defaultValue();
        break;
      }

      case MySqlParser::ON:
      case MySqlParser::AUTO_INCREMENT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::AutoIncrementColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1433);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::AUTO_INCREMENT: {
            setState(1429);
            match(MySqlParser::AUTO_INCREMENT);
            break;
          }

          case MySqlParser::ON: {
            setState(1430);
            match(MySqlParser::ON);
            setState(1431);
            match(MySqlParser::UPDATE);
            setState(1432);
            currentTimestamp();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::KEY:
      case MySqlParser::PRIMARY: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::PrimaryKeyColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1436);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::PRIMARY) {
          setState(1435);
          match(MySqlParser::PRIMARY);
        }
        setState(1438);
        match(MySqlParser::KEY);
        break;
      }

      case MySqlParser::UNIQUE: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::UniqueKeyColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1439);
        match(MySqlParser::UNIQUE);
        setState(1441);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
        case 1: {
          setState(1440);
          match(MySqlParser::KEY);
          break;
        }

        }
        break;
      }

      case MySqlParser::COMMENT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::CommentColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(1443);
        match(MySqlParser::COMMENT);
        setState(1444);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::COLUMN_FORMAT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::FormatColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(1445);
        match(MySqlParser::COLUMN_FORMAT);
        setState(1446);
        dynamic_cast<FormatColumnConstraintContext *>(_localctx)->colformat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::DYNAMIC

        || _la == MySqlParser::FIXED)) {
          dynamic_cast<FormatColumnConstraintContext *>(_localctx)->colformat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::STORAGE: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::StorageColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(1447);
        match(MySqlParser::STORAGE);
        setState(1448);
        dynamic_cast<StorageColumnConstraintContext *>(_localctx)->storageval = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::DISK || _la == MySqlParser::MEMORY)) {
          dynamic_cast<StorageColumnConstraintContext *>(_localctx)->storageval = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::REFERENCES: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::ReferenceColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 9);
        setState(1449);
        referenceDefinition();
        break;
      }

      case MySqlParser::COLLATE: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::CollateColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 10);
        setState(1450);
        match(MySqlParser::COLLATE);
        setState(1451);
        collationName();
        break;
      }

      case MySqlParser::AS:
      case MySqlParser::GENERATED: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::GeneratedColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 11);
        setState(1454);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::GENERATED) {
          setState(1452);
          match(MySqlParser::GENERATED);
          setState(1453);
          match(MySqlParser::ALWAYS);
        }
        setState(1456);
        match(MySqlParser::AS);
        setState(1457);
        match(MySqlParser::LR_BRACKET);
        setState(1458);
        expression(0);
        setState(1459);
        match(MySqlParser::RR_BRACKET);
        setState(1461);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::STORED

        || _la == MySqlParser::VIRTUAL) {
          setState(1460);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::STORED

          || _la == MySqlParser::VIRTUAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case MySqlParser::SERIAL: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::SerialDefaultColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 12);
        setState(1463);
        match(MySqlParser::SERIAL);
        setState(1464);
        match(MySqlParser::DEFAULT);
        setState(1465);
        match(MySqlParser::VALUE);
        break;
      }

      case MySqlParser::CHECK:
      case MySqlParser::CONSTRAINT: {
        _localctx = dynamic_cast<ColumnConstraintContext *>(_tracker.createInstance<MySqlParser::CheckColumnConstraintContext>(_localctx));
        enterOuterAlt(_localctx, 13);
        setState(1470);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CONSTRAINT) {
          setState(1466);
          match(MySqlParser::CONSTRAINT);
          setState(1468);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((((_la - 32) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
            | (1ULL << (MySqlParser::DATABASE - 32))
            | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
            | (1ULL << (MySqlParser::GROUP - 32))
            | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
            | (1ULL << (MySqlParser::ORDER - 105))
            | (1ULL << (MySqlParser::RIGHT - 105))
            | (1ULL << (MySqlParser::SCHEMA - 105))
            | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
            | (1ULL << (MySqlParser::TIME - 199))
            | (1ULL << (MySqlParser::TIMESTAMP - 199))
            | (1ULL << (MySqlParser::DATETIME - 199))
            | (1ULL << (MySqlParser::YEAR - 199))
            | (1ULL << (MySqlParser::TEXT - 199))
            | (1ULL << (MySqlParser::ENUM - 199))
            | (1ULL << (MySqlParser::SERIAL - 199))
            | (1ULL << (MySqlParser::JSON_VALID - 199))
            | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
            | (1ULL << (MySqlParser::AVG - 199))
            | (1ULL << (MySqlParser::BIT_AND - 199))
            | (1ULL << (MySqlParser::BIT_OR - 199))
            | (1ULL << (MySqlParser::BIT_XOR - 199))
            | (1ULL << (MySqlParser::COUNT - 199))
            | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
            | (1ULL << (MySqlParser::MAX - 199))
            | (1ULL << (MySqlParser::MIN - 199))
            | (1ULL << (MySqlParser::STD - 199))
            | (1ULL << (MySqlParser::STDDEV - 199))
            | (1ULL << (MySqlParser::STDDEV_POP - 199))
            | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
            | (1ULL << (MySqlParser::SUM - 199))
            | (1ULL << (MySqlParser::VAR_POP - 199))
            | (1ULL << (MySqlParser::VAR_SAMP - 199))
            | (1ULL << (MySqlParser::VARIANCE - 199))
            | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
            | (1ULL << (MySqlParser::ACTION - 270))
            | (1ULL << (MySqlParser::AFTER - 270))
            | (1ULL << (MySqlParser::AGGREGATE - 270))
            | (1ULL << (MySqlParser::ALGORITHM - 270))
            | (1ULL << (MySqlParser::ANY - 270))
            | (1ULL << (MySqlParser::AT - 270))
            | (1ULL << (MySqlParser::AUTHORS - 270))
            | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
            | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
            | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
            | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
            | (1ULL << (MySqlParser::BEGIN - 270))
            | (1ULL << (MySqlParser::BINLOG - 270))
            | (1ULL << (MySqlParser::BIT - 270))
            | (1ULL << (MySqlParser::BLOCK - 270))
            | (1ULL << (MySqlParser::BOOL - 270))
            | (1ULL << (MySqlParser::BOOLEAN - 270))
            | (1ULL << (MySqlParser::BTREE - 270))
            | (1ULL << (MySqlParser::CACHE - 270))
            | (1ULL << (MySqlParser::CASCADED - 270))
            | (1ULL << (MySqlParser::CHAIN - 270))
            | (1ULL << (MySqlParser::CHANGED - 270))
            | (1ULL << (MySqlParser::CHANNEL - 270))
            | (1ULL << (MySqlParser::CHECKSUM - 270))
            | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
            | (1ULL << (MySqlParser::CIPHER - 270))
            | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
            | (1ULL << (MySqlParser::CLIENT - 270))
            | (1ULL << (MySqlParser::CLOSE - 270))
            | (1ULL << (MySqlParser::COALESCE - 270))
            | (1ULL << (MySqlParser::CODE - 270))
            | (1ULL << (MySqlParser::COLUMNS - 270))
            | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
            | (1ULL << (MySqlParser::COLUMN_NAME - 270))
            | (1ULL << (MySqlParser::COMMENT - 270))
            | (1ULL << (MySqlParser::COMMIT - 270))
            | (1ULL << (MySqlParser::COMPACT - 270))
            | (1ULL << (MySqlParser::COMPLETION - 270))
            | (1ULL << (MySqlParser::COMPRESSED - 270))
            | (1ULL << (MySqlParser::COMPRESSION - 270))
            | (1ULL << (MySqlParser::CONCURRENT - 270))
            | (1ULL << (MySqlParser::CONNECTION - 270))
            | (1ULL << (MySqlParser::CONSISTENT - 270))
            | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
            | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
            | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
            | (1ULL << (MySqlParser::CONTAINS - 270))
            | (1ULL << (MySqlParser::CONTEXT - 270))
            | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
            | (1ULL << (MySqlParser::COPY - 270))
            | (1ULL << (MySqlParser::CPU - 270))
            | (1ULL << (MySqlParser::CURSOR_NAME - 270))
            | (1ULL << (MySqlParser::DATA - 270))
            | (1ULL << (MySqlParser::DATAFILE - 270))
            | (1ULL << (MySqlParser::DEALLOCATE - 270))
            | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
            | (1ULL << (MySqlParser::DEFINER - 270))
            | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
            | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
            | (1ULL << (MySqlParser::DIRECTORY - 270))
            | (1ULL << (MySqlParser::DISABLE - 270))
            | (1ULL << (MySqlParser::DISCARD - 270))
            | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
            | (1ULL << (MySqlParser::DUMPFILE - 334))
            | (1ULL << (MySqlParser::DUPLICATE - 334))
            | (1ULL << (MySqlParser::DYNAMIC - 334))
            | (1ULL << (MySqlParser::ENABLE - 334))
            | (1ULL << (MySqlParser::ENCRYPTION - 334))
            | (1ULL << (MySqlParser::END - 334))
            | (1ULL << (MySqlParser::ENDS - 334))
            | (1ULL << (MySqlParser::ENGINE - 334))
            | (1ULL << (MySqlParser::ENGINES - 334))
            | (1ULL << (MySqlParser::ERROR - 334))
            | (1ULL << (MySqlParser::ERRORS - 334))
            | (1ULL << (MySqlParser::ESCAPE - 334))
            | (1ULL << (MySqlParser::EVEN - 334))
            | (1ULL << (MySqlParser::EVENT - 334))
            | (1ULL << (MySqlParser::EVENTS - 334))
            | (1ULL << (MySqlParser::EVERY - 334))
            | (1ULL << (MySqlParser::EXCHANGE - 334))
            | (1ULL << (MySqlParser::EXCLUSIVE - 334))
            | (1ULL << (MySqlParser::EXPIRE - 334))
            | (1ULL << (MySqlParser::EXPORT - 334))
            | (1ULL << (MySqlParser::EXTENDED - 334))
            | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
            | (1ULL << (MySqlParser::FAST - 334))
            | (1ULL << (MySqlParser::FAULTS - 334))
            | (1ULL << (MySqlParser::FIELDS - 334))
            | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
            | (1ULL << (MySqlParser::FILTER - 334))
            | (1ULL << (MySqlParser::FIRST - 334))
            | (1ULL << (MySqlParser::FIXED - 334))
            | (1ULL << (MySqlParser::FLUSH - 334))
            | (1ULL << (MySqlParser::FOLLOWS - 334))
            | (1ULL << (MySqlParser::FOUND - 334))
            | (1ULL << (MySqlParser::FULL - 334))
            | (1ULL << (MySqlParser::FUNCTION - 334))
            | (1ULL << (MySqlParser::GENERAL - 334))
            | (1ULL << (MySqlParser::GLOBAL - 334))
            | (1ULL << (MySqlParser::GRANTS - 334))
            | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
            | (1ULL << (MySqlParser::HANDLER - 334))
            | (1ULL << (MySqlParser::HASH - 334))
            | (1ULL << (MySqlParser::HELP - 334))
            | (1ULL << (MySqlParser::HOST - 334))
            | (1ULL << (MySqlParser::HOSTS - 334))
            | (1ULL << (MySqlParser::IDENTIFIED - 334))
            | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
            | (1ULL << (MySqlParser::IMPORT - 334))
            | (1ULL << (MySqlParser::INDEXES - 334))
            | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
            | (1ULL << (MySqlParser::INPLACE - 334))
            | (1ULL << (MySqlParser::INSERT_METHOD - 334))
            | (1ULL << (MySqlParser::INSTALL - 334))
            | (1ULL << (MySqlParser::INSTANCE - 334))
            | (1ULL << (MySqlParser::INVISIBLE - 334))
            | (1ULL << (MySqlParser::INVOKER - 334))
            | (1ULL << (MySqlParser::IO - 334))
            | (1ULL << (MySqlParser::IO_THREAD - 334))
            | (1ULL << (MySqlParser::IPC - 334))
            | (1ULL << (MySqlParser::ISOLATION - 334))
            | (1ULL << (MySqlParser::ISSUER - 334))
            | (1ULL << (MySqlParser::JSON - 334))
            | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
            | (1ULL << (MySqlParser::LANGUAGE - 334))
            | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
            | (1ULL << (MySqlParser::LESS - 398))
            | (1ULL << (MySqlParser::LEVEL - 398))
            | (1ULL << (MySqlParser::LIST - 398))
            | (1ULL << (MySqlParser::LOCAL - 398))
            | (1ULL << (MySqlParser::LOGFILE - 398))
            | (1ULL << (MySqlParser::LOGS - 398))
            | (1ULL << (MySqlParser::MASTER - 398))
            | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
            | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
            | (1ULL << (MySqlParser::MASTER_DELAY - 398))
            | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
            | (1ULL << (MySqlParser::MASTER_HOST - 398))
            | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
            | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
            | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
            | (1ULL << (MySqlParser::MASTER_PORT - 398))
            | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
            | (1ULL << (MySqlParser::MASTER_SSL - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
            | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
            | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
            | (1ULL << (MySqlParser::MASTER_USER - 398))
            | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
            | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
            | (1ULL << (MySqlParser::MAX_ROWS - 398))
            | (1ULL << (MySqlParser::MAX_SIZE - 398))
            | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
            | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
            | (1ULL << (MySqlParser::MEDIUM - 398))
            | (1ULL << (MySqlParser::MEMBER - 398))
            | (1ULL << (MySqlParser::MERGE - 398))
            | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
            | (1ULL << (MySqlParser::MID - 398))
            | (1ULL << (MySqlParser::MIGRATE - 398))
            | (1ULL << (MySqlParser::MIN_ROWS - 398))
            | (1ULL << (MySqlParser::MODE - 398))
            | (1ULL << (MySqlParser::MODIFY - 398))
            | (1ULL << (MySqlParser::MUTEX - 398))
            | (1ULL << (MySqlParser::MYSQL - 398))
            | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
            | (1ULL << (MySqlParser::NAME - 398))
            | (1ULL << (MySqlParser::NAMES - 398))
            | (1ULL << (MySqlParser::NCHAR - 398))
            | (1ULL << (MySqlParser::NEVER - 398))
            | (1ULL << (MySqlParser::NEXT - 398))
            | (1ULL << (MySqlParser::NO - 398))
            | (1ULL << (MySqlParser::NODEGROUP - 398))
            | (1ULL << (MySqlParser::NONE - 398))
            | (1ULL << (MySqlParser::OFFLINE - 398))
            | (1ULL << (MySqlParser::OFFSET - 398))
            | (1ULL << (MySqlParser::OF - 398))
            | (1ULL << (MySqlParser::OJ - 398))
            | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
            | (1ULL << (MySqlParser::ONE - 398))
            | (1ULL << (MySqlParser::ONLINE - 398))
            | (1ULL << (MySqlParser::ONLY - 398))
            | (1ULL << (MySqlParser::OPEN - 398))
            | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
            | (1ULL << (MySqlParser::OWNER - 462))
            | (1ULL << (MySqlParser::PACK_KEYS - 462))
            | (1ULL << (MySqlParser::PAGE - 462))
            | (1ULL << (MySqlParser::PARSER - 462))
            | (1ULL << (MySqlParser::PARTIAL - 462))
            | (1ULL << (MySqlParser::PARTITIONING - 462))
            | (1ULL << (MySqlParser::PARTITIONS - 462))
            | (1ULL << (MySqlParser::PASSWORD - 462))
            | (1ULL << (MySqlParser::PHASE - 462))
            | (1ULL << (MySqlParser::PLUGIN - 462))
            | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
            | (1ULL << (MySqlParser::PLUGINS - 462))
            | (1ULL << (MySqlParser::PORT - 462))
            | (1ULL << (MySqlParser::PRECEDES - 462))
            | (1ULL << (MySqlParser::PREPARE - 462))
            | (1ULL << (MySqlParser::PRESERVE - 462))
            | (1ULL << (MySqlParser::PREV - 462))
            | (1ULL << (MySqlParser::PROCESSLIST - 462))
            | (1ULL << (MySqlParser::PROFILE - 462))
            | (1ULL << (MySqlParser::PROFILES - 462))
            | (1ULL << (MySqlParser::PROXY - 462))
            | (1ULL << (MySqlParser::QUERY - 462))
            | (1ULL << (MySqlParser::QUICK - 462))
            | (1ULL << (MySqlParser::REBUILD - 462))
            | (1ULL << (MySqlParser::RECOVER - 462))
            | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
            | (1ULL << (MySqlParser::REDUNDANT - 462))
            | (1ULL << (MySqlParser::RELAY - 462))
            | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
            | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
            | (1ULL << (MySqlParser::RELAYLOG - 462))
            | (1ULL << (MySqlParser::REMOVE - 462))
            | (1ULL << (MySqlParser::REORGANIZE - 462))
            | (1ULL << (MySqlParser::REPAIR - 462))
            | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
            | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
            | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
            | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
            | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
            | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
            | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
            | (1ULL << (MySqlParser::REPLICATION - 462))
            | (1ULL << (MySqlParser::RESET - 462))
            | (1ULL << (MySqlParser::RESUME - 462))
            | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
            | (1ULL << (MySqlParser::RETURNS - 462))
            | (1ULL << (MySqlParser::ROLE - 462))
            | (1ULL << (MySqlParser::ROLLBACK - 462))
            | (1ULL << (MySqlParser::ROLLUP - 462))
            | (1ULL << (MySqlParser::ROTATE - 462))
            | (1ULL << (MySqlParser::ROW - 462))
            | (1ULL << (MySqlParser::ROWS - 462))
            | (1ULL << (MySqlParser::ROW_FORMAT - 462))
            | (1ULL << (MySqlParser::SAVEPOINT - 462))
            | (1ULL << (MySqlParser::SCHEDULE - 462))
            | (1ULL << (MySqlParser::SECURITY - 462))
            | (1ULL << (MySqlParser::SERVER - 462))
            | (1ULL << (MySqlParser::SESSION - 462))
            | (1ULL << (MySqlParser::SHARE - 462))
            | (1ULL << (MySqlParser::SHARED - 462))
            | (1ULL << (MySqlParser::SIGNED - 462))
            | (1ULL << (MySqlParser::SIMPLE - 462))
            | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
            | (1ULL << (MySqlParser::SNAPSHOT - 526))
            | (1ULL << (MySqlParser::SOCKET - 526))
            | (1ULL << (MySqlParser::SOME - 526))
            | (1ULL << (MySqlParser::SONAME - 526))
            | (1ULL << (MySqlParser::SOUNDS - 526))
            | (1ULL << (MySqlParser::SOURCE - 526))
            | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
            | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
            | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
            | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
            | (1ULL << (MySqlParser::SQL_CACHE - 526))
            | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
            | (1ULL << (MySqlParser::SQL_THREAD - 526))
            | (1ULL << (MySqlParser::START - 526))
            | (1ULL << (MySqlParser::STARTS - 526))
            | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
            | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
            | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
            | (1ULL << (MySqlParser::STATUS - 526))
            | (1ULL << (MySqlParser::STOP - 526))
            | (1ULL << (MySqlParser::STORAGE - 526))
            | (1ULL << (MySqlParser::STRING - 526))
            | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
            | (1ULL << (MySqlParser::SUBJECT - 526))
            | (1ULL << (MySqlParser::SUBPARTITION - 526))
            | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
            | (1ULL << (MySqlParser::SUSPEND - 526))
            | (1ULL << (MySqlParser::SWAPS - 526))
            | (1ULL << (MySqlParser::SWITCHES - 526))
            | (1ULL << (MySqlParser::TABLE_NAME - 526))
            | (1ULL << (MySqlParser::TABLESPACE - 526))
            | (1ULL << (MySqlParser::TEMPORARY - 526))
            | (1ULL << (MySqlParser::TEMPTABLE - 526))
            | (1ULL << (MySqlParser::THAN - 526))
            | (1ULL << (MySqlParser::TRADITIONAL - 526))
            | (1ULL << (MySqlParser::TRANSACTION - 526))
            | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
            | (1ULL << (MySqlParser::TRIGGERS - 526))
            | (1ULL << (MySqlParser::TRUNCATE - 526))
            | (1ULL << (MySqlParser::UNDEFINED - 526))
            | (1ULL << (MySqlParser::UNDOFILE - 526))
            | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
            | (1ULL << (MySqlParser::UNINSTALL - 526))
            | (1ULL << (MySqlParser::UNKNOWN - 526))
            | (1ULL << (MySqlParser::UNTIL - 526))
            | (1ULL << (MySqlParser::UPGRADE - 526))
            | (1ULL << (MySqlParser::USER - 526))
            | (1ULL << (MySqlParser::USE_FRM - 526))
            | (1ULL << (MySqlParser::USER_RESOURCES - 526))
            | (1ULL << (MySqlParser::VALIDATION - 526))
            | (1ULL << (MySqlParser::VALUE - 526))
            | (1ULL << (MySqlParser::VARIABLES - 526))
            | (1ULL << (MySqlParser::VIEW - 526))
            | (1ULL << (MySqlParser::VISIBLE - 526))
            | (1ULL << (MySqlParser::WAIT - 526))
            | (1ULL << (MySqlParser::WARNINGS - 526))
            | (1ULL << (MySqlParser::WITHOUT - 526))
            | (1ULL << (MySqlParser::WORK - 526))
            | (1ULL << (MySqlParser::WRAPPER - 526))
            | (1ULL << (MySqlParser::X509 - 526))
            | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
            | (1ULL << (MySqlParser::INTERNAL - 590))
            | (1ULL << (MySqlParser::QUARTER - 590))
            | (1ULL << (MySqlParser::MONTH - 590))
            | (1ULL << (MySqlParser::DAY - 590))
            | (1ULL << (MySqlParser::HOUR - 590))
            | (1ULL << (MySqlParser::MINUTE - 590))
            | (1ULL << (MySqlParser::WEEK - 590))
            | (1ULL << (MySqlParser::SECOND - 590))
            | (1ULL << (MySqlParser::MICROSECOND - 590))
            | (1ULL << (MySqlParser::TABLES - 590))
            | (1ULL << (MySqlParser::ROUTINE - 590))
            | (1ULL << (MySqlParser::EXECUTE - 590))
            | (1ULL << (MySqlParser::FILE - 590))
            | (1ULL << (MySqlParser::PROCESS - 590))
            | (1ULL << (MySqlParser::RELOAD - 590))
            | (1ULL << (MySqlParser::SHUTDOWN - 590))
            | (1ULL << (MySqlParser::SUPER - 590))
            | (1ULL << (MySqlParser::PRIVILEGES - 590))
            | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
            | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
            | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
            | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
            | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
            | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
            | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
            | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
            | (1ULL << (MySqlParser::FIREWALL_USER - 590))
            | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
            | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
            | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
            | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
            | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
            | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
            | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
            | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
            | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
            | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
            | (1ULL << (MySqlParser::SET_USER_ID - 590))
            | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
            | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
            | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
            | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
            | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
            | (1ULL << (MySqlParser::ARMSCII8 - 590))
            | (1ULL << (MySqlParser::ASCII - 590))
            | (1ULL << (MySqlParser::BIG5 - 590))
            | (1ULL << (MySqlParser::CP1250 - 590))
            | (1ULL << (MySqlParser::CP1251 - 590))
            | (1ULL << (MySqlParser::CP1256 - 590))
            | (1ULL << (MySqlParser::CP1257 - 590))
            | (1ULL << (MySqlParser::CP850 - 590))
            | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
            | (1ULL << (MySqlParser::CP932 - 654))
            | (1ULL << (MySqlParser::DEC8 - 654))
            | (1ULL << (MySqlParser::EUCJPMS - 654))
            | (1ULL << (MySqlParser::EUCKR - 654))
            | (1ULL << (MySqlParser::GB2312 - 654))
            | (1ULL << (MySqlParser::GBK - 654))
            | (1ULL << (MySqlParser::GEOSTD8 - 654))
            | (1ULL << (MySqlParser::GREEK - 654))
            | (1ULL << (MySqlParser::HEBREW - 654))
            | (1ULL << (MySqlParser::HP8 - 654))
            | (1ULL << (MySqlParser::KEYBCS2 - 654))
            | (1ULL << (MySqlParser::KOI8R - 654))
            | (1ULL << (MySqlParser::KOI8U - 654))
            | (1ULL << (MySqlParser::LATIN1 - 654))
            | (1ULL << (MySqlParser::LATIN2 - 654))
            | (1ULL << (MySqlParser::LATIN5 - 654))
            | (1ULL << (MySqlParser::LATIN7 - 654))
            | (1ULL << (MySqlParser::MACCE - 654))
            | (1ULL << (MySqlParser::MACROMAN - 654))
            | (1ULL << (MySqlParser::SJIS - 654))
            | (1ULL << (MySqlParser::SWE7 - 654))
            | (1ULL << (MySqlParser::TIS620 - 654))
            | (1ULL << (MySqlParser::UCS2 - 654))
            | (1ULL << (MySqlParser::UJIS - 654))
            | (1ULL << (MySqlParser::UTF16 - 654))
            | (1ULL << (MySqlParser::UTF16LE - 654))
            | (1ULL << (MySqlParser::UTF32 - 654))
            | (1ULL << (MySqlParser::UTF8 - 654))
            | (1ULL << (MySqlParser::UTF8MB3 - 654))
            | (1ULL << (MySqlParser::UTF8MB4 - 654))
            | (1ULL << (MySqlParser::ARCHIVE - 654))
            | (1ULL << (MySqlParser::BLACKHOLE - 654))
            | (1ULL << (MySqlParser::CSV - 654))
            | (1ULL << (MySqlParser::FEDERATED - 654))
            | (1ULL << (MySqlParser::INNODB - 654))
            | (1ULL << (MySqlParser::MEMORY - 654))
            | (1ULL << (MySqlParser::MRG_MYISAM - 654))
            | (1ULL << (MySqlParser::MYISAM - 654))
            | (1ULL << (MySqlParser::NDB - 654))
            | (1ULL << (MySqlParser::NDBCLUSTER - 654))
            | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
            | (1ULL << (MySqlParser::TOKUDB - 654))
            | (1ULL << (MySqlParser::REPEATABLE - 654))
            | (1ULL << (MySqlParser::COMMITTED - 654))
            | (1ULL << (MySqlParser::UNCOMMITTED - 654))
            | (1ULL << (MySqlParser::SERIALIZABLE - 654))
            | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
            | (1ULL << (MySqlParser::LINESTRING - 654))
            | (1ULL << (MySqlParser::MULTILINESTRING - 654))
            | (1ULL << (MySqlParser::MULTIPOINT - 654))
            | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
            | (1ULL << (MySqlParser::POINT - 654))
            | (1ULL << (MySqlParser::POLYGON - 654))
            | (1ULL << (MySqlParser::ABS - 654))
            | (1ULL << (MySqlParser::ACOS - 654))
            | (1ULL << (MySqlParser::ADDDATE - 654))
            | (1ULL << (MySqlParser::ADDTIME - 654))
            | (1ULL << (MySqlParser::AES_DECRYPT - 654))
            | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
            | (1ULL << (MySqlParser::AREA - 654))
            | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
            | (1ULL << (MySqlParser::ASTEXT - 718))
            | (1ULL << (MySqlParser::ASWKB - 718))
            | (1ULL << (MySqlParser::ASWKT - 718))
            | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
            | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
            | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
            | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
            | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
            | (1ULL << (MySqlParser::ATAN - 718))
            | (1ULL << (MySqlParser::ATAN2 - 718))
            | (1ULL << (MySqlParser::BENCHMARK - 718))
            | (1ULL << (MySqlParser::BIN - 718))
            | (1ULL << (MySqlParser::BIT_COUNT - 718))
            | (1ULL << (MySqlParser::BIT_LENGTH - 718))
            | (1ULL << (MySqlParser::BUFFER - 718))
            | (1ULL << (MySqlParser::CATALOG_NAME - 718))
            | (1ULL << (MySqlParser::CEIL - 718))
            | (1ULL << (MySqlParser::CEILING - 718))
            | (1ULL << (MySqlParser::CENTROID - 718))
            | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
            | (1ULL << (MySqlParser::CHARSET - 718))
            | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
            | (1ULL << (MySqlParser::COERCIBILITY - 718))
            | (1ULL << (MySqlParser::COLLATION - 718))
            | (1ULL << (MySqlParser::COMPRESS - 718))
            | (1ULL << (MySqlParser::CONCAT - 718))
            | (1ULL << (MySqlParser::CONCAT_WS - 718))
            | (1ULL << (MySqlParser::CONNECTION_ID - 718))
            | (1ULL << (MySqlParser::CONV - 718))
            | (1ULL << (MySqlParser::CONVERT_TZ - 718))
            | (1ULL << (MySqlParser::COS - 718))
            | (1ULL << (MySqlParser::COT - 718))
            | (1ULL << (MySqlParser::CRC32 - 718))
            | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
            | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
            | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
            | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
            | (1ULL << (MySqlParser::CROSSES - 718))
            | (1ULL << (MySqlParser::DATEDIFF - 718))
            | (1ULL << (MySqlParser::DATE_FORMAT - 718))
            | (1ULL << (MySqlParser::DAYNAME - 718))
            | (1ULL << (MySqlParser::DAYOFMONTH - 718))
            | (1ULL << (MySqlParser::DAYOFWEEK - 718))
            | (1ULL << (MySqlParser::DAYOFYEAR - 718))
            | (1ULL << (MySqlParser::DECODE - 718))
            | (1ULL << (MySqlParser::DEGREES - 718))
            | (1ULL << (MySqlParser::DES_DECRYPT - 718))
            | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
            | (1ULL << (MySqlParser::DIMENSION - 718))
            | (1ULL << (MySqlParser::DISJOINT - 718))
            | (1ULL << (MySqlParser::ELT - 718))
            | (1ULL << (MySqlParser::ENCODE - 718))
            | (1ULL << (MySqlParser::ENCRYPT - 718))
            | (1ULL << (MySqlParser::ENDPOINT - 718))
            | (1ULL << (MySqlParser::ENVELOPE - 718))
            | (1ULL << (MySqlParser::EQUALS - 718))
            | (1ULL << (MySqlParser::EXP - 718))
            | (1ULL << (MySqlParser::EXPORT_SET - 718))
            | (1ULL << (MySqlParser::EXTERIORRING - 718))
            | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
            | (1ULL << (MySqlParser::FIELD - 718))
            | (1ULL << (MySqlParser::FIND_IN_SET - 718))
            | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
            | (1ULL << (MySqlParser::FOUND_ROWS - 782))
            | (1ULL << (MySqlParser::FROM_BASE64 - 782))
            | (1ULL << (MySqlParser::FROM_DAYS - 782))
            | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
            | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
            | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
            | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
            | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
            | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
            | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
            | (1ULL << (MySqlParser::GEOMETRYN - 782))
            | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
            | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
            | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
            | (1ULL << (MySqlParser::GET_FORMAT - 782))
            | (1ULL << (MySqlParser::GET_LOCK - 782))
            | (1ULL << (MySqlParser::GLENGTH - 782))
            | (1ULL << (MySqlParser::GREATEST - 782))
            | (1ULL << (MySqlParser::GTID_SUBSET - 782))
            | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
            | (1ULL << (MySqlParser::HEX - 782))
            | (1ULL << (MySqlParser::IFNULL - 782))
            | (1ULL << (MySqlParser::INET6_ATON - 782))
            | (1ULL << (MySqlParser::INET6_NTOA - 782))
            | (1ULL << (MySqlParser::INET_ATON - 782))
            | (1ULL << (MySqlParser::INET_NTOA - 782))
            | (1ULL << (MySqlParser::INSTR - 782))
            | (1ULL << (MySqlParser::INTERIORRINGN - 782))
            | (1ULL << (MySqlParser::INTERSECTS - 782))
            | (1ULL << (MySqlParser::ISCLOSED - 782))
            | (1ULL << (MySqlParser::ISEMPTY - 782))
            | (1ULL << (MySqlParser::ISNULL - 782))
            | (1ULL << (MySqlParser::ISSIMPLE - 782))
            | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
            | (1ULL << (MySqlParser::IS_IPV4 - 782))
            | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
            | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
            | (1ULL << (MySqlParser::IS_IPV6 - 782))
            | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
            | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
            | (1ULL << (MySqlParser::LCASE - 782))
            | (1ULL << (MySqlParser::LEAST - 782))
            | (1ULL << (MySqlParser::LENGTH - 782))
            | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
            | (1ULL << (MySqlParser::LINEFROMWKB - 782))
            | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
            | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
            | (1ULL << (MySqlParser::LN - 782))
            | (1ULL << (MySqlParser::LOAD_FILE - 782))
            | (1ULL << (MySqlParser::LOCATE - 782))
            | (1ULL << (MySqlParser::LOG - 782))
            | (1ULL << (MySqlParser::LOG10 - 782))
            | (1ULL << (MySqlParser::LOG2 - 782))
            | (1ULL << (MySqlParser::LOWER - 782))
            | (1ULL << (MySqlParser::LPAD - 782))
            | (1ULL << (MySqlParser::LTRIM - 782))
            | (1ULL << (MySqlParser::MAKEDATE - 782))
            | (1ULL << (MySqlParser::MAKETIME - 782))
            | (1ULL << (MySqlParser::MAKE_SET - 782))
            | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
            | (1ULL << (MySqlParser::MBRCONTAINS - 782))
            | (1ULL << (MySqlParser::MBRDISJOINT - 782))
            | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
            | (1ULL << (MySqlParser::MBROVERLAPS - 846))
            | (1ULL << (MySqlParser::MBRTOUCHES - 846))
            | (1ULL << (MySqlParser::MBRWITHIN - 846))
            | (1ULL << (MySqlParser::MD5 - 846))
            | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
            | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
            | (1ULL << (MySqlParser::MONTHNAME - 846))
            | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
            | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
            | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
            | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
            | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
            | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
            | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
            | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
            | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
            | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
            | (1ULL << (MySqlParser::NAME_CONST - 846))
            | (1ULL << (MySqlParser::NULLIF - 846))
            | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
            | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
            | (1ULL << (MySqlParser::NUMPOINTS - 846))
            | (1ULL << (MySqlParser::OCT - 846))
            | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
            | (1ULL << (MySqlParser::ORD - 846))
            | (1ULL << (MySqlParser::OVERLAPS - 846))
            | (1ULL << (MySqlParser::PERIOD_ADD - 846))
            | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
            | (1ULL << (MySqlParser::PI - 846))
            | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
            | (1ULL << (MySqlParser::POINTFROMWKB - 846))
            | (1ULL << (MySqlParser::POINTN - 846))
            | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
            | (1ULL << (MySqlParser::POLYFROMWKB - 846))
            | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
            | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
            | (1ULL << (MySqlParser::POW - 846))
            | (1ULL << (MySqlParser::POWER - 846))
            | (1ULL << (MySqlParser::QUOTE - 846))
            | (1ULL << (MySqlParser::RADIANS - 846))
            | (1ULL << (MySqlParser::RAND - 846))
            | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
            | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
            | (1ULL << (MySqlParser::REVERSE - 846))
            | (1ULL << (MySqlParser::ROUND - 846))
            | (1ULL << (MySqlParser::ROW_COUNT - 846))
            | (1ULL << (MySqlParser::RPAD - 846))
            | (1ULL << (MySqlParser::RTRIM - 846))
            | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
            | (1ULL << (MySqlParser::SESSION_USER - 846))
            | (1ULL << (MySqlParser::SHA - 846))
            | (1ULL << (MySqlParser::SHA1 - 846))
            | (1ULL << (MySqlParser::SHA2 - 846))
            | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
            | (1ULL << (MySqlParser::SIGN - 846))
            | (1ULL << (MySqlParser::SIN - 846))
            | (1ULL << (MySqlParser::SLEEP - 846))
            | (1ULL << (MySqlParser::SOUNDEX - 846))
            | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
            | (1ULL << (MySqlParser::SQRT - 846))
            | (1ULL << (MySqlParser::SRID - 846))
            | (1ULL << (MySqlParser::STARTPOINT - 846))
            | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
            | (1ULL << (MySqlParser::ST_AREA - 910))
            | (1ULL << (MySqlParser::ST_ASBINARY - 910))
            | (1ULL << (MySqlParser::ST_ASTEXT - 910))
            | (1ULL << (MySqlParser::ST_ASWKB - 910))
            | (1ULL << (MySqlParser::ST_ASWKT - 910))
            | (1ULL << (MySqlParser::ST_BUFFER - 910))
            | (1ULL << (MySqlParser::ST_CENTROID - 910))
            | (1ULL << (MySqlParser::ST_CONTAINS - 910))
            | (1ULL << (MySqlParser::ST_CROSSES - 910))
            | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
            | (1ULL << (MySqlParser::ST_DIMENSION - 910))
            | (1ULL << (MySqlParser::ST_DISJOINT - 910))
            | (1ULL << (MySqlParser::ST_DISTANCE - 910))
            | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
            | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
            | (1ULL << (MySqlParser::ST_EQUALS - 910))
            | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
            | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
            | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
            | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
            | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
            | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
            | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
            | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
            | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
            | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
            | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
            | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
            | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
            | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
            | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
            | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_POINTN - 910))
            | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
            | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
            | (1ULL << (MySqlParser::ST_SRID - 910))
            | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
            | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
            | (1ULL << (MySqlParser::ST_TOUCHES - 910))
            | (1ULL << (MySqlParser::ST_UNION - 910))
            | (1ULL << (MySqlParser::ST_WITHIN - 910))
            | (1ULL << (MySqlParser::ST_X - 910))
            | (1ULL << (MySqlParser::ST_Y - 910))
            | (1ULL << (MySqlParser::SUBDATE - 910))
            | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
            | (1ULL << (MySqlParser::SUBTIME - 910))
            | (1ULL << (MySqlParser::SYSTEM_USER - 910))
            | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
            | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
            | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
            | (1ULL << (MySqlParser::TIME_FORMAT - 974))
            | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
            | (1ULL << (MySqlParser::TOUCHES - 974))
            | (1ULL << (MySqlParser::TO_BASE64 - 974))
            | (1ULL << (MySqlParser::TO_DAYS - 974))
            | (1ULL << (MySqlParser::TO_SECONDS - 974))
            | (1ULL << (MySqlParser::UCASE - 974))
            | (1ULL << (MySqlParser::UNCOMPRESS - 974))
            | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
            | (1ULL << (MySqlParser::UNHEX - 974))
            | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
            | (1ULL << (MySqlParser::UPDATEXML - 974))
            | (1ULL << (MySqlParser::UPPER - 974))
            | (1ULL << (MySqlParser::UUID - 974))
            | (1ULL << (MySqlParser::UUID_SHORT - 974))
            | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
            | (1ULL << (MySqlParser::VERSION - 974))
            | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
            | (1ULL << (MySqlParser::WEEKDAY - 974))
            | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
            | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
            | (1ULL << (MySqlParser::WITHIN - 974))
            | (1ULL << (MySqlParser::YEARWEEK - 974))
            | (1ULL << (MySqlParser::Y_FUNCTION - 974))
            | (1ULL << (MySqlParser::X_FUNCTION - 974))
            | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
            | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
            | (1ULL << (MySqlParser::ID - 1040))
            | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
            setState(1467);
            dynamic_cast<CheckColumnConstraintContext *>(_localctx)->name = uid();
          }
        }
        setState(1472);
        match(MySqlParser::CHECK);
        setState(1473);
        match(MySqlParser::LR_BRACKET);
        setState(1474);
        expression(0);
        setState(1475);
        match(MySqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableConstraintContext ------------------------------------------------------------------

MySqlParser::TableConstraintContext::TableConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::TableConstraintContext::getRuleIndex() const {
  return MySqlParser::RuleTableConstraint;
}

void MySqlParser::TableConstraintContext::copyFrom(TableConstraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UniqueKeyTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::UniqueKeyTableConstraintContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::UniqueKeyTableConstraintContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::UniqueKeyTableConstraintContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::IndexTypeContext* MySqlParser::UniqueKeyTableConstraintContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::UniqueKeyTableConstraintContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::UniqueKeyTableConstraintContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

std::vector<MySqlParser::UidContext *> MySqlParser::UniqueKeyTableConstraintContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::UniqueKeyTableConstraintContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::UniqueKeyTableConstraintContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::UniqueKeyTableConstraintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::UniqueKeyTableConstraintContext::UniqueKeyTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }


//----------------- CheckTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CheckTableConstraintContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::CheckTableConstraintContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::CheckTableConstraintContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::CheckTableConstraintContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CheckTableConstraintContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::UidContext* MySqlParser::CheckTableConstraintContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::CheckTableConstraintContext::CheckTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }


//----------------- PrimaryKeyTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PrimaryKeyTableConstraintContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

tree::TerminalNode* MySqlParser::PrimaryKeyTableConstraintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::PrimaryKeyTableConstraintContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::PrimaryKeyTableConstraintContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::IndexTypeContext* MySqlParser::PrimaryKeyTableConstraintContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::PrimaryKeyTableConstraintContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::PrimaryKeyTableConstraintContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

std::vector<MySqlParser::UidContext *> MySqlParser::PrimaryKeyTableConstraintContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::PrimaryKeyTableConstraintContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::PrimaryKeyTableConstraintContext::PrimaryKeyTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }


//----------------- ForeignKeyTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ForeignKeyTableConstraintContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::ForeignKeyTableConstraintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::ForeignKeyTableConstraintContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

MySqlParser::ReferenceDefinitionContext* MySqlParser::ForeignKeyTableConstraintContext::referenceDefinition() {
  return getRuleContext<MySqlParser::ReferenceDefinitionContext>(0);
}

tree::TerminalNode* MySqlParser::ForeignKeyTableConstraintContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::ForeignKeyTableConstraintContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::ForeignKeyTableConstraintContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::ForeignKeyTableConstraintContext::ForeignKeyTableConstraintContext(TableConstraintContext *ctx) { copyFrom(ctx); }


MySqlParser::TableConstraintContext* MySqlParser::tableConstraint() {
  TableConstraintContext *_localctx = _tracker.createInstance<TableConstraintContext>(_ctx, getState());
  enterRule(_localctx, 82, MySqlParser::RuleTableConstraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1548);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySqlParser::PrimaryKeyTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1483);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1479);
        match(MySqlParser::CONSTRAINT);
        setState(1481);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(1480);
          dynamic_cast<PrimaryKeyTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1485);
      match(MySqlParser::PRIMARY);
      setState(1486);
      match(MySqlParser::KEY);
      setState(1488);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(1487);
        dynamic_cast<PrimaryKeyTableConstraintContext *>(_localctx)->index = uid();
      }
      setState(1491);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(1490);
        indexType();
      }
      setState(1493);
      indexColumnNames();
      setState(1497);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

      || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
        setState(1494);
        indexOption();
        setState(1499);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySqlParser::UniqueKeyTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1504);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1500);
        match(MySqlParser::CONSTRAINT);
        setState(1502);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(1501);
          dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1506);
      match(MySqlParser::UNIQUE);
      setState(1508);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(1507);
        dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
          dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1511);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(1510);
        dynamic_cast<UniqueKeyTableConstraintContext *>(_localctx)->index = uid();
      }
      setState(1514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(1513);
        indexType();
      }
      setState(1516);
      indexColumnNames();
      setState(1520);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

      || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
        setState(1517);
        indexOption();
        setState(1522);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySqlParser::ForeignKeyTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1527);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1523);
        match(MySqlParser::CONSTRAINT);
        setState(1525);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(1524);
          dynamic_cast<ForeignKeyTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1529);
      match(MySqlParser::FOREIGN);
      setState(1530);
      match(MySqlParser::KEY);
      setState(1532);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(1531);
        dynamic_cast<ForeignKeyTableConstraintContext *>(_localctx)->index = uid();
      }
      setState(1534);
      indexColumnNames();
      setState(1535);
      referenceDefinition();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<TableConstraintContext *>(_tracker.createInstance<MySqlParser::CheckTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1541);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1537);
        match(MySqlParser::CONSTRAINT);
        setState(1539);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(1538);
          dynamic_cast<CheckTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(1543);
      match(MySqlParser::CHECK);
      setState(1544);
      match(MySqlParser::LR_BRACKET);
      setState(1545);
      expression(0);
      setState(1546);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceDefinitionContext ------------------------------------------------------------------

MySqlParser::ReferenceDefinitionContext::ReferenceDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ReferenceDefinitionContext::REFERENCES() {
  return getToken(MySqlParser::REFERENCES, 0);
}

MySqlParser::TableNameContext* MySqlParser::ReferenceDefinitionContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::ReferenceDefinitionContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::ReferenceDefinitionContext::MATCH() {
  return getToken(MySqlParser::MATCH, 0);
}

MySqlParser::ReferenceActionContext* MySqlParser::ReferenceDefinitionContext::referenceAction() {
  return getRuleContext<MySqlParser::ReferenceActionContext>(0);
}

tree::TerminalNode* MySqlParser::ReferenceDefinitionContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

tree::TerminalNode* MySqlParser::ReferenceDefinitionContext::PARTIAL() {
  return getToken(MySqlParser::PARTIAL, 0);
}

tree::TerminalNode* MySqlParser::ReferenceDefinitionContext::SIMPLE() {
  return getToken(MySqlParser::SIMPLE, 0);
}


size_t MySqlParser::ReferenceDefinitionContext::getRuleIndex() const {
  return MySqlParser::RuleReferenceDefinition;
}


MySqlParser::ReferenceDefinitionContext* MySqlParser::referenceDefinition() {
  ReferenceDefinitionContext *_localctx = _tracker.createInstance<ReferenceDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 84, MySqlParser::RuleReferenceDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1550);
    match(MySqlParser::REFERENCES);
    setState(1551);
    tableName();
    setState(1553);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(1552);
      indexColumnNames();
      break;
    }

    }
    setState(1557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MATCH) {
      setState(1555);
      match(MySqlParser::MATCH);
      setState(1556);
      dynamic_cast<ReferenceDefinitionContext *>(_localctx)->matchType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FULL || _la == MySqlParser::PARTIAL

      || _la == MySqlParser::SIMPLE)) {
        dynamic_cast<ReferenceDefinitionContext *>(_localctx)->matchType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1560);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1559);
      referenceAction();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceActionContext ------------------------------------------------------------------

MySqlParser::ReferenceActionContext::ReferenceActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::ReferenceActionContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::ReferenceActionContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::ReferenceActionContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

std::vector<MySqlParser::ReferenceControlTypeContext *> MySqlParser::ReferenceActionContext::referenceControlType() {
  return getRuleContexts<MySqlParser::ReferenceControlTypeContext>();
}

MySqlParser::ReferenceControlTypeContext* MySqlParser::ReferenceActionContext::referenceControlType(size_t i) {
  return getRuleContext<MySqlParser::ReferenceControlTypeContext>(i);
}

tree::TerminalNode* MySqlParser::ReferenceActionContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}


size_t MySqlParser::ReferenceActionContext::getRuleIndex() const {
  return MySqlParser::RuleReferenceAction;
}


MySqlParser::ReferenceActionContext* MySqlParser::referenceAction() {
  ReferenceActionContext *_localctx = _tracker.createInstance<ReferenceActionContext>(_ctx, getState());
  enterRule(_localctx, 86, MySqlParser::RuleReferenceAction);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1578);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1562);
      match(MySqlParser::ON);
      setState(1563);
      match(MySqlParser::DELETE);
      setState(1564);
      dynamic_cast<ReferenceActionContext *>(_localctx)->onDelete = referenceControlType();
      setState(1568);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
      case 1: {
        setState(1565);
        match(MySqlParser::ON);
        setState(1566);
        match(MySqlParser::UPDATE);
        setState(1567);
        dynamic_cast<ReferenceActionContext *>(_localctx)->onUpdate = referenceControlType();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1570);
      match(MySqlParser::ON);
      setState(1571);
      match(MySqlParser::UPDATE);
      setState(1572);
      dynamic_cast<ReferenceActionContext *>(_localctx)->onUpdate = referenceControlType();
      setState(1576);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
      case 1: {
        setState(1573);
        match(MySqlParser::ON);
        setState(1574);
        match(MySqlParser::DELETE);
        setState(1575);
        dynamic_cast<ReferenceActionContext *>(_localctx)->onDelete = referenceControlType();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceControlTypeContext ------------------------------------------------------------------

MySqlParser::ReferenceControlTypeContext::ReferenceControlTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ReferenceControlTypeContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

tree::TerminalNode* MySqlParser::ReferenceControlTypeContext::CASCADE() {
  return getToken(MySqlParser::CASCADE, 0);
}

tree::TerminalNode* MySqlParser::ReferenceControlTypeContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::ReferenceControlTypeContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ReferenceControlTypeContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::ReferenceControlTypeContext::ACTION() {
  return getToken(MySqlParser::ACTION, 0);
}


size_t MySqlParser::ReferenceControlTypeContext::getRuleIndex() const {
  return MySqlParser::RuleReferenceControlType;
}


MySqlParser::ReferenceControlTypeContext* MySqlParser::referenceControlType() {
  ReferenceControlTypeContext *_localctx = _tracker.createInstance<ReferenceControlTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, MySqlParser::RuleReferenceControlType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1586);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::RESTRICT: {
        enterOuterAlt(_localctx, 1);
        setState(1580);
        match(MySqlParser::RESTRICT);
        break;
      }

      case MySqlParser::CASCADE: {
        enterOuterAlt(_localctx, 2);
        setState(1581);
        match(MySqlParser::CASCADE);
        break;
      }

      case MySqlParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1582);
        match(MySqlParser::SET);
        setState(1583);
        match(MySqlParser::NULL_LITERAL);
        break;
      }

      case MySqlParser::NO: {
        enterOuterAlt(_localctx, 4);
        setState(1584);
        match(MySqlParser::NO);
        setState(1585);
        match(MySqlParser::ACTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexColumnDefinitionContext ------------------------------------------------------------------

MySqlParser::IndexColumnDefinitionContext::IndexColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::IndexColumnDefinitionContext::getRuleIndex() const {
  return MySqlParser::RuleIndexColumnDefinition;
}

void MySqlParser::IndexColumnDefinitionContext::copyFrom(IndexColumnDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpecialIndexDeclarationContext ------------------------------------------------------------------

MySqlParser::IndexColumnNamesContext* MySqlParser::SpecialIndexDeclarationContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::SpecialIndexDeclarationContext::FULLTEXT() {
  return getToken(MySqlParser::FULLTEXT, 0);
}

tree::TerminalNode* MySqlParser::SpecialIndexDeclarationContext::SPATIAL() {
  return getToken(MySqlParser::SPATIAL, 0);
}

MySqlParser::UidContext* MySqlParser::SpecialIndexDeclarationContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::SpecialIndexDeclarationContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::SpecialIndexDeclarationContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

tree::TerminalNode* MySqlParser::SpecialIndexDeclarationContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::SpecialIndexDeclarationContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::SpecialIndexDeclarationContext::SpecialIndexDeclarationContext(IndexColumnDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- SimpleIndexDeclarationContext ------------------------------------------------------------------

MySqlParser::IndexColumnNamesContext* MySqlParser::SimpleIndexDeclarationContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::SimpleIndexDeclarationContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::SimpleIndexDeclarationContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::UidContext* MySqlParser::SimpleIndexDeclarationContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::IndexTypeContext* MySqlParser::SimpleIndexDeclarationContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::SimpleIndexDeclarationContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::SimpleIndexDeclarationContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

MySqlParser::SimpleIndexDeclarationContext::SimpleIndexDeclarationContext(IndexColumnDefinitionContext *ctx) { copyFrom(ctx); }


MySqlParser::IndexColumnDefinitionContext* MySqlParser::indexColumnDefinition() {
  IndexColumnDefinitionContext *_localctx = _tracker.createInstance<IndexColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 90, MySqlParser::RuleIndexColumnDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1616);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::INDEX:
      case MySqlParser::KEY: {
        _localctx = dynamic_cast<IndexColumnDefinitionContext *>(_tracker.createInstance<MySqlParser::SimpleIndexDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1588);
        dynamic_cast<SimpleIndexDeclarationContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
          dynamic_cast<SimpleIndexDeclarationContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(1589);
          uid();
        }
        setState(1593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::USING) {
          setState(1592);
          indexType();
        }
        setState(1595);
        indexColumnNames();
        setState(1599);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::USING

        || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

        || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
          setState(1596);
          indexOption();
          setState(1601);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::FULLTEXT:
      case MySqlParser::SPATIAL: {
        _localctx = dynamic_cast<IndexColumnDefinitionContext *>(_tracker.createInstance<MySqlParser::SpecialIndexDeclarationContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1602);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1604);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY) {
          setState(1603);
          dynamic_cast<SpecialIndexDeclarationContext *>(_localctx)->indexFormat = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::INDEX

          || _la == MySqlParser::KEY)) {
            dynamic_cast<SpecialIndexDeclarationContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(1607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(1606);
          uid();
        }
        setState(1609);
        indexColumnNames();
        setState(1613);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::USING

        || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

        || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
          setState(1610);
          indexOption();
          setState(1615);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableOptionContext ------------------------------------------------------------------

MySqlParser::TableOptionContext::TableOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::TableOptionContext::getRuleIndex() const {
  return MySqlParser::RuleTableOption;
}

void MySqlParser::TableOptionContext::copyFrom(TableOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableOptionEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionEngineContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::TableOptionEngineContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionEngineContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionEngineContext::TableOptionEngineContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionMaxRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionMaxRowsContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::TableOptionMaxRowsContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionMaxRowsContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionMaxRowsContext::TableOptionMaxRowsContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionCollateContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionCollateContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::TableOptionCollateContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionCollateContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCollateContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionCollateContext::TableOptionCollateContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionPersistentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionPersistentContext::STATS_PERSISTENT() {
  return getToken(MySqlParser::STATS_PERSISTENT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPersistentContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPersistentContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPersistentContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPersistentContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionPersistentContext::TableOptionPersistentContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidContext* MySqlParser::TableOptionTablespaceContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::TablespaceStorageContext* MySqlParser::TableOptionTablespaceContext::tablespaceStorage() {
  return getRuleContext<MySqlParser::TablespaceStorageContext>(0);
}

MySqlParser::TableOptionTablespaceContext::TableOptionTablespaceContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionPackKeysContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionPackKeysContext::PACK_KEYS() {
  return getToken(MySqlParser::PACK_KEYS, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPackKeysContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPackKeysContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPackKeysContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPackKeysContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionPackKeysContext::TableOptionPackKeysContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionPasswordContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionPasswordContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPasswordContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionPasswordContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionPasswordContext::TableOptionPasswordContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionUnionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionUnionContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

tree::TerminalNode* MySqlParser::TableOptionUnionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::TablesContext* MySqlParser::TableOptionUnionContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionUnionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::TableOptionUnionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionUnionContext::TableOptionUnionContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionSamplePageContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionSamplePageContext::STATS_SAMPLE_PAGES() {
  return getToken(MySqlParser::STATS_SAMPLE_PAGES, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::TableOptionSamplePageContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionSamplePageContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionSamplePageContext::TableOptionSamplePageContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionCharsetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCharsetContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCharsetContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::TableOptionCharsetContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::TableOptionCharsetContext::DEFAULT() {
  return getTokens(MySqlParser::DEFAULT);
}

tree::TerminalNode* MySqlParser::TableOptionCharsetContext::DEFAULT(size_t i) {
  return getToken(MySqlParser::DEFAULT, i);
}

tree::TerminalNode* MySqlParser::TableOptionCharsetContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionCharsetContext::TableOptionCharsetContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionIndexDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionIndexDirectoryContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::TableOptionIndexDirectoryContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::TableOptionIndexDirectoryContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionIndexDirectoryContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionIndexDirectoryContext::TableOptionIndexDirectoryContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionKeyBlockSizeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionKeyBlockSizeContext::KEY_BLOCK_SIZE() {
  return getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
}

MySqlParser::FileSizeLiteralContext* MySqlParser::TableOptionKeyBlockSizeContext::fileSizeLiteral() {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionKeyBlockSizeContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionKeyBlockSizeContext::TableOptionKeyBlockSizeContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionEncryptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionEncryptionContext::ENCRYPTION() {
  return getToken(MySqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* MySqlParser::TableOptionEncryptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionEncryptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionEncryptionContext::TableOptionEncryptionContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionDataDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionDataDirectoryContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::TableOptionDataDirectoryContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::TableOptionDataDirectoryContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionDataDirectoryContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionDataDirectoryContext::TableOptionDataDirectoryContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionRecalculationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionRecalculationContext::STATS_AUTO_RECALC() {
  return getToken(MySqlParser::STATS_AUTO_RECALC, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRecalculationContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRecalculationContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRecalculationContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRecalculationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionRecalculationContext::TableOptionRecalculationContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionAutoIncrementContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionAutoIncrementContext::AUTO_INCREMENT() {
  return getToken(MySqlParser::AUTO_INCREMENT, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::TableOptionAutoIncrementContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionAutoIncrementContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionAutoIncrementContext::TableOptionAutoIncrementContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionChecksumContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionChecksumContext::CHECKSUM() {
  return getToken(MySqlParser::CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::TableOptionChecksumContext::PAGE_CHECKSUM() {
  return getToken(MySqlParser::PAGE_CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::TableOptionChecksumContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionChecksumContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionChecksumContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionChecksumContext::TableOptionChecksumContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionDelayContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionDelayContext::DELAY_KEY_WRITE() {
  return getToken(MySqlParser::DELAY_KEY_WRITE, 0);
}

tree::TerminalNode* MySqlParser::TableOptionDelayContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionDelayContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionDelayContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionDelayContext::TableOptionDelayContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionConnectionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionConnectionContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

tree::TerminalNode* MySqlParser::TableOptionConnectionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionConnectionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionConnectionContext::TableOptionConnectionContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionCommentContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCommentContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCommentContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionCommentContext::TableOptionCommentContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionAverageContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionAverageContext::AVG_ROW_LENGTH() {
  return getToken(MySqlParser::AVG_ROW_LENGTH, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::TableOptionAverageContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionAverageContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionAverageContext::TableOptionAverageContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionRowFormatContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::ROW_FORMAT() {
  return getToken(MySqlParser::ROW_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::DYNAMIC() {
  return getToken(MySqlParser::DYNAMIC, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::COMPRESSED() {
  return getToken(MySqlParser::COMPRESSED, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::REDUNDANT() {
  return getToken(MySqlParser::REDUNDANT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::COMPACT() {
  return getToken(MySqlParser::COMPACT, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

tree::TerminalNode* MySqlParser::TableOptionRowFormatContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionRowFormatContext::TableOptionRowFormatContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionCompressionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionCompressionContext::COMPRESSION() {
  return getToken(MySqlParser::COMPRESSION, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCompressionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCompressionContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

tree::TerminalNode* MySqlParser::TableOptionCompressionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionCompressionContext::TableOptionCompressionContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionInsertMethodContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionInsertMethodContext::INSERT_METHOD() {
  return getToken(MySqlParser::INSERT_METHOD, 0);
}

tree::TerminalNode* MySqlParser::TableOptionInsertMethodContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::TableOptionInsertMethodContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::TableOptionInsertMethodContext::LAST() {
  return getToken(MySqlParser::LAST, 0);
}

tree::TerminalNode* MySqlParser::TableOptionInsertMethodContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionInsertMethodContext::TableOptionInsertMethodContext(TableOptionContext *ctx) { copyFrom(ctx); }


//----------------- TableOptionMinRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableOptionMinRowsContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::TableOptionMinRowsContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::TableOptionMinRowsContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::TableOptionMinRowsContext::TableOptionMinRowsContext(TableOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::TableOptionContext* MySqlParser::tableOption() {
  TableOptionContext *_localctx = _tracker.createInstance<TableOptionContext>(_ctx, getState());
  enterRule(_localctx, 92, MySqlParser::RuleTableOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1762);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionEngineContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1618);
      match(MySqlParser::ENGINE);
      setState(1620);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1619);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1622);
      engineName();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionAutoIncrementContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1623);
      match(MySqlParser::AUTO_INCREMENT);
      setState(1625);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1624);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1627);
      decimalLiteral();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionAverageContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1628);
      match(MySqlParser::AVG_ROW_LENGTH);
      setState(1630);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1629);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1632);
      decimalLiteral();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1634);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1633);
        match(MySqlParser::DEFAULT);
      }
      setState(1639);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CHARACTER: {
          setState(1636);
          match(MySqlParser::CHARACTER);
          setState(1637);
          match(MySqlParser::SET);
          break;
        }

        case MySqlParser::CHARSET: {
          setState(1638);
          match(MySqlParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1642);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1641);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1646);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::BINARY:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL: {
          setState(1644);
          charsetName();
          break;
        }

        case MySqlParser::DEFAULT: {
          setState(1645);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionChecksumContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1648);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CHECKSUM

      || _la == MySqlParser::PAGE_CHECKSUM)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1650);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1649);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1652);
      dynamic_cast<TableOptionChecksumContext *>(_localctx)->boolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionChecksumContext *>(_localctx)->boolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionCollateContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1654);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1653);
        match(MySqlParser::DEFAULT);
      }
      setState(1656);
      match(MySqlParser::COLLATE);
      setState(1658);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1657);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1660);
      collationName();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionCommentContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(1661);
      match(MySqlParser::COMMENT);
      setState(1663);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1662);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1665);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionCompressionContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(1666);
      match(MySqlParser::COMPRESSION);
      setState(1668);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1667);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1670);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::STRING_LITERAL

      || _la == MySqlParser::ID)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionConnectionContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(1671);
      match(MySqlParser::CONNECTION);
      setState(1673);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1672);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1675);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionDataDirectoryContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(1676);
      match(MySqlParser::DATA);
      setState(1677);
      match(MySqlParser::DIRECTORY);
      setState(1679);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1678);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1681);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionDelayContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(1682);
      match(MySqlParser::DELAY_KEY_WRITE);
      setState(1684);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1683);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1686);
      dynamic_cast<TableOptionDelayContext *>(_localctx)->boolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionDelayContext *>(_localctx)->boolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionEncryptionContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(1687);
      match(MySqlParser::ENCRYPTION);
      setState(1689);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1688);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1691);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionIndexDirectoryContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(1692);
      match(MySqlParser::INDEX);
      setState(1693);
      match(MySqlParser::DIRECTORY);
      setState(1695);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1694);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1697);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionInsertMethodContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(1698);
      match(MySqlParser::INSERT_METHOD);
      setState(1700);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1699);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1702);
      dynamic_cast<TableOptionInsertMethodContext *>(_localctx)->insertMethod = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FIRST

      || _la == MySqlParser::LAST || _la == MySqlParser::NO)) {
        dynamic_cast<TableOptionInsertMethodContext *>(_localctx)->insertMethod = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionKeyBlockSizeContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(1703);
      match(MySqlParser::KEY_BLOCK_SIZE);
      setState(1705);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1704);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1707);
      fileSizeLiteral();
      break;
    }

    case 16: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionMaxRowsContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(1708);
      match(MySqlParser::MAX_ROWS);
      setState(1710);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1709);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1712);
      decimalLiteral();
      break;
    }

    case 17: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionMinRowsContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(1713);
      match(MySqlParser::MIN_ROWS);
      setState(1715);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1714);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1717);
      decimalLiteral();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionPackKeysContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(1718);
      match(MySqlParser::PACK_KEYS);
      setState(1720);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1719);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1722);
      dynamic_cast<TableOptionPackKeysContext *>(_localctx)->extBoolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionPackKeysContext *>(_localctx)->extBoolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 19: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionPasswordContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(1723);
      match(MySqlParser::PASSWORD);
      setState(1725);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1724);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1727);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 20: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionRowFormatContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(1728);
      match(MySqlParser::ROW_FORMAT);
      setState(1730);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1729);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1732);
      dynamic_cast<TableOptionRowFormatContext *>(_localctx)->rowFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || ((((_la - 307) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 307)) & ((1ULL << (MySqlParser::COMPACT - 307))
        | (1ULL << (MySqlParser::COMPRESSED - 307))
        | (1ULL << (MySqlParser::DYNAMIC - 307))
        | (1ULL << (MySqlParser::FIXED - 307)))) != 0) || _la == MySqlParser::REDUNDANT || _la == MySqlParser::ID)) {
        dynamic_cast<TableOptionRowFormatContext *>(_localctx)->rowFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 21: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionRecalculationContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(1733);
      match(MySqlParser::STATS_AUTO_RECALC);
      setState(1735);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1734);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1737);
      dynamic_cast<TableOptionRecalculationContext *>(_localctx)->extBoolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionRecalculationContext *>(_localctx)->extBoolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 22: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionPersistentContext>(_localctx));
      enterOuterAlt(_localctx, 22);
      setState(1738);
      match(MySqlParser::STATS_PERSISTENT);
      setState(1740);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1739);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1742);
      dynamic_cast<TableOptionPersistentContext *>(_localctx)->extBoolValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
        dynamic_cast<TableOptionPersistentContext *>(_localctx)->extBoolValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 23: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionSamplePageContext>(_localctx));
      enterOuterAlt(_localctx, 23);
      setState(1743);
      match(MySqlParser::STATS_SAMPLE_PAGES);
      setState(1745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1744);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1747);
      decimalLiteral();
      break;
    }

    case 24: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 24);
      setState(1748);
      match(MySqlParser::TABLESPACE);
      setState(1749);
      uid();
      setState(1751);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
      case 1: {
        setState(1750);
        tablespaceStorage();
        break;
      }

      }
      break;
    }

    case 25: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 25);
      setState(1753);
      tablespaceStorage();
      break;
    }

    case 26: {
      _localctx = dynamic_cast<TableOptionContext *>(_tracker.createInstance<MySqlParser::TableOptionUnionContext>(_localctx));
      enterOuterAlt(_localctx, 26);
      setState(1754);
      match(MySqlParser::UNION);
      setState(1756);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1755);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1758);
      match(MySqlParser::LR_BRACKET);
      setState(1759);
      tables();
      setState(1760);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablespaceStorageContext ------------------------------------------------------------------

MySqlParser::TablespaceStorageContext::TablespaceStorageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TablespaceStorageContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::TablespaceStorageContext::DISK() {
  return getToken(MySqlParser::DISK, 0);
}

tree::TerminalNode* MySqlParser::TablespaceStorageContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::TablespaceStorageContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}


size_t MySqlParser::TablespaceStorageContext::getRuleIndex() const {
  return MySqlParser::RuleTablespaceStorage;
}


MySqlParser::TablespaceStorageContext* MySqlParser::tablespaceStorage() {
  TablespaceStorageContext *_localctx = _tracker.createInstance<TablespaceStorageContext>(_ctx, getState());
  enterRule(_localctx, 94, MySqlParser::RuleTablespaceStorage);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1764);
    match(MySqlParser::STORAGE);
    setState(1765);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::DISK || _la == MySqlParser::MEMORY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinitionsContext ------------------------------------------------------------------

MySqlParser::PartitionDefinitionsContext::PartitionDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionDefinitionsContext::BY() {
  return getTokens(MySqlParser::BY);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::BY(size_t i) {
  return getToken(MySqlParser::BY, i);
}

MySqlParser::PartitionFunctionDefinitionContext* MySqlParser::PartitionDefinitionsContext::partitionFunctionDefinition() {
  return getRuleContext<MySqlParser::PartitionFunctionDefinitionContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::PARTITIONS() {
  return getToken(MySqlParser::PARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::SUBPARTITION() {
  return getToken(MySqlParser::SUBPARTITION, 0);
}

MySqlParser::SubpartitionFunctionDefinitionContext* MySqlParser::PartitionDefinitionsContext::subpartitionFunctionDefinition() {
  return getRuleContext<MySqlParser::SubpartitionFunctionDefinitionContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::PartitionDefinitionContext *> MySqlParser::PartitionDefinitionsContext::partitionDefinition() {
  return getRuleContexts<MySqlParser::PartitionDefinitionContext>();
}

MySqlParser::PartitionDefinitionContext* MySqlParser::PartitionDefinitionsContext::partitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinitionContext>(i);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::PartitionDefinitionsContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::PartitionDefinitionsContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::SUBPARTITIONS() {
  return getToken(MySqlParser::SUBPARTITIONS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionDefinitionsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::PartitionDefinitionsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::PartitionDefinitionsContext::getRuleIndex() const {
  return MySqlParser::RulePartitionDefinitions;
}


MySqlParser::PartitionDefinitionsContext* MySqlParser::partitionDefinitions() {
  PartitionDefinitionsContext *_localctx = _tracker.createInstance<PartitionDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 96, MySqlParser::RulePartitionDefinitions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1767);
    match(MySqlParser::PARTITION);
    setState(1768);
    match(MySqlParser::BY);
    setState(1769);
    partitionFunctionDefinition();
    setState(1772);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITIONS) {
      setState(1770);
      match(MySqlParser::PARTITIONS);
      setState(1771);
      dynamic_cast<PartitionDefinitionsContext *>(_localctx)->count = decimalLiteral();
    }
    setState(1781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SUBPARTITION) {
      setState(1774);
      match(MySqlParser::SUBPARTITION);
      setState(1775);
      match(MySqlParser::BY);
      setState(1776);
      subpartitionFunctionDefinition();
      setState(1779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::SUBPARTITIONS) {
        setState(1777);
        match(MySqlParser::SUBPARTITIONS);
        setState(1778);
        dynamic_cast<PartitionDefinitionsContext *>(_localctx)->subCount = decimalLiteral();
      }
    }
    setState(1794);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(1783);
      match(MySqlParser::LR_BRACKET);
      setState(1784);
      partitionDefinition();
      setState(1789);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(1785);
        match(MySqlParser::COMMA);
        setState(1786);
        partitionDefinition();
        setState(1791);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1792);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionFunctionDefinitionContext ------------------------------------------------------------------

MySqlParser::PartitionFunctionDefinitionContext::PartitionFunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::PartitionFunctionDefinitionContext::getRuleIndex() const {
  return MySqlParser::RulePartitionFunctionDefinition;
}

void MySqlParser::PartitionFunctionDefinitionContext::copyFrom(PartitionFunctionDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PartitionFunctionKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::PartitionFunctionKeyContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::LINEAR() {
  return getToken(MySqlParser::LINEAR, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionKeyContext::TWO_DECIMAL() {
  return getToken(MySqlParser::TWO_DECIMAL, 0);
}

MySqlParser::PartitionFunctionKeyContext::PartitionFunctionKeyContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionFunctionHashContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionFunctionHashContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionHashContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::PartitionFunctionHashContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionHashContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionHashContext::LINEAR() {
  return getToken(MySqlParser::LINEAR, 0);
}

MySqlParser::PartitionFunctionHashContext::PartitionFunctionHashContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionFunctionListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionFunctionListContext::LIST() {
  return getToken(MySqlParser::LIST, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionListContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::PartitionFunctionListContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionListContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionListContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

MySqlParser::UidListContext* MySqlParser::PartitionFunctionListContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

MySqlParser::PartitionFunctionListContext::PartitionFunctionListContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionFunctionRangeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionFunctionRangeContext::RANGE() {
  return getToken(MySqlParser::RANGE, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionRangeContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::PartitionFunctionRangeContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionRangeContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::PartitionFunctionRangeContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

MySqlParser::UidListContext* MySqlParser::PartitionFunctionRangeContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

MySqlParser::PartitionFunctionRangeContext::PartitionFunctionRangeContext(PartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }


MySqlParser::PartitionFunctionDefinitionContext* MySqlParser::partitionFunctionDefinition() {
  PartitionFunctionDefinitionContext *_localctx = _tracker.createInstance<PartitionFunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 98, MySqlParser::RulePartitionFunctionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1841);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionFunctionHashContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1797);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINEAR) {
        setState(1796);
        match(MySqlParser::LINEAR);
      }
      setState(1799);
      match(MySqlParser::HASH);
      setState(1800);
      match(MySqlParser::LR_BRACKET);
      setState(1801);
      expression(0);
      setState(1802);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionFunctionKeyContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINEAR) {
        setState(1804);
        match(MySqlParser::LINEAR);
      }
      setState(1807);
      match(MySqlParser::KEY);
      setState(1811);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ALGORITHM) {
        setState(1808);
        match(MySqlParser::ALGORITHM);
        setState(1809);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(1810);
        dynamic_cast<PartitionFunctionKeyContext *>(_localctx)->algType = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ONE_DECIMAL

        || _la == MySqlParser::TWO_DECIMAL)) {
          dynamic_cast<PartitionFunctionKeyContext *>(_localctx)->algType = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1813);
      match(MySqlParser::LR_BRACKET);
      setState(1814);
      uidList();
      setState(1815);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionFunctionRangeContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1817);
      match(MySqlParser::RANGE);
      setState(1827);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LR_BRACKET: {
          setState(1818);
          match(MySqlParser::LR_BRACKET);
          setState(1819);
          expression(0);
          setState(1820);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        case MySqlParser::COLUMNS: {
          setState(1822);
          match(MySqlParser::COLUMNS);
          setState(1823);
          match(MySqlParser::LR_BRACKET);
          setState(1824);
          uidList();
          setState(1825);
          match(MySqlParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PartitionFunctionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionFunctionListContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1829);
      match(MySqlParser::LIST);
      setState(1839);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LR_BRACKET: {
          setState(1830);
          match(MySqlParser::LR_BRACKET);
          setState(1831);
          expression(0);
          setState(1832);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        case MySqlParser::COLUMNS: {
          setState(1834);
          match(MySqlParser::COLUMNS);
          setState(1835);
          match(MySqlParser::LR_BRACKET);
          setState(1836);
          uidList();
          setState(1837);
          match(MySqlParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpartitionFunctionDefinitionContext ------------------------------------------------------------------

MySqlParser::SubpartitionFunctionDefinitionContext::SubpartitionFunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::SubpartitionFunctionDefinitionContext::getRuleIndex() const {
  return MySqlParser::RuleSubpartitionFunctionDefinition;
}

void MySqlParser::SubpartitionFunctionDefinitionContext::copyFrom(SubpartitionFunctionDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubPartitionFunctionHashContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SubPartitionFunctionHashContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionHashContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::SubPartitionFunctionHashContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionHashContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionHashContext::LINEAR() {
  return getToken(MySqlParser::LINEAR, 0);
}

MySqlParser::SubPartitionFunctionHashContext::SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- SubPartitionFunctionKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::SubPartitionFunctionKeyContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::LINEAR() {
  return getToken(MySqlParser::LINEAR, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::SubPartitionFunctionKeyContext::TWO_DECIMAL() {
  return getToken(MySqlParser::TWO_DECIMAL, 0);
}

MySqlParser::SubPartitionFunctionKeyContext::SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext *ctx) { copyFrom(ctx); }


MySqlParser::SubpartitionFunctionDefinitionContext* MySqlParser::subpartitionFunctionDefinition() {
  SubpartitionFunctionDefinitionContext *_localctx = _tracker.createInstance<SubpartitionFunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 100, MySqlParser::RuleSubpartitionFunctionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1864);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SubpartitionFunctionDefinitionContext *>(_tracker.createInstance<MySqlParser::SubPartitionFunctionHashContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1844);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINEAR) {
        setState(1843);
        match(MySqlParser::LINEAR);
      }
      setState(1846);
      match(MySqlParser::HASH);
      setState(1847);
      match(MySqlParser::LR_BRACKET);
      setState(1848);
      expression(0);
      setState(1849);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SubpartitionFunctionDefinitionContext *>(_tracker.createInstance<MySqlParser::SubPartitionFunctionKeyContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1852);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINEAR) {
        setState(1851);
        match(MySqlParser::LINEAR);
      }
      setState(1854);
      match(MySqlParser::KEY);
      setState(1858);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ALGORITHM) {
        setState(1855);
        match(MySqlParser::ALGORITHM);
        setState(1856);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(1857);
        dynamic_cast<SubPartitionFunctionKeyContext *>(_localctx)->algType = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ONE_DECIMAL

        || _la == MySqlParser::TWO_DECIMAL)) {
          dynamic_cast<SubPartitionFunctionKeyContext *>(_localctx)->algType = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1860);
      match(MySqlParser::LR_BRACKET);
      setState(1861);
      uidList();
      setState(1862);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinitionContext ------------------------------------------------------------------

MySqlParser::PartitionDefinitionContext::PartitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::PartitionDefinitionContext::getRuleIndex() const {
  return MySqlParser::RulePartitionDefinition;
}

void MySqlParser::PartitionDefinitionContext::copyFrom(PartitionDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PartitionComparisionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionComparisionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidContext* MySqlParser::PartitionComparisionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionComparisionContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::PartitionComparisionContext::LESS() {
  return getToken(MySqlParser::LESS, 0);
}

tree::TerminalNode* MySqlParser::PartitionComparisionContext::THAN() {
  return getToken(MySqlParser::THAN, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionComparisionContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::PartitionComparisionContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<MySqlParser::PartitionDefinerAtomContext *> MySqlParser::PartitionComparisionContext::partitionDefinerAtom() {
  return getRuleContexts<MySqlParser::PartitionDefinerAtomContext>();
}

MySqlParser::PartitionDefinerAtomContext* MySqlParser::PartitionComparisionContext::partitionDefinerAtom(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinerAtomContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionComparisionContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::PartitionComparisionContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionComparisionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::PartitionComparisionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

std::vector<MySqlParser::PartitionOptionContext *> MySqlParser::PartitionComparisionContext::partitionOption() {
  return getRuleContexts<MySqlParser::PartitionOptionContext>();
}

MySqlParser::PartitionOptionContext* MySqlParser::PartitionComparisionContext::partitionOption(size_t i) {
  return getRuleContext<MySqlParser::PartitionOptionContext>(i);
}

std::vector<MySqlParser::SubpartitionDefinitionContext *> MySqlParser::PartitionComparisionContext::subpartitionDefinition() {
  return getRuleContexts<MySqlParser::SubpartitionDefinitionContext>();
}

MySqlParser::SubpartitionDefinitionContext* MySqlParser::PartitionComparisionContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::SubpartitionDefinitionContext>(i);
}

MySqlParser::PartitionComparisionContext::PartitionComparisionContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionListAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionListAtomContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidContext* MySqlParser::PartitionListAtomContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionListAtomContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::PartitionListAtomContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionListAtomContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::PartitionListAtomContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<MySqlParser::PartitionDefinerAtomContext *> MySqlParser::PartitionListAtomContext::partitionDefinerAtom() {
  return getRuleContexts<MySqlParser::PartitionDefinerAtomContext>();
}

MySqlParser::PartitionDefinerAtomContext* MySqlParser::PartitionListAtomContext::partitionDefinerAtom(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinerAtomContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionListAtomContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::PartitionListAtomContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionListAtomContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::PartitionListAtomContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

std::vector<MySqlParser::PartitionOptionContext *> MySqlParser::PartitionListAtomContext::partitionOption() {
  return getRuleContexts<MySqlParser::PartitionOptionContext>();
}

MySqlParser::PartitionOptionContext* MySqlParser::PartitionListAtomContext::partitionOption(size_t i) {
  return getRuleContext<MySqlParser::PartitionOptionContext>(i);
}

std::vector<MySqlParser::SubpartitionDefinitionContext *> MySqlParser::PartitionListAtomContext::subpartitionDefinition() {
  return getRuleContexts<MySqlParser::SubpartitionDefinitionContext>();
}

MySqlParser::SubpartitionDefinitionContext* MySqlParser::PartitionListAtomContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::SubpartitionDefinitionContext>(i);
}

MySqlParser::PartitionListAtomContext::PartitionListAtomContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionListVectorContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionListVectorContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidContext* MySqlParser::PartitionListVectorContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionListVectorContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::PartitionListVectorContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionListVectorContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::PartitionListVectorContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<MySqlParser::PartitionDefinerVectorContext *> MySqlParser::PartitionListVectorContext::partitionDefinerVector() {
  return getRuleContexts<MySqlParser::PartitionDefinerVectorContext>();
}

MySqlParser::PartitionDefinerVectorContext* MySqlParser::PartitionListVectorContext::partitionDefinerVector(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinerVectorContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionListVectorContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::PartitionListVectorContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionListVectorContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::PartitionListVectorContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

std::vector<MySqlParser::PartitionOptionContext *> MySqlParser::PartitionListVectorContext::partitionOption() {
  return getRuleContexts<MySqlParser::PartitionOptionContext>();
}

MySqlParser::PartitionOptionContext* MySqlParser::PartitionListVectorContext::partitionOption(size_t i) {
  return getRuleContext<MySqlParser::PartitionOptionContext>(i);
}

std::vector<MySqlParser::SubpartitionDefinitionContext *> MySqlParser::PartitionListVectorContext::subpartitionDefinition() {
  return getRuleContexts<MySqlParser::SubpartitionDefinitionContext>();
}

MySqlParser::SubpartitionDefinitionContext* MySqlParser::PartitionListVectorContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::SubpartitionDefinitionContext>(i);
}

MySqlParser::PartitionListVectorContext::PartitionListVectorContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionSimpleContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionSimpleContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidContext* MySqlParser::PartitionSimpleContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<MySqlParser::PartitionOptionContext *> MySqlParser::PartitionSimpleContext::partitionOption() {
  return getRuleContexts<MySqlParser::PartitionOptionContext>();
}

MySqlParser::PartitionOptionContext* MySqlParser::PartitionSimpleContext::partitionOption(size_t i) {
  return getRuleContext<MySqlParser::PartitionOptionContext>(i);
}

tree::TerminalNode* MySqlParser::PartitionSimpleContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::SubpartitionDefinitionContext *> MySqlParser::PartitionSimpleContext::subpartitionDefinition() {
  return getRuleContexts<MySqlParser::SubpartitionDefinitionContext>();
}

MySqlParser::SubpartitionDefinitionContext* MySqlParser::PartitionSimpleContext::subpartitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::SubpartitionDefinitionContext>(i);
}

tree::TerminalNode* MySqlParser::PartitionSimpleContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionSimpleContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::PartitionSimpleContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::PartitionSimpleContext::PartitionSimpleContext(PartitionDefinitionContext *ctx) { copyFrom(ctx); }


MySqlParser::PartitionDefinitionContext* MySqlParser::partitionDefinition() {
  PartitionDefinitionContext *_localctx = _tracker.createInstance<PartitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 102, MySqlParser::RulePartitionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2012);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionComparisionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1866);
      match(MySqlParser::PARTITION);
      setState(1867);
      uid();
      setState(1868);
      match(MySqlParser::VALUES);
      setState(1869);
      match(MySqlParser::LESS);
      setState(1870);
      match(MySqlParser::THAN);
      setState(1871);
      match(MySqlParser::LR_BRACKET);
      setState(1872);
      partitionDefinerAtom();
      setState(1877);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(1873);
        match(MySqlParser::COMMA);
        setState(1874);
        partitionDefinerAtom();
        setState(1879);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1880);
      match(MySqlParser::RR_BRACKET);
      setState(1884);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::INDEX || ((((_la - 305) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 305)) & ((1ULL << (MySqlParser::COMMENT - 305))
        | (1ULL << (MySqlParser::DATA - 305))
        | (1ULL << (MySqlParser::ENGINE - 305)))) != 0) || ((((_la - 428) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 428)) & ((1ULL << (MySqlParser::MAX_ROWS - 428))
        | (1ULL << (MySqlParser::MIN_ROWS - 428))
        | (1ULL << (MySqlParser::NODEGROUP - 428)))) != 0) || _la == MySqlParser::STORAGE

      || _la == MySqlParser::TABLESPACE) {
        setState(1881);
        partitionOption();
        setState(1886);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1898);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LR_BRACKET) {
        setState(1887);
        match(MySqlParser::LR_BRACKET);
        setState(1888);
        subpartitionDefinition();
        setState(1893);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(1889);
          match(MySqlParser::COMMA);
          setState(1890);
          subpartitionDefinition();
          setState(1895);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1896);
        match(MySqlParser::RR_BRACKET);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionComparisionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1900);
      match(MySqlParser::PARTITION);
      setState(1901);
      uid();
      setState(1902);
      match(MySqlParser::VALUES);
      setState(1903);
      match(MySqlParser::LESS);
      setState(1904);
      match(MySqlParser::THAN);
      setState(1905);
      partitionDefinerAtom();
      setState(1909);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::INDEX || ((((_la - 305) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 305)) & ((1ULL << (MySqlParser::COMMENT - 305))
        | (1ULL << (MySqlParser::DATA - 305))
        | (1ULL << (MySqlParser::ENGINE - 305)))) != 0) || ((((_la - 428) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 428)) & ((1ULL << (MySqlParser::MAX_ROWS - 428))
        | (1ULL << (MySqlParser::MIN_ROWS - 428))
        | (1ULL << (MySqlParser::NODEGROUP - 428)))) != 0) || _la == MySqlParser::STORAGE

      || _la == MySqlParser::TABLESPACE) {
        setState(1906);
        partitionOption();
        setState(1911);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LR_BRACKET) {
        setState(1912);
        match(MySqlParser::LR_BRACKET);
        setState(1913);
        subpartitionDefinition();
        setState(1918);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(1914);
          match(MySqlParser::COMMA);
          setState(1915);
          subpartitionDefinition();
          setState(1920);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1921);
        match(MySqlParser::RR_BRACKET);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionListAtomContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1925);
      match(MySqlParser::PARTITION);
      setState(1926);
      uid();
      setState(1927);
      match(MySqlParser::VALUES);
      setState(1928);
      match(MySqlParser::IN);
      setState(1929);
      match(MySqlParser::LR_BRACKET);
      setState(1930);
      partitionDefinerAtom();
      setState(1935);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(1931);
        match(MySqlParser::COMMA);
        setState(1932);
        partitionDefinerAtom();
        setState(1937);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1938);
      match(MySqlParser::RR_BRACKET);
      setState(1942);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::INDEX || ((((_la - 305) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 305)) & ((1ULL << (MySqlParser::COMMENT - 305))
        | (1ULL << (MySqlParser::DATA - 305))
        | (1ULL << (MySqlParser::ENGINE - 305)))) != 0) || ((((_la - 428) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 428)) & ((1ULL << (MySqlParser::MAX_ROWS - 428))
        | (1ULL << (MySqlParser::MIN_ROWS - 428))
        | (1ULL << (MySqlParser::NODEGROUP - 428)))) != 0) || _la == MySqlParser::STORAGE

      || _la == MySqlParser::TABLESPACE) {
        setState(1939);
        partitionOption();
        setState(1944);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1956);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LR_BRACKET) {
        setState(1945);
        match(MySqlParser::LR_BRACKET);
        setState(1946);
        subpartitionDefinition();
        setState(1951);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(1947);
          match(MySqlParser::COMMA);
          setState(1948);
          subpartitionDefinition();
          setState(1953);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1954);
        match(MySqlParser::RR_BRACKET);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionListVectorContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1958);
      match(MySqlParser::PARTITION);
      setState(1959);
      uid();
      setState(1960);
      match(MySqlParser::VALUES);
      setState(1961);
      match(MySqlParser::IN);
      setState(1962);
      match(MySqlParser::LR_BRACKET);
      setState(1963);
      partitionDefinerVector();
      setState(1968);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(1964);
        match(MySqlParser::COMMA);
        setState(1965);
        partitionDefinerVector();
        setState(1970);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1971);
      match(MySqlParser::RR_BRACKET);
      setState(1975);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::INDEX || ((((_la - 305) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 305)) & ((1ULL << (MySqlParser::COMMENT - 305))
        | (1ULL << (MySqlParser::DATA - 305))
        | (1ULL << (MySqlParser::ENGINE - 305)))) != 0) || ((((_la - 428) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 428)) & ((1ULL << (MySqlParser::MAX_ROWS - 428))
        | (1ULL << (MySqlParser::MIN_ROWS - 428))
        | (1ULL << (MySqlParser::NODEGROUP - 428)))) != 0) || _la == MySqlParser::STORAGE

      || _la == MySqlParser::TABLESPACE) {
        setState(1972);
        partitionOption();
        setState(1977);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1989);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LR_BRACKET) {
        setState(1978);
        match(MySqlParser::LR_BRACKET);
        setState(1979);
        subpartitionDefinition();
        setState(1984);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(1980);
          match(MySqlParser::COMMA);
          setState(1981);
          subpartitionDefinition();
          setState(1986);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1987);
        match(MySqlParser::RR_BRACKET);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PartitionDefinitionContext *>(_tracker.createInstance<MySqlParser::PartitionSimpleContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1991);
      match(MySqlParser::PARTITION);
      setState(1992);
      uid();
      setState(1996);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::INDEX || ((((_la - 305) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 305)) & ((1ULL << (MySqlParser::COMMENT - 305))
        | (1ULL << (MySqlParser::DATA - 305))
        | (1ULL << (MySqlParser::ENGINE - 305)))) != 0) || ((((_la - 428) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 428)) & ((1ULL << (MySqlParser::MAX_ROWS - 428))
        | (1ULL << (MySqlParser::MIN_ROWS - 428))
        | (1ULL << (MySqlParser::NODEGROUP - 428)))) != 0) || _la == MySqlParser::STORAGE

      || _la == MySqlParser::TABLESPACE) {
        setState(1993);
        partitionOption();
        setState(1998);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2010);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LR_BRACKET) {
        setState(1999);
        match(MySqlParser::LR_BRACKET);
        setState(2000);
        subpartitionDefinition();
        setState(2005);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2001);
          match(MySqlParser::COMMA);
          setState(2002);
          subpartitionDefinition();
          setState(2007);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2008);
        match(MySqlParser::RR_BRACKET);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinerAtomContext ------------------------------------------------------------------

MySqlParser::PartitionDefinerAtomContext::PartitionDefinerAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ConstantContext* MySqlParser::PartitionDefinerAtomContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::PartitionDefinerAtomContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionDefinerAtomContext::MAXVALUE() {
  return getToken(MySqlParser::MAXVALUE, 0);
}


size_t MySqlParser::PartitionDefinerAtomContext::getRuleIndex() const {
  return MySqlParser::RulePartitionDefinerAtom;
}


MySqlParser::PartitionDefinerAtomContext* MySqlParser::partitionDefinerAtom() {
  PartitionDefinerAtomContext *_localctx = _tracker.createInstance<PartitionDefinerAtomContext>(_ctx, getState());
  enterRule(_localctx, 104, MySqlParser::RulePartitionDefinerAtom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2017);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2014);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2015);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2016);
      match(MySqlParser::MAXVALUE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionDefinerVectorContext ------------------------------------------------------------------

MySqlParser::PartitionDefinerVectorContext::PartitionDefinerVectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PartitionDefinerVectorContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::PartitionDefinerAtomContext *> MySqlParser::PartitionDefinerVectorContext::partitionDefinerAtom() {
  return getRuleContexts<MySqlParser::PartitionDefinerAtomContext>();
}

MySqlParser::PartitionDefinerAtomContext* MySqlParser::PartitionDefinerVectorContext::partitionDefinerAtom(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinerAtomContext>(i);
}

tree::TerminalNode* MySqlParser::PartitionDefinerVectorContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::PartitionDefinerVectorContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::PartitionDefinerVectorContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::PartitionDefinerVectorContext::getRuleIndex() const {
  return MySqlParser::RulePartitionDefinerVector;
}


MySqlParser::PartitionDefinerVectorContext* MySqlParser::partitionDefinerVector() {
  PartitionDefinerVectorContext *_localctx = _tracker.createInstance<PartitionDefinerVectorContext>(_ctx, getState());
  enterRule(_localctx, 106, MySqlParser::RulePartitionDefinerVector);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2019);
    match(MySqlParser::LR_BRACKET);
    setState(2020);
    partitionDefinerAtom();
    setState(2023); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2021);
      match(MySqlParser::COMMA);
      setState(2022);
      partitionDefinerAtom();
      setState(2025); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySqlParser::COMMA);
    setState(2027);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpartitionDefinitionContext ------------------------------------------------------------------

MySqlParser::SubpartitionDefinitionContext::SubpartitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SubpartitionDefinitionContext::SUBPARTITION() {
  return getToken(MySqlParser::SUBPARTITION, 0);
}

MySqlParser::UidContext* MySqlParser::SubpartitionDefinitionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<MySqlParser::PartitionOptionContext *> MySqlParser::SubpartitionDefinitionContext::partitionOption() {
  return getRuleContexts<MySqlParser::PartitionOptionContext>();
}

MySqlParser::PartitionOptionContext* MySqlParser::SubpartitionDefinitionContext::partitionOption(size_t i) {
  return getRuleContext<MySqlParser::PartitionOptionContext>(i);
}


size_t MySqlParser::SubpartitionDefinitionContext::getRuleIndex() const {
  return MySqlParser::RuleSubpartitionDefinition;
}


MySqlParser::SubpartitionDefinitionContext* MySqlParser::subpartitionDefinition() {
  SubpartitionDefinitionContext *_localctx = _tracker.createInstance<SubpartitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 108, MySqlParser::RuleSubpartitionDefinition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2029);
    match(MySqlParser::SUBPARTITION);
    setState(2030);
    uid();
    setState(2034);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::INDEX || ((((_la - 305) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 305)) & ((1ULL << (MySqlParser::COMMENT - 305))
      | (1ULL << (MySqlParser::DATA - 305))
      | (1ULL << (MySqlParser::ENGINE - 305)))) != 0) || ((((_la - 428) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 428)) & ((1ULL << (MySqlParser::MAX_ROWS - 428))
      | (1ULL << (MySqlParser::MIN_ROWS - 428))
      | (1ULL << (MySqlParser::NODEGROUP - 428)))) != 0) || _la == MySqlParser::STORAGE

    || _la == MySqlParser::TABLESPACE) {
      setState(2031);
      partitionOption();
      setState(2036);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionOptionContext ------------------------------------------------------------------

MySqlParser::PartitionOptionContext::PartitionOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::PartitionOptionContext::getRuleIndex() const {
  return MySqlParser::RulePartitionOption;
}

void MySqlParser::PartitionOptionContext::copyFrom(PartitionOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PartitionOptionCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionCommentContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionCommentContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionCommentContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionCommentContext::PartitionOptionCommentContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionNodeGroupContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionNodeGroupContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

MySqlParser::UidContext* MySqlParser::PartitionOptionNodeGroupContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionOptionNodeGroupContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionNodeGroupContext::PartitionOptionNodeGroupContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionIndexDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionIndexDirectoryContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionIndexDirectoryContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionIndexDirectoryContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionIndexDirectoryContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionIndexDirectoryContext::PartitionOptionIndexDirectoryContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionMaxRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionMaxRowsContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::PartitionOptionMaxRowsContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionOptionMaxRowsContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionMaxRowsContext::PartitionOptionMaxRowsContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidContext* MySqlParser::PartitionOptionTablespaceContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionOptionTablespaceContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionTablespaceContext::PartitionOptionTablespaceContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionEngineContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::PartitionOptionEngineContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionOptionEngineContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionEngineContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionEngineContext::PartitionOptionEngineContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionMinRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionMinRowsContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::PartitionOptionMinRowsContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::PartitionOptionMinRowsContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionMinRowsContext::PartitionOptionMinRowsContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PartitionOptionDataDirectoryContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PartitionOptionDataDirectoryContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionDataDirectoryContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionDataDirectoryContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::PartitionOptionDataDirectoryContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PartitionOptionDataDirectoryContext::PartitionOptionDataDirectoryContext(PartitionOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::PartitionOptionContext* MySqlParser::partitionOption() {
  PartitionOptionContext *_localctx = _tracker.createInstance<PartitionOptionContext>(_ctx, getState());
  enterRule(_localctx, 110, MySqlParser::RulePartitionOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2082);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ENGINE:
      case MySqlParser::STORAGE: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionEngineContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(2038);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::STORAGE) {
          setState(2037);
          match(MySqlParser::STORAGE);
        }
        setState(2040);
        match(MySqlParser::ENGINE);
        setState(2042);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2041);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2044);
        engineName();
        break;
      }

      case MySqlParser::COMMENT: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionCommentContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(2045);
        match(MySqlParser::COMMENT);
        setState(2047);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2046);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2049);
        dynamic_cast<PartitionOptionCommentContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::DATA: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionDataDirectoryContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(2050);
        match(MySqlParser::DATA);
        setState(2051);
        match(MySqlParser::DIRECTORY);
        setState(2053);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2052);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2055);
        dynamic_cast<PartitionOptionDataDirectoryContext *>(_localctx)->dataDirectory = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::INDEX: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionIndexDirectoryContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(2056);
        match(MySqlParser::INDEX);
        setState(2057);
        match(MySqlParser::DIRECTORY);
        setState(2059);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2058);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2061);
        dynamic_cast<PartitionOptionIndexDirectoryContext *>(_localctx)->indexDirectory = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::MAX_ROWS: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionMaxRowsContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(2062);
        match(MySqlParser::MAX_ROWS);
        setState(2064);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2063);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2066);
        dynamic_cast<PartitionOptionMaxRowsContext *>(_localctx)->maxRows = decimalLiteral();
        break;
      }

      case MySqlParser::MIN_ROWS: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionMinRowsContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(2067);
        match(MySqlParser::MIN_ROWS);
        setState(2069);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2068);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2071);
        dynamic_cast<PartitionOptionMinRowsContext *>(_localctx)->minRows = decimalLiteral();
        break;
      }

      case MySqlParser::TABLESPACE: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionTablespaceContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(2072);
        match(MySqlParser::TABLESPACE);
        setState(2074);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2073);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2076);
        dynamic_cast<PartitionOptionTablespaceContext *>(_localctx)->tablespace = uid();
        break;
      }

      case MySqlParser::NODEGROUP: {
        _localctx = dynamic_cast<PartitionOptionContext *>(_tracker.createInstance<MySqlParser::PartitionOptionNodeGroupContext>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(2077);
        match(MySqlParser::NODEGROUP);
        setState(2079);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(2078);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(2081);
        dynamic_cast<PartitionOptionNodeGroupContext *>(_localctx)->nodegroup = uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterDatabaseContext ------------------------------------------------------------------

MySqlParser::AlterDatabaseContext::AlterDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::AlterDatabaseContext::getRuleIndex() const {
  return MySqlParser::RuleAlterDatabase;
}

void MySqlParser::AlterDatabaseContext::copyFrom(AlterDatabaseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterUpgradeNameContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

MySqlParser::UidContext* MySqlParser::AlterUpgradeNameContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::NAME() {
  return getToken(MySqlParser::NAME, 0);
}

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::AlterUpgradeNameContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::AlterUpgradeNameContext::AlterUpgradeNameContext(AlterDatabaseContext *ctx) { copyFrom(ctx); }


//----------------- AlterSimpleDatabaseContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterSimpleDatabaseContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterSimpleDatabaseContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::AlterSimpleDatabaseContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::UidContext* MySqlParser::AlterSimpleDatabaseContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<MySqlParser::CreateDatabaseOptionContext *> MySqlParser::AlterSimpleDatabaseContext::createDatabaseOption() {
  return getRuleContexts<MySqlParser::CreateDatabaseOptionContext>();
}

MySqlParser::CreateDatabaseOptionContext* MySqlParser::AlterSimpleDatabaseContext::createDatabaseOption(size_t i) {
  return getRuleContext<MySqlParser::CreateDatabaseOptionContext>(i);
}

MySqlParser::AlterSimpleDatabaseContext::AlterSimpleDatabaseContext(AlterDatabaseContext *ctx) { copyFrom(ctx); }


MySqlParser::AlterDatabaseContext* MySqlParser::alterDatabase() {
  AlterDatabaseContext *_localctx = _tracker.createInstance<AlterDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 112, MySqlParser::RuleAlterDatabase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AlterDatabaseContext *>(_tracker.createInstance<MySqlParser::AlterSimpleDatabaseContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2084);
      match(MySqlParser::ALTER);
      setState(2085);
      dynamic_cast<AlterSimpleDatabaseContext *>(_localctx)->dbFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
        dynamic_cast<AlterSimpleDatabaseContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2087);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
      case 1: {
        setState(2086);
        uid();
        break;
      }

      }
      setState(2090); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2089);
        createDatabaseOption();
        setState(2092); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << MySqlParser::CHARACTER)
        | (1ULL << MySqlParser::COLLATE)
        | (1ULL << MySqlParser::DEFAULT))) != 0) || _la == MySqlParser::CHARSET);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AlterDatabaseContext *>(_tracker.createInstance<MySqlParser::AlterUpgradeNameContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2094);
      match(MySqlParser::ALTER);
      setState(2095);
      dynamic_cast<AlterUpgradeNameContext *>(_localctx)->dbFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
        dynamic_cast<AlterUpgradeNameContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2096);
      uid();
      setState(2097);
      match(MySqlParser::UPGRADE);
      setState(2098);
      match(MySqlParser::DATA);
      setState(2099);
      match(MySqlParser::DIRECTORY);
      setState(2100);
      match(MySqlParser::NAME);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterEventContext ------------------------------------------------------------------

MySqlParser::AlterEventContext::AlterEventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterEventContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

std::vector<MySqlParser::FullIdContext *> MySqlParser::AlterEventContext::fullId() {
  return getRuleContexts<MySqlParser::FullIdContext>();
}

MySqlParser::FullIdContext* MySqlParser::AlterEventContext::fullId(size_t i) {
  return getRuleContext<MySqlParser::FullIdContext>(i);
}

MySqlParser::OwnerStatementContext* MySqlParser::AlterEventContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterEventContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::AlterEventContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::AlterEventContext::SCHEDULE() {
  return getToken(MySqlParser::SCHEDULE, 0);
}

MySqlParser::ScheduleExpressionContext* MySqlParser::AlterEventContext::scheduleExpression() {
  return getRuleContext<MySqlParser::ScheduleExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::COMPLETION() {
  return getToken(MySqlParser::COMPLETION, 0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::PRESERVE() {
  return getToken(MySqlParser::PRESERVE, 0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

MySqlParser::EnableTypeContext* MySqlParser::AlterEventContext::enableType() {
  return getRuleContext<MySqlParser::EnableTypeContext>(0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

MySqlParser::RoutineBodyContext* MySqlParser::AlterEventContext::routineBody() {
  return getRuleContext<MySqlParser::RoutineBodyContext>(0);
}

tree::TerminalNode* MySqlParser::AlterEventContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::AlterEventContext::getRuleIndex() const {
  return MySqlParser::RuleAlterEvent;
}


MySqlParser::AlterEventContext* MySqlParser::alterEvent() {
  AlterEventContext *_localctx = _tracker.createInstance<AlterEventContext>(_ctx, getState());
  enterRule(_localctx, 114, MySqlParser::RuleAlterEvent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2104);
    match(MySqlParser::ALTER);
    setState(2106);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(2105);
      ownerStatement();
    }
    setState(2108);
    match(MySqlParser::EVENT);
    setState(2109);
    fullId();
    setState(2113);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      setState(2110);
      match(MySqlParser::ON);
      setState(2111);
      match(MySqlParser::SCHEDULE);
      setState(2112);
      scheduleExpression();
      break;
    }

    }
    setState(2121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(2115);
      match(MySqlParser::ON);
      setState(2116);
      match(MySqlParser::COMPLETION);
      setState(2118);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(2117);
        match(MySqlParser::NOT);
      }
      setState(2120);
      match(MySqlParser::PRESERVE);
    }
    setState(2126);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(2123);
      match(MySqlParser::RENAME);
      setState(2124);
      match(MySqlParser::TO);
      setState(2125);
      fullId();
      break;
    }

    }
    setState(2129);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DISABLE

    || _la == MySqlParser::ENABLE) {
      setState(2128);
      enableType();
    }
    setState(2133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(2131);
      match(MySqlParser::COMMENT);
      setState(2132);
      match(MySqlParser::STRING_LITERAL);
    }
    setState(2137);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      setState(2135);
      match(MySqlParser::DO);
      setState(2136);
      routineBody();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterFunctionContext ------------------------------------------------------------------

MySqlParser::AlterFunctionContext::AlterFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterFunctionContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterFunctionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::FullIdContext* MySqlParser::AlterFunctionContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

std::vector<MySqlParser::RoutineOptionContext *> MySqlParser::AlterFunctionContext::routineOption() {
  return getRuleContexts<MySqlParser::RoutineOptionContext>();
}

MySqlParser::RoutineOptionContext* MySqlParser::AlterFunctionContext::routineOption(size_t i) {
  return getRuleContext<MySqlParser::RoutineOptionContext>(i);
}


size_t MySqlParser::AlterFunctionContext::getRuleIndex() const {
  return MySqlParser::RuleAlterFunction;
}


MySqlParser::AlterFunctionContext* MySqlParser::alterFunction() {
  AlterFunctionContext *_localctx = _tracker.createInstance<AlterFunctionContext>(_ctx, getState());
  enterRule(_localctx, 116, MySqlParser::RuleAlterFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2139);
    match(MySqlParser::ALTER);
    setState(2140);
    match(MySqlParser::FUNCTION);
    setState(2141);
    fullId();
    setState(2145);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::DETERMINISTIC || ((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & ((1ULL << (MySqlParser::MODIFIES - 100))
      | (1ULL << (MySqlParser::NOT - 100))
      | (1ULL << (MySqlParser::READS - 100))
      | (1ULL << (MySqlParser::SQL - 100)))) != 0) || _la == MySqlParser::COMMENT

    || _la == MySqlParser::CONTAINS || _la == MySqlParser::LANGUAGE

    || _la == MySqlParser::NO) {
      setState(2142);
      routineOption();
      setState(2147);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterInstanceContext ------------------------------------------------------------------

MySqlParser::AlterInstanceContext::AlterInstanceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterInstanceContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterInstanceContext::INSTANCE() {
  return getToken(MySqlParser::INSTANCE, 0);
}

tree::TerminalNode* MySqlParser::AlterInstanceContext::ROTATE() {
  return getToken(MySqlParser::ROTATE, 0);
}

tree::TerminalNode* MySqlParser::AlterInstanceContext::INNODB() {
  return getToken(MySqlParser::INNODB, 0);
}

tree::TerminalNode* MySqlParser::AlterInstanceContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::AlterInstanceContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}


size_t MySqlParser::AlterInstanceContext::getRuleIndex() const {
  return MySqlParser::RuleAlterInstance;
}


MySqlParser::AlterInstanceContext* MySqlParser::alterInstance() {
  AlterInstanceContext *_localctx = _tracker.createInstance<AlterInstanceContext>(_ctx, getState());
  enterRule(_localctx, 118, MySqlParser::RuleAlterInstance);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2148);
    match(MySqlParser::ALTER);
    setState(2149);
    match(MySqlParser::INSTANCE);
    setState(2150);
    match(MySqlParser::ROTATE);
    setState(2151);
    match(MySqlParser::INNODB);
    setState(2152);
    match(MySqlParser::MASTER);
    setState(2153);
    match(MySqlParser::KEY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterLogfileGroupContext ------------------------------------------------------------------

MySqlParser::AlterLogfileGroupContext::AlterLogfileGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

MySqlParser::UidContext* MySqlParser::AlterLogfileGroupContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::UNDOFILE() {
  return getToken(MySqlParser::UNDOFILE, 0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::AlterLogfileGroupContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

MySqlParser::FileSizeLiteralContext* MySqlParser::AlterLogfileGroupContext::fileSizeLiteral() {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterLogfileGroupContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::AlterLogfileGroupContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}


size_t MySqlParser::AlterLogfileGroupContext::getRuleIndex() const {
  return MySqlParser::RuleAlterLogfileGroup;
}


MySqlParser::AlterLogfileGroupContext* MySqlParser::alterLogfileGroup() {
  AlterLogfileGroupContext *_localctx = _tracker.createInstance<AlterLogfileGroupContext>(_ctx, getState());
  enterRule(_localctx, 120, MySqlParser::RuleAlterLogfileGroup);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2155);
    match(MySqlParser::ALTER);
    setState(2156);
    match(MySqlParser::LOGFILE);
    setState(2157);
    match(MySqlParser::GROUP);
    setState(2158);
    uid();
    setState(2159);
    match(MySqlParser::ADD);
    setState(2160);
    match(MySqlParser::UNDOFILE);
    setState(2161);
    match(MySqlParser::STRING_LITERAL);
    setState(2167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(2162);
      match(MySqlParser::INITIAL_SIZE);
      setState(2164);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2163);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2166);
      fileSizeLiteral();
    }
    setState(2170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(2169);
      match(MySqlParser::WAIT);
    }
    setState(2172);
    match(MySqlParser::ENGINE);
    setState(2174);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(2173);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(2176);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterProcedureContext ------------------------------------------------------------------

MySqlParser::AlterProcedureContext::AlterProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterProcedureContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterProcedureContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::FullIdContext* MySqlParser::AlterProcedureContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

std::vector<MySqlParser::RoutineOptionContext *> MySqlParser::AlterProcedureContext::routineOption() {
  return getRuleContexts<MySqlParser::RoutineOptionContext>();
}

MySqlParser::RoutineOptionContext* MySqlParser::AlterProcedureContext::routineOption(size_t i) {
  return getRuleContext<MySqlParser::RoutineOptionContext>(i);
}


size_t MySqlParser::AlterProcedureContext::getRuleIndex() const {
  return MySqlParser::RuleAlterProcedure;
}


MySqlParser::AlterProcedureContext* MySqlParser::alterProcedure() {
  AlterProcedureContext *_localctx = _tracker.createInstance<AlterProcedureContext>(_ctx, getState());
  enterRule(_localctx, 122, MySqlParser::RuleAlterProcedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2178);
    match(MySqlParser::ALTER);
    setState(2179);
    match(MySqlParser::PROCEDURE);
    setState(2180);
    fullId();
    setState(2184);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::DETERMINISTIC || ((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & ((1ULL << (MySqlParser::MODIFIES - 100))
      | (1ULL << (MySqlParser::NOT - 100))
      | (1ULL << (MySqlParser::READS - 100))
      | (1ULL << (MySqlParser::SQL - 100)))) != 0) || _la == MySqlParser::COMMENT

    || _la == MySqlParser::CONTAINS || _la == MySqlParser::LANGUAGE

    || _la == MySqlParser::NO) {
      setState(2181);
      routineOption();
      setState(2186);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterServerContext ------------------------------------------------------------------

MySqlParser::AlterServerContext::AlterServerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterServerContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterServerContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

MySqlParser::UidContext* MySqlParser::AlterServerContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterServerContext::OPTIONS() {
  return getToken(MySqlParser::OPTIONS, 0);
}

tree::TerminalNode* MySqlParser::AlterServerContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::ServerOptionContext *> MySqlParser::AlterServerContext::serverOption() {
  return getRuleContexts<MySqlParser::ServerOptionContext>();
}

MySqlParser::ServerOptionContext* MySqlParser::AlterServerContext::serverOption(size_t i) {
  return getRuleContext<MySqlParser::ServerOptionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterServerContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterServerContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterServerContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::AlterServerContext::getRuleIndex() const {
  return MySqlParser::RuleAlterServer;
}


MySqlParser::AlterServerContext* MySqlParser::alterServer() {
  AlterServerContext *_localctx = _tracker.createInstance<AlterServerContext>(_ctx, getState());
  enterRule(_localctx, 124, MySqlParser::RuleAlterServer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2187);
    match(MySqlParser::ALTER);
    setState(2188);
    match(MySqlParser::SERVER);
    setState(2189);
    uid();
    setState(2190);
    match(MySqlParser::OPTIONS);
    setState(2191);
    match(MySqlParser::LR_BRACKET);
    setState(2192);
    serverOption();
    setState(2197);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(2193);
      match(MySqlParser::COMMA);
      setState(2194);
      serverOption();
      setState(2199);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2200);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterTableContext ------------------------------------------------------------------

MySqlParser::AlterTableContext::AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterTableContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TableNameContext* MySqlParser::AlterTableContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::AlterTableContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

std::vector<MySqlParser::AlterSpecificationContext *> MySqlParser::AlterTableContext::alterSpecification() {
  return getRuleContexts<MySqlParser::AlterSpecificationContext>();
}

MySqlParser::AlterSpecificationContext* MySqlParser::AlterTableContext::alterSpecification(size_t i) {
  return getRuleContext<MySqlParser::AlterSpecificationContext>(i);
}

MySqlParser::PartitionDefinitionsContext* MySqlParser::AlterTableContext::partitionDefinitions() {
  return getRuleContext<MySqlParser::PartitionDefinitionsContext>(0);
}

tree::TerminalNode* MySqlParser::AlterTableContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::AlterTableContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterTableContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterTableContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::AlterTableContext::getRuleIndex() const {
  return MySqlParser::RuleAlterTable;
}


MySqlParser::AlterTableContext* MySqlParser::alterTable() {
  AlterTableContext *_localctx = _tracker.createInstance<AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 126, MySqlParser::RuleAlterTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    match(MySqlParser::ALTER);
    setState(2204);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::OFFLINE

    || _la == MySqlParser::ONLINE) {
      setState(2203);
      dynamic_cast<AlterTableContext *>(_localctx)->intimeAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::OFFLINE

      || _la == MySqlParser::ONLINE)) {
        dynamic_cast<AlterTableContext *>(_localctx)->intimeAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2206);
      match(MySqlParser::IGNORE);
    }
    setState(2209);
    match(MySqlParser::TABLE);
    setState(2210);
    tableName();
    setState(2219);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(2211);
      alterSpecification();
      setState(2216);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2212);
        match(MySqlParser::COMMA);
        setState(2213);
        alterSpecification();
        setState(2218);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
    setState(2222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2221);
      partitionDefinitions();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterTablespaceContext ------------------------------------------------------------------

MySqlParser::AlterTablespaceContext::AlterTablespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidContext* MySqlParser::AlterTablespaceContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::AlterTablespaceContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterTablespaceContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

MySqlParser::FileSizeLiteralContext* MySqlParser::AlterTablespaceContext::fileSizeLiteral() {
  return getRuleContext<MySqlParser::FileSizeLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::AlterTablespaceContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}


size_t MySqlParser::AlterTablespaceContext::getRuleIndex() const {
  return MySqlParser::RuleAlterTablespace;
}


MySqlParser::AlterTablespaceContext* MySqlParser::alterTablespace() {
  AlterTablespaceContext *_localctx = _tracker.createInstance<AlterTablespaceContext>(_ctx, getState());
  enterRule(_localctx, 128, MySqlParser::RuleAlterTablespace);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2224);
    match(MySqlParser::ALTER);
    setState(2225);
    match(MySqlParser::TABLESPACE);
    setState(2226);
    uid();
    setState(2227);
    dynamic_cast<AlterTablespaceContext *>(_localctx)->objectAction = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::ADD

    || _la == MySqlParser::DROP)) {
      dynamic_cast<AlterTablespaceContext *>(_localctx)->objectAction = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2228);
    match(MySqlParser::DATAFILE);
    setState(2229);
    match(MySqlParser::STRING_LITERAL);
    setState(2233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(2230);
      match(MySqlParser::INITIAL_SIZE);
      setState(2231);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(2232);
      fileSizeLiteral();
    }
    setState(2236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(2235);
      match(MySqlParser::WAIT);
    }
    setState(2238);
    match(MySqlParser::ENGINE);
    setState(2240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(2239);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(2242);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterViewContext ------------------------------------------------------------------

MySqlParser::AlterViewContext::AlterViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AlterViewContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

MySqlParser::FullIdContext* MySqlParser::AlterViewContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::AlterViewContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::OwnerStatementContext* MySqlParser::AlterViewContext::ownerStatement() {
  return getRuleContext<MySqlParser::OwnerStatementContext>(0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterViewContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::UNDEFINED() {
  return getToken(MySqlParser::UNDEFINED, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::MERGE() {
  return getToken(MySqlParser::MERGE, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::TEMPTABLE() {
  return getToken(MySqlParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::CASCADED() {
  return getToken(MySqlParser::CASCADED, 0);
}

tree::TerminalNode* MySqlParser::AlterViewContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::AlterViewContext::getRuleIndex() const {
  return MySqlParser::RuleAlterView;
}


MySqlParser::AlterViewContext* MySqlParser::alterView() {
  AlterViewContext *_localctx = _tracker.createInstance<AlterViewContext>(_ctx, getState());
  enterRule(_localctx, 130, MySqlParser::RuleAlterView);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2244);
    match(MySqlParser::ALTER);
    setState(2248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALGORITHM) {
      setState(2245);
      match(MySqlParser::ALGORITHM);
      setState(2246);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(2247);
      dynamic_cast<AlterViewContext *>(_localctx)->algType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::MERGE || _la == MySqlParser::TEMPTABLE

      || _la == MySqlParser::UNDEFINED)) {
        dynamic_cast<AlterViewContext *>(_localctx)->algType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(2250);
      ownerStatement();
    }
    setState(2256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SQL) {
      setState(2253);
      match(MySqlParser::SQL);
      setState(2254);
      match(MySqlParser::SECURITY);
      setState(2255);
      dynamic_cast<AlterViewContext *>(_localctx)->secContext = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFINER

      || _la == MySqlParser::INVOKER)) {
        dynamic_cast<AlterViewContext *>(_localctx)->secContext = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2258);
    match(MySqlParser::VIEW);
    setState(2259);
    fullId();
    setState(2264);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(2260);
      match(MySqlParser::LR_BRACKET);
      setState(2261);
      uidList();
      setState(2262);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2266);
    match(MySqlParser::AS);
    setState(2267);
    selectStatement();
    setState(2274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(2268);
      match(MySqlParser::WITH);
      setState(2270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL) {
        setState(2269);
        dynamic_cast<AlterViewContext *>(_localctx)->checkOpt = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL)) {
          dynamic_cast<AlterViewContext *>(_localctx)->checkOpt = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2272);
      match(MySqlParser::CHECK);
      setState(2273);
      match(MySqlParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterSpecificationContext ------------------------------------------------------------------

MySqlParser::AlterSpecificationContext::AlterSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::AlterSpecificationContext::getRuleIndex() const {
  return MySqlParser::RuleAlterSpecification;
}

void MySqlParser::AlterSpecificationContext::copyFrom(AlterSpecificationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterByDisableKeysContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDisableKeysContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::AlterByDisableKeysContext::KEYS() {
  return getToken(MySqlParser::KEYS, 0);
}

MySqlParser::AlterByDisableKeysContext::AlterByDisableKeysContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDefaultCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDefaultCharsetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::AlterByDefaultCharsetContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterByDefaultCharsetContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::AlterByDefaultCharsetContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

MySqlParser::CharsetNameContext* MySqlParser::AlterByDefaultCharsetContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByDefaultCharsetContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::AlterByDefaultCharsetContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::AlterByDefaultCharsetContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

MySqlParser::AlterByDefaultCharsetContext::AlterByDefaultCharsetContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByRenameColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByRenameColumnContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::AlterByRenameColumnContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AlterByRenameColumnContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByRenameColumnContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByRenameColumnContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::AlterByRenameColumnContext::AlterByRenameColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByConvertCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByConvertCharsetContext::CONVERT() {
  return getToken(MySqlParser::CONVERT, 0);
}

tree::TerminalNode* MySqlParser::AlterByConvertCharsetContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::AlterByConvertCharsetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::AlterByConvertCharsetContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::AlterByConvertCharsetContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByConvertCharsetContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::AlterByConvertCharsetContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

MySqlParser::AlterByConvertCharsetContext::AlterByConvertCharsetContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddPartitionContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddPartitionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::PartitionDefinitionContext *> MySqlParser::AlterByAddPartitionContext::partitionDefinition() {
  return getRuleContexts<MySqlParser::PartitionDefinitionContext>();
}

MySqlParser::PartitionDefinitionContext* MySqlParser::AlterByAddPartitionContext::partitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinitionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByAddPartitionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterByAddPartitionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterByAddPartitionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::AlterByAddPartitionContext::AlterByAddPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddForeignKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddForeignKeyContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddForeignKeyContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddForeignKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::AlterByAddForeignKeyContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

MySqlParser::ReferenceDefinitionContext* MySqlParser::AlterByAddForeignKeyContext::referenceDefinition() {
  return getRuleContext<MySqlParser::ReferenceDefinitionContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddForeignKeyContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByAddForeignKeyContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByAddForeignKeyContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::AlterByAddForeignKeyContext::AlterByAddForeignKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByRenameIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByRenameIndexContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByRenameIndexContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByRenameIndexContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByRenameIndexContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::AlterByRenameIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AlterByRenameIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AlterByRenameIndexContext::AlterByRenameIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByRemovePartitioningContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByRemovePartitioningContext::REMOVE() {
  return getToken(MySqlParser::REMOVE, 0);
}

tree::TerminalNode* MySqlParser::AlterByRemovePartitioningContext::PARTITIONING() {
  return getToken(MySqlParser::PARTITIONING, 0);
}

MySqlParser::AlterByRemovePartitioningContext::AlterByRemovePartitioningContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByRenameContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByRenameContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByRenameContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::FullIdContext* MySqlParser::AlterByRenameContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByRenameContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::AlterByRenameContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::AlterByRenameContext::AlterByRenameContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByOptimizePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByOptimizePartitionContext::OPTIMIZE() {
  return getToken(MySqlParser::OPTIMIZE, 0);
}

tree::TerminalNode* MySqlParser::AlterByOptimizePartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByOptimizePartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByOptimizePartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByOptimizePartitionContext::AlterByOptimizePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByImportTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByImportTablespaceContext::IMPORT() {
  return getToken(MySqlParser::IMPORT, 0);
}

tree::TerminalNode* MySqlParser::AlterByImportTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::AlterByImportTablespaceContext::AlterByImportTablespaceContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByCoalescePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByCoalescePartitionContext::COALESCE() {
  return getToken(MySqlParser::COALESCE, 0);
}

tree::TerminalNode* MySqlParser::AlterByCoalescePartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::AlterByCoalescePartitionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::AlterByCoalescePartitionContext::AlterByCoalescePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDropConstraintCheckContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDropConstraintCheckContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByDropConstraintCheckContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByDropConstraintCheckContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropConstraintCheckContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

MySqlParser::AlterByDropConstraintCheckContext::AlterByDropConstraintCheckContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddColumnsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddColumnsContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnsContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByAddColumnsContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByAddColumnsContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

std::vector<MySqlParser::ColumnDefinitionContext *> MySqlParser::AlterByAddColumnsContext::columnDefinition() {
  return getRuleContexts<MySqlParser::ColumnDefinitionContext>();
}

MySqlParser::ColumnDefinitionContext* MySqlParser::AlterByAddColumnsContext::columnDefinition(size_t i) {
  return getRuleContext<MySqlParser::ColumnDefinitionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnsContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnsContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterByAddColumnsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::AlterByAddColumnsContext::AlterByAddColumnsContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAlterIndexVisibilityContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAlterIndexVisibilityContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterByAlterIndexVisibilityContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByAlterIndexVisibilityContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAlterIndexVisibilityContext::VISIBLE() {
  return getToken(MySqlParser::VISIBLE, 0);
}

tree::TerminalNode* MySqlParser::AlterByAlterIndexVisibilityContext::INVISIBLE() {
  return getToken(MySqlParser::INVISIBLE, 0);
}

MySqlParser::AlterByAlterIndexVisibilityContext::AlterByAlterIndexVisibilityContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDropForeignKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDropForeignKeyContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropForeignKeyContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropForeignKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByDropForeignKeyContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::AlterByDropForeignKeyContext::AlterByDropForeignKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddCheckTableConstraintContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddCheckTableConstraintContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddCheckTableConstraintContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddCheckTableConstraintContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::AlterByAddCheckTableConstraintContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddCheckTableConstraintContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddCheckTableConstraintContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByAddCheckTableConstraintContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::AlterByAddCheckTableConstraintContext::AlterByAddCheckTableConstraintContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByRebuildPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByRebuildPartitionContext::REBUILD() {
  return getToken(MySqlParser::REBUILD, 0);
}

tree::TerminalNode* MySqlParser::AlterByRebuildPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByRebuildPartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByRebuildPartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByRebuildPartitionContext::AlterByRebuildPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByUpgradePartitioningContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByUpgradePartitioningContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::AlterByUpgradePartitioningContext::PARTITIONING() {
  return getToken(MySqlParser::PARTITIONING, 0);
}

MySqlParser::AlterByUpgradePartitioningContext::AlterByUpgradePartitioningContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByRepairPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByRepairPartitionContext::REPAIR() {
  return getToken(MySqlParser::REPAIR, 0);
}

tree::TerminalNode* MySqlParser::AlterByRepairPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByRepairPartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByRepairPartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByRepairPartitionContext::AlterByRepairPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByExchangePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByExchangePartitionContext::EXCHANGE() {
  return getToken(MySqlParser::EXCHANGE, 0);
}

tree::TerminalNode* MySqlParser::AlterByExchangePartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByExchangePartitionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterByExchangePartitionContext::WITH() {
  return getTokens(MySqlParser::WITH);
}

tree::TerminalNode* MySqlParser::AlterByExchangePartitionContext::WITH(size_t i) {
  return getToken(MySqlParser::WITH, i);
}

tree::TerminalNode* MySqlParser::AlterByExchangePartitionContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TableNameContext* MySqlParser::AlterByExchangePartitionContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByExchangePartitionContext::VALIDATION() {
  return getToken(MySqlParser::VALIDATION, 0);
}

tree::TerminalNode* MySqlParser::AlterByExchangePartitionContext::WITHOUT() {
  return getToken(MySqlParser::WITHOUT, 0);
}

MySqlParser::AlterByExchangePartitionContext::AlterByExchangePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddIndexContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::AlterByAddIndexContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByAddIndexContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::IndexTypeContext* MySqlParser::AlterByAddIndexContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::AlterByAddIndexContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::AlterByAddIndexContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

MySqlParser::AlterByAddIndexContext::AlterByAddIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDropColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDropColumnContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByDropColumnContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByDropColumnContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropColumnContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

MySqlParser::AlterByDropColumnContext::AlterByDropColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByImportPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByImportPartitionContext::IMPORT() {
  return getToken(MySqlParser::IMPORT, 0);
}

tree::TerminalNode* MySqlParser::AlterByImportPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::AlterByImportPartitionContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByImportPartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByImportPartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByImportPartitionContext::AlterByImportPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByChangeDefaultContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByChangeDefaultContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByChangeDefaultContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByChangeDefaultContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::AlterByChangeDefaultContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::DefaultValueContext* MySqlParser::AlterByChangeDefaultContext::defaultValue() {
  return getRuleContext<MySqlParser::DefaultValueContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByChangeDefaultContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AlterByChangeDefaultContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

MySqlParser::AlterByChangeDefaultContext::AlterByChangeDefaultContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByForceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByForceContext::FORCE() {
  return getToken(MySqlParser::FORCE, 0);
}

MySqlParser::AlterByForceContext::AlterByForceContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDropPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDropPartitionContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByDropPartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

MySqlParser::AlterByDropPartitionContext::AlterByDropPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddSpecialIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddSpecialIndexContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::AlterByAddSpecialIndexContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddSpecialIndexContext::FULLTEXT() {
  return getToken(MySqlParser::FULLTEXT, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddSpecialIndexContext::SPATIAL() {
  return getToken(MySqlParser::SPATIAL, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByAddSpecialIndexContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::AlterByAddSpecialIndexContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::AlterByAddSpecialIndexContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByAddSpecialIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddSpecialIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AlterByAddSpecialIndexContext::AlterByAddSpecialIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByModifyColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByModifyColumnContext::MODIFY() {
  return getToken(MySqlParser::MODIFY, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByModifyColumnContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByModifyColumnContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::ColumnDefinitionContext* MySqlParser::AlterByModifyColumnContext::columnDefinition() {
  return getRuleContext<MySqlParser::ColumnDefinitionContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByModifyColumnContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AlterByModifyColumnContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::AlterByModifyColumnContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

MySqlParser::AlterByModifyColumnContext::AlterByModifyColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByTableOptionContext ------------------------------------------------------------------

std::vector<MySqlParser::TableOptionContext *> MySqlParser::AlterByTableOptionContext::tableOption() {
  return getRuleContexts<MySqlParser::TableOptionContext>();
}

MySqlParser::TableOptionContext* MySqlParser::AlterByTableOptionContext::tableOption(size_t i) {
  return getRuleContext<MySqlParser::TableOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterByTableOptionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterByTableOptionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::AlterByTableOptionContext::AlterByTableOptionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDropPrimaryKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDropPrimaryKeyContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropPrimaryKeyContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropPrimaryKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AlterByDropPrimaryKeyContext::AlterByDropPrimaryKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByLockContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByLockContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::AlterByLockContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::AlterByLockContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

tree::TerminalNode* MySqlParser::AlterByLockContext::SHARED() {
  return getToken(MySqlParser::SHARED, 0);
}

tree::TerminalNode* MySqlParser::AlterByLockContext::EXCLUSIVE() {
  return getToken(MySqlParser::EXCLUSIVE, 0);
}

tree::TerminalNode* MySqlParser::AlterByLockContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::AlterByLockContext::AlterByLockContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDiscardPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDiscardPartitionContext::DISCARD() {
  return getToken(MySqlParser::DISCARD, 0);
}

tree::TerminalNode* MySqlParser::AlterByDiscardPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::AlterByDiscardPartitionContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByDiscardPartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByDiscardPartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByDiscardPartitionContext::AlterByDiscardPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDiscardTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDiscardTablespaceContext::DISCARD() {
  return getToken(MySqlParser::DISCARD, 0);
}

tree::TerminalNode* MySqlParser::AlterByDiscardTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::AlterByDiscardTablespaceContext::AlterByDiscardTablespaceContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByValidateContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByValidateContext::VALIDATION() {
  return getToken(MySqlParser::VALIDATION, 0);
}

tree::TerminalNode* MySqlParser::AlterByValidateContext::WITHOUT() {
  return getToken(MySqlParser::WITHOUT, 0);
}

tree::TerminalNode* MySqlParser::AlterByValidateContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

MySqlParser::AlterByValidateContext::AlterByValidateContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddPrimaryKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddPrimaryKeyContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddPrimaryKeyContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddPrimaryKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::AlterByAddPrimaryKeyContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddPrimaryKeyContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::IndexTypeContext* MySqlParser::AlterByAddPrimaryKeyContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::AlterByAddPrimaryKeyContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::AlterByAddPrimaryKeyContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByAddPrimaryKeyContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByAddPrimaryKeyContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::AlterByAddPrimaryKeyContext::AlterByAddPrimaryKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByCheckPartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByCheckPartitionContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::AlterByCheckPartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByCheckPartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByCheckPartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByCheckPartitionContext::AlterByCheckPartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByEnableKeysContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByEnableKeysContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::AlterByEnableKeysContext::KEYS() {
  return getToken(MySqlParser::KEYS, 0);
}

MySqlParser::AlterByEnableKeysContext::AlterByEnableKeysContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByReorganizePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByReorganizePartitionContext::REORGANIZE() {
  return getToken(MySqlParser::REORGANIZE, 0);
}

tree::TerminalNode* MySqlParser::AlterByReorganizePartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByReorganizePartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByReorganizePartitionContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::AlterByReorganizePartitionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::PartitionDefinitionContext *> MySqlParser::AlterByReorganizePartitionContext::partitionDefinition() {
  return getRuleContexts<MySqlParser::PartitionDefinitionContext>();
}

MySqlParser::PartitionDefinitionContext* MySqlParser::AlterByReorganizePartitionContext::partitionDefinition(size_t i) {
  return getRuleContext<MySqlParser::PartitionDefinitionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByReorganizePartitionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterByReorganizePartitionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterByReorganizePartitionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::AlterByReorganizePartitionContext::AlterByReorganizePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterBySetAlgorithmContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterBySetAlgorithmContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::AlterBySetAlgorithmContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::AlterBySetAlgorithmContext::INPLACE() {
  return getToken(MySqlParser::INPLACE, 0);
}

tree::TerminalNode* MySqlParser::AlterBySetAlgorithmContext::COPY() {
  return getToken(MySqlParser::COPY, 0);
}

tree::TerminalNode* MySqlParser::AlterBySetAlgorithmContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::AlterBySetAlgorithmContext::AlterBySetAlgorithmContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAnalyzePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAnalyzePartitionContext::ANALYZE() {
  return getToken(MySqlParser::ANALYZE, 0);
}

tree::TerminalNode* MySqlParser::AlterByAnalyzePartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByAnalyzePartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAnalyzePartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByAnalyzePartitionContext::AlterByAnalyzePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByChangeColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByChangeColumnContext::CHANGE() {
  return getToken(MySqlParser::CHANGE, 0);
}

MySqlParser::ColumnDefinitionContext* MySqlParser::AlterByChangeColumnContext::columnDefinition() {
  return getRuleContext<MySqlParser::ColumnDefinitionContext>(0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByChangeColumnContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByChangeColumnContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByChangeColumnContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AlterByChangeColumnContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::AlterByChangeColumnContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

MySqlParser::AlterByChangeColumnContext::AlterByChangeColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddUniqueKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddUniqueKeyContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddUniqueKeyContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

MySqlParser::IndexColumnNamesContext* MySqlParser::AlterByAddUniqueKeyContext::indexColumnNames() {
  return getRuleContext<MySqlParser::IndexColumnNamesContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddUniqueKeyContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::IndexTypeContext* MySqlParser::AlterByAddUniqueKeyContext::indexType() {
  return getRuleContext<MySqlParser::IndexTypeContext>(0);
}

std::vector<MySqlParser::IndexOptionContext *> MySqlParser::AlterByAddUniqueKeyContext::indexOption() {
  return getRuleContexts<MySqlParser::IndexOptionContext>();
}

MySqlParser::IndexOptionContext* MySqlParser::AlterByAddUniqueKeyContext::indexOption(size_t i) {
  return getRuleContext<MySqlParser::IndexOptionContext>(i);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByAddUniqueKeyContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByAddUniqueKeyContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::AlterByAddUniqueKeyContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddUniqueKeyContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AlterByAddUniqueKeyContext::AlterByAddUniqueKeyContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByTruncatePartitionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByTruncatePartitionContext::TRUNCATE() {
  return getToken(MySqlParser::TRUNCATE, 0);
}

tree::TerminalNode* MySqlParser::AlterByTruncatePartitionContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByTruncatePartitionContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByTruncatePartitionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AlterByTruncatePartitionContext::AlterByTruncatePartitionContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByDropIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByDropIndexContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::UidContext* MySqlParser::AlterByDropIndexContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByDropIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AlterByDropIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AlterByDropIndexContext::AlterByDropIndexContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByAddColumnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByAddColumnContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::AlterByAddColumnContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::AlterByAddColumnContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

MySqlParser::ColumnDefinitionContext* MySqlParser::AlterByAddColumnContext::columnDefinition() {
  return getRuleContext<MySqlParser::ColumnDefinitionContext>(0);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::AlterByAddColumnContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

MySqlParser::AlterByAddColumnContext::AlterByAddColumnContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


//----------------- AlterByOrderContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterByOrderContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::AlterByOrderContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

MySqlParser::UidListContext* MySqlParser::AlterByOrderContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

MySqlParser::AlterByOrderContext::AlterByOrderContext(AlterSpecificationContext *ctx) { copyFrom(ctx); }


MySqlParser::AlterSpecificationContext* MySqlParser::alterSpecification() {
  AlterSpecificationContext *_localctx = _tracker.createInstance<AlterSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 132, MySqlParser::RuleAlterSpecification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(2642);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByTableOptionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2276);
      tableOption();
      setState(2283);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2278);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::COMMA) {
            setState(2277);
            match(MySqlParser::COMMA);
          }
          setState(2280);
          tableOption(); 
        }
        setState(2285);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddColumnContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2286);
      match(MySqlParser::ADD);
      setState(2288);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2287);
        match(MySqlParser::COLUMN);
      }
      setState(2290);
      uid();
      setState(2291);
      columnDefinition();
      setState(2295);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FIRST: {
          setState(2292);
          match(MySqlParser::FIRST);
          break;
        }

        case MySqlParser::AFTER: {
          setState(2293);
          match(MySqlParser::AFTER);
          setState(2294);
          uid();
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::ALTER:
        case MySqlParser::ANALYZE:
        case MySqlParser::CALL:
        case MySqlParser::CHANGE:
        case MySqlParser::CHECK:
        case MySqlParser::CREATE:
        case MySqlParser::DELETE:
        case MySqlParser::DESC:
        case MySqlParser::DESCRIBE:
        case MySqlParser::DROP:
        case MySqlParser::EXPLAIN:
        case MySqlParser::GET:
        case MySqlParser::GRANT:
        case MySqlParser::INSERT:
        case MySqlParser::KILL:
        case MySqlParser::LOAD:
        case MySqlParser::LOCK:
        case MySqlParser::OPTIMIZE:
        case MySqlParser::PARTITION:
        case MySqlParser::PURGE:
        case MySqlParser::RELEASE:
        case MySqlParser::RENAME:
        case MySqlParser::REPLACE:
        case MySqlParser::RESIGNAL:
        case MySqlParser::REVOKE:
        case MySqlParser::SELECT:
        case MySqlParser::SET:
        case MySqlParser::SHOW:
        case MySqlParser::SIGNAL:
        case MySqlParser::UNLOCK:
        case MySqlParser::UPDATE:
        case MySqlParser::USE:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::CACHE:
        case MySqlParser::CHECKSUM:
        case MySqlParser::COMMIT:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DO:
        case MySqlParser::FLUSH:
        case MySqlParser::HANDLER:
        case MySqlParser::HELP:
        case MySqlParser::INSTALL:
        case MySqlParser::PREPARE:
        case MySqlParser::REPAIR:
        case MySqlParser::RESET:
        case MySqlParser::ROLLBACK:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::START:
        case MySqlParser::STOP:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::XA:
        case MySqlParser::EXECUTE:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::MINUSMINUS:
        case MySqlParser::LR_BRACKET:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddColumnsContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2297);
      match(MySqlParser::ADD);
      setState(2299);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2298);
        match(MySqlParser::COLUMN);
      }
      setState(2301);
      match(MySqlParser::LR_BRACKET);
      setState(2302);
      uid();
      setState(2303);
      columnDefinition();
      setState(2310);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2304);
        match(MySqlParser::COMMA);
        setState(2305);
        uid();
        setState(2306);
        columnDefinition();
        setState(2312);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2313);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddIndexContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2315);
      match(MySqlParser::ADD);
      setState(2316);
      dynamic_cast<AlterByAddIndexContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY)) {
        dynamic_cast<AlterByAddIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2318);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(2317);
        uid();
      }
      setState(2321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(2320);
        indexType();
      }
      setState(2323);
      indexColumnNames();
      setState(2327);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

      || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
        setState(2324);
        indexOption();
        setState(2329);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddPrimaryKeyContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2330);
      match(MySqlParser::ADD);
      setState(2335);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2331);
        match(MySqlParser::CONSTRAINT);
        setState(2333);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(2332);
          dynamic_cast<AlterByAddPrimaryKeyContext *>(_localctx)->name = uid();
        }
      }
      setState(2337);
      match(MySqlParser::PRIMARY);
      setState(2338);
      match(MySqlParser::KEY);
      setState(2340);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(2339);
        dynamic_cast<AlterByAddPrimaryKeyContext *>(_localctx)->index = uid();
      }
      setState(2343);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(2342);
        indexType();
      }
      setState(2345);
      indexColumnNames();
      setState(2349);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

      || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
        setState(2346);
        indexOption();
        setState(2351);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddUniqueKeyContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2352);
      match(MySqlParser::ADD);
      setState(2357);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2353);
        match(MySqlParser::CONSTRAINT);
        setState(2355);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(2354);
          dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->name = uid();
        }
      }
      setState(2359);
      match(MySqlParser::UNIQUE);
      setState(2361);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(2360);
        dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
          dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2364);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(2363);
        dynamic_cast<AlterByAddUniqueKeyContext *>(_localctx)->indexName = uid();
      }
      setState(2367);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(2366);
        indexType();
      }
      setState(2369);
      indexColumnNames();
      setState(2373);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

      || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
        setState(2370);
        indexOption();
        setState(2375);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 7: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddSpecialIndexContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2376);
      match(MySqlParser::ADD);
      setState(2377);
      dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->keyType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL)) {
        dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->keyType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2379);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(2378);
        dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
          dynamic_cast<AlterByAddSpecialIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2382);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(2381);
        uid();
      }
      setState(2384);
      indexColumnNames();
      setState(2388);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::INVISIBLE

      || _la == MySqlParser::KEY_BLOCK_SIZE || _la == MySqlParser::VISIBLE) {
        setState(2385);
        indexOption();
        setState(2390);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 8: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddForeignKeyContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(2391);
      match(MySqlParser::ADD);
      setState(2396);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2392);
        match(MySqlParser::CONSTRAINT);
        setState(2394);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(2393);
          dynamic_cast<AlterByAddForeignKeyContext *>(_localctx)->name = uid();
        }
      }
      setState(2398);
      match(MySqlParser::FOREIGN);
      setState(2399);
      match(MySqlParser::KEY);
      setState(2401);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(2400);
        dynamic_cast<AlterByAddForeignKeyContext *>(_localctx)->indexName = uid();
      }
      setState(2403);
      indexColumnNames();
      setState(2404);
      referenceDefinition();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddCheckTableConstraintContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(2406);
      match(MySqlParser::ADD);
      setState(2411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2407);
        match(MySqlParser::CONSTRAINT);
        setState(2409);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(2408);
          dynamic_cast<AlterByAddCheckTableConstraintContext *>(_localctx)->name = uid();
        }
      }
      setState(2413);
      match(MySqlParser::CHECK);
      setState(2414);
      match(MySqlParser::LR_BRACKET);
      setState(2415);
      expression(0);
      setState(2416);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterBySetAlgorithmContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2418);
      match(MySqlParser::ALGORITHM);
      setState(2420);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2419);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2422);
      dynamic_cast<AlterBySetAlgorithmContext *>(_localctx)->algType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::COPY

      || _la == MySqlParser::INPLACE)) {
        dynamic_cast<AlterBySetAlgorithmContext *>(_localctx)->algType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 11: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByChangeDefaultContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(2423);
      match(MySqlParser::ALTER);
      setState(2425);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2424);
        match(MySqlParser::COLUMN);
      }
      setState(2427);
      uid();
      setState(2433);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::SET: {
          setState(2428);
          match(MySqlParser::SET);
          setState(2429);
          match(MySqlParser::DEFAULT);
          setState(2430);
          defaultValue();
          break;
        }

        case MySqlParser::DROP: {
          setState(2431);
          match(MySqlParser::DROP);
          setState(2432);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByChangeColumnContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(2435);
      match(MySqlParser::CHANGE);
      setState(2437);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2436);
        match(MySqlParser::COLUMN);
      }
      setState(2439);
      dynamic_cast<AlterByChangeColumnContext *>(_localctx)->oldColumn = uid();
      setState(2440);
      dynamic_cast<AlterByChangeColumnContext *>(_localctx)->newColumn = uid();
      setState(2441);
      columnDefinition();
      setState(2445);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FIRST: {
          setState(2442);
          match(MySqlParser::FIRST);
          break;
        }

        case MySqlParser::AFTER: {
          setState(2443);
          match(MySqlParser::AFTER);
          setState(2444);
          dynamic_cast<AlterByChangeColumnContext *>(_localctx)->afterColumn = uid();
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::ALTER:
        case MySqlParser::ANALYZE:
        case MySqlParser::CALL:
        case MySqlParser::CHANGE:
        case MySqlParser::CHECK:
        case MySqlParser::CREATE:
        case MySqlParser::DELETE:
        case MySqlParser::DESC:
        case MySqlParser::DESCRIBE:
        case MySqlParser::DROP:
        case MySqlParser::EXPLAIN:
        case MySqlParser::GET:
        case MySqlParser::GRANT:
        case MySqlParser::INSERT:
        case MySqlParser::KILL:
        case MySqlParser::LOAD:
        case MySqlParser::LOCK:
        case MySqlParser::OPTIMIZE:
        case MySqlParser::PARTITION:
        case MySqlParser::PURGE:
        case MySqlParser::RELEASE:
        case MySqlParser::RENAME:
        case MySqlParser::REPLACE:
        case MySqlParser::RESIGNAL:
        case MySqlParser::REVOKE:
        case MySqlParser::SELECT:
        case MySqlParser::SET:
        case MySqlParser::SHOW:
        case MySqlParser::SIGNAL:
        case MySqlParser::UNLOCK:
        case MySqlParser::UPDATE:
        case MySqlParser::USE:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::CACHE:
        case MySqlParser::CHECKSUM:
        case MySqlParser::COMMIT:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DO:
        case MySqlParser::FLUSH:
        case MySqlParser::HANDLER:
        case MySqlParser::HELP:
        case MySqlParser::INSTALL:
        case MySqlParser::PREPARE:
        case MySqlParser::REPAIR:
        case MySqlParser::RESET:
        case MySqlParser::ROLLBACK:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::START:
        case MySqlParser::STOP:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::XA:
        case MySqlParser::EXECUTE:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::MINUSMINUS:
        case MySqlParser::LR_BRACKET:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByRenameColumnContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(2447);
      match(MySqlParser::RENAME);
      setState(2448);
      match(MySqlParser::COLUMN);
      setState(2449);
      dynamic_cast<AlterByRenameColumnContext *>(_localctx)->oldColumn = uid();
      setState(2450);
      match(MySqlParser::TO);
      setState(2451);
      dynamic_cast<AlterByRenameColumnContext *>(_localctx)->newColumn = uid();
      break;
    }

    case 14: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByLockContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(2453);
      match(MySqlParser::LOCK);
      setState(2455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2454);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2457);
      dynamic_cast<AlterByLockContext *>(_localctx)->lockType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::EXCLUSIVE || _la == MySqlParser::NONE || _la == MySqlParser::SHARED)) {
        dynamic_cast<AlterByLockContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByModifyColumnContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(2458);
      match(MySqlParser::MODIFY);
      setState(2460);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2459);
        match(MySqlParser::COLUMN);
      }
      setState(2462);
      uid();
      setState(2463);
      columnDefinition();
      setState(2467);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FIRST: {
          setState(2464);
          match(MySqlParser::FIRST);
          break;
        }

        case MySqlParser::AFTER: {
          setState(2465);
          match(MySqlParser::AFTER);
          setState(2466);
          uid();
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::ALTER:
        case MySqlParser::ANALYZE:
        case MySqlParser::CALL:
        case MySqlParser::CHANGE:
        case MySqlParser::CHECK:
        case MySqlParser::CREATE:
        case MySqlParser::DELETE:
        case MySqlParser::DESC:
        case MySqlParser::DESCRIBE:
        case MySqlParser::DROP:
        case MySqlParser::EXPLAIN:
        case MySqlParser::GET:
        case MySqlParser::GRANT:
        case MySqlParser::INSERT:
        case MySqlParser::KILL:
        case MySqlParser::LOAD:
        case MySqlParser::LOCK:
        case MySqlParser::OPTIMIZE:
        case MySqlParser::PARTITION:
        case MySqlParser::PURGE:
        case MySqlParser::RELEASE:
        case MySqlParser::RENAME:
        case MySqlParser::REPLACE:
        case MySqlParser::RESIGNAL:
        case MySqlParser::REVOKE:
        case MySqlParser::SELECT:
        case MySqlParser::SET:
        case MySqlParser::SHOW:
        case MySqlParser::SIGNAL:
        case MySqlParser::UNLOCK:
        case MySqlParser::UPDATE:
        case MySqlParser::USE:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::CACHE:
        case MySqlParser::CHECKSUM:
        case MySqlParser::COMMIT:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DO:
        case MySqlParser::FLUSH:
        case MySqlParser::HANDLER:
        case MySqlParser::HELP:
        case MySqlParser::INSTALL:
        case MySqlParser::PREPARE:
        case MySqlParser::REPAIR:
        case MySqlParser::RESET:
        case MySqlParser::ROLLBACK:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::START:
        case MySqlParser::STOP:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::XA:
        case MySqlParser::EXECUTE:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::MINUSMINUS:
        case MySqlParser::LR_BRACKET:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 16: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDropColumnContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(2469);
      match(MySqlParser::DROP);
      setState(2471);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2470);
        match(MySqlParser::COLUMN);
      }
      setState(2473);
      uid();
      setState(2475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::RESTRICT) {
        setState(2474);
        match(MySqlParser::RESTRICT);
      }
      break;
    }

    case 17: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDropConstraintCheckContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(2477);
      match(MySqlParser::DROP);
      setState(2478);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CHECK

      || _la == MySqlParser::CONSTRAINT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2479);
      uid();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDropPrimaryKeyContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(2480);
      match(MySqlParser::DROP);
      setState(2481);
      match(MySqlParser::PRIMARY);
      setState(2482);
      match(MySqlParser::KEY);
      break;
    }

    case 19: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByRenameIndexContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(2483);
      match(MySqlParser::RENAME);
      setState(2484);
      dynamic_cast<AlterByRenameIndexContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY)) {
        dynamic_cast<AlterByRenameIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2485);
      uid();
      setState(2486);
      match(MySqlParser::TO);
      setState(2487);
      uid();
      break;
    }

    case 20: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAlterIndexVisibilityContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(2489);
      match(MySqlParser::ALTER);
      setState(2490);
      match(MySqlParser::INDEX);
      setState(2491);
      uid();
      setState(2492);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INVISIBLE || _la == MySqlParser::VISIBLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 21: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDropIndexContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(2494);
      match(MySqlParser::DROP);
      setState(2495);
      dynamic_cast<AlterByDropIndexContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY)) {
        dynamic_cast<AlterByDropIndexContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2496);
      uid();
      break;
    }

    case 22: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDropForeignKeyContext>(_localctx));
      enterOuterAlt(_localctx, 22);
      setState(2497);
      match(MySqlParser::DROP);
      setState(2498);
      match(MySqlParser::FOREIGN);
      setState(2499);
      match(MySqlParser::KEY);
      setState(2500);
      uid();
      break;
    }

    case 23: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDisableKeysContext>(_localctx));
      enterOuterAlt(_localctx, 23);
      setState(2501);
      match(MySqlParser::DISABLE);
      setState(2502);
      match(MySqlParser::KEYS);
      break;
    }

    case 24: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByEnableKeysContext>(_localctx));
      enterOuterAlt(_localctx, 24);
      setState(2503);
      match(MySqlParser::ENABLE);
      setState(2504);
      match(MySqlParser::KEYS);
      break;
    }

    case 25: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByRenameContext>(_localctx));
      enterOuterAlt(_localctx, 25);
      setState(2505);
      match(MySqlParser::RENAME);
      setState(2507);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS || _la == MySqlParser::TO) {
        setState(2506);
        dynamic_cast<AlterByRenameContext *>(_localctx)->renameFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::AS || _la == MySqlParser::TO)) {
          dynamic_cast<AlterByRenameContext *>(_localctx)->renameFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2511);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
      case 1: {
        setState(2509);
        uid();
        break;
      }

      case 2: {
        setState(2510);
        fullId();
        break;
      }

      }
      break;
    }

    case 26: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByOrderContext>(_localctx));
      enterOuterAlt(_localctx, 26);
      setState(2513);
      match(MySqlParser::ORDER);
      setState(2514);
      match(MySqlParser::BY);
      setState(2515);
      uidList();
      break;
    }

    case 27: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByConvertCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 27);
      setState(2516);
      match(MySqlParser::CONVERT);
      setState(2517);
      match(MySqlParser::TO);
      setState(2518);
      match(MySqlParser::CHARACTER);
      setState(2519);
      match(MySqlParser::SET);
      setState(2520);
      charsetName();
      setState(2523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLLATE) {
        setState(2521);
        match(MySqlParser::COLLATE);
        setState(2522);
        collationName();
      }
      break;
    }

    case 28: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDefaultCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 28);
      setState(2526);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(2525);
        match(MySqlParser::DEFAULT);
      }
      setState(2528);
      match(MySqlParser::CHARACTER);
      setState(2529);
      match(MySqlParser::SET);
      setState(2530);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(2531);
      charsetName();
      setState(2535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLLATE) {
        setState(2532);
        match(MySqlParser::COLLATE);
        setState(2533);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(2534);
        collationName();
      }
      break;
    }

    case 29: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDiscardTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 29);
      setState(2537);
      match(MySqlParser::DISCARD);
      setState(2538);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 30: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByImportTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 30);
      setState(2539);
      match(MySqlParser::IMPORT);
      setState(2540);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 31: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByForceContext>(_localctx));
      enterOuterAlt(_localctx, 31);
      setState(2541);
      match(MySqlParser::FORCE);
      break;
    }

    case 32: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByValidateContext>(_localctx));
      enterOuterAlt(_localctx, 32);
      setState(2542);
      dynamic_cast<AlterByValidateContext *>(_localctx)->validationFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::WITH || _la == MySqlParser::WITHOUT)) {
        dynamic_cast<AlterByValidateContext *>(_localctx)->validationFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2543);
      match(MySqlParser::VALIDATION);
      break;
    }

    case 33: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAddPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 33);
      setState(2544);
      match(MySqlParser::ADD);
      setState(2545);
      match(MySqlParser::PARTITION);
      setState(2546);
      match(MySqlParser::LR_BRACKET);
      setState(2547);
      partitionDefinition();
      setState(2552);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2548);
        match(MySqlParser::COMMA);
        setState(2549);
        partitionDefinition();
        setState(2554);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2555);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 34: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDropPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 34);
      setState(2557);
      match(MySqlParser::DROP);
      setState(2558);
      match(MySqlParser::PARTITION);
      setState(2559);
      uidList();
      break;
    }

    case 35: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByDiscardPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 35);
      setState(2560);
      match(MySqlParser::DISCARD);
      setState(2561);
      match(MySqlParser::PARTITION);
      setState(2564);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2562);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2563);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2566);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 36: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByImportPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 36);
      setState(2567);
      match(MySqlParser::IMPORT);
      setState(2568);
      match(MySqlParser::PARTITION);
      setState(2571);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2569);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2570);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2573);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 37: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByTruncatePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 37);
      setState(2574);
      match(MySqlParser::TRUNCATE);
      setState(2575);
      match(MySqlParser::PARTITION);
      setState(2578);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2576);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2577);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 38: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByCoalescePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 38);
      setState(2580);
      match(MySqlParser::COALESCE);
      setState(2581);
      match(MySqlParser::PARTITION);
      setState(2582);
      decimalLiteral();
      break;
    }

    case 39: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByReorganizePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 39);
      setState(2583);
      match(MySqlParser::REORGANIZE);
      setState(2584);
      match(MySqlParser::PARTITION);
      setState(2585);
      uidList();
      setState(2586);
      match(MySqlParser::INTO);
      setState(2587);
      match(MySqlParser::LR_BRACKET);
      setState(2588);
      partitionDefinition();
      setState(2593);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2589);
        match(MySqlParser::COMMA);
        setState(2590);
        partitionDefinition();
        setState(2595);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2596);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 40: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByExchangePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 40);
      setState(2598);
      match(MySqlParser::EXCHANGE);
      setState(2599);
      match(MySqlParser::PARTITION);
      setState(2600);
      uid();
      setState(2601);
      match(MySqlParser::WITH);
      setState(2602);
      match(MySqlParser::TABLE);
      setState(2603);
      tableName();
      setState(2606);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH || _la == MySqlParser::WITHOUT) {
        setState(2604);
        dynamic_cast<AlterByExchangePartitionContext *>(_localctx)->validationFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::WITH || _la == MySqlParser::WITHOUT)) {
          dynamic_cast<AlterByExchangePartitionContext *>(_localctx)->validationFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2605);
        match(MySqlParser::VALIDATION);
      }
      break;
    }

    case 41: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByAnalyzePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 41);
      setState(2608);
      match(MySqlParser::ANALYZE);
      setState(2609);
      match(MySqlParser::PARTITION);
      setState(2612);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2610);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2611);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 42: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByCheckPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 42);
      setState(2614);
      match(MySqlParser::CHECK);
      setState(2615);
      match(MySqlParser::PARTITION);
      setState(2618);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2616);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2617);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 43: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByOptimizePartitionContext>(_localctx));
      enterOuterAlt(_localctx, 43);
      setState(2620);
      match(MySqlParser::OPTIMIZE);
      setState(2621);
      match(MySqlParser::PARTITION);
      setState(2624);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2622);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2623);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 44: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByRebuildPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 44);
      setState(2626);
      match(MySqlParser::REBUILD);
      setState(2627);
      match(MySqlParser::PARTITION);
      setState(2630);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2628);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2629);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 45: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByRepairPartitionContext>(_localctx));
      enterOuterAlt(_localctx, 45);
      setState(2632);
      match(MySqlParser::REPAIR);
      setState(2633);
      match(MySqlParser::PARTITION);
      setState(2636);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2634);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(2635);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 46: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByRemovePartitioningContext>(_localctx));
      enterOuterAlt(_localctx, 46);
      setState(2638);
      match(MySqlParser::REMOVE);
      setState(2639);
      match(MySqlParser::PARTITIONING);
      break;
    }

    case 47: {
      _localctx = dynamic_cast<AlterSpecificationContext *>(_tracker.createInstance<MySqlParser::AlterByUpgradePartitioningContext>(_localctx));
      enterOuterAlt(_localctx, 47);
      setState(2640);
      match(MySqlParser::UPGRADE);
      setState(2641);
      match(MySqlParser::PARTITIONING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropDatabaseContext ------------------------------------------------------------------

MySqlParser::DropDatabaseContext::DropDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropDatabaseContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::UidContext* MySqlParser::DropDatabaseContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DropDatabaseContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::DropDatabaseContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::IfExistsContext* MySqlParser::DropDatabaseContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}


size_t MySqlParser::DropDatabaseContext::getRuleIndex() const {
  return MySqlParser::RuleDropDatabase;
}


MySqlParser::DropDatabaseContext* MySqlParser::dropDatabase() {
  DropDatabaseContext *_localctx = _tracker.createInstance<DropDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 134, MySqlParser::RuleDropDatabase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2644);
    match(MySqlParser::DROP);
    setState(2645);
    dynamic_cast<DropDatabaseContext *>(_localctx)->dbFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
      dynamic_cast<DropDatabaseContext *>(_localctx)->dbFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2646);
      ifExists();
    }
    setState(2649);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropEventContext ------------------------------------------------------------------

MySqlParser::DropEventContext::DropEventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropEventContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropEventContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

MySqlParser::FullIdContext* MySqlParser::DropEventContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

MySqlParser::IfExistsContext* MySqlParser::DropEventContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}


size_t MySqlParser::DropEventContext::getRuleIndex() const {
  return MySqlParser::RuleDropEvent;
}


MySqlParser::DropEventContext* MySqlParser::dropEvent() {
  DropEventContext *_localctx = _tracker.createInstance<DropEventContext>(_ctx, getState());
  enterRule(_localctx, 136, MySqlParser::RuleDropEvent);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2651);
    match(MySqlParser::DROP);
    setState(2652);
    match(MySqlParser::EVENT);
    setState(2654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2653);
      ifExists();
    }
    setState(2656);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropIndexContext ------------------------------------------------------------------

MySqlParser::DropIndexContext::DropIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropIndexContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

MySqlParser::UidContext* MySqlParser::DropIndexContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DropIndexContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::TableNameContext* MySqlParser::DropIndexContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::ALGORITHM() {
  return getTokens(MySqlParser::ALGORITHM);
}

tree::TerminalNode* MySqlParser::DropIndexContext::ALGORITHM(size_t i) {
  return getToken(MySqlParser::ALGORITHM, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::LOCK() {
  return getTokens(MySqlParser::LOCK);
}

tree::TerminalNode* MySqlParser::DropIndexContext::LOCK(size_t i) {
  return getToken(MySqlParser::LOCK, i);
}

tree::TerminalNode* MySqlParser::DropIndexContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::DropIndexContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::DEFAULT() {
  return getTokens(MySqlParser::DEFAULT);
}

tree::TerminalNode* MySqlParser::DropIndexContext::DEFAULT(size_t i) {
  return getToken(MySqlParser::DEFAULT, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::INPLACE() {
  return getTokens(MySqlParser::INPLACE);
}

tree::TerminalNode* MySqlParser::DropIndexContext::INPLACE(size_t i) {
  return getToken(MySqlParser::INPLACE, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::COPY() {
  return getTokens(MySqlParser::COPY);
}

tree::TerminalNode* MySqlParser::DropIndexContext::COPY(size_t i) {
  return getToken(MySqlParser::COPY, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::NONE() {
  return getTokens(MySqlParser::NONE);
}

tree::TerminalNode* MySqlParser::DropIndexContext::NONE(size_t i) {
  return getToken(MySqlParser::NONE, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::SHARED() {
  return getTokens(MySqlParser::SHARED);
}

tree::TerminalNode* MySqlParser::DropIndexContext::SHARED(size_t i) {
  return getToken(MySqlParser::SHARED, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::EXCLUSIVE() {
  return getTokens(MySqlParser::EXCLUSIVE);
}

tree::TerminalNode* MySqlParser::DropIndexContext::EXCLUSIVE(size_t i) {
  return getToken(MySqlParser::EXCLUSIVE, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DropIndexContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::DropIndexContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}


size_t MySqlParser::DropIndexContext::getRuleIndex() const {
  return MySqlParser::RuleDropIndex;
}


MySqlParser::DropIndexContext* MySqlParser::dropIndex() {
  DropIndexContext *_localctx = _tracker.createInstance<DropIndexContext>(_ctx, getState());
  enterRule(_localctx, 138, MySqlParser::RuleDropIndex);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2658);
    match(MySqlParser::DROP);
    setState(2659);
    match(MySqlParser::INDEX);
    setState(2661);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      setState(2660);
      dynamic_cast<DropIndexContext *>(_localctx)->intimeAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::OFFLINE

      || _la == MySqlParser::ONLINE)) {
        dynamic_cast<DropIndexContext *>(_localctx)->intimeAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(2663);
    uid();
    setState(2664);
    match(MySqlParser::ON);
    setState(2665);
    tableName();
    setState(2678);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2676);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ALGORITHM: {
            setState(2666);
            match(MySqlParser::ALGORITHM);
            setState(2668);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::EQUAL_SYMBOL) {
              setState(2667);
              match(MySqlParser::EQUAL_SYMBOL);
            }
            setState(2670);
            dynamic_cast<DropIndexContext *>(_localctx)->algType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::COPY

            || _la == MySqlParser::INPLACE)) {
              dynamic_cast<DropIndexContext *>(_localctx)->algType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case MySqlParser::LOCK: {
            setState(2671);
            match(MySqlParser::LOCK);
            setState(2673);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::EQUAL_SYMBOL) {
              setState(2672);
              match(MySqlParser::EQUAL_SYMBOL);
            }
            setState(2675);
            dynamic_cast<DropIndexContext *>(_localctx)->lockType = _input->LT(1);
            _la = _input->LA(1);
            if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::EXCLUSIVE || _la == MySqlParser::NONE || _la == MySqlParser::SHARED)) {
              dynamic_cast<DropIndexContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2680);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropLogfileGroupContext ------------------------------------------------------------------

MySqlParser::DropLogfileGroupContext::DropLogfileGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropLogfileGroupContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropLogfileGroupContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::DropLogfileGroupContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

MySqlParser::UidContext* MySqlParser::DropLogfileGroupContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DropLogfileGroupContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

tree::TerminalNode* MySqlParser::DropLogfileGroupContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::EngineNameContext* MySqlParser::DropLogfileGroupContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}


size_t MySqlParser::DropLogfileGroupContext::getRuleIndex() const {
  return MySqlParser::RuleDropLogfileGroup;
}


MySqlParser::DropLogfileGroupContext* MySqlParser::dropLogfileGroup() {
  DropLogfileGroupContext *_localctx = _tracker.createInstance<DropLogfileGroupContext>(_ctx, getState());
  enterRule(_localctx, 140, MySqlParser::RuleDropLogfileGroup);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2681);
    match(MySqlParser::DROP);
    setState(2682);
    match(MySqlParser::LOGFILE);
    setState(2683);
    match(MySqlParser::GROUP);
    setState(2684);
    uid();
    setState(2685);
    match(MySqlParser::ENGINE);
    setState(2686);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(2687);
    engineName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropProcedureContext ------------------------------------------------------------------

MySqlParser::DropProcedureContext::DropProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropProcedureContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropProcedureContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::FullIdContext* MySqlParser::DropProcedureContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

MySqlParser::IfExistsContext* MySqlParser::DropProcedureContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}


size_t MySqlParser::DropProcedureContext::getRuleIndex() const {
  return MySqlParser::RuleDropProcedure;
}


MySqlParser::DropProcedureContext* MySqlParser::dropProcedure() {
  DropProcedureContext *_localctx = _tracker.createInstance<DropProcedureContext>(_ctx, getState());
  enterRule(_localctx, 142, MySqlParser::RuleDropProcedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2689);
    match(MySqlParser::DROP);
    setState(2690);
    match(MySqlParser::PROCEDURE);
    setState(2692);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2691);
      ifExists();
    }
    setState(2694);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropFunctionContext ------------------------------------------------------------------

MySqlParser::DropFunctionContext::DropFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropFunctionContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropFunctionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::FullIdContext* MySqlParser::DropFunctionContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

MySqlParser::IfExistsContext* MySqlParser::DropFunctionContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}


size_t MySqlParser::DropFunctionContext::getRuleIndex() const {
  return MySqlParser::RuleDropFunction;
}


MySqlParser::DropFunctionContext* MySqlParser::dropFunction() {
  DropFunctionContext *_localctx = _tracker.createInstance<DropFunctionContext>(_ctx, getState());
  enterRule(_localctx, 144, MySqlParser::RuleDropFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2696);
    match(MySqlParser::DROP);
    setState(2697);
    match(MySqlParser::FUNCTION);
    setState(2699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2698);
      ifExists();
    }
    setState(2701);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropServerContext ------------------------------------------------------------------

MySqlParser::DropServerContext::DropServerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropServerContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropServerContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

MySqlParser::UidContext* MySqlParser::DropServerContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::IfExistsContext* MySqlParser::DropServerContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}


size_t MySqlParser::DropServerContext::getRuleIndex() const {
  return MySqlParser::RuleDropServer;
}


MySqlParser::DropServerContext* MySqlParser::dropServer() {
  DropServerContext *_localctx = _tracker.createInstance<DropServerContext>(_ctx, getState());
  enterRule(_localctx, 146, MySqlParser::RuleDropServer);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2703);
    match(MySqlParser::DROP);
    setState(2704);
    match(MySqlParser::SERVER);
    setState(2706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2705);
      ifExists();
    }
    setState(2708);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropTableContext ------------------------------------------------------------------

MySqlParser::DropTableContext::DropTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropTableContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TablesContext* MySqlParser::DropTableContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::DropTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::IfExistsContext* MySqlParser::DropTableContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}

tree::TerminalNode* MySqlParser::DropTableContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

tree::TerminalNode* MySqlParser::DropTableContext::CASCADE() {
  return getToken(MySqlParser::CASCADE, 0);
}


size_t MySqlParser::DropTableContext::getRuleIndex() const {
  return MySqlParser::RuleDropTable;
}


MySqlParser::DropTableContext* MySqlParser::dropTable() {
  DropTableContext *_localctx = _tracker.createInstance<DropTableContext>(_ctx, getState());
  enterRule(_localctx, 148, MySqlParser::RuleDropTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2710);
    match(MySqlParser::DROP);
    setState(2712);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::TEMPORARY) {
      setState(2711);
      match(MySqlParser::TEMPORARY);
    }
    setState(2714);
    match(MySqlParser::TABLE);
    setState(2716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2715);
      ifExists();
    }
    setState(2718);
    tables();
    setState(2720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT) {
      setState(2719);
      dynamic_cast<DropTableContext *>(_localctx)->dropType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT)) {
        dynamic_cast<DropTableContext *>(_localctx)->dropType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropTablespaceContext ------------------------------------------------------------------

MySqlParser::DropTablespaceContext::DropTablespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropTablespaceContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::UidContext* MySqlParser::DropTablespaceContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DropTablespaceContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::DropTablespaceContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

tree::TerminalNode* MySqlParser::DropTablespaceContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}


size_t MySqlParser::DropTablespaceContext::getRuleIndex() const {
  return MySqlParser::RuleDropTablespace;
}


MySqlParser::DropTablespaceContext* MySqlParser::dropTablespace() {
  DropTablespaceContext *_localctx = _tracker.createInstance<DropTablespaceContext>(_ctx, getState());
  enterRule(_localctx, 150, MySqlParser::RuleDropTablespace);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2722);
    match(MySqlParser::DROP);
    setState(2723);
    match(MySqlParser::TABLESPACE);
    setState(2724);
    uid();
    setState(2730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ENGINE) {
      setState(2725);
      match(MySqlParser::ENGINE);
      setState(2727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2726);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2729);
      engineName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropTriggerContext ------------------------------------------------------------------

MySqlParser::DropTriggerContext::DropTriggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropTriggerContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropTriggerContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

MySqlParser::FullIdContext* MySqlParser::DropTriggerContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

MySqlParser::IfExistsContext* MySqlParser::DropTriggerContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}


size_t MySqlParser::DropTriggerContext::getRuleIndex() const {
  return MySqlParser::RuleDropTrigger;
}


MySqlParser::DropTriggerContext* MySqlParser::dropTrigger() {
  DropTriggerContext *_localctx = _tracker.createInstance<DropTriggerContext>(_ctx, getState());
  enterRule(_localctx, 152, MySqlParser::RuleDropTrigger);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2732);
    match(MySqlParser::DROP);
    setState(2733);
    match(MySqlParser::TRIGGER);
    setState(2735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2734);
      ifExists();
    }
    setState(2737);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropViewContext ------------------------------------------------------------------

MySqlParser::DropViewContext::DropViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropViewContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropViewContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

std::vector<MySqlParser::FullIdContext *> MySqlParser::DropViewContext::fullId() {
  return getRuleContexts<MySqlParser::FullIdContext>();
}

MySqlParser::FullIdContext* MySqlParser::DropViewContext::fullId(size_t i) {
  return getRuleContext<MySqlParser::FullIdContext>(i);
}

MySqlParser::IfExistsContext* MySqlParser::DropViewContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::DropViewContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::DropViewContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::DropViewContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

tree::TerminalNode* MySqlParser::DropViewContext::CASCADE() {
  return getToken(MySqlParser::CASCADE, 0);
}


size_t MySqlParser::DropViewContext::getRuleIndex() const {
  return MySqlParser::RuleDropView;
}


MySqlParser::DropViewContext* MySqlParser::dropView() {
  DropViewContext *_localctx = _tracker.createInstance<DropViewContext>(_ctx, getState());
  enterRule(_localctx, 154, MySqlParser::RuleDropView);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2739);
    match(MySqlParser::DROP);
    setState(2740);
    match(MySqlParser::VIEW);
    setState(2742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2741);
      ifExists();
    }
    setState(2744);
    fullId();
    setState(2749);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(2745);
      match(MySqlParser::COMMA);
      setState(2746);
      fullId();
      setState(2751);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT) {
      setState(2752);
      dynamic_cast<DropViewContext *>(_localctx)->dropType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT)) {
        dynamic_cast<DropViewContext *>(_localctx)->dropType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameTableContext ------------------------------------------------------------------

MySqlParser::RenameTableContext::RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RenameTableContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::RenameTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

std::vector<MySqlParser::RenameTableClauseContext *> MySqlParser::RenameTableContext::renameTableClause() {
  return getRuleContexts<MySqlParser::RenameTableClauseContext>();
}

MySqlParser::RenameTableClauseContext* MySqlParser::RenameTableContext::renameTableClause(size_t i) {
  return getRuleContext<MySqlParser::RenameTableClauseContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::RenameTableContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::RenameTableContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::RenameTableContext::getRuleIndex() const {
  return MySqlParser::RuleRenameTable;
}


MySqlParser::RenameTableContext* MySqlParser::renameTable() {
  RenameTableContext *_localctx = _tracker.createInstance<RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 156, MySqlParser::RuleRenameTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2755);
    match(MySqlParser::RENAME);
    setState(2756);
    match(MySqlParser::TABLE);
    setState(2757);
    renameTableClause();
    setState(2762);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(2758);
      match(MySqlParser::COMMA);
      setState(2759);
      renameTableClause();
      setState(2764);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameTableClauseContext ------------------------------------------------------------------

MySqlParser::RenameTableClauseContext::RenameTableClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::TableNameContext *> MySqlParser::RenameTableClauseContext::tableName() {
  return getRuleContexts<MySqlParser::TableNameContext>();
}

MySqlParser::TableNameContext* MySqlParser::RenameTableClauseContext::tableName(size_t i) {
  return getRuleContext<MySqlParser::TableNameContext>(i);
}

tree::TerminalNode* MySqlParser::RenameTableClauseContext::TO() {
  return getToken(MySqlParser::TO, 0);
}


size_t MySqlParser::RenameTableClauseContext::getRuleIndex() const {
  return MySqlParser::RuleRenameTableClause;
}


MySqlParser::RenameTableClauseContext* MySqlParser::renameTableClause() {
  RenameTableClauseContext *_localctx = _tracker.createInstance<RenameTableClauseContext>(_ctx, getState());
  enterRule(_localctx, 158, MySqlParser::RuleRenameTableClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2765);
    tableName();
    setState(2766);
    match(MySqlParser::TO);
    setState(2767);
    tableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruncateTableContext ------------------------------------------------------------------

MySqlParser::TruncateTableContext::TruncateTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TruncateTableContext::TRUNCATE() {
  return getToken(MySqlParser::TRUNCATE, 0);
}

MySqlParser::TableNameContext* MySqlParser::TruncateTableContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::TruncateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}


size_t MySqlParser::TruncateTableContext::getRuleIndex() const {
  return MySqlParser::RuleTruncateTable;
}


MySqlParser::TruncateTableContext* MySqlParser::truncateTable() {
  TruncateTableContext *_localctx = _tracker.createInstance<TruncateTableContext>(_ctx, getState());
  enterRule(_localctx, 160, MySqlParser::RuleTruncateTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2769);
    match(MySqlParser::TRUNCATE);
    setState(2771);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::TABLE) {
      setState(2770);
      match(MySqlParser::TABLE);
    }
    setState(2773);
    tableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallStatementContext ------------------------------------------------------------------

MySqlParser::CallStatementContext::CallStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CallStatementContext::CALL() {
  return getToken(MySqlParser::CALL, 0);
}

MySqlParser::FullIdContext* MySqlParser::CallStatementContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::CallStatementContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CallStatementContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::ConstantsContext* MySqlParser::CallStatementContext::constants() {
  return getRuleContext<MySqlParser::ConstantsContext>(0);
}

MySqlParser::ExpressionsContext* MySqlParser::CallStatementContext::expressions() {
  return getRuleContext<MySqlParser::ExpressionsContext>(0);
}


size_t MySqlParser::CallStatementContext::getRuleIndex() const {
  return MySqlParser::RuleCallStatement;
}


MySqlParser::CallStatementContext* MySqlParser::callStatement() {
  CallStatementContext *_localctx = _tracker.createInstance<CallStatementContext>(_ctx, getState());
  enterRule(_localctx, 162, MySqlParser::RuleCallStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2775);
    match(MySqlParser::CALL);
    setState(2776);
    fullId();
    setState(2783);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx)) {
    case 1: {
      setState(2777);
      match(MySqlParser::LR_BRACKET);
      setState(2780);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
      case 1: {
        setState(2778);
        constants();
        break;
      }

      case 2: {
        setState(2779);
        expressions();
        break;
      }

      }
      setState(2782);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

MySqlParser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::SingleDeleteStatementContext* MySqlParser::DeleteStatementContext::singleDeleteStatement() {
  return getRuleContext<MySqlParser::SingleDeleteStatementContext>(0);
}

MySqlParser::MultipleDeleteStatementContext* MySqlParser::DeleteStatementContext::multipleDeleteStatement() {
  return getRuleContext<MySqlParser::MultipleDeleteStatementContext>(0);
}


size_t MySqlParser::DeleteStatementContext::getRuleIndex() const {
  return MySqlParser::RuleDeleteStatement;
}


MySqlParser::DeleteStatementContext* MySqlParser::deleteStatement() {
  DeleteStatementContext *_localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 164, MySqlParser::RuleDeleteStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2785);
      singleDeleteStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2786);
      multipleDeleteStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

MySqlParser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DoStatementContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

MySqlParser::ExpressionsContext* MySqlParser::DoStatementContext::expressions() {
  return getRuleContext<MySqlParser::ExpressionsContext>(0);
}


size_t MySqlParser::DoStatementContext::getRuleIndex() const {
  return MySqlParser::RuleDoStatement;
}


MySqlParser::DoStatementContext* MySqlParser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 166, MySqlParser::RuleDoStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2789);
    match(MySqlParser::DO);
    setState(2790);
    expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerStatementContext ------------------------------------------------------------------

MySqlParser::HandlerStatementContext::HandlerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::HandlerOpenStatementContext* MySqlParser::HandlerStatementContext::handlerOpenStatement() {
  return getRuleContext<MySqlParser::HandlerOpenStatementContext>(0);
}

MySqlParser::HandlerReadIndexStatementContext* MySqlParser::HandlerStatementContext::handlerReadIndexStatement() {
  return getRuleContext<MySqlParser::HandlerReadIndexStatementContext>(0);
}

MySqlParser::HandlerReadStatementContext* MySqlParser::HandlerStatementContext::handlerReadStatement() {
  return getRuleContext<MySqlParser::HandlerReadStatementContext>(0);
}

MySqlParser::HandlerCloseStatementContext* MySqlParser::HandlerStatementContext::handlerCloseStatement() {
  return getRuleContext<MySqlParser::HandlerCloseStatementContext>(0);
}


size_t MySqlParser::HandlerStatementContext::getRuleIndex() const {
  return MySqlParser::RuleHandlerStatement;
}


MySqlParser::HandlerStatementContext* MySqlParser::handlerStatement() {
  HandlerStatementContext *_localctx = _tracker.createInstance<HandlerStatementContext>(_ctx, getState());
  enterRule(_localctx, 168, MySqlParser::RuleHandlerStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2796);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2792);
      handlerOpenStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2793);
      handlerReadIndexStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2794);
      handlerReadStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2795);
      handlerCloseStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertStatementContext ------------------------------------------------------------------

MySqlParser::InsertStatementContext::InsertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::InsertStatementContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

MySqlParser::TableNameContext* MySqlParser::InsertStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::InsertStatementValueContext* MySqlParser::InsertStatementContext::insertStatementValue() {
  return getRuleContext<MySqlParser::InsertStatementValueContext>(0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::InsertStatementContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::InsertStatementContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

std::vector<MySqlParser::UpdatedElementContext *> MySqlParser::InsertStatementContext::updatedElement() {
  return getRuleContexts<MySqlParser::UpdatedElementContext>();
}

MySqlParser::UpdatedElementContext* MySqlParser::InsertStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySqlParser::UpdatedElementContext>(i);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::DUPLICATE() {
  return getToken(MySqlParser::DUPLICATE, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::DELAYED() {
  return getToken(MySqlParser::DELAYED, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::HIGH_PRIORITY() {
  return getToken(MySqlParser::HIGH_PRIORITY, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::InsertStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::InsertStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

std::vector<MySqlParser::UidListContext *> MySqlParser::InsertStatementContext::uidList() {
  return getRuleContexts<MySqlParser::UidListContext>();
}

MySqlParser::UidListContext* MySqlParser::InsertStatementContext::uidList(size_t i) {
  return getRuleContext<MySqlParser::UidListContext>(i);
}


size_t MySqlParser::InsertStatementContext::getRuleIndex() const {
  return MySqlParser::RuleInsertStatement;
}


MySqlParser::InsertStatementContext* MySqlParser::insertStatement() {
  InsertStatementContext *_localctx = _tracker.createInstance<InsertStatementContext>(_ctx, getState());
  enterRule(_localctx, 170, MySqlParser::RuleInsertStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2798);
    match(MySqlParser::INSERT);
    setState(2800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 39) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 39)) & ((1ULL << (MySqlParser::DELAYED - 39))
      | (1ULL << (MySqlParser::HIGH_PRIORITY - 39))
      | (1ULL << (MySqlParser::LOW_PRIORITY - 39)))) != 0)) {
      setState(2799);
      dynamic_cast<InsertStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 39) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 39)) & ((1ULL << (MySqlParser::DELAYED - 39))
        | (1ULL << (MySqlParser::HIGH_PRIORITY - 39))
        | (1ULL << (MySqlParser::LOW_PRIORITY - 39)))) != 0))) {
        dynamic_cast<InsertStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2803);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2802);
      match(MySqlParser::IGNORE);
    }
    setState(2806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INTO) {
      setState(2805);
      match(MySqlParser::INTO);
    }
    setState(2808);
    tableName();
    setState(2815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2809);
      match(MySqlParser::PARTITION);
      setState(2810);
      match(MySqlParser::LR_BRACKET);
      setState(2812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
        | (1ULL << (MySqlParser::DATABASE - 32))
        | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
        | (1ULL << (MySqlParser::GROUP - 32))
        | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
        | (1ULL << (MySqlParser::ORDER - 105))
        | (1ULL << (MySqlParser::RIGHT - 105))
        | (1ULL << (MySqlParser::SCHEMA - 105))
        | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::TIMESTAMP - 199))
        | (1ULL << (MySqlParser::DATETIME - 199))
        | (1ULL << (MySqlParser::YEAR - 199))
        | (1ULL << (MySqlParser::TEXT - 199))
        | (1ULL << (MySqlParser::ENUM - 199))
        | (1ULL << (MySqlParser::SERIAL - 199))
        | (1ULL << (MySqlParser::JSON_VALID - 199))
        | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
        | (1ULL << (MySqlParser::AVG - 199))
        | (1ULL << (MySqlParser::BIT_AND - 199))
        | (1ULL << (MySqlParser::BIT_OR - 199))
        | (1ULL << (MySqlParser::BIT_XOR - 199))
        | (1ULL << (MySqlParser::COUNT - 199))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
        | (1ULL << (MySqlParser::MAX - 199))
        | (1ULL << (MySqlParser::MIN - 199))
        | (1ULL << (MySqlParser::STD - 199))
        | (1ULL << (MySqlParser::STDDEV - 199))
        | (1ULL << (MySqlParser::STDDEV_POP - 199))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
        | (1ULL << (MySqlParser::SUM - 199))
        | (1ULL << (MySqlParser::VAR_POP - 199))
        | (1ULL << (MySqlParser::VAR_SAMP - 199))
        | (1ULL << (MySqlParser::VARIANCE - 199))
        | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
        | (1ULL << (MySqlParser::ACTION - 270))
        | (1ULL << (MySqlParser::AFTER - 270))
        | (1ULL << (MySqlParser::AGGREGATE - 270))
        | (1ULL << (MySqlParser::ALGORITHM - 270))
        | (1ULL << (MySqlParser::ANY - 270))
        | (1ULL << (MySqlParser::AT - 270))
        | (1ULL << (MySqlParser::AUTHORS - 270))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
        | (1ULL << (MySqlParser::BEGIN - 270))
        | (1ULL << (MySqlParser::BINLOG - 270))
        | (1ULL << (MySqlParser::BIT - 270))
        | (1ULL << (MySqlParser::BLOCK - 270))
        | (1ULL << (MySqlParser::BOOL - 270))
        | (1ULL << (MySqlParser::BOOLEAN - 270))
        | (1ULL << (MySqlParser::BTREE - 270))
        | (1ULL << (MySqlParser::CACHE - 270))
        | (1ULL << (MySqlParser::CASCADED - 270))
        | (1ULL << (MySqlParser::CHAIN - 270))
        | (1ULL << (MySqlParser::CHANGED - 270))
        | (1ULL << (MySqlParser::CHANNEL - 270))
        | (1ULL << (MySqlParser::CHECKSUM - 270))
        | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
        | (1ULL << (MySqlParser::CIPHER - 270))
        | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
        | (1ULL << (MySqlParser::CLIENT - 270))
        | (1ULL << (MySqlParser::CLOSE - 270))
        | (1ULL << (MySqlParser::COALESCE - 270))
        | (1ULL << (MySqlParser::CODE - 270))
        | (1ULL << (MySqlParser::COLUMNS - 270))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
        | (1ULL << (MySqlParser::COLUMN_NAME - 270))
        | (1ULL << (MySqlParser::COMMENT - 270))
        | (1ULL << (MySqlParser::COMMIT - 270))
        | (1ULL << (MySqlParser::COMPACT - 270))
        | (1ULL << (MySqlParser::COMPLETION - 270))
        | (1ULL << (MySqlParser::COMPRESSED - 270))
        | (1ULL << (MySqlParser::COMPRESSION - 270))
        | (1ULL << (MySqlParser::CONCURRENT - 270))
        | (1ULL << (MySqlParser::CONNECTION - 270))
        | (1ULL << (MySqlParser::CONSISTENT - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
        | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
        | (1ULL << (MySqlParser::CONTAINS - 270))
        | (1ULL << (MySqlParser::CONTEXT - 270))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
        | (1ULL << (MySqlParser::COPY - 270))
        | (1ULL << (MySqlParser::CPU - 270))
        | (1ULL << (MySqlParser::CURSOR_NAME - 270))
        | (1ULL << (MySqlParser::DATA - 270))
        | (1ULL << (MySqlParser::DATAFILE - 270))
        | (1ULL << (MySqlParser::DEALLOCATE - 270))
        | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
        | (1ULL << (MySqlParser::DEFINER - 270))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
        | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
        | (1ULL << (MySqlParser::DIRECTORY - 270))
        | (1ULL << (MySqlParser::DISABLE - 270))
        | (1ULL << (MySqlParser::DISCARD - 270))
        | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
        | (1ULL << (MySqlParser::DUMPFILE - 334))
        | (1ULL << (MySqlParser::DUPLICATE - 334))
        | (1ULL << (MySqlParser::DYNAMIC - 334))
        | (1ULL << (MySqlParser::ENABLE - 334))
        | (1ULL << (MySqlParser::ENCRYPTION - 334))
        | (1ULL << (MySqlParser::END - 334))
        | (1ULL << (MySqlParser::ENDS - 334))
        | (1ULL << (MySqlParser::ENGINE - 334))
        | (1ULL << (MySqlParser::ENGINES - 334))
        | (1ULL << (MySqlParser::ERROR - 334))
        | (1ULL << (MySqlParser::ERRORS - 334))
        | (1ULL << (MySqlParser::ESCAPE - 334))
        | (1ULL << (MySqlParser::EVEN - 334))
        | (1ULL << (MySqlParser::EVENT - 334))
        | (1ULL << (MySqlParser::EVENTS - 334))
        | (1ULL << (MySqlParser::EVERY - 334))
        | (1ULL << (MySqlParser::EXCHANGE - 334))
        | (1ULL << (MySqlParser::EXCLUSIVE - 334))
        | (1ULL << (MySqlParser::EXPIRE - 334))
        | (1ULL << (MySqlParser::EXPORT - 334))
        | (1ULL << (MySqlParser::EXTENDED - 334))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
        | (1ULL << (MySqlParser::FAST - 334))
        | (1ULL << (MySqlParser::FAULTS - 334))
        | (1ULL << (MySqlParser::FIELDS - 334))
        | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::FILTER - 334))
        | (1ULL << (MySqlParser::FIRST - 334))
        | (1ULL << (MySqlParser::FIXED - 334))
        | (1ULL << (MySqlParser::FLUSH - 334))
        | (1ULL << (MySqlParser::FOLLOWS - 334))
        | (1ULL << (MySqlParser::FOUND - 334))
        | (1ULL << (MySqlParser::FULL - 334))
        | (1ULL << (MySqlParser::FUNCTION - 334))
        | (1ULL << (MySqlParser::GENERAL - 334))
        | (1ULL << (MySqlParser::GLOBAL - 334))
        | (1ULL << (MySqlParser::GRANTS - 334))
        | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
        | (1ULL << (MySqlParser::HANDLER - 334))
        | (1ULL << (MySqlParser::HASH - 334))
        | (1ULL << (MySqlParser::HELP - 334))
        | (1ULL << (MySqlParser::HOST - 334))
        | (1ULL << (MySqlParser::HOSTS - 334))
        | (1ULL << (MySqlParser::IDENTIFIED - 334))
        | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
        | (1ULL << (MySqlParser::IMPORT - 334))
        | (1ULL << (MySqlParser::INDEXES - 334))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
        | (1ULL << (MySqlParser::INPLACE - 334))
        | (1ULL << (MySqlParser::INSERT_METHOD - 334))
        | (1ULL << (MySqlParser::INSTALL - 334))
        | (1ULL << (MySqlParser::INSTANCE - 334))
        | (1ULL << (MySqlParser::INVISIBLE - 334))
        | (1ULL << (MySqlParser::INVOKER - 334))
        | (1ULL << (MySqlParser::IO - 334))
        | (1ULL << (MySqlParser::IO_THREAD - 334))
        | (1ULL << (MySqlParser::IPC - 334))
        | (1ULL << (MySqlParser::ISOLATION - 334))
        | (1ULL << (MySqlParser::ISSUER - 334))
        | (1ULL << (MySqlParser::JSON - 334))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
        | (1ULL << (MySqlParser::LANGUAGE - 334))
        | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
        | (1ULL << (MySqlParser::LESS - 398))
        | (1ULL << (MySqlParser::LEVEL - 398))
        | (1ULL << (MySqlParser::LIST - 398))
        | (1ULL << (MySqlParser::LOCAL - 398))
        | (1ULL << (MySqlParser::LOGFILE - 398))
        | (1ULL << (MySqlParser::LOGS - 398))
        | (1ULL << (MySqlParser::MASTER - 398))
        | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
        | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
        | (1ULL << (MySqlParser::MASTER_DELAY - 398))
        | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
        | (1ULL << (MySqlParser::MASTER_HOST - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
        | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
        | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
        | (1ULL << (MySqlParser::MASTER_PORT - 398))
        | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
        | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
        | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
        | (1ULL << (MySqlParser::MASTER_USER - 398))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_ROWS - 398))
        | (1ULL << (MySqlParser::MAX_SIZE - 398))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
        | (1ULL << (MySqlParser::MEDIUM - 398))
        | (1ULL << (MySqlParser::MEMBER - 398))
        | (1ULL << (MySqlParser::MERGE - 398))
        | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
        | (1ULL << (MySqlParser::MID - 398))
        | (1ULL << (MySqlParser::MIGRATE - 398))
        | (1ULL << (MySqlParser::MIN_ROWS - 398))
        | (1ULL << (MySqlParser::MODE - 398))
        | (1ULL << (MySqlParser::MODIFY - 398))
        | (1ULL << (MySqlParser::MUTEX - 398))
        | (1ULL << (MySqlParser::MYSQL - 398))
        | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
        | (1ULL << (MySqlParser::NAME - 398))
        | (1ULL << (MySqlParser::NAMES - 398))
        | (1ULL << (MySqlParser::NCHAR - 398))
        | (1ULL << (MySqlParser::NEVER - 398))
        | (1ULL << (MySqlParser::NEXT - 398))
        | (1ULL << (MySqlParser::NO - 398))
        | (1ULL << (MySqlParser::NODEGROUP - 398))
        | (1ULL << (MySqlParser::NONE - 398))
        | (1ULL << (MySqlParser::OFFLINE - 398))
        | (1ULL << (MySqlParser::OFFSET - 398))
        | (1ULL << (MySqlParser::OF - 398))
        | (1ULL << (MySqlParser::OJ - 398))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
        | (1ULL << (MySqlParser::ONE - 398))
        | (1ULL << (MySqlParser::ONLINE - 398))
        | (1ULL << (MySqlParser::ONLY - 398))
        | (1ULL << (MySqlParser::OPEN - 398))
        | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
        | (1ULL << (MySqlParser::OWNER - 462))
        | (1ULL << (MySqlParser::PACK_KEYS - 462))
        | (1ULL << (MySqlParser::PAGE - 462))
        | (1ULL << (MySqlParser::PARSER - 462))
        | (1ULL << (MySqlParser::PARTIAL - 462))
        | (1ULL << (MySqlParser::PARTITIONING - 462))
        | (1ULL << (MySqlParser::PARTITIONS - 462))
        | (1ULL << (MySqlParser::PASSWORD - 462))
        | (1ULL << (MySqlParser::PHASE - 462))
        | (1ULL << (MySqlParser::PLUGIN - 462))
        | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
        | (1ULL << (MySqlParser::PLUGINS - 462))
        | (1ULL << (MySqlParser::PORT - 462))
        | (1ULL << (MySqlParser::PRECEDES - 462))
        | (1ULL << (MySqlParser::PREPARE - 462))
        | (1ULL << (MySqlParser::PRESERVE - 462))
        | (1ULL << (MySqlParser::PREV - 462))
        | (1ULL << (MySqlParser::PROCESSLIST - 462))
        | (1ULL << (MySqlParser::PROFILE - 462))
        | (1ULL << (MySqlParser::PROFILES - 462))
        | (1ULL << (MySqlParser::PROXY - 462))
        | (1ULL << (MySqlParser::QUERY - 462))
        | (1ULL << (MySqlParser::QUICK - 462))
        | (1ULL << (MySqlParser::REBUILD - 462))
        | (1ULL << (MySqlParser::RECOVER - 462))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
        | (1ULL << (MySqlParser::REDUNDANT - 462))
        | (1ULL << (MySqlParser::RELAY - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
        | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
        | (1ULL << (MySqlParser::RELAYLOG - 462))
        | (1ULL << (MySqlParser::REMOVE - 462))
        | (1ULL << (MySqlParser::REORGANIZE - 462))
        | (1ULL << (MySqlParser::REPAIR - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
        | (1ULL << (MySqlParser::REPLICATION - 462))
        | (1ULL << (MySqlParser::RESET - 462))
        | (1ULL << (MySqlParser::RESUME - 462))
        | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
        | (1ULL << (MySqlParser::RETURNS - 462))
        | (1ULL << (MySqlParser::ROLE - 462))
        | (1ULL << (MySqlParser::ROLLBACK - 462))
        | (1ULL << (MySqlParser::ROLLUP - 462))
        | (1ULL << (MySqlParser::ROTATE - 462))
        | (1ULL << (MySqlParser::ROW - 462))
        | (1ULL << (MySqlParser::ROWS - 462))
        | (1ULL << (MySqlParser::ROW_FORMAT - 462))
        | (1ULL << (MySqlParser::SAVEPOINT - 462))
        | (1ULL << (MySqlParser::SCHEDULE - 462))
        | (1ULL << (MySqlParser::SECURITY - 462))
        | (1ULL << (MySqlParser::SERVER - 462))
        | (1ULL << (MySqlParser::SESSION - 462))
        | (1ULL << (MySqlParser::SHARE - 462))
        | (1ULL << (MySqlParser::SHARED - 462))
        | (1ULL << (MySqlParser::SIGNED - 462))
        | (1ULL << (MySqlParser::SIMPLE - 462))
        | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
        | (1ULL << (MySqlParser::SNAPSHOT - 526))
        | (1ULL << (MySqlParser::SOCKET - 526))
        | (1ULL << (MySqlParser::SOME - 526))
        | (1ULL << (MySqlParser::SONAME - 526))
        | (1ULL << (MySqlParser::SOUNDS - 526))
        | (1ULL << (MySqlParser::SOURCE - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
        | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
        | (1ULL << (MySqlParser::SQL_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
        | (1ULL << (MySqlParser::SQL_THREAD - 526))
        | (1ULL << (MySqlParser::START - 526))
        | (1ULL << (MySqlParser::STARTS - 526))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
        | (1ULL << (MySqlParser::STATUS - 526))
        | (1ULL << (MySqlParser::STOP - 526))
        | (1ULL << (MySqlParser::STORAGE - 526))
        | (1ULL << (MySqlParser::STRING - 526))
        | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
        | (1ULL << (MySqlParser::SUBJECT - 526))
        | (1ULL << (MySqlParser::SUBPARTITION - 526))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
        | (1ULL << (MySqlParser::SUSPEND - 526))
        | (1ULL << (MySqlParser::SWAPS - 526))
        | (1ULL << (MySqlParser::SWITCHES - 526))
        | (1ULL << (MySqlParser::TABLE_NAME - 526))
        | (1ULL << (MySqlParser::TABLESPACE - 526))
        | (1ULL << (MySqlParser::TEMPORARY - 526))
        | (1ULL << (MySqlParser::TEMPTABLE - 526))
        | (1ULL << (MySqlParser::THAN - 526))
        | (1ULL << (MySqlParser::TRADITIONAL - 526))
        | (1ULL << (MySqlParser::TRANSACTION - 526))
        | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
        | (1ULL << (MySqlParser::TRIGGERS - 526))
        | (1ULL << (MySqlParser::TRUNCATE - 526))
        | (1ULL << (MySqlParser::UNDEFINED - 526))
        | (1ULL << (MySqlParser::UNDOFILE - 526))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
        | (1ULL << (MySqlParser::UNINSTALL - 526))
        | (1ULL << (MySqlParser::UNKNOWN - 526))
        | (1ULL << (MySqlParser::UNTIL - 526))
        | (1ULL << (MySqlParser::UPGRADE - 526))
        | (1ULL << (MySqlParser::USER - 526))
        | (1ULL << (MySqlParser::USE_FRM - 526))
        | (1ULL << (MySqlParser::USER_RESOURCES - 526))
        | (1ULL << (MySqlParser::VALIDATION - 526))
        | (1ULL << (MySqlParser::VALUE - 526))
        | (1ULL << (MySqlParser::VARIABLES - 526))
        | (1ULL << (MySqlParser::VIEW - 526))
        | (1ULL << (MySqlParser::VISIBLE - 526))
        | (1ULL << (MySqlParser::WAIT - 526))
        | (1ULL << (MySqlParser::WARNINGS - 526))
        | (1ULL << (MySqlParser::WITHOUT - 526))
        | (1ULL << (MySqlParser::WORK - 526))
        | (1ULL << (MySqlParser::WRAPPER - 526))
        | (1ULL << (MySqlParser::X509 - 526))
        | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
        | (1ULL << (MySqlParser::INTERNAL - 590))
        | (1ULL << (MySqlParser::QUARTER - 590))
        | (1ULL << (MySqlParser::MONTH - 590))
        | (1ULL << (MySqlParser::DAY - 590))
        | (1ULL << (MySqlParser::HOUR - 590))
        | (1ULL << (MySqlParser::MINUTE - 590))
        | (1ULL << (MySqlParser::WEEK - 590))
        | (1ULL << (MySqlParser::SECOND - 590))
        | (1ULL << (MySqlParser::MICROSECOND - 590))
        | (1ULL << (MySqlParser::TABLES - 590))
        | (1ULL << (MySqlParser::ROUTINE - 590))
        | (1ULL << (MySqlParser::EXECUTE - 590))
        | (1ULL << (MySqlParser::FILE - 590))
        | (1ULL << (MySqlParser::PROCESS - 590))
        | (1ULL << (MySqlParser::RELOAD - 590))
        | (1ULL << (MySqlParser::SHUTDOWN - 590))
        | (1ULL << (MySqlParser::SUPER - 590))
        | (1ULL << (MySqlParser::PRIVILEGES - 590))
        | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
        | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
        | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
        | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
        | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
        | (1ULL << (MySqlParser::FIREWALL_USER - 590))
        | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
        | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
        | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
        | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
        | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
        | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
        | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
        | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::SET_USER_ID - 590))
        | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
        | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
        | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
        | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
        | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
        | (1ULL << (MySqlParser::ARMSCII8 - 590))
        | (1ULL << (MySqlParser::ASCII - 590))
        | (1ULL << (MySqlParser::BIG5 - 590))
        | (1ULL << (MySqlParser::CP1250 - 590))
        | (1ULL << (MySqlParser::CP1251 - 590))
        | (1ULL << (MySqlParser::CP1256 - 590))
        | (1ULL << (MySqlParser::CP1257 - 590))
        | (1ULL << (MySqlParser::CP850 - 590))
        | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
        | (1ULL << (MySqlParser::CP932 - 654))
        | (1ULL << (MySqlParser::DEC8 - 654))
        | (1ULL << (MySqlParser::EUCJPMS - 654))
        | (1ULL << (MySqlParser::EUCKR - 654))
        | (1ULL << (MySqlParser::GB2312 - 654))
        | (1ULL << (MySqlParser::GBK - 654))
        | (1ULL << (MySqlParser::GEOSTD8 - 654))
        | (1ULL << (MySqlParser::GREEK - 654))
        | (1ULL << (MySqlParser::HEBREW - 654))
        | (1ULL << (MySqlParser::HP8 - 654))
        | (1ULL << (MySqlParser::KEYBCS2 - 654))
        | (1ULL << (MySqlParser::KOI8R - 654))
        | (1ULL << (MySqlParser::KOI8U - 654))
        | (1ULL << (MySqlParser::LATIN1 - 654))
        | (1ULL << (MySqlParser::LATIN2 - 654))
        | (1ULL << (MySqlParser::LATIN5 - 654))
        | (1ULL << (MySqlParser::LATIN7 - 654))
        | (1ULL << (MySqlParser::MACCE - 654))
        | (1ULL << (MySqlParser::MACROMAN - 654))
        | (1ULL << (MySqlParser::SJIS - 654))
        | (1ULL << (MySqlParser::SWE7 - 654))
        | (1ULL << (MySqlParser::TIS620 - 654))
        | (1ULL << (MySqlParser::UCS2 - 654))
        | (1ULL << (MySqlParser::UJIS - 654))
        | (1ULL << (MySqlParser::UTF16 - 654))
        | (1ULL << (MySqlParser::UTF16LE - 654))
        | (1ULL << (MySqlParser::UTF32 - 654))
        | (1ULL << (MySqlParser::UTF8 - 654))
        | (1ULL << (MySqlParser::UTF8MB3 - 654))
        | (1ULL << (MySqlParser::UTF8MB4 - 654))
        | (1ULL << (MySqlParser::ARCHIVE - 654))
        | (1ULL << (MySqlParser::BLACKHOLE - 654))
        | (1ULL << (MySqlParser::CSV - 654))
        | (1ULL << (MySqlParser::FEDERATED - 654))
        | (1ULL << (MySqlParser::INNODB - 654))
        | (1ULL << (MySqlParser::MEMORY - 654))
        | (1ULL << (MySqlParser::MRG_MYISAM - 654))
        | (1ULL << (MySqlParser::MYISAM - 654))
        | (1ULL << (MySqlParser::NDB - 654))
        | (1ULL << (MySqlParser::NDBCLUSTER - 654))
        | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
        | (1ULL << (MySqlParser::TOKUDB - 654))
        | (1ULL << (MySqlParser::REPEATABLE - 654))
        | (1ULL << (MySqlParser::COMMITTED - 654))
        | (1ULL << (MySqlParser::UNCOMMITTED - 654))
        | (1ULL << (MySqlParser::SERIALIZABLE - 654))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
        | (1ULL << (MySqlParser::LINESTRING - 654))
        | (1ULL << (MySqlParser::MULTILINESTRING - 654))
        | (1ULL << (MySqlParser::MULTIPOINT - 654))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
        | (1ULL << (MySqlParser::POINT - 654))
        | (1ULL << (MySqlParser::POLYGON - 654))
        | (1ULL << (MySqlParser::ABS - 654))
        | (1ULL << (MySqlParser::ACOS - 654))
        | (1ULL << (MySqlParser::ADDDATE - 654))
        | (1ULL << (MySqlParser::ADDTIME - 654))
        | (1ULL << (MySqlParser::AES_DECRYPT - 654))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
        | (1ULL << (MySqlParser::AREA - 654))
        | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
        | (1ULL << (MySqlParser::ASTEXT - 718))
        | (1ULL << (MySqlParser::ASWKB - 718))
        | (1ULL << (MySqlParser::ASWKT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
        | (1ULL << (MySqlParser::ATAN - 718))
        | (1ULL << (MySqlParser::ATAN2 - 718))
        | (1ULL << (MySqlParser::BENCHMARK - 718))
        | (1ULL << (MySqlParser::BIN - 718))
        | (1ULL << (MySqlParser::BIT_COUNT - 718))
        | (1ULL << (MySqlParser::BIT_LENGTH - 718))
        | (1ULL << (MySqlParser::BUFFER - 718))
        | (1ULL << (MySqlParser::CATALOG_NAME - 718))
        | (1ULL << (MySqlParser::CEIL - 718))
        | (1ULL << (MySqlParser::CEILING - 718))
        | (1ULL << (MySqlParser::CENTROID - 718))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
        | (1ULL << (MySqlParser::CHARSET - 718))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
        | (1ULL << (MySqlParser::COERCIBILITY - 718))
        | (1ULL << (MySqlParser::COLLATION - 718))
        | (1ULL << (MySqlParser::COMPRESS - 718))
        | (1ULL << (MySqlParser::CONCAT - 718))
        | (1ULL << (MySqlParser::CONCAT_WS - 718))
        | (1ULL << (MySqlParser::CONNECTION_ID - 718))
        | (1ULL << (MySqlParser::CONV - 718))
        | (1ULL << (MySqlParser::CONVERT_TZ - 718))
        | (1ULL << (MySqlParser::COS - 718))
        | (1ULL << (MySqlParser::COT - 718))
        | (1ULL << (MySqlParser::CRC32 - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
        | (1ULL << (MySqlParser::CROSSES - 718))
        | (1ULL << (MySqlParser::DATEDIFF - 718))
        | (1ULL << (MySqlParser::DATE_FORMAT - 718))
        | (1ULL << (MySqlParser::DAYNAME - 718))
        | (1ULL << (MySqlParser::DAYOFMONTH - 718))
        | (1ULL << (MySqlParser::DAYOFWEEK - 718))
        | (1ULL << (MySqlParser::DAYOFYEAR - 718))
        | (1ULL << (MySqlParser::DECODE - 718))
        | (1ULL << (MySqlParser::DEGREES - 718))
        | (1ULL << (MySqlParser::DES_DECRYPT - 718))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
        | (1ULL << (MySqlParser::DIMENSION - 718))
        | (1ULL << (MySqlParser::DISJOINT - 718))
        | (1ULL << (MySqlParser::ELT - 718))
        | (1ULL << (MySqlParser::ENCODE - 718))
        | (1ULL << (MySqlParser::ENCRYPT - 718))
        | (1ULL << (MySqlParser::ENDPOINT - 718))
        | (1ULL << (MySqlParser::ENVELOPE - 718))
        | (1ULL << (MySqlParser::EQUALS - 718))
        | (1ULL << (MySqlParser::EXP - 718))
        | (1ULL << (MySqlParser::EXPORT_SET - 718))
        | (1ULL << (MySqlParser::EXTERIORRING - 718))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
        | (1ULL << (MySqlParser::FIELD - 718))
        | (1ULL << (MySqlParser::FIND_IN_SET - 718))
        | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
        | (1ULL << (MySqlParser::FOUND_ROWS - 782))
        | (1ULL << (MySqlParser::FROM_BASE64 - 782))
        | (1ULL << (MySqlParser::FROM_DAYS - 782))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
        | (1ULL << (MySqlParser::GEOMETRYN - 782))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
        | (1ULL << (MySqlParser::GET_FORMAT - 782))
        | (1ULL << (MySqlParser::GET_LOCK - 782))
        | (1ULL << (MySqlParser::GLENGTH - 782))
        | (1ULL << (MySqlParser::GREATEST - 782))
        | (1ULL << (MySqlParser::GTID_SUBSET - 782))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
        | (1ULL << (MySqlParser::HEX - 782))
        | (1ULL << (MySqlParser::IFNULL - 782))
        | (1ULL << (MySqlParser::INET6_ATON - 782))
        | (1ULL << (MySqlParser::INET6_NTOA - 782))
        | (1ULL << (MySqlParser::INET_ATON - 782))
        | (1ULL << (MySqlParser::INET_NTOA - 782))
        | (1ULL << (MySqlParser::INSTR - 782))
        | (1ULL << (MySqlParser::INTERIORRINGN - 782))
        | (1ULL << (MySqlParser::INTERSECTS - 782))
        | (1ULL << (MySqlParser::ISCLOSED - 782))
        | (1ULL << (MySqlParser::ISEMPTY - 782))
        | (1ULL << (MySqlParser::ISNULL - 782))
        | (1ULL << (MySqlParser::ISSIMPLE - 782))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
        | (1ULL << (MySqlParser::IS_IPV4 - 782))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
        | (1ULL << (MySqlParser::IS_IPV6 - 782))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
        | (1ULL << (MySqlParser::LCASE - 782))
        | (1ULL << (MySqlParser::LEAST - 782))
        | (1ULL << (MySqlParser::LENGTH - 782))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINEFROMWKB - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
        | (1ULL << (MySqlParser::LN - 782))
        | (1ULL << (MySqlParser::LOAD_FILE - 782))
        | (1ULL << (MySqlParser::LOCATE - 782))
        | (1ULL << (MySqlParser::LOG - 782))
        | (1ULL << (MySqlParser::LOG10 - 782))
        | (1ULL << (MySqlParser::LOG2 - 782))
        | (1ULL << (MySqlParser::LOWER - 782))
        | (1ULL << (MySqlParser::LPAD - 782))
        | (1ULL << (MySqlParser::LTRIM - 782))
        | (1ULL << (MySqlParser::MAKEDATE - 782))
        | (1ULL << (MySqlParser::MAKETIME - 782))
        | (1ULL << (MySqlParser::MAKE_SET - 782))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
        | (1ULL << (MySqlParser::MBRCONTAINS - 782))
        | (1ULL << (MySqlParser::MBRDISJOINT - 782))
        | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
        | (1ULL << (MySqlParser::MBROVERLAPS - 846))
        | (1ULL << (MySqlParser::MBRTOUCHES - 846))
        | (1ULL << (MySqlParser::MBRWITHIN - 846))
        | (1ULL << (MySqlParser::MD5 - 846))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
        | (1ULL << (MySqlParser::MONTHNAME - 846))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::NAME_CONST - 846))
        | (1ULL << (MySqlParser::NULLIF - 846))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
        | (1ULL << (MySqlParser::NUMPOINTS - 846))
        | (1ULL << (MySqlParser::OCT - 846))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
        | (1ULL << (MySqlParser::ORD - 846))
        | (1ULL << (MySqlParser::OVERLAPS - 846))
        | (1ULL << (MySqlParser::PERIOD_ADD - 846))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
        | (1ULL << (MySqlParser::PI - 846))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
        | (1ULL << (MySqlParser::POINTFROMWKB - 846))
        | (1ULL << (MySqlParser::POINTN - 846))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYFROMWKB - 846))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
        | (1ULL << (MySqlParser::POW - 846))
        | (1ULL << (MySqlParser::POWER - 846))
        | (1ULL << (MySqlParser::QUOTE - 846))
        | (1ULL << (MySqlParser::RADIANS - 846))
        | (1ULL << (MySqlParser::RAND - 846))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
        | (1ULL << (MySqlParser::REVERSE - 846))
        | (1ULL << (MySqlParser::ROUND - 846))
        | (1ULL << (MySqlParser::ROW_COUNT - 846))
        | (1ULL << (MySqlParser::RPAD - 846))
        | (1ULL << (MySqlParser::RTRIM - 846))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
        | (1ULL << (MySqlParser::SESSION_USER - 846))
        | (1ULL << (MySqlParser::SHA - 846))
        | (1ULL << (MySqlParser::SHA1 - 846))
        | (1ULL << (MySqlParser::SHA2 - 846))
        | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
        | (1ULL << (MySqlParser::SIGN - 846))
        | (1ULL << (MySqlParser::SIN - 846))
        | (1ULL << (MySqlParser::SLEEP - 846))
        | (1ULL << (MySqlParser::SOUNDEX - 846))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
        | (1ULL << (MySqlParser::SQRT - 846))
        | (1ULL << (MySqlParser::SRID - 846))
        | (1ULL << (MySqlParser::STARTPOINT - 846))
        | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
        | (1ULL << (MySqlParser::ST_AREA - 910))
        | (1ULL << (MySqlParser::ST_ASBINARY - 910))
        | (1ULL << (MySqlParser::ST_ASTEXT - 910))
        | (1ULL << (MySqlParser::ST_ASWKB - 910))
        | (1ULL << (MySqlParser::ST_ASWKT - 910))
        | (1ULL << (MySqlParser::ST_BUFFER - 910))
        | (1ULL << (MySqlParser::ST_CENTROID - 910))
        | (1ULL << (MySqlParser::ST_CONTAINS - 910))
        | (1ULL << (MySqlParser::ST_CROSSES - 910))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_DIMENSION - 910))
        | (1ULL << (MySqlParser::ST_DISJOINT - 910))
        | (1ULL << (MySqlParser::ST_DISTANCE - 910))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
        | (1ULL << (MySqlParser::ST_EQUALS - 910))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POINTN - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
        | (1ULL << (MySqlParser::ST_SRID - 910))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
        | (1ULL << (MySqlParser::ST_TOUCHES - 910))
        | (1ULL << (MySqlParser::ST_UNION - 910))
        | (1ULL << (MySqlParser::ST_WITHIN - 910))
        | (1ULL << (MySqlParser::ST_X - 910))
        | (1ULL << (MySqlParser::ST_Y - 910))
        | (1ULL << (MySqlParser::SUBDATE - 910))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
        | (1ULL << (MySqlParser::SUBTIME - 910))
        | (1ULL << (MySqlParser::SYSTEM_USER - 910))
        | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
        | (1ULL << (MySqlParser::TIME_FORMAT - 974))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
        | (1ULL << (MySqlParser::TOUCHES - 974))
        | (1ULL << (MySqlParser::TO_BASE64 - 974))
        | (1ULL << (MySqlParser::TO_DAYS - 974))
        | (1ULL << (MySqlParser::TO_SECONDS - 974))
        | (1ULL << (MySqlParser::UCASE - 974))
        | (1ULL << (MySqlParser::UNCOMPRESS - 974))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
        | (1ULL << (MySqlParser::UNHEX - 974))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
        | (1ULL << (MySqlParser::UPDATEXML - 974))
        | (1ULL << (MySqlParser::UPPER - 974))
        | (1ULL << (MySqlParser::UUID - 974))
        | (1ULL << (MySqlParser::UUID_SHORT - 974))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
        | (1ULL << (MySqlParser::VERSION - 974))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
        | (1ULL << (MySqlParser::WEEKDAY - 974))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
        | (1ULL << (MySqlParser::WITHIN - 974))
        | (1ULL << (MySqlParser::YEARWEEK - 974))
        | (1ULL << (MySqlParser::Y_FUNCTION - 974))
        | (1ULL << (MySqlParser::X_FUNCTION - 974))
        | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
        | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
        | (1ULL << (MySqlParser::ID - 1040))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
        setState(2811);
        dynamic_cast<InsertStatementContext *>(_localctx)->partitions = uidList();
      }
      setState(2814);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2833);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT:
      case MySqlParser::VALUES:
      case MySqlParser::VALUE:
      case MySqlParser::LR_BRACKET: {
        setState(2821);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
        case 1: {
          setState(2817);
          match(MySqlParser::LR_BRACKET);
          setState(2818);
          dynamic_cast<InsertStatementContext *>(_localctx)->columns = uidList();
          setState(2819);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        setState(2823);
        insertStatementValue();
        break;
      }

      case MySqlParser::SET: {
        setState(2824);
        match(MySqlParser::SET);
        setState(2825);
        dynamic_cast<InsertStatementContext *>(_localctx)->setFirst = updatedElement();
        setState(2830);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2826);
          match(MySqlParser::COMMA);
          setState(2827);
          dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext = updatedElement();
          dynamic_cast<InsertStatementContext *>(_localctx)->setElements.push_back(dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext);
          setState(2832);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(2835);
      match(MySqlParser::ON);
      setState(2836);
      match(MySqlParser::DUPLICATE);
      setState(2837);
      match(MySqlParser::KEY);
      setState(2838);
      match(MySqlParser::UPDATE);
      setState(2839);
      dynamic_cast<InsertStatementContext *>(_localctx)->duplicatedFirst = updatedElement();
      setState(2844);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2840);
        match(MySqlParser::COMMA);
        setState(2841);
        dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext = updatedElement();
        dynamic_cast<InsertStatementContext *>(_localctx)->duplicatedElements.push_back(dynamic_cast<InsertStatementContext *>(_localctx)->updatedElementContext);
        setState(2846);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadDataStatementContext ------------------------------------------------------------------

MySqlParser::LoadDataStatementContext::LoadDataStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::LOAD() {
  return getToken(MySqlParser::LOAD, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::INFILE() {
  return getToken(MySqlParser::INFILE, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TableNameContext* MySqlParser::LoadDataStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadDataStatementContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

MySqlParser::UidListContext* MySqlParser::LoadDataStatementContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadDataStatementContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadDataStatementContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadDataStatementContext::LINES() {
  return getTokens(MySqlParser::LINES);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::LINES(size_t i) {
  return getToken(MySqlParser::LINES, i);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadDataStatementContext::IGNORE() {
  return getTokens(MySqlParser::IGNORE);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::IGNORE(size_t i) {
  return getToken(MySqlParser::IGNORE, i);
}

MySqlParser::DecimalLiteralContext* MySqlParser::LoadDataStatementContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

std::vector<MySqlParser::AssignmentFieldContext *> MySqlParser::LoadDataStatementContext::assignmentField() {
  return getRuleContexts<MySqlParser::AssignmentFieldContext>();
}

MySqlParser::AssignmentFieldContext* MySqlParser::LoadDataStatementContext::assignmentField(size_t i) {
  return getRuleContext<MySqlParser::AssignmentFieldContext>(i);
}

std::vector<MySqlParser::UpdatedElementContext *> MySqlParser::LoadDataStatementContext::updatedElement() {
  return getRuleContexts<MySqlParser::UpdatedElementContext>();
}

MySqlParser::UpdatedElementContext* MySqlParser::LoadDataStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySqlParser::UpdatedElementContext>(i);
}

MySqlParser::CharsetNameContext* MySqlParser::LoadDataStatementContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::CONCURRENT() {
  return getToken(MySqlParser::CONCURRENT, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::ROWS() {
  return getToken(MySqlParser::ROWS, 0);
}

std::vector<MySqlParser::SelectFieldsIntoContext *> MySqlParser::LoadDataStatementContext::selectFieldsInto() {
  return getRuleContexts<MySqlParser::SelectFieldsIntoContext>();
}

MySqlParser::SelectFieldsIntoContext* MySqlParser::LoadDataStatementContext::selectFieldsInto(size_t i) {
  return getRuleContext<MySqlParser::SelectFieldsIntoContext>(i);
}

std::vector<MySqlParser::SelectLinesIntoContext *> MySqlParser::LoadDataStatementContext::selectLinesInto() {
  return getRuleContexts<MySqlParser::SelectLinesIntoContext>();
}

MySqlParser::SelectLinesIntoContext* MySqlParser::LoadDataStatementContext::selectLinesInto(size_t i) {
  return getRuleContext<MySqlParser::SelectLinesIntoContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadDataStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::LoadDataStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::LoadDataStatementContext::getRuleIndex() const {
  return MySqlParser::RuleLoadDataStatement;
}


MySqlParser::LoadDataStatementContext* MySqlParser::loadDataStatement() {
  LoadDataStatementContext *_localctx = _tracker.createInstance<LoadDataStatementContext>(_ctx, getState());
  enterRule(_localctx, 172, MySqlParser::RuleLoadDataStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2849);
    match(MySqlParser::LOAD);
    setState(2850);
    match(MySqlParser::DATA);
    setState(2852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT) {
      setState(2851);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOCAL) {
      setState(2854);
      match(MySqlParser::LOCAL);
    }
    setState(2857);
    match(MySqlParser::INFILE);
    setState(2858);
    dynamic_cast<LoadDataStatementContext *>(_localctx)->filename = match(MySqlParser::STRING_LITERAL);
    setState(2860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE

    || _la == MySqlParser::REPLACE) {
      setState(2859);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->violation = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::IGNORE

      || _la == MySqlParser::REPLACE)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->violation = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2862);
    match(MySqlParser::INTO);
    setState(2863);
    match(MySqlParser::TABLE);
    setState(2864);
    tableName();
    setState(2870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2865);
      match(MySqlParser::PARTITION);
      setState(2866);
      match(MySqlParser::LR_BRACKET);
      setState(2867);
      uidList();
      setState(2868);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CHARACTER) {
      setState(2872);
      match(MySqlParser::CHARACTER);
      setState(2873);
      match(MySqlParser::SET);
      setState(2874);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->charset = charsetName();
    }
    setState(2883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COLUMNS

    || _la == MySqlParser::FIELDS) {
      setState(2877);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->fieldsFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::COLUMNS

      || _la == MySqlParser::FIELDS)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->fieldsFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2879); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2878);
        selectFieldsInto();
        setState(2881); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::ENCLOSED

      || _la == MySqlParser::ESCAPED || _la == MySqlParser::OPTIONALLY

      || _la == MySqlParser::TERMINATED);
    }
    setState(2891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LINES) {
      setState(2885);
      match(MySqlParser::LINES);
      setState(2887); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2886);
        selectLinesInto();
        setState(2889); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::STARTING

      || _la == MySqlParser::TERMINATED);
    }
    setState(2897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2893);
      match(MySqlParser::IGNORE);
      setState(2894);
      decimalLiteral();
      setState(2895);
      dynamic_cast<LoadDataStatementContext *>(_localctx)->linesFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LINES || _la == MySqlParser::ROWS)) {
        dynamic_cast<LoadDataStatementContext *>(_localctx)->linesFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2910);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
    case 1: {
      setState(2899);
      match(MySqlParser::LR_BRACKET);
      setState(2900);
      assignmentField();
      setState(2905);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2901);
        match(MySqlParser::COMMA);
        setState(2902);
        assignmentField();
        setState(2907);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2908);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
    setState(2921);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
    case 1: {
      setState(2912);
      match(MySqlParser::SET);
      setState(2913);
      updatedElement();
      setState(2918);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2914);
        match(MySqlParser::COMMA);
        setState(2915);
        updatedElement();
        setState(2920);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadXmlStatementContext ------------------------------------------------------------------

MySqlParser::LoadXmlStatementContext::LoadXmlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::LOAD() {
  return getToken(MySqlParser::LOAD, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::XML() {
  return getToken(MySqlParser::XML, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::INFILE() {
  return getToken(MySqlParser::INFILE, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TableNameContext* MySqlParser::LoadXmlStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadXmlStatementContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadXmlStatementContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadXmlStatementContext::ROWS() {
  return getTokens(MySqlParser::ROWS);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::ROWS(size_t i) {
  return getToken(MySqlParser::ROWS, i);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::LESS_SYMBOL() {
  return getToken(MySqlParser::LESS_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::GREATER_SYMBOL() {
  return getToken(MySqlParser::GREATER_SYMBOL, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadXmlStatementContext::IGNORE() {
  return getTokens(MySqlParser::IGNORE);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::IGNORE(size_t i) {
  return getToken(MySqlParser::IGNORE, i);
}

MySqlParser::DecimalLiteralContext* MySqlParser::LoadXmlStatementContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::AssignmentFieldContext *> MySqlParser::LoadXmlStatementContext::assignmentField() {
  return getRuleContexts<MySqlParser::AssignmentFieldContext>();
}

MySqlParser::AssignmentFieldContext* MySqlParser::LoadXmlStatementContext::assignmentField(size_t i) {
  return getRuleContext<MySqlParser::AssignmentFieldContext>(i);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::UpdatedElementContext *> MySqlParser::LoadXmlStatementContext::updatedElement() {
  return getRuleContexts<MySqlParser::UpdatedElementContext>();
}

MySqlParser::UpdatedElementContext* MySqlParser::LoadXmlStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySqlParser::UpdatedElementContext>(i);
}

MySqlParser::CharsetNameContext* MySqlParser::LoadXmlStatementContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::CONCURRENT() {
  return getToken(MySqlParser::CONCURRENT, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::LINES() {
  return getToken(MySqlParser::LINES, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadXmlStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::LoadXmlStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::LoadXmlStatementContext::getRuleIndex() const {
  return MySqlParser::RuleLoadXmlStatement;
}


MySqlParser::LoadXmlStatementContext* MySqlParser::loadXmlStatement() {
  LoadXmlStatementContext *_localctx = _tracker.createInstance<LoadXmlStatementContext>(_ctx, getState());
  enterRule(_localctx, 174, MySqlParser::RuleLoadXmlStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2923);
    match(MySqlParser::LOAD);
    setState(2924);
    match(MySqlParser::XML);
    setState(2926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT) {
      setState(2925);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT)) {
        dynamic_cast<LoadXmlStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOCAL) {
      setState(2928);
      match(MySqlParser::LOCAL);
    }
    setState(2931);
    match(MySqlParser::INFILE);
    setState(2932);
    dynamic_cast<LoadXmlStatementContext *>(_localctx)->filename = match(MySqlParser::STRING_LITERAL);
    setState(2934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE

    || _la == MySqlParser::REPLACE) {
      setState(2933);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->violation = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::IGNORE

      || _la == MySqlParser::REPLACE)) {
        dynamic_cast<LoadXmlStatementContext *>(_localctx)->violation = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2936);
    match(MySqlParser::INTO);
    setState(2937);
    match(MySqlParser::TABLE);
    setState(2938);
    tableName();
    setState(2942);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CHARACTER) {
      setState(2939);
      match(MySqlParser::CHARACTER);
      setState(2940);
      match(MySqlParser::SET);
      setState(2941);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->charset = charsetName();
    }
    setState(2950);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ROWS) {
      setState(2944);
      match(MySqlParser::ROWS);
      setState(2945);
      match(MySqlParser::IDENTIFIED);
      setState(2946);
      match(MySqlParser::BY);
      setState(2947);
      match(MySqlParser::LESS_SYMBOL);
      setState(2948);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->tag = match(MySqlParser::STRING_LITERAL);
      setState(2949);
      match(MySqlParser::GREATER_SYMBOL);
    }
    setState(2956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2952);
      match(MySqlParser::IGNORE);
      setState(2953);
      decimalLiteral();
      setState(2954);
      dynamic_cast<LoadXmlStatementContext *>(_localctx)->linesFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LINES || _la == MySqlParser::ROWS)) {
        dynamic_cast<LoadXmlStatementContext *>(_localctx)->linesFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2969);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
    case 1: {
      setState(2958);
      match(MySqlParser::LR_BRACKET);
      setState(2959);
      assignmentField();
      setState(2964);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2960);
        match(MySqlParser::COMMA);
        setState(2961);
        assignmentField();
        setState(2966);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2967);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
    setState(2980);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
    case 1: {
      setState(2971);
      match(MySqlParser::SET);
      setState(2972);
      updatedElement();
      setState(2977);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2973);
        match(MySqlParser::COMMA);
        setState(2974);
        updatedElement();
        setState(2979);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplaceStatementContext ------------------------------------------------------------------

MySqlParser::ReplaceStatementContext::ReplaceStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

MySqlParser::TableNameContext* MySqlParser::ReplaceStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::InsertStatementValueContext* MySqlParser::ReplaceStatementContext::insertStatementValue() {
  return getRuleContext<MySqlParser::InsertStatementValueContext>(0);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ReplaceStatementContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::ReplaceStatementContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

std::vector<MySqlParser::UpdatedElementContext *> MySqlParser::ReplaceStatementContext::updatedElement() {
  return getRuleContexts<MySqlParser::UpdatedElementContext>();
}

MySqlParser::UpdatedElementContext* MySqlParser::ReplaceStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySqlParser::UpdatedElementContext>(i);
}

std::vector<MySqlParser::UidListContext *> MySqlParser::ReplaceStatementContext::uidList() {
  return getRuleContexts<MySqlParser::UidListContext>();
}

MySqlParser::UidListContext* MySqlParser::ReplaceStatementContext::uidList(size_t i) {
  return getRuleContext<MySqlParser::UidListContext>(i);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::DELAYED() {
  return getToken(MySqlParser::DELAYED, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ReplaceStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ReplaceStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::ReplaceStatementContext::getRuleIndex() const {
  return MySqlParser::RuleReplaceStatement;
}


MySqlParser::ReplaceStatementContext* MySqlParser::replaceStatement() {
  ReplaceStatementContext *_localctx = _tracker.createInstance<ReplaceStatementContext>(_ctx, getState());
  enterRule(_localctx, 176, MySqlParser::RuleReplaceStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2982);
    match(MySqlParser::REPLACE);
    setState(2984);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DELAYED

    || _la == MySqlParser::LOW_PRIORITY) {
      setState(2983);
      dynamic_cast<ReplaceStatementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DELAYED

      || _la == MySqlParser::LOW_PRIORITY)) {
        dynamic_cast<ReplaceStatementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2987);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INTO) {
      setState(2986);
      match(MySqlParser::INTO);
    }
    setState(2989);
    tableName();
    setState(2995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2990);
      match(MySqlParser::PARTITION);
      setState(2991);
      match(MySqlParser::LR_BRACKET);
      setState(2992);
      dynamic_cast<ReplaceStatementContext *>(_localctx)->partitions = uidList();
      setState(2993);
      match(MySqlParser::RR_BRACKET);
    }
    setState(3013);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT:
      case MySqlParser::VALUES:
      case MySqlParser::VALUE:
      case MySqlParser::LR_BRACKET: {
        setState(3001);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx)) {
        case 1: {
          setState(2997);
          match(MySqlParser::LR_BRACKET);
          setState(2998);
          dynamic_cast<ReplaceStatementContext *>(_localctx)->columns = uidList();
          setState(2999);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        setState(3003);
        insertStatementValue();
        break;
      }

      case MySqlParser::SET: {
        setState(3004);
        match(MySqlParser::SET);
        setState(3005);
        dynamic_cast<ReplaceStatementContext *>(_localctx)->setFirst = updatedElement();
        setState(3010);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(3006);
          match(MySqlParser::COMMA);
          setState(3007);
          dynamic_cast<ReplaceStatementContext *>(_localctx)->updatedElementContext = updatedElement();
          dynamic_cast<ReplaceStatementContext *>(_localctx)->setElements.push_back(dynamic_cast<ReplaceStatementContext *>(_localctx)->updatedElementContext);
          setState(3012);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStatementContext ------------------------------------------------------------------

MySqlParser::SelectStatementContext::SelectStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::SelectStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSelectStatement;
}

void MySqlParser::SelectStatementContext::copyFrom(SelectStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnionSelectContext ------------------------------------------------------------------

MySqlParser::QuerySpecificationNointoContext* MySqlParser::UnionSelectContext::querySpecificationNointo() {
  return getRuleContext<MySqlParser::QuerySpecificationNointoContext>(0);
}

std::vector<MySqlParser::UnionStatementContext *> MySqlParser::UnionSelectContext::unionStatement() {
  return getRuleContexts<MySqlParser::UnionStatementContext>();
}

MySqlParser::UnionStatementContext* MySqlParser::UnionSelectContext::unionStatement(size_t i) {
  return getRuleContext<MySqlParser::UnionStatementContext>(i);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::OrderByClauseContext* MySqlParser::UnionSelectContext::orderByClause() {
  return getRuleContext<MySqlParser::OrderByClauseContext>(0);
}

MySqlParser::LimitClauseContext* MySqlParser::UnionSelectContext::limitClause() {
  return getRuleContext<MySqlParser::LimitClauseContext>(0);
}

MySqlParser::LockClauseContext* MySqlParser::UnionSelectContext::lockClause() {
  return getRuleContext<MySqlParser::LockClauseContext>(0);
}

MySqlParser::QuerySpecificationContext* MySqlParser::UnionSelectContext::querySpecification() {
  return getRuleContext<MySqlParser::QuerySpecificationContext>(0);
}

MySqlParser::QueryExpressionContext* MySqlParser::UnionSelectContext::queryExpression() {
  return getRuleContext<MySqlParser::QueryExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

MySqlParser::UnionSelectContext::UnionSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }


//----------------- UnionParenthesisSelectContext ------------------------------------------------------------------

MySqlParser::QueryExpressionNointoContext* MySqlParser::UnionParenthesisSelectContext::queryExpressionNointo() {
  return getRuleContext<MySqlParser::QueryExpressionNointoContext>(0);
}

std::vector<MySqlParser::UnionParenthesisContext *> MySqlParser::UnionParenthesisSelectContext::unionParenthesis() {
  return getRuleContexts<MySqlParser::UnionParenthesisContext>();
}

MySqlParser::UnionParenthesisContext* MySqlParser::UnionParenthesisSelectContext::unionParenthesis(size_t i) {
  return getRuleContext<MySqlParser::UnionParenthesisContext>(i);
}

tree::TerminalNode* MySqlParser::UnionParenthesisSelectContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::QueryExpressionContext* MySqlParser::UnionParenthesisSelectContext::queryExpression() {
  return getRuleContext<MySqlParser::QueryExpressionContext>(0);
}

MySqlParser::OrderByClauseContext* MySqlParser::UnionParenthesisSelectContext::orderByClause() {
  return getRuleContext<MySqlParser::OrderByClauseContext>(0);
}

MySqlParser::LimitClauseContext* MySqlParser::UnionParenthesisSelectContext::limitClause() {
  return getRuleContext<MySqlParser::LimitClauseContext>(0);
}

MySqlParser::LockClauseContext* MySqlParser::UnionParenthesisSelectContext::lockClause() {
  return getRuleContext<MySqlParser::LockClauseContext>(0);
}

tree::TerminalNode* MySqlParser::UnionParenthesisSelectContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::UnionParenthesisSelectContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

MySqlParser::UnionParenthesisSelectContext::UnionParenthesisSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }


//----------------- SimpleSelectContext ------------------------------------------------------------------

MySqlParser::QuerySpecificationContext* MySqlParser::SimpleSelectContext::querySpecification() {
  return getRuleContext<MySqlParser::QuerySpecificationContext>(0);
}

MySqlParser::LockClauseContext* MySqlParser::SimpleSelectContext::lockClause() {
  return getRuleContext<MySqlParser::LockClauseContext>(0);
}

MySqlParser::SimpleSelectContext::SimpleSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }


//----------------- ParenthesisSelectContext ------------------------------------------------------------------

MySqlParser::QueryExpressionContext* MySqlParser::ParenthesisSelectContext::queryExpression() {
  return getRuleContext<MySqlParser::QueryExpressionContext>(0);
}

MySqlParser::LockClauseContext* MySqlParser::ParenthesisSelectContext::lockClause() {
  return getRuleContext<MySqlParser::LockClauseContext>(0);
}

MySqlParser::ParenthesisSelectContext::ParenthesisSelectContext(SelectStatementContext *ctx) { copyFrom(ctx); }


MySqlParser::SelectStatementContext* MySqlParser::selectStatement() {
  SelectStatementContext *_localctx = _tracker.createInstance<SelectStatementContext>(_ctx, getState());
  enterRule(_localctx, 178, MySqlParser::RuleSelectStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3070);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySqlParser::SimpleSelectContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3015);
      querySpecification();
      setState(3017);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
      case 1: {
        setState(3016);
        lockClause();
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySqlParser::ParenthesisSelectContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3019);
      queryExpression();
      setState(3021);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
      case 1: {
        setState(3020);
        lockClause();
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySqlParser::UnionSelectContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3023);
      querySpecificationNointo();
      setState(3025); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3024);
                unionStatement();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3027); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(3037);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::UNION) {
        setState(3029);
        match(MySqlParser::UNION);
        setState(3031);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ALL

        || _la == MySqlParser::DISTINCT) {
          setState(3030);
          dynamic_cast<UnionSelectContext *>(_localctx)->unionType = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ALL

          || _la == MySqlParser::DISTINCT)) {
            dynamic_cast<UnionSelectContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3035);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::SELECT: {
            setState(3033);
            querySpecification();
            break;
          }

          case MySqlParser::LR_BRACKET: {
            setState(3034);
            queryExpression();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(3040);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx)) {
      case 1: {
        setState(3039);
        orderByClause();
        break;
      }

      }
      setState(3043);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIMIT) {
        setState(3042);
        limitClause();
      }
      setState(3046);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
      case 1: {
        setState(3045);
        lockClause();
        break;
      }

      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SelectStatementContext *>(_tracker.createInstance<MySqlParser::UnionParenthesisSelectContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(3048);
      queryExpressionNointo();
      setState(3050); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3049);
                unionParenthesis();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3052); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(3059);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::UNION) {
        setState(3054);
        match(MySqlParser::UNION);
        setState(3056);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ALL

        || _la == MySqlParser::DISTINCT) {
          setState(3055);
          dynamic_cast<UnionParenthesisSelectContext *>(_localctx)->unionType = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ALL

          || _la == MySqlParser::DISTINCT)) {
            dynamic_cast<UnionParenthesisSelectContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3058);
        queryExpression();
      }
      setState(3062);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
      case 1: {
        setState(3061);
        orderByClause();
        break;
      }

      }
      setState(3065);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIMIT) {
        setState(3064);
        limitClause();
      }
      setState(3068);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx)) {
      case 1: {
        setState(3067);
        lockClause();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdateStatementContext ------------------------------------------------------------------

MySqlParser::UpdateStatementContext::UpdateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::SingleUpdateStatementContext* MySqlParser::UpdateStatementContext::singleUpdateStatement() {
  return getRuleContext<MySqlParser::SingleUpdateStatementContext>(0);
}

MySqlParser::MultipleUpdateStatementContext* MySqlParser::UpdateStatementContext::multipleUpdateStatement() {
  return getRuleContext<MySqlParser::MultipleUpdateStatementContext>(0);
}


size_t MySqlParser::UpdateStatementContext::getRuleIndex() const {
  return MySqlParser::RuleUpdateStatement;
}


MySqlParser::UpdateStatementContext* MySqlParser::updateStatement() {
  UpdateStatementContext *_localctx = _tracker.createInstance<UpdateStatementContext>(_ctx, getState());
  enterRule(_localctx, 180, MySqlParser::RuleUpdateStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3074);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3072);
      singleUpdateStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3073);
      multipleUpdateStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertStatementValueContext ------------------------------------------------------------------

MySqlParser::InsertStatementValueContext::InsertStatementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::SelectStatementContext* MySqlParser::InsertStatementValueContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::InsertStatementValueContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::InsertStatementValueContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::InsertStatementValueContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::InsertStatementValueContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

tree::TerminalNode* MySqlParser::InsertStatementValueContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::InsertStatementValueContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}

std::vector<MySqlParser::ExpressionsWithDefaultsContext *> MySqlParser::InsertStatementValueContext::expressionsWithDefaults() {
  return getRuleContexts<MySqlParser::ExpressionsWithDefaultsContext>();
}

MySqlParser::ExpressionsWithDefaultsContext* MySqlParser::InsertStatementValueContext::expressionsWithDefaults(size_t i) {
  return getRuleContext<MySqlParser::ExpressionsWithDefaultsContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::InsertStatementValueContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::InsertStatementValueContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::InsertStatementValueContext::getRuleIndex() const {
  return MySqlParser::RuleInsertStatementValue;
}


MySqlParser::InsertStatementValueContext* MySqlParser::insertStatementValue() {
  InsertStatementValueContext *_localctx = _tracker.createInstance<InsertStatementValueContext>(_ctx, getState());
  enterRule(_localctx, 182, MySqlParser::RuleInsertStatementValue);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3094);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT:
      case MySqlParser::LR_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(3076);
        selectStatement();
        break;
      }

      case MySqlParser::VALUES:
      case MySqlParser::VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(3077);
        dynamic_cast<InsertStatementValueContext *>(_localctx)->insertFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::VALUES || _la == MySqlParser::VALUE)) {
          dynamic_cast<InsertStatementValueContext *>(_localctx)->insertFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3078);
        match(MySqlParser::LR_BRACKET);
        setState(3080);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx)) {
        case 1: {
          setState(3079);
          expressionsWithDefaults();
          break;
        }

        }
        setState(3082);
        match(MySqlParser::RR_BRACKET);
        setState(3091);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(3083);
          match(MySqlParser::COMMA);
          setState(3084);
          match(MySqlParser::LR_BRACKET);
          setState(3086);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 417, _ctx)) {
          case 1: {
            setState(3085);
            expressionsWithDefaults();
            break;
          }

          }
          setState(3088);
          match(MySqlParser::RR_BRACKET);
          setState(3093);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdatedElementContext ------------------------------------------------------------------

MySqlParser::UpdatedElementContext::UpdatedElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::FullColumnNameContext* MySqlParser::UpdatedElementContext::fullColumnName() {
  return getRuleContext<MySqlParser::FullColumnNameContext>(0);
}

tree::TerminalNode* MySqlParser::UpdatedElementContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::ExpressionContext* MySqlParser::UpdatedElementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::UpdatedElementContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}


size_t MySqlParser::UpdatedElementContext::getRuleIndex() const {
  return MySqlParser::RuleUpdatedElement;
}


MySqlParser::UpdatedElementContext* MySqlParser::updatedElement() {
  UpdatedElementContext *_localctx = _tracker.createInstance<UpdatedElementContext>(_ctx, getState());
  enterRule(_localctx, 184, MySqlParser::RuleUpdatedElement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3096);
    fullColumnName();
    setState(3097);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(3100);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 420, _ctx)) {
    case 1: {
      setState(3098);
      expression(0);
      break;
    }

    case 2: {
      setState(3099);
      match(MySqlParser::DEFAULT);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentFieldContext ------------------------------------------------------------------

MySqlParser::AssignmentFieldContext::AssignmentFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::AssignmentFieldContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AssignmentFieldContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}


size_t MySqlParser::AssignmentFieldContext::getRuleIndex() const {
  return MySqlParser::RuleAssignmentField;
}


MySqlParser::AssignmentFieldContext* MySqlParser::assignmentField() {
  AssignmentFieldContext *_localctx = _tracker.createInstance<AssignmentFieldContext>(_ctx, getState());
  enterRule(_localctx, 186, MySqlParser::RuleAssignmentField);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3104);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 1);
        setState(3102);
        uid();
        break;
      }

      case MySqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3103);
        match(MySqlParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockClauseContext ------------------------------------------------------------------

MySqlParser::LockClauseContext::LockClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LockClauseContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::LockClauseContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::LockClauseContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::LockClauseContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::LockClauseContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::LockClauseContext::MODE() {
  return getToken(MySqlParser::MODE, 0);
}


size_t MySqlParser::LockClauseContext::getRuleIndex() const {
  return MySqlParser::RuleLockClause;
}


MySqlParser::LockClauseContext* MySqlParser::lockClause() {
  LockClauseContext *_localctx = _tracker.createInstance<LockClauseContext>(_ctx, getState());
  enterRule(_localctx, 188, MySqlParser::RuleLockClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3112);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(3106);
        match(MySqlParser::FOR);
        setState(3107);
        match(MySqlParser::UPDATE);
        break;
      }

      case MySqlParser::LOCK: {
        enterOuterAlt(_localctx, 2);
        setState(3108);
        match(MySqlParser::LOCK);
        setState(3109);
        match(MySqlParser::IN);
        setState(3110);
        match(MySqlParser::SHARE);
        setState(3111);
        match(MySqlParser::MODE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleDeleteStatementContext ------------------------------------------------------------------

MySqlParser::SingleDeleteStatementContext::SingleDeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::TableNameContext* MySqlParser::SingleDeleteStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::SingleDeleteStatementContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::SingleDeleteStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::OrderByClauseContext* MySqlParser::SingleDeleteStatementContext::orderByClause() {
  return getRuleContext<MySqlParser::OrderByClauseContext>(0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

MySqlParser::LimitClauseAtomContext* MySqlParser::SingleDeleteStatementContext::limitClauseAtom() {
  return getRuleContext<MySqlParser::LimitClauseAtomContext>(0);
}

tree::TerminalNode* MySqlParser::SingleDeleteStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}


size_t MySqlParser::SingleDeleteStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSingleDeleteStatement;
}


MySqlParser::SingleDeleteStatementContext* MySqlParser::singleDeleteStatement() {
  SingleDeleteStatementContext *_localctx = _tracker.createInstance<SingleDeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 190, MySqlParser::RuleSingleDeleteStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3114);
    match(MySqlParser::DELETE);
    setState(3116);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(3115);
      dynamic_cast<SingleDeleteStatementContext *>(_localctx)->priority = match(MySqlParser::LOW_PRIORITY);
    }
    setState(3119);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::QUICK) {
      setState(3118);
      match(MySqlParser::QUICK);
    }
    setState(3122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(3121);
      match(MySqlParser::IGNORE);
    }
    setState(3124);
    match(MySqlParser::FROM);
    setState(3125);
    tableName();
    setState(3131);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(3126);
      match(MySqlParser::PARTITION);
      setState(3127);
      match(MySqlParser::LR_BRACKET);
      setState(3128);
      uidList();
      setState(3129);
      match(MySqlParser::RR_BRACKET);
    }
    setState(3135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3133);
      match(MySqlParser::WHERE);
      setState(3134);
      expression(0);
    }
    setState(3138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ORDER) {
      setState(3137);
      orderByClause();
    }
    setState(3142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(3140);
      match(MySqlParser::LIMIT);
      setState(3141);
      limitClauseAtom();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipleDeleteStatementContext ------------------------------------------------------------------

MySqlParser::MultipleDeleteStatementContext::MultipleDeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

std::vector<MySqlParser::TableNameContext *> MySqlParser::MultipleDeleteStatementContext::tableName() {
  return getRuleContexts<MySqlParser::TableNameContext>();
}

MySqlParser::TableNameContext* MySqlParser::MultipleDeleteStatementContext::tableName(size_t i) {
  return getRuleContext<MySqlParser::TableNameContext>(i);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::TableSourcesContext* MySqlParser::MultipleDeleteStatementContext::tableSources() {
  return getRuleContext<MySqlParser::TableSourcesContext>(0);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::MultipleDeleteStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::MultipleDeleteStatementContext::DOT() {
  return getTokens(MySqlParser::DOT);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::DOT(size_t i) {
  return getToken(MySqlParser::DOT, i);
}

std::vector<tree::TerminalNode *> MySqlParser::MultipleDeleteStatementContext::STAR() {
  return getTokens(MySqlParser::STAR);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::STAR(size_t i) {
  return getToken(MySqlParser::STAR, i);
}

std::vector<tree::TerminalNode *> MySqlParser::MultipleDeleteStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::MultipleDeleteStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::MultipleDeleteStatementContext::getRuleIndex() const {
  return MySqlParser::RuleMultipleDeleteStatement;
}


MySqlParser::MultipleDeleteStatementContext* MySqlParser::multipleDeleteStatement() {
  MultipleDeleteStatementContext *_localctx = _tracker.createInstance<MultipleDeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 192, MySqlParser::RuleMultipleDeleteStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3144);
    match(MySqlParser::DELETE);
    setState(3146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(3145);
      dynamic_cast<MultipleDeleteStatementContext *>(_localctx)->priority = match(MySqlParser::LOW_PRIORITY);
    }
    setState(3149);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 431, _ctx)) {
    case 1: {
      setState(3148);
      match(MySqlParser::QUICK);
      break;
    }

    }
    setState(3152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(3151);
      match(MySqlParser::IGNORE);
    }
    setState(3193);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        setState(3154);
        tableName();
        setState(3157);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::DOT) {
          setState(3155);
          match(MySqlParser::DOT);
          setState(3156);
          match(MySqlParser::STAR);
        }
        setState(3167);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(3159);
          match(MySqlParser::COMMA);
          setState(3160);
          tableName();
          setState(3163);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::DOT) {
            setState(3161);
            match(MySqlParser::DOT);
            setState(3162);
            match(MySqlParser::STAR);
          }
          setState(3169);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3170);
        match(MySqlParser::FROM);
        setState(3171);
        tableSources();
        break;
      }

      case MySqlParser::FROM: {
        setState(3173);
        match(MySqlParser::FROM);
        setState(3174);
        tableName();
        setState(3177);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::DOT) {
          setState(3175);
          match(MySqlParser::DOT);
          setState(3176);
          match(MySqlParser::STAR);
        }
        setState(3187);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(3179);
          match(MySqlParser::COMMA);
          setState(3180);
          tableName();
          setState(3183);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::DOT) {
            setState(3181);
            match(MySqlParser::DOT);
            setState(3182);
            match(MySqlParser::STAR);
          }
          setState(3189);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3190);
        match(MySqlParser::USING);
        setState(3191);
        tableSources();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3197);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3195);
      match(MySqlParser::WHERE);
      setState(3196);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerOpenStatementContext ------------------------------------------------------------------

MySqlParser::HandlerOpenStatementContext::HandlerOpenStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HandlerOpenStatementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::TableNameContext* MySqlParser::HandlerOpenStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerOpenStatementContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}

MySqlParser::UidContext* MySqlParser::HandlerOpenStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerOpenStatementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}


size_t MySqlParser::HandlerOpenStatementContext::getRuleIndex() const {
  return MySqlParser::RuleHandlerOpenStatement;
}


MySqlParser::HandlerOpenStatementContext* MySqlParser::handlerOpenStatement() {
  HandlerOpenStatementContext *_localctx = _tracker.createInstance<HandlerOpenStatementContext>(_ctx, getState());
  enterRule(_localctx, 194, MySqlParser::RuleHandlerOpenStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3199);
    match(MySqlParser::HANDLER);
    setState(3200);
    tableName();
    setState(3201);
    match(MySqlParser::OPEN);
    setState(3206);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx)) {
    case 1: {
      setState(3203);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3202);
        match(MySqlParser::AS);
      }
      setState(3205);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerReadIndexStatementContext ------------------------------------------------------------------

MySqlParser::HandlerReadIndexStatementContext::HandlerReadIndexStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::TableNameContext* MySqlParser::HandlerReadIndexStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

MySqlParser::UidContext* MySqlParser::HandlerReadIndexStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::ComparisonOperatorContext* MySqlParser::HandlerReadIndexStatementContext::comparisonOperator() {
  return getRuleContext<MySqlParser::ComparisonOperatorContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ConstantsContext* MySqlParser::HandlerReadIndexStatementContext::constants() {
  return getRuleContext<MySqlParser::ConstantsContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::HandlerReadIndexStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

MySqlParser::LimitClauseAtomContext* MySqlParser::HandlerReadIndexStatementContext::limitClauseAtom() {
  return getRuleContext<MySqlParser::LimitClauseAtomContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::PREV() {
  return getToken(MySqlParser::PREV, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadIndexStatementContext::LAST() {
  return getToken(MySqlParser::LAST, 0);
}


size_t MySqlParser::HandlerReadIndexStatementContext::getRuleIndex() const {
  return MySqlParser::RuleHandlerReadIndexStatement;
}


MySqlParser::HandlerReadIndexStatementContext* MySqlParser::handlerReadIndexStatement() {
  HandlerReadIndexStatementContext *_localctx = _tracker.createInstance<HandlerReadIndexStatementContext>(_ctx, getState());
  enterRule(_localctx, 196, MySqlParser::RuleHandlerReadIndexStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3208);
    match(MySqlParser::HANDLER);
    setState(3209);
    tableName();
    setState(3210);
    match(MySqlParser::READ);
    setState(3211);
    dynamic_cast<HandlerReadIndexStatementContext *>(_localctx)->index = uid();
    setState(3218);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::EQUAL_SYMBOL:
      case MySqlParser::GREATER_SYMBOL:
      case MySqlParser::LESS_SYMBOL:
      case MySqlParser::EXCLAMATION_SYMBOL: {
        setState(3212);
        comparisonOperator();
        setState(3213);
        match(MySqlParser::LR_BRACKET);
        setState(3214);
        constants();
        setState(3215);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::FIRST:
      case MySqlParser::LAST:
      case MySqlParser::NEXT:
      case MySqlParser::PREV: {
        setState(3217);
        dynamic_cast<HandlerReadIndexStatementContext *>(_localctx)->moveOrder = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FIRST

        || _la == MySqlParser::LAST || _la == MySqlParser::NEXT

        || _la == MySqlParser::PREV)) {
          dynamic_cast<HandlerReadIndexStatementContext *>(_localctx)->moveOrder = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3220);
      match(MySqlParser::WHERE);
      setState(3221);
      expression(0);
    }
    setState(3226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(3224);
      match(MySqlParser::LIMIT);
      setState(3225);
      limitClauseAtom();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerReadStatementContext ------------------------------------------------------------------

MySqlParser::HandlerReadStatementContext::HandlerReadStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HandlerReadStatementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::TableNameContext* MySqlParser::HandlerReadStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadStatementContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadStatementContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadStatementContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

tree::TerminalNode* MySqlParser::HandlerReadStatementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::HandlerReadStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerReadStatementContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

MySqlParser::LimitClauseAtomContext* MySqlParser::HandlerReadStatementContext::limitClauseAtom() {
  return getRuleContext<MySqlParser::LimitClauseAtomContext>(0);
}


size_t MySqlParser::HandlerReadStatementContext::getRuleIndex() const {
  return MySqlParser::RuleHandlerReadStatement;
}


MySqlParser::HandlerReadStatementContext* MySqlParser::handlerReadStatement() {
  HandlerReadStatementContext *_localctx = _tracker.createInstance<HandlerReadStatementContext>(_ctx, getState());
  enterRule(_localctx, 198, MySqlParser::RuleHandlerReadStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3228);
    match(MySqlParser::HANDLER);
    setState(3229);
    tableName();
    setState(3230);
    match(MySqlParser::READ);
    setState(3231);
    dynamic_cast<HandlerReadStatementContext *>(_localctx)->moveOrder = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::FIRST || _la == MySqlParser::NEXT)) {
      dynamic_cast<HandlerReadStatementContext *>(_localctx)->moveOrder = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3234);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3232);
      match(MySqlParser::WHERE);
      setState(3233);
      expression(0);
    }
    setState(3238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(3236);
      match(MySqlParser::LIMIT);
      setState(3237);
      limitClauseAtom();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerCloseStatementContext ------------------------------------------------------------------

MySqlParser::HandlerCloseStatementContext::HandlerCloseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HandlerCloseStatementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::TableNameContext* MySqlParser::HandlerCloseStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::HandlerCloseStatementContext::CLOSE() {
  return getToken(MySqlParser::CLOSE, 0);
}


size_t MySqlParser::HandlerCloseStatementContext::getRuleIndex() const {
  return MySqlParser::RuleHandlerCloseStatement;
}


MySqlParser::HandlerCloseStatementContext* MySqlParser::handlerCloseStatement() {
  HandlerCloseStatementContext *_localctx = _tracker.createInstance<HandlerCloseStatementContext>(_ctx, getState());
  enterRule(_localctx, 200, MySqlParser::RuleHandlerCloseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3240);
    match(MySqlParser::HANDLER);
    setState(3241);
    tableName();
    setState(3242);
    match(MySqlParser::CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleUpdateStatementContext ------------------------------------------------------------------

MySqlParser::SingleUpdateStatementContext::SingleUpdateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

MySqlParser::TableNameContext* MySqlParser::SingleUpdateStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::UpdatedElementContext *> MySqlParser::SingleUpdateStatementContext::updatedElement() {
  return getRuleContexts<MySqlParser::UpdatedElementContext>();
}

MySqlParser::UpdatedElementContext* MySqlParser::SingleUpdateStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySqlParser::UpdatedElementContext>(i);
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

MySqlParser::UidContext* MySqlParser::SingleUpdateStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::SingleUpdateStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::SingleUpdateStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::OrderByClauseContext* MySqlParser::SingleUpdateStatementContext::orderByClause() {
  return getRuleContext<MySqlParser::OrderByClauseContext>(0);
}

MySqlParser::LimitClauseContext* MySqlParser::SingleUpdateStatementContext::limitClause() {
  return getRuleContext<MySqlParser::LimitClauseContext>(0);
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::SingleUpdateStatementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}


size_t MySqlParser::SingleUpdateStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSingleUpdateStatement;
}


MySqlParser::SingleUpdateStatementContext* MySqlParser::singleUpdateStatement() {
  SingleUpdateStatementContext *_localctx = _tracker.createInstance<SingleUpdateStatementContext>(_ctx, getState());
  enterRule(_localctx, 202, MySqlParser::RuleSingleUpdateStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3244);
    match(MySqlParser::UPDATE);
    setState(3246);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(3245);
      dynamic_cast<SingleUpdateStatementContext *>(_localctx)->priority = match(MySqlParser::LOW_PRIORITY);
    }
    setState(3249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(3248);
      match(MySqlParser::IGNORE);
    }
    setState(3251);
    tableName();
    setState(3256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::AS)
      | (1ULL << MySqlParser::CURRENT)
      | (1ULL << MySqlParser::DATABASE)
      | (1ULL << MySqlParser::DIAGNOSTICS))) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & ((1ULL << (MySqlParser::GROUP - 66))
      | (1ULL << (MySqlParser::LEFT - 66))
      | (1ULL << (MySqlParser::NUMBER - 66))
      | (1ULL << (MySqlParser::ORDER - 66)))) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & ((1ULL << (MySqlParser::RIGHT - 133))
      | (1ULL << (MySqlParser::SCHEMA - 133))
      | (1ULL << (MySqlParser::STACKED - 133)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(3253);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3252);
        match(MySqlParser::AS);
      }
      setState(3255);
      uid();
    }
    setState(3258);
    match(MySqlParser::SET);
    setState(3259);
    updatedElement();
    setState(3264);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3260);
      match(MySqlParser::COMMA);
      setState(3261);
      updatedElement();
      setState(3266);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3267);
      match(MySqlParser::WHERE);
      setState(3268);
      expression(0);
    }
    setState(3272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ORDER) {
      setState(3271);
      orderByClause();
    }
    setState(3275);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(3274);
      limitClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipleUpdateStatementContext ------------------------------------------------------------------

MySqlParser::MultipleUpdateStatementContext::MultipleUpdateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::MultipleUpdateStatementContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

MySqlParser::TableSourcesContext* MySqlParser::MultipleUpdateStatementContext::tableSources() {
  return getRuleContext<MySqlParser::TableSourcesContext>(0);
}

tree::TerminalNode* MySqlParser::MultipleUpdateStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::UpdatedElementContext *> MySqlParser::MultipleUpdateStatementContext::updatedElement() {
  return getRuleContexts<MySqlParser::UpdatedElementContext>();
}

MySqlParser::UpdatedElementContext* MySqlParser::MultipleUpdateStatementContext::updatedElement(size_t i) {
  return getRuleContext<MySqlParser::UpdatedElementContext>(i);
}

tree::TerminalNode* MySqlParser::MultipleUpdateStatementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::MultipleUpdateStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::MultipleUpdateStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::MultipleUpdateStatementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::MultipleUpdateStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::MultipleUpdateStatementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}


size_t MySqlParser::MultipleUpdateStatementContext::getRuleIndex() const {
  return MySqlParser::RuleMultipleUpdateStatement;
}


MySqlParser::MultipleUpdateStatementContext* MySqlParser::multipleUpdateStatement() {
  MultipleUpdateStatementContext *_localctx = _tracker.createInstance<MultipleUpdateStatementContext>(_ctx, getState());
  enterRule(_localctx, 204, MySqlParser::RuleMultipleUpdateStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3277);
    match(MySqlParser::UPDATE);
    setState(3279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(3278);
      dynamic_cast<MultipleUpdateStatementContext *>(_localctx)->priority = match(MySqlParser::LOW_PRIORITY);
    }
    setState(3282);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(3281);
      match(MySqlParser::IGNORE);
    }
    setState(3284);
    tableSources();
    setState(3285);
    match(MySqlParser::SET);
    setState(3286);
    updatedElement();
    setState(3291);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3287);
      match(MySqlParser::COMMA);
      setState(3288);
      updatedElement();
      setState(3293);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3296);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3294);
      match(MySqlParser::WHERE);
      setState(3295);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

MySqlParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::OrderByClauseContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::OrderByClauseContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<MySqlParser::OrderByExpressionContext *> MySqlParser::OrderByClauseContext::orderByExpression() {
  return getRuleContexts<MySqlParser::OrderByExpressionContext>();
}

MySqlParser::OrderByExpressionContext* MySqlParser::OrderByClauseContext::orderByExpression(size_t i) {
  return getRuleContext<MySqlParser::OrderByExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::OrderByClauseContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::OrderByClauseContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::OrderByClauseContext::getRuleIndex() const {
  return MySqlParser::RuleOrderByClause;
}


MySqlParser::OrderByClauseContext* MySqlParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 206, MySqlParser::RuleOrderByClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3298);
    match(MySqlParser::ORDER);
    setState(3299);
    match(MySqlParser::BY);
    setState(3300);
    orderByExpression();
    setState(3305);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3301);
      match(MySqlParser::COMMA);
      setState(3302);
      orderByExpression();
      setState(3307);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByExpressionContext ------------------------------------------------------------------

MySqlParser::OrderByExpressionContext::OrderByExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ExpressionContext* MySqlParser::OrderByExpressionContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::OrderByExpressionContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::OrderByExpressionContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}


size_t MySqlParser::OrderByExpressionContext::getRuleIndex() const {
  return MySqlParser::RuleOrderByExpression;
}


MySqlParser::OrderByExpressionContext* MySqlParser::orderByExpression() {
  OrderByExpressionContext *_localctx = _tracker.createInstance<OrderByExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, MySqlParser::RuleOrderByExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3308);
    expression(0);
    setState(3310);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      setState(3309);
      dynamic_cast<OrderByExpressionContext *>(_localctx)->order = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC)) {
        dynamic_cast<OrderByExpressionContext *>(_localctx)->order = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableSourcesContext ------------------------------------------------------------------

MySqlParser::TableSourcesContext::TableSourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::TableSourceContext *> MySqlParser::TableSourcesContext::tableSource() {
  return getRuleContexts<MySqlParser::TableSourceContext>();
}

MySqlParser::TableSourceContext* MySqlParser::TableSourcesContext::tableSource(size_t i) {
  return getRuleContext<MySqlParser::TableSourceContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::TableSourcesContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::TableSourcesContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::TableSourcesContext::getRuleIndex() const {
  return MySqlParser::RuleTableSources;
}


MySqlParser::TableSourcesContext* MySqlParser::tableSources() {
  TableSourcesContext *_localctx = _tracker.createInstance<TableSourcesContext>(_ctx, getState());
  enterRule(_localctx, 210, MySqlParser::RuleTableSources);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3312);
    tableSource();
    setState(3317);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3313);
      match(MySqlParser::COMMA);
      setState(3314);
      tableSource();
      setState(3319);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableSourceContext ------------------------------------------------------------------

MySqlParser::TableSourceContext::TableSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::TableSourceContext::getRuleIndex() const {
  return MySqlParser::RuleTableSource;
}

void MySqlParser::TableSourceContext::copyFrom(TableSourceContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableSourceNestedContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableSourceNestedContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::TableSourceItemContext* MySqlParser::TableSourceNestedContext::tableSourceItem() {
  return getRuleContext<MySqlParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySqlParser::TableSourceNestedContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::JoinPartContext *> MySqlParser::TableSourceNestedContext::joinPart() {
  return getRuleContexts<MySqlParser::JoinPartContext>();
}

MySqlParser::JoinPartContext* MySqlParser::TableSourceNestedContext::joinPart(size_t i) {
  return getRuleContext<MySqlParser::JoinPartContext>(i);
}

MySqlParser::TableSourceNestedContext::TableSourceNestedContext(TableSourceContext *ctx) { copyFrom(ctx); }


//----------------- TableSourceBaseContext ------------------------------------------------------------------

MySqlParser::TableSourceItemContext* MySqlParser::TableSourceBaseContext::tableSourceItem() {
  return getRuleContext<MySqlParser::TableSourceItemContext>(0);
}

std::vector<MySqlParser::JoinPartContext *> MySqlParser::TableSourceBaseContext::joinPart() {
  return getRuleContexts<MySqlParser::JoinPartContext>();
}

MySqlParser::JoinPartContext* MySqlParser::TableSourceBaseContext::joinPart(size_t i) {
  return getRuleContext<MySqlParser::JoinPartContext>(i);
}

MySqlParser::TableSourceBaseContext::TableSourceBaseContext(TableSourceContext *ctx) { copyFrom(ctx); }


MySqlParser::TableSourceContext* MySqlParser::tableSource() {
  TableSourceContext *_localctx = _tracker.createInstance<TableSourceContext>(_ctx, getState());
  enterRule(_localctx, 212, MySqlParser::RuleTableSource);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3337);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 465, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableSourceContext *>(_tracker.createInstance<MySqlParser::TableSourceBaseContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3320);
      tableSourceItem();
      setState(3324);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3321);
          joinPart(); 
        }
        setState(3326);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableSourceContext *>(_tracker.createInstance<MySqlParser::TableSourceNestedContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3327);
      match(MySqlParser::LR_BRACKET);
      setState(3328);
      tableSourceItem();
      setState(3332);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 31) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 31)) & ((1ULL << (MySqlParser::CROSS - 31))
        | (1ULL << (MySqlParser::INNER - 31))
        | (1ULL << (MySqlParser::JOIN - 31))
        | (1ULL << (MySqlParser::LEFT - 31)))) != 0) || ((((_la - 101) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 101)) & ((1ULL << (MySqlParser::NATURAL - 101))
        | (1ULL << (MySqlParser::RIGHT - 101))
        | (1ULL << (MySqlParser::STRAIGHT_JOIN - 101)))) != 0)) {
        setState(3329);
        joinPart();
        setState(3334);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3335);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableSourceItemContext ------------------------------------------------------------------

MySqlParser::TableSourceItemContext::TableSourceItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::TableSourceItemContext::getRuleIndex() const {
  return MySqlParser::RuleTableSourceItem;
}

void MySqlParser::TableSourceItemContext::copyFrom(TableSourceItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryTableItemContext ------------------------------------------------------------------

MySqlParser::UidContext* MySqlParser::SubqueryTableItemContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::SelectStatementContext* MySqlParser::SubqueryTableItemContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::SubqueryTableItemContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubqueryTableItemContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubqueryTableItemContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SubqueryTableItemContext::SubqueryTableItemContext(TableSourceItemContext *ctx) { copyFrom(ctx); }


//----------------- AtomTableItemContext ------------------------------------------------------------------

MySqlParser::TableNameContext* MySqlParser::AtomTableItemContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::AtomTableItemContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::IndexHintContext *> MySqlParser::AtomTableItemContext::indexHint() {
  return getRuleContexts<MySqlParser::IndexHintContext>();
}

MySqlParser::IndexHintContext* MySqlParser::AtomTableItemContext::indexHint(size_t i) {
  return getRuleContext<MySqlParser::IndexHintContext>(i);
}

MySqlParser::UidContext* MySqlParser::AtomTableItemContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AtomTableItemContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::AtomTableItemContext::AtomTableItemContext(TableSourceItemContext *ctx) { copyFrom(ctx); }


//----------------- TableSourcesItemContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableSourcesItemContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::TableSourcesContext* MySqlParser::TableSourcesItemContext::tableSources() {
  return getRuleContext<MySqlParser::TableSourcesContext>(0);
}

tree::TerminalNode* MySqlParser::TableSourcesItemContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::TableSourcesItemContext::TableSourcesItemContext(TableSourceItemContext *ctx) { copyFrom(ctx); }


MySqlParser::TableSourceItemContext* MySqlParser::tableSourceItem() {
  TableSourceItemContext *_localctx = _tracker.createInstance<TableSourceItemContext>(_ctx, getState());
  enterRule(_localctx, 214, MySqlParser::RuleTableSourceItem);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3379);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 473, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<TableSourceItemContext *>(_tracker.createInstance<MySqlParser::AtomTableItemContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3339);
      tableName();
      setState(3345);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PARTITION) {
        setState(3340);
        match(MySqlParser::PARTITION);
        setState(3341);
        match(MySqlParser::LR_BRACKET);
        setState(3342);
        uidList();
        setState(3343);
        match(MySqlParser::RR_BRACKET);
      }
      setState(3351);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
      case 1: {
        setState(3348);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3347);
          match(MySqlParser::AS);
        }
        setState(3350);
        dynamic_cast<AtomTableItemContext *>(_localctx)->alias = uid();
        break;
      }

      }
      setState(3361);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
      case 1: {
        setState(3353);
        indexHint();
        setState(3358);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3354);
            match(MySqlParser::COMMA);
            setState(3355);
            indexHint(); 
          }
          setState(3360);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx);
        }
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<TableSourceItemContext *>(_tracker.createInstance<MySqlParser::SubqueryTableItemContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3368);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 471, _ctx)) {
      case 1: {
        setState(3363);
        selectStatement();
        break;
      }

      case 2: {
        setState(3364);
        match(MySqlParser::LR_BRACKET);
        setState(3365);
        dynamic_cast<SubqueryTableItemContext *>(_localctx)->parenthesisSubquery = selectStatement();
        setState(3366);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      }
      setState(3371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3370);
        match(MySqlParser::AS);
      }
      setState(3373);
      dynamic_cast<SubqueryTableItemContext *>(_localctx)->alias = uid();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<TableSourceItemContext *>(_tracker.createInstance<MySqlParser::TableSourcesItemContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3375);
      match(MySqlParser::LR_BRACKET);
      setState(3376);
      tableSources();
      setState(3377);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexHintContext ------------------------------------------------------------------

MySqlParser::IndexHintContext::IndexHintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IndexHintContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::IndexHintContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::USE() {
  return getToken(MySqlParser::USE, 0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::FORCE() {
  return getToken(MySqlParser::FORCE, 0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::IndexHintContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::IndexHintTypeContext* MySqlParser::IndexHintContext::indexHintType() {
  return getRuleContext<MySqlParser::IndexHintTypeContext>(0);
}


size_t MySqlParser::IndexHintContext::getRuleIndex() const {
  return MySqlParser::RuleIndexHint;
}


MySqlParser::IndexHintContext* MySqlParser::indexHint() {
  IndexHintContext *_localctx = _tracker.createInstance<IndexHintContext>(_ctx, getState());
  enterRule(_localctx, 216, MySqlParser::RuleIndexHint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3381);
    dynamic_cast<IndexHintContext *>(_localctx)->indexHintAction = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::FORCE

    || _la == MySqlParser::IGNORE || _la == MySqlParser::USE)) {
      dynamic_cast<IndexHintContext *>(_localctx)->indexHintAction = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3382);
    dynamic_cast<IndexHintContext *>(_localctx)->keyFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::INDEX

    || _la == MySqlParser::KEY)) {
      dynamic_cast<IndexHintContext *>(_localctx)->keyFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3385);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3383);
      match(MySqlParser::FOR);
      setState(3384);
      indexHintType();
    }
    setState(3387);
    match(MySqlParser::LR_BRACKET);
    setState(3388);
    uidList();
    setState(3389);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexHintTypeContext ------------------------------------------------------------------

MySqlParser::IndexHintTypeContext::IndexHintTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IndexHintTypeContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

tree::TerminalNode* MySqlParser::IndexHintTypeContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::IndexHintTypeContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::IndexHintTypeContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}


size_t MySqlParser::IndexHintTypeContext::getRuleIndex() const {
  return MySqlParser::RuleIndexHintType;
}


MySqlParser::IndexHintTypeContext* MySqlParser::indexHintType() {
  IndexHintTypeContext *_localctx = _tracker.createInstance<IndexHintTypeContext>(_ctx, getState());
  enterRule(_localctx, 218, MySqlParser::RuleIndexHintType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3396);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::JOIN: {
        enterOuterAlt(_localctx, 1);
        setState(3391);
        match(MySqlParser::JOIN);
        break;
      }

      case MySqlParser::ORDER: {
        enterOuterAlt(_localctx, 2);
        setState(3392);
        match(MySqlParser::ORDER);
        setState(3393);
        match(MySqlParser::BY);
        break;
      }

      case MySqlParser::GROUP: {
        enterOuterAlt(_localctx, 3);
        setState(3394);
        match(MySqlParser::GROUP);
        setState(3395);
        match(MySqlParser::BY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinPartContext ------------------------------------------------------------------

MySqlParser::JoinPartContext::JoinPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::JoinPartContext::getRuleIndex() const {
  return MySqlParser::RuleJoinPart;
}

void MySqlParser::JoinPartContext::copyFrom(JoinPartContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InnerJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::InnerJoinContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

MySqlParser::TableSourceItemContext* MySqlParser::InnerJoinContext::tableSourceItem() {
  return getRuleContext<MySqlParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::ExpressionContext* MySqlParser::InnerJoinContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::InnerJoinContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::INNER() {
  return getToken(MySqlParser::INNER, 0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::CROSS() {
  return getToken(MySqlParser::CROSS, 0);
}

MySqlParser::InnerJoinContext::InnerJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }


//----------------- NaturalJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::NaturalJoinContext::NATURAL() {
  return getToken(MySqlParser::NATURAL, 0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

MySqlParser::TableSourceItemContext* MySqlParser::NaturalJoinContext::tableSourceItem() {
  return getRuleContext<MySqlParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::LEFT() {
  return getToken(MySqlParser::LEFT, 0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::RIGHT() {
  return getToken(MySqlParser::RIGHT, 0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::OUTER() {
  return getToken(MySqlParser::OUTER, 0);
}

MySqlParser::NaturalJoinContext::NaturalJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }


//----------------- OuterJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::OuterJoinContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

MySqlParser::TableSourceItemContext* MySqlParser::OuterJoinContext::tableSourceItem() {
  return getRuleContext<MySqlParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::LEFT() {
  return getToken(MySqlParser::LEFT, 0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::RIGHT() {
  return getToken(MySqlParser::RIGHT, 0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::ExpressionContext* MySqlParser::OuterJoinContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::OuterJoinContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::OUTER() {
  return getToken(MySqlParser::OUTER, 0);
}

MySqlParser::OuterJoinContext::OuterJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }


//----------------- StraightJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::StraightJoinContext::STRAIGHT_JOIN() {
  return getToken(MySqlParser::STRAIGHT_JOIN, 0);
}

MySqlParser::TableSourceItemContext* MySqlParser::StraightJoinContext::tableSourceItem() {
  return getRuleContext<MySqlParser::TableSourceItemContext>(0);
}

tree::TerminalNode* MySqlParser::StraightJoinContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::ExpressionContext* MySqlParser::StraightJoinContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::StraightJoinContext::StraightJoinContext(JoinPartContext *ctx) { copyFrom(ctx); }


MySqlParser::JoinPartContext* MySqlParser::joinPart() {
  JoinPartContext *_localctx = _tracker.createInstance<JoinPartContext>(_ctx, getState());
  enterRule(_localctx, 220, MySqlParser::RuleJoinPart);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3442);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CROSS:
      case MySqlParser::INNER:
      case MySqlParser::JOIN: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySqlParser::InnerJoinContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3399);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CROSS

        || _la == MySqlParser::INNER) {
          setState(3398);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::CROSS

          || _la == MySqlParser::INNER)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3401);
        match(MySqlParser::JOIN);
        setState(3402);
        tableSourceItem();
        setState(3410);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx)) {
        case 1: {
          setState(3403);
          match(MySqlParser::ON);
          setState(3404);
          expression(0);
          break;
        }

        case 2: {
          setState(3405);
          match(MySqlParser::USING);
          setState(3406);
          match(MySqlParser::LR_BRACKET);
          setState(3407);
          uidList();
          setState(3408);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        break;
      }

      case MySqlParser::STRAIGHT_JOIN: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySqlParser::StraightJoinContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3412);
        match(MySqlParser::STRAIGHT_JOIN);
        setState(3413);
        tableSourceItem();
        setState(3416);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 478, _ctx)) {
        case 1: {
          setState(3414);
          match(MySqlParser::ON);
          setState(3415);
          expression(0);
          break;
        }

        }
        break;
      }

      case MySqlParser::LEFT:
      case MySqlParser::RIGHT: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySqlParser::OuterJoinContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3418);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3420);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::OUTER) {
          setState(3419);
          match(MySqlParser::OUTER);
        }
        setState(3422);
        match(MySqlParser::JOIN);
        setState(3423);
        tableSourceItem();
        setState(3431);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ON: {
            setState(3424);
            match(MySqlParser::ON);
            setState(3425);
            expression(0);
            break;
          }

          case MySqlParser::USING: {
            setState(3426);
            match(MySqlParser::USING);
            setState(3427);
            match(MySqlParser::LR_BRACKET);
            setState(3428);
            uidList();
            setState(3429);
            match(MySqlParser::RR_BRACKET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::NATURAL: {
        _localctx = dynamic_cast<JoinPartContext *>(_tracker.createInstance<MySqlParser::NaturalJoinContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3433);
        match(MySqlParser::NATURAL);
        setState(3438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT) {
          setState(3434);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::LEFT

          || _la == MySqlParser::RIGHT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3436);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::OUTER) {
            setState(3435);
            match(MySqlParser::OUTER);
          }
        }
        setState(3440);
        match(MySqlParser::JOIN);
        setState(3441);
        tableSourceItem();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionContext ------------------------------------------------------------------

MySqlParser::QueryExpressionContext::QueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::QueryExpressionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::QuerySpecificationContext* MySqlParser::QueryExpressionContext::querySpecification() {
  return getRuleContext<MySqlParser::QuerySpecificationContext>(0);
}

tree::TerminalNode* MySqlParser::QueryExpressionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::QueryExpressionContext* MySqlParser::QueryExpressionContext::queryExpression() {
  return getRuleContext<MySqlParser::QueryExpressionContext>(0);
}


size_t MySqlParser::QueryExpressionContext::getRuleIndex() const {
  return MySqlParser::RuleQueryExpression;
}


MySqlParser::QueryExpressionContext* MySqlParser::queryExpression() {
  QueryExpressionContext *_localctx = _tracker.createInstance<QueryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, MySqlParser::RuleQueryExpression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3452);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3444);
      match(MySqlParser::LR_BRACKET);
      setState(3445);
      querySpecification();
      setState(3446);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3448);
      match(MySqlParser::LR_BRACKET);
      setState(3449);
      queryExpression();
      setState(3450);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionNointoContext ------------------------------------------------------------------

MySqlParser::QueryExpressionNointoContext::QueryExpressionNointoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::QueryExpressionNointoContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::QuerySpecificationNointoContext* MySqlParser::QueryExpressionNointoContext::querySpecificationNointo() {
  return getRuleContext<MySqlParser::QuerySpecificationNointoContext>(0);
}

tree::TerminalNode* MySqlParser::QueryExpressionNointoContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::QueryExpressionNointoContext* MySqlParser::QueryExpressionNointoContext::queryExpressionNointo() {
  return getRuleContext<MySqlParser::QueryExpressionNointoContext>(0);
}


size_t MySqlParser::QueryExpressionNointoContext::getRuleIndex() const {
  return MySqlParser::RuleQueryExpressionNointo;
}


MySqlParser::QueryExpressionNointoContext* MySqlParser::queryExpressionNointo() {
  QueryExpressionNointoContext *_localctx = _tracker.createInstance<QueryExpressionNointoContext>(_ctx, getState());
  enterRule(_localctx, 224, MySqlParser::RuleQueryExpressionNointo);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3462);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 485, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3454);
      match(MySqlParser::LR_BRACKET);
      setState(3455);
      querySpecificationNointo();
      setState(3456);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3458);
      match(MySqlParser::LR_BRACKET);
      setState(3459);
      queryExpressionNointo();
      setState(3460);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

MySqlParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::QuerySpecificationContext::SELECT() {
  return getToken(MySqlParser::SELECT, 0);
}

MySqlParser::SelectElementsContext* MySqlParser::QuerySpecificationContext::selectElements() {
  return getRuleContext<MySqlParser::SelectElementsContext>(0);
}

std::vector<MySqlParser::SelectSpecContext *> MySqlParser::QuerySpecificationContext::selectSpec() {
  return getRuleContexts<MySqlParser::SelectSpecContext>();
}

MySqlParser::SelectSpecContext* MySqlParser::QuerySpecificationContext::selectSpec(size_t i) {
  return getRuleContext<MySqlParser::SelectSpecContext>(i);
}

MySqlParser::SelectIntoExpressionContext* MySqlParser::QuerySpecificationContext::selectIntoExpression() {
  return getRuleContext<MySqlParser::SelectIntoExpressionContext>(0);
}

MySqlParser::FromClauseContext* MySqlParser::QuerySpecificationContext::fromClause() {
  return getRuleContext<MySqlParser::FromClauseContext>(0);
}

MySqlParser::GroupByClauseContext* MySqlParser::QuerySpecificationContext::groupByClause() {
  return getRuleContext<MySqlParser::GroupByClauseContext>(0);
}

MySqlParser::HavingClauseContext* MySqlParser::QuerySpecificationContext::havingClause() {
  return getRuleContext<MySqlParser::HavingClauseContext>(0);
}

MySqlParser::OrderByClauseContext* MySqlParser::QuerySpecificationContext::orderByClause() {
  return getRuleContext<MySqlParser::OrderByClauseContext>(0);
}

MySqlParser::LimitClauseContext* MySqlParser::QuerySpecificationContext::limitClause() {
  return getRuleContext<MySqlParser::LimitClauseContext>(0);
}


size_t MySqlParser::QuerySpecificationContext::getRuleIndex() const {
  return MySqlParser::RuleQuerySpecification;
}


MySqlParser::QuerySpecificationContext* MySqlParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 226, MySqlParser::RuleQuerySpecification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3516);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 500, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3464);
      match(MySqlParser::SELECT);
      setState(3468);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 486, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3465);
          selectSpec(); 
        }
        setState(3470);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 486, _ctx);
      }
      setState(3471);
      selectElements();
      setState(3473);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INTO) {
        setState(3472);
        selectIntoExpression();
      }
      setState(3476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM) {
        setState(3475);
        fromClause();
      }
      setState(3479);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 489, _ctx)) {
      case 1: {
        setState(3478);
        groupByClause();
        break;
      }

      }
      setState(3482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::HAVING) {
        setState(3481);
        havingClause();
      }
      setState(3485);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx)) {
      case 1: {
        setState(3484);
        orderByClause();
        break;
      }

      }
      setState(3488);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 492, _ctx)) {
      case 1: {
        setState(3487);
        limitClause();
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3490);
      match(MySqlParser::SELECT);
      setState(3494);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3491);
          selectSpec(); 
        }
        setState(3496);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx);
      }
      setState(3497);
      selectElements();
      setState(3499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM) {
        setState(3498);
        fromClause();
      }
      setState(3502);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
      case 1: {
        setState(3501);
        groupByClause();
        break;
      }

      }
      setState(3505);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::HAVING) {
        setState(3504);
        havingClause();
      }
      setState(3508);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 497, _ctx)) {
      case 1: {
        setState(3507);
        orderByClause();
        break;
      }

      }
      setState(3511);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
      case 1: {
        setState(3510);
        limitClause();
        break;
      }

      }
      setState(3514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INTO) {
        setState(3513);
        selectIntoExpression();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationNointoContext ------------------------------------------------------------------

MySqlParser::QuerySpecificationNointoContext::QuerySpecificationNointoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::QuerySpecificationNointoContext::SELECT() {
  return getToken(MySqlParser::SELECT, 0);
}

MySqlParser::SelectElementsContext* MySqlParser::QuerySpecificationNointoContext::selectElements() {
  return getRuleContext<MySqlParser::SelectElementsContext>(0);
}

std::vector<MySqlParser::SelectSpecContext *> MySqlParser::QuerySpecificationNointoContext::selectSpec() {
  return getRuleContexts<MySqlParser::SelectSpecContext>();
}

MySqlParser::SelectSpecContext* MySqlParser::QuerySpecificationNointoContext::selectSpec(size_t i) {
  return getRuleContext<MySqlParser::SelectSpecContext>(i);
}

MySqlParser::FromClauseContext* MySqlParser::QuerySpecificationNointoContext::fromClause() {
  return getRuleContext<MySqlParser::FromClauseContext>(0);
}

MySqlParser::GroupByClauseContext* MySqlParser::QuerySpecificationNointoContext::groupByClause() {
  return getRuleContext<MySqlParser::GroupByClauseContext>(0);
}

MySqlParser::HavingClauseContext* MySqlParser::QuerySpecificationNointoContext::havingClause() {
  return getRuleContext<MySqlParser::HavingClauseContext>(0);
}

MySqlParser::OrderByClauseContext* MySqlParser::QuerySpecificationNointoContext::orderByClause() {
  return getRuleContext<MySqlParser::OrderByClauseContext>(0);
}

MySqlParser::LimitClauseContext* MySqlParser::QuerySpecificationNointoContext::limitClause() {
  return getRuleContext<MySqlParser::LimitClauseContext>(0);
}


size_t MySqlParser::QuerySpecificationNointoContext::getRuleIndex() const {
  return MySqlParser::RuleQuerySpecificationNointo;
}


MySqlParser::QuerySpecificationNointoContext* MySqlParser::querySpecificationNointo() {
  QuerySpecificationNointoContext *_localctx = _tracker.createInstance<QuerySpecificationNointoContext>(_ctx, getState());
  enterRule(_localctx, 228, MySqlParser::RuleQuerySpecificationNointo);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3518);
    match(MySqlParser::SELECT);
    setState(3522);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 501, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3519);
        selectSpec(); 
      }
      setState(3524);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 501, _ctx);
    }
    setState(3525);
    selectElements();
    setState(3527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FROM) {
      setState(3526);
      fromClause();
    }
    setState(3530);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx)) {
    case 1: {
      setState(3529);
      groupByClause();
      break;
    }

    }
    setState(3533);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::HAVING) {
      setState(3532);
      havingClause();
    }
    setState(3536);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 505, _ctx)) {
    case 1: {
      setState(3535);
      orderByClause();
      break;
    }

    }
    setState(3539);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 506, _ctx)) {
    case 1: {
      setState(3538);
      limitClause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnionParenthesisContext ------------------------------------------------------------------

MySqlParser::UnionParenthesisContext::UnionParenthesisContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UnionParenthesisContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::QueryExpressionNointoContext* MySqlParser::UnionParenthesisContext::queryExpressionNointo() {
  return getRuleContext<MySqlParser::QueryExpressionNointoContext>(0);
}

tree::TerminalNode* MySqlParser::UnionParenthesisContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::UnionParenthesisContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}


size_t MySqlParser::UnionParenthesisContext::getRuleIndex() const {
  return MySqlParser::RuleUnionParenthesis;
}


MySqlParser::UnionParenthesisContext* MySqlParser::unionParenthesis() {
  UnionParenthesisContext *_localctx = _tracker.createInstance<UnionParenthesisContext>(_ctx, getState());
  enterRule(_localctx, 230, MySqlParser::RuleUnionParenthesis);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3541);
    match(MySqlParser::UNION);
    setState(3543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALL

    || _la == MySqlParser::DISTINCT) {
      setState(3542);
      dynamic_cast<UnionParenthesisContext *>(_localctx)->unionType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ALL

      || _la == MySqlParser::DISTINCT)) {
        dynamic_cast<UnionParenthesisContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3545);
    queryExpressionNointo();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnionStatementContext ------------------------------------------------------------------

MySqlParser::UnionStatementContext::UnionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UnionStatementContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::QuerySpecificationNointoContext* MySqlParser::UnionStatementContext::querySpecificationNointo() {
  return getRuleContext<MySqlParser::QuerySpecificationNointoContext>(0);
}

MySqlParser::QueryExpressionNointoContext* MySqlParser::UnionStatementContext::queryExpressionNointo() {
  return getRuleContext<MySqlParser::QueryExpressionNointoContext>(0);
}

tree::TerminalNode* MySqlParser::UnionStatementContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::UnionStatementContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}


size_t MySqlParser::UnionStatementContext::getRuleIndex() const {
  return MySqlParser::RuleUnionStatement;
}


MySqlParser::UnionStatementContext* MySqlParser::unionStatement() {
  UnionStatementContext *_localctx = _tracker.createInstance<UnionStatementContext>(_ctx, getState());
  enterRule(_localctx, 232, MySqlParser::RuleUnionStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3547);
    match(MySqlParser::UNION);
    setState(3549);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALL

    || _la == MySqlParser::DISTINCT) {
      setState(3548);
      dynamic_cast<UnionStatementContext *>(_localctx)->unionType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ALL

      || _la == MySqlParser::DISTINCT)) {
        dynamic_cast<UnionStatementContext *>(_localctx)->unionType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT: {
        setState(3551);
        querySpecificationNointo();
        break;
      }

      case MySqlParser::LR_BRACKET: {
        setState(3552);
        queryExpressionNointo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectSpecContext ------------------------------------------------------------------

MySqlParser::SelectSpecContext::SelectSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SelectSpecContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::DISTINCTROW() {
  return getToken(MySqlParser::DISTINCTROW, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::HIGH_PRIORITY() {
  return getToken(MySqlParser::HIGH_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::STRAIGHT_JOIN() {
  return getToken(MySqlParser::STRAIGHT_JOIN, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::SQL_SMALL_RESULT() {
  return getToken(MySqlParser::SQL_SMALL_RESULT, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::SQL_BIG_RESULT() {
  return getToken(MySqlParser::SQL_BIG_RESULT, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::SQL_BUFFER_RESULT() {
  return getToken(MySqlParser::SQL_BUFFER_RESULT, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::SQL_CACHE() {
  return getToken(MySqlParser::SQL_CACHE, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::SQL_NO_CACHE() {
  return getToken(MySqlParser::SQL_NO_CACHE, 0);
}

tree::TerminalNode* MySqlParser::SelectSpecContext::SQL_CALC_FOUND_ROWS() {
  return getToken(MySqlParser::SQL_CALC_FOUND_ROWS, 0);
}


size_t MySqlParser::SelectSpecContext::getRuleIndex() const {
  return MySqlParser::RuleSelectSpec;
}


MySqlParser::SelectSpecContext* MySqlParser::selectSpec() {
  SelectSpecContext *_localctx = _tracker.createInstance<SelectSpecContext>(_ctx, getState());
  enterRule(_localctx, 234, MySqlParser::RuleSelectSpec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3563);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALL:
      case MySqlParser::DISTINCT:
      case MySqlParser::DISTINCTROW: {
        enterOuterAlt(_localctx, 1);
        setState(3555);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << MySqlParser::ALL)
          | (1ULL << MySqlParser::DISTINCT)
          | (1ULL << MySqlParser::DISTINCTROW))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::HIGH_PRIORITY: {
        enterOuterAlt(_localctx, 2);
        setState(3556);
        match(MySqlParser::HIGH_PRIORITY);
        break;
      }

      case MySqlParser::STRAIGHT_JOIN: {
        enterOuterAlt(_localctx, 3);
        setState(3557);
        match(MySqlParser::STRAIGHT_JOIN);
        break;
      }

      case MySqlParser::SQL_SMALL_RESULT: {
        enterOuterAlt(_localctx, 4);
        setState(3558);
        match(MySqlParser::SQL_SMALL_RESULT);
        break;
      }

      case MySqlParser::SQL_BIG_RESULT: {
        enterOuterAlt(_localctx, 5);
        setState(3559);
        match(MySqlParser::SQL_BIG_RESULT);
        break;
      }

      case MySqlParser::SQL_BUFFER_RESULT: {
        enterOuterAlt(_localctx, 6);
        setState(3560);
        match(MySqlParser::SQL_BUFFER_RESULT);
        break;
      }

      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE: {
        enterOuterAlt(_localctx, 7);
        setState(3561);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::SQL_CACHE

        || _la == MySqlParser::SQL_NO_CACHE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::SQL_CALC_FOUND_ROWS: {
        enterOuterAlt(_localctx, 8);
        setState(3562);
        match(MySqlParser::SQL_CALC_FOUND_ROWS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectElementsContext ------------------------------------------------------------------

MySqlParser::SelectElementsContext::SelectElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::SelectElementContext *> MySqlParser::SelectElementsContext::selectElement() {
  return getRuleContexts<MySqlParser::SelectElementContext>();
}

MySqlParser::SelectElementContext* MySqlParser::SelectElementsContext::selectElement(size_t i) {
  return getRuleContext<MySqlParser::SelectElementContext>(i);
}

tree::TerminalNode* MySqlParser::SelectElementsContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::SelectElementsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SelectElementsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::SelectElementsContext::getRuleIndex() const {
  return MySqlParser::RuleSelectElements;
}


MySqlParser::SelectElementsContext* MySqlParser::selectElements() {
  SelectElementsContext *_localctx = _tracker.createInstance<SelectElementsContext>(_ctx, getState());
  enterRule(_localctx, 236, MySqlParser::RuleSelectElements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3567);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 511, _ctx)) {
    case 1: {
      setState(3565);
      dynamic_cast<SelectElementsContext *>(_localctx)->star = match(MySqlParser::STAR);
      break;
    }

    case 2: {
      setState(3566);
      selectElement();
      break;
    }

    }
    setState(3573);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3569);
      match(MySqlParser::COMMA);
      setState(3570);
      selectElement();
      setState(3575);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectElementContext ------------------------------------------------------------------

MySqlParser::SelectElementContext::SelectElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::SelectElementContext::getRuleIndex() const {
  return MySqlParser::RuleSelectElement;
}

void MySqlParser::SelectElementContext::copyFrom(SelectElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectExpressionElementContext ------------------------------------------------------------------

MySqlParser::ExpressionContext* MySqlParser::SelectExpressionElementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::SelectExpressionElementContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::SelectExpressionElementContext::VAR_ASSIGN() {
  return getToken(MySqlParser::VAR_ASSIGN, 0);
}

MySqlParser::UidContext* MySqlParser::SelectExpressionElementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::SelectExpressionElementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SelectExpressionElementContext::SelectExpressionElementContext(SelectElementContext *ctx) { copyFrom(ctx); }


//----------------- SelectFunctionElementContext ------------------------------------------------------------------

MySqlParser::FunctionCallContext* MySqlParser::SelectFunctionElementContext::functionCall() {
  return getRuleContext<MySqlParser::FunctionCallContext>(0);
}

MySqlParser::UidContext* MySqlParser::SelectFunctionElementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::SelectFunctionElementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SelectFunctionElementContext::SelectFunctionElementContext(SelectElementContext *ctx) { copyFrom(ctx); }


//----------------- SelectStarElementContext ------------------------------------------------------------------

MySqlParser::FullIdContext* MySqlParser::SelectStarElementContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::SelectStarElementContext::DOT() {
  return getToken(MySqlParser::DOT, 0);
}

tree::TerminalNode* MySqlParser::SelectStarElementContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

MySqlParser::SelectStarElementContext::SelectStarElementContext(SelectElementContext *ctx) { copyFrom(ctx); }


//----------------- SelectColumnElementContext ------------------------------------------------------------------

MySqlParser::FullColumnNameContext* MySqlParser::SelectColumnElementContext::fullColumnName() {
  return getRuleContext<MySqlParser::FullColumnNameContext>(0);
}

MySqlParser::UidContext* MySqlParser::SelectColumnElementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::SelectColumnElementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SelectColumnElementContext::SelectColumnElementContext(SelectElementContext *ctx) { copyFrom(ctx); }


MySqlParser::SelectElementContext* MySqlParser::selectElement() {
  SelectElementContext *_localctx = _tracker.createInstance<SelectElementContext>(_ctx, getState());
  enterRule(_localctx, 238, MySqlParser::RuleSelectElement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3605);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 520, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySqlParser::SelectStarElementContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3576);
      fullId();
      setState(3577);
      match(MySqlParser::DOT);
      setState(3578);
      match(MySqlParser::STAR);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySqlParser::SelectColumnElementContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3580);
      fullColumnName();
      setState(3585);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 514, _ctx)) {
      case 1: {
        setState(3582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3581);
          match(MySqlParser::AS);
        }
        setState(3584);
        uid();
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySqlParser::SelectFunctionElementContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3587);
      functionCall();
      setState(3592);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 516, _ctx)) {
      case 1: {
        setState(3589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3588);
          match(MySqlParser::AS);
        }
        setState(3591);
        uid();
        break;
      }

      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SelectElementContext *>(_tracker.createInstance<MySqlParser::SelectExpressionElementContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(3596);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 517, _ctx)) {
      case 1: {
        setState(3594);
        match(MySqlParser::LOCAL_ID);
        setState(3595);
        match(MySqlParser::VAR_ASSIGN);
        break;
      }

      }
      setState(3598);
      expression(0);
      setState(3603);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 519, _ctx)) {
      case 1: {
        setState(3600);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3599);
          match(MySqlParser::AS);
        }
        setState(3602);
        uid();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectIntoExpressionContext ------------------------------------------------------------------

MySqlParser::SelectIntoExpressionContext::SelectIntoExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::SelectIntoExpressionContext::getRuleIndex() const {
  return MySqlParser::RuleSelectIntoExpression;
}

void MySqlParser::SelectIntoExpressionContext::copyFrom(SelectIntoExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectIntoVariablesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SelectIntoVariablesContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

std::vector<MySqlParser::AssignmentFieldContext *> MySqlParser::SelectIntoVariablesContext::assignmentField() {
  return getRuleContexts<MySqlParser::AssignmentFieldContext>();
}

MySqlParser::AssignmentFieldContext* MySqlParser::SelectIntoVariablesContext::assignmentField(size_t i) {
  return getRuleContext<MySqlParser::AssignmentFieldContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::SelectIntoVariablesContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SelectIntoVariablesContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::SelectIntoVariablesContext::SelectIntoVariablesContext(SelectIntoExpressionContext *ctx) { copyFrom(ctx); }


//----------------- SelectIntoTextFileContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::OUTFILE() {
  return getToken(MySqlParser::OUTFILE, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::LINES() {
  return getToken(MySqlParser::LINES, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::SelectIntoTextFileContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoTextFileContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

std::vector<MySqlParser::SelectFieldsIntoContext *> MySqlParser::SelectIntoTextFileContext::selectFieldsInto() {
  return getRuleContexts<MySqlParser::SelectFieldsIntoContext>();
}

MySqlParser::SelectFieldsIntoContext* MySqlParser::SelectIntoTextFileContext::selectFieldsInto(size_t i) {
  return getRuleContext<MySqlParser::SelectFieldsIntoContext>(i);
}

std::vector<MySqlParser::SelectLinesIntoContext *> MySqlParser::SelectIntoTextFileContext::selectLinesInto() {
  return getRuleContexts<MySqlParser::SelectLinesIntoContext>();
}

MySqlParser::SelectLinesIntoContext* MySqlParser::SelectIntoTextFileContext::selectLinesInto(size_t i) {
  return getRuleContext<MySqlParser::SelectLinesIntoContext>(i);
}

MySqlParser::SelectIntoTextFileContext::SelectIntoTextFileContext(SelectIntoExpressionContext *ctx) { copyFrom(ctx); }


//----------------- SelectIntoDumpFileContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SelectIntoDumpFileContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoDumpFileContext::DUMPFILE() {
  return getToken(MySqlParser::DUMPFILE, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoDumpFileContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::SelectIntoDumpFileContext::SelectIntoDumpFileContext(SelectIntoExpressionContext *ctx) { copyFrom(ctx); }


MySqlParser::SelectIntoExpressionContext* MySqlParser::selectIntoExpression() {
  SelectIntoExpressionContext *_localctx = _tracker.createInstance<SelectIntoExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, MySqlParser::RuleSelectIntoExpression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3643);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 527, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SelectIntoExpressionContext *>(_tracker.createInstance<MySqlParser::SelectIntoVariablesContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3607);
      match(MySqlParser::INTO);
      setState(3608);
      assignmentField();
      setState(3613);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3609);
        match(MySqlParser::COMMA);
        setState(3610);
        assignmentField();
        setState(3615);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SelectIntoExpressionContext *>(_tracker.createInstance<MySqlParser::SelectIntoDumpFileContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3616);
      match(MySqlParser::INTO);
      setState(3617);
      match(MySqlParser::DUMPFILE);
      setState(3618);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SelectIntoExpressionContext *>(_tracker.createInstance<MySqlParser::SelectIntoTextFileContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3619);
      match(MySqlParser::INTO);
      setState(3620);
      match(MySqlParser::OUTFILE);
      setState(3621);
      dynamic_cast<SelectIntoTextFileContext *>(_localctx)->filename = match(MySqlParser::STRING_LITERAL);
      setState(3625);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CHARACTER) {
        setState(3622);
        match(MySqlParser::CHARACTER);
        setState(3623);
        match(MySqlParser::SET);
        setState(3624);
        dynamic_cast<SelectIntoTextFileContext *>(_localctx)->charset = charsetName();
      }
      setState(3633);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 524, _ctx)) {
      case 1: {
        setState(3627);
        dynamic_cast<SelectIntoTextFileContext *>(_localctx)->fieldsFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::COLUMNS

        || _la == MySqlParser::FIELDS)) {
          dynamic_cast<SelectIntoTextFileContext *>(_localctx)->fieldsFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3629); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3628);
          selectFieldsInto();
          setState(3631); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySqlParser::ENCLOSED

        || _la == MySqlParser::ESCAPED || _la == MySqlParser::OPTIONALLY

        || _la == MySqlParser::TERMINATED);
        break;
      }

      }
      setState(3641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINES) {
        setState(3635);
        match(MySqlParser::LINES);
        setState(3637); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3636);
          selectLinesInto();
          setState(3639); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySqlParser::STARTING

        || _la == MySqlParser::TERMINATED);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectFieldsIntoContext ------------------------------------------------------------------

MySqlParser::SelectFieldsIntoContext::SelectFieldsIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SelectFieldsIntoContext::TERMINATED() {
  return getToken(MySqlParser::TERMINATED, 0);
}

tree::TerminalNode* MySqlParser::SelectFieldsIntoContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::SelectFieldsIntoContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::SelectFieldsIntoContext::ENCLOSED() {
  return getToken(MySqlParser::ENCLOSED, 0);
}

tree::TerminalNode* MySqlParser::SelectFieldsIntoContext::OPTIONALLY() {
  return getToken(MySqlParser::OPTIONALLY, 0);
}

tree::TerminalNode* MySqlParser::SelectFieldsIntoContext::ESCAPED() {
  return getToken(MySqlParser::ESCAPED, 0);
}


size_t MySqlParser::SelectFieldsIntoContext::getRuleIndex() const {
  return MySqlParser::RuleSelectFieldsInto;
}


MySqlParser::SelectFieldsIntoContext* MySqlParser::selectFieldsInto() {
  SelectFieldsIntoContext *_localctx = _tracker.createInstance<SelectFieldsIntoContext>(_ctx, getState());
  enterRule(_localctx, 242, MySqlParser::RuleSelectFieldsInto);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::TERMINATED: {
        enterOuterAlt(_localctx, 1);
        setState(3645);
        match(MySqlParser::TERMINATED);
        setState(3646);
        match(MySqlParser::BY);
        setState(3647);
        dynamic_cast<SelectFieldsIntoContext *>(_localctx)->terminationField = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::ENCLOSED:
      case MySqlParser::OPTIONALLY: {
        enterOuterAlt(_localctx, 2);
        setState(3649);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::OPTIONALLY) {
          setState(3648);
          match(MySqlParser::OPTIONALLY);
        }
        setState(3651);
        match(MySqlParser::ENCLOSED);
        setState(3652);
        match(MySqlParser::BY);
        setState(3653);
        dynamic_cast<SelectFieldsIntoContext *>(_localctx)->enclosion = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::ESCAPED: {
        enterOuterAlt(_localctx, 3);
        setState(3654);
        match(MySqlParser::ESCAPED);
        setState(3655);
        match(MySqlParser::BY);
        setState(3656);
        dynamic_cast<SelectFieldsIntoContext *>(_localctx)->escaping = match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectLinesIntoContext ------------------------------------------------------------------

MySqlParser::SelectLinesIntoContext::SelectLinesIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SelectLinesIntoContext::STARTING() {
  return getToken(MySqlParser::STARTING, 0);
}

tree::TerminalNode* MySqlParser::SelectLinesIntoContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::SelectLinesIntoContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::SelectLinesIntoContext::TERMINATED() {
  return getToken(MySqlParser::TERMINATED, 0);
}


size_t MySqlParser::SelectLinesIntoContext::getRuleIndex() const {
  return MySqlParser::RuleSelectLinesInto;
}


MySqlParser::SelectLinesIntoContext* MySqlParser::selectLinesInto() {
  SelectLinesIntoContext *_localctx = _tracker.createInstance<SelectLinesIntoContext>(_ctx, getState());
  enterRule(_localctx, 244, MySqlParser::RuleSelectLinesInto);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3665);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STARTING: {
        enterOuterAlt(_localctx, 1);
        setState(3659);
        match(MySqlParser::STARTING);
        setState(3660);
        match(MySqlParser::BY);
        setState(3661);
        dynamic_cast<SelectLinesIntoContext *>(_localctx)->starting = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::TERMINATED: {
        enterOuterAlt(_localctx, 2);
        setState(3662);
        match(MySqlParser::TERMINATED);
        setState(3663);
        match(MySqlParser::BY);
        setState(3664);
        dynamic_cast<SelectLinesIntoContext *>(_localctx)->terminationLine = match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

MySqlParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::FromClauseContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::TableSourcesContext* MySqlParser::FromClauseContext::tableSources() {
  return getRuleContext<MySqlParser::TableSourcesContext>(0);
}

tree::TerminalNode* MySqlParser::FromClauseContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::FromClauseContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::FromClauseContext::getRuleIndex() const {
  return MySqlParser::RuleFromClause;
}


MySqlParser::FromClauseContext* MySqlParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 246, MySqlParser::RuleFromClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3667);
    match(MySqlParser::FROM);
    setState(3668);
    tableSources();
    setState(3671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3669);
      match(MySqlParser::WHERE);
      setState(3670);
      dynamic_cast<FromClauseContext *>(_localctx)->whereExpr = expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

MySqlParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::GroupByClauseContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

tree::TerminalNode* MySqlParser::GroupByClauseContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<MySqlParser::GroupByItemContext *> MySqlParser::GroupByClauseContext::groupByItem() {
  return getRuleContexts<MySqlParser::GroupByItemContext>();
}

MySqlParser::GroupByItemContext* MySqlParser::GroupByClauseContext::groupByItem(size_t i) {
  return getRuleContext<MySqlParser::GroupByItemContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::GroupByClauseContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::GroupByClauseContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::GroupByClauseContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::GroupByClauseContext::ROLLUP() {
  return getToken(MySqlParser::ROLLUP, 0);
}


size_t MySqlParser::GroupByClauseContext::getRuleIndex() const {
  return MySqlParser::RuleGroupByClause;
}


MySqlParser::GroupByClauseContext* MySqlParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 248, MySqlParser::RuleGroupByClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3673);
    match(MySqlParser::GROUP);
    setState(3674);
    match(MySqlParser::BY);
    setState(3675);
    groupByItem();
    setState(3680);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3676);
      match(MySqlParser::COMMA);
      setState(3677);
      groupByItem();
      setState(3682);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3685);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 533, _ctx)) {
    case 1: {
      setState(3683);
      match(MySqlParser::WITH);
      setState(3684);
      match(MySqlParser::ROLLUP);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

MySqlParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HavingClauseContext::HAVING() {
  return getToken(MySqlParser::HAVING, 0);
}

MySqlParser::ExpressionContext* MySqlParser::HavingClauseContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::HavingClauseContext::getRuleIndex() const {
  return MySqlParser::RuleHavingClause;
}


MySqlParser::HavingClauseContext* MySqlParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 250, MySqlParser::RuleHavingClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3687);
    match(MySqlParser::HAVING);
    setState(3688);
    dynamic_cast<HavingClauseContext *>(_localctx)->havingExpr = expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByItemContext ------------------------------------------------------------------

MySqlParser::GroupByItemContext::GroupByItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ExpressionContext* MySqlParser::GroupByItemContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::GroupByItemContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::GroupByItemContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}


size_t MySqlParser::GroupByItemContext::getRuleIndex() const {
  return MySqlParser::RuleGroupByItem;
}


MySqlParser::GroupByItemContext* MySqlParser::groupByItem() {
  GroupByItemContext *_localctx = _tracker.createInstance<GroupByItemContext>(_ctx, getState());
  enterRule(_localctx, 252, MySqlParser::RuleGroupByItem);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3690);
    expression(0);
    setState(3692);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 534, _ctx)) {
    case 1: {
      setState(3691);
      dynamic_cast<GroupByItemContext *>(_localctx)->order = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC)) {
        dynamic_cast<GroupByItemContext *>(_localctx)->order = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseContext ------------------------------------------------------------------

MySqlParser::LimitClauseContext::LimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LimitClauseContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

tree::TerminalNode* MySqlParser::LimitClauseContext::OFFSET() {
  return getToken(MySqlParser::OFFSET, 0);
}

std::vector<MySqlParser::LimitClauseAtomContext *> MySqlParser::LimitClauseContext::limitClauseAtom() {
  return getRuleContexts<MySqlParser::LimitClauseAtomContext>();
}

MySqlParser::LimitClauseAtomContext* MySqlParser::LimitClauseContext::limitClauseAtom(size_t i) {
  return getRuleContext<MySqlParser::LimitClauseAtomContext>(i);
}

tree::TerminalNode* MySqlParser::LimitClauseContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}


size_t MySqlParser::LimitClauseContext::getRuleIndex() const {
  return MySqlParser::RuleLimitClause;
}


MySqlParser::LimitClauseContext* MySqlParser::limitClause() {
  LimitClauseContext *_localctx = _tracker.createInstance<LimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 254, MySqlParser::RuleLimitClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3694);
    match(MySqlParser::LIMIT);
    setState(3705);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 536, _ctx)) {
    case 1: {
      setState(3698);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 535, _ctx)) {
      case 1: {
        setState(3695);
        dynamic_cast<LimitClauseContext *>(_localctx)->offset = limitClauseAtom();
        setState(3696);
        match(MySqlParser::COMMA);
        break;
      }

      }
      setState(3700);
      dynamic_cast<LimitClauseContext *>(_localctx)->limit = limitClauseAtom();
      break;
    }

    case 2: {
      setState(3701);
      dynamic_cast<LimitClauseContext *>(_localctx)->limit = limitClauseAtom();
      setState(3702);
      match(MySqlParser::OFFSET);
      setState(3703);
      dynamic_cast<LimitClauseContext *>(_localctx)->offset = limitClauseAtom();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseAtomContext ------------------------------------------------------------------

MySqlParser::LimitClauseAtomContext::LimitClauseAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::DecimalLiteralContext* MySqlParser::LimitClauseAtomContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::MysqlVariableContext* MySqlParser::LimitClauseAtomContext::mysqlVariable() {
  return getRuleContext<MySqlParser::MysqlVariableContext>(0);
}

MySqlParser::SimpleIdContext* MySqlParser::LimitClauseAtomContext::simpleId() {
  return getRuleContext<MySqlParser::SimpleIdContext>(0);
}


size_t MySqlParser::LimitClauseAtomContext::getRuleIndex() const {
  return MySqlParser::RuleLimitClauseAtom;
}


MySqlParser::LimitClauseAtomContext* MySqlParser::limitClauseAtom() {
  LimitClauseAtomContext *_localctx = _tracker.createInstance<LimitClauseAtomContext>(_ctx, getState());
  enterRule(_localctx, 256, MySqlParser::RuleLimitClauseAtom);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3710);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(3707);
        decimalLiteral();
        break;
      }

      case MySqlParser::LOCAL_ID:
      case MySqlParser::GLOBAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3708);
        mysqlVariable();
        break;
      }

      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 3);
        setState(3709);
        simpleId();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartTransactionContext ------------------------------------------------------------------

MySqlParser::StartTransactionContext::StartTransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::StartTransactionContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::StartTransactionContext::TRANSACTION() {
  return getToken(MySqlParser::TRANSACTION, 0);
}

std::vector<MySqlParser::TransactionModeContext *> MySqlParser::StartTransactionContext::transactionMode() {
  return getRuleContexts<MySqlParser::TransactionModeContext>();
}

MySqlParser::TransactionModeContext* MySqlParser::StartTransactionContext::transactionMode(size_t i) {
  return getRuleContext<MySqlParser::TransactionModeContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::StartTransactionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::StartTransactionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::StartTransactionContext::getRuleIndex() const {
  return MySqlParser::RuleStartTransaction;
}


MySqlParser::StartTransactionContext* MySqlParser::startTransaction() {
  StartTransactionContext *_localctx = _tracker.createInstance<StartTransactionContext>(_ctx, getState());
  enterRule(_localctx, 258, MySqlParser::RuleStartTransaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3712);
    match(MySqlParser::START);
    setState(3713);
    match(MySqlParser::TRANSACTION);
    setState(3722);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::READ

    || _la == MySqlParser::WITH) {
      setState(3714);
      transactionMode();
      setState(3719);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3715);
        match(MySqlParser::COMMA);
        setState(3716);
        transactionMode();
        setState(3721);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BeginWorkContext ------------------------------------------------------------------

MySqlParser::BeginWorkContext::BeginWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::BeginWorkContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::BeginWorkContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}


size_t MySqlParser::BeginWorkContext::getRuleIndex() const {
  return MySqlParser::RuleBeginWork;
}


MySqlParser::BeginWorkContext* MySqlParser::beginWork() {
  BeginWorkContext *_localctx = _tracker.createInstance<BeginWorkContext>(_ctx, getState());
  enterRule(_localctx, 260, MySqlParser::RuleBeginWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3724);
    match(MySqlParser::BEGIN);
    setState(3726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3725);
      match(MySqlParser::WORK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommitWorkContext ------------------------------------------------------------------

MySqlParser::CommitWorkContext::CommitWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CommitWorkContext::COMMIT() {
  return getToken(MySqlParser::COMMIT, 0);
}

tree::TerminalNode* MySqlParser::CommitWorkContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::CommitWorkContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::CommitWorkContext::CHAIN() {
  return getToken(MySqlParser::CHAIN, 0);
}

tree::TerminalNode* MySqlParser::CommitWorkContext::RELEASE() {
  return getToken(MySqlParser::RELEASE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CommitWorkContext::NO() {
  return getTokens(MySqlParser::NO);
}

tree::TerminalNode* MySqlParser::CommitWorkContext::NO(size_t i) {
  return getToken(MySqlParser::NO, i);
}


size_t MySqlParser::CommitWorkContext::getRuleIndex() const {
  return MySqlParser::RuleCommitWork;
}


MySqlParser::CommitWorkContext* MySqlParser::commitWork() {
  CommitWorkContext *_localctx = _tracker.createInstance<CommitWorkContext>(_ctx, getState());
  enterRule(_localctx, 262, MySqlParser::RuleCommitWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3728);
    match(MySqlParser::COMMIT);
    setState(3730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3729);
      match(MySqlParser::WORK);
    }
    setState(3737);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AND) {
      setState(3732);
      match(MySqlParser::AND);
      setState(3734);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3733);
        dynamic_cast<CommitWorkContext *>(_localctx)->nochain = match(MySqlParser::NO);
      }
      setState(3736);
      match(MySqlParser::CHAIN);
    }
    setState(3743);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 545, _ctx)) {
    case 1: {
      setState(3740);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3739);
        dynamic_cast<CommitWorkContext *>(_localctx)->norelease = match(MySqlParser::NO);
      }
      setState(3742);
      match(MySqlParser::RELEASE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RollbackWorkContext ------------------------------------------------------------------

MySqlParser::RollbackWorkContext::RollbackWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RollbackWorkContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

tree::TerminalNode* MySqlParser::RollbackWorkContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::RollbackWorkContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::RollbackWorkContext::CHAIN() {
  return getToken(MySqlParser::CHAIN, 0);
}

tree::TerminalNode* MySqlParser::RollbackWorkContext::RELEASE() {
  return getToken(MySqlParser::RELEASE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::RollbackWorkContext::NO() {
  return getTokens(MySqlParser::NO);
}

tree::TerminalNode* MySqlParser::RollbackWorkContext::NO(size_t i) {
  return getToken(MySqlParser::NO, i);
}


size_t MySqlParser::RollbackWorkContext::getRuleIndex() const {
  return MySqlParser::RuleRollbackWork;
}


MySqlParser::RollbackWorkContext* MySqlParser::rollbackWork() {
  RollbackWorkContext *_localctx = _tracker.createInstance<RollbackWorkContext>(_ctx, getState());
  enterRule(_localctx, 264, MySqlParser::RuleRollbackWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3745);
    match(MySqlParser::ROLLBACK);
    setState(3747);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3746);
      match(MySqlParser::WORK);
    }
    setState(3754);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AND) {
      setState(3749);
      match(MySqlParser::AND);
      setState(3751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3750);
        dynamic_cast<RollbackWorkContext *>(_localctx)->nochain = match(MySqlParser::NO);
      }
      setState(3753);
      match(MySqlParser::CHAIN);
    }
    setState(3760);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 550, _ctx)) {
    case 1: {
      setState(3757);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3756);
        dynamic_cast<RollbackWorkContext *>(_localctx)->norelease = match(MySqlParser::NO);
      }
      setState(3759);
      match(MySqlParser::RELEASE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SavepointStatementContext ------------------------------------------------------------------

MySqlParser::SavepointStatementContext::SavepointStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SavepointStatementContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}

MySqlParser::UidContext* MySqlParser::SavepointStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::SavepointStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSavepointStatement;
}


MySqlParser::SavepointStatementContext* MySqlParser::savepointStatement() {
  SavepointStatementContext *_localctx = _tracker.createInstance<SavepointStatementContext>(_ctx, getState());
  enterRule(_localctx, 266, MySqlParser::RuleSavepointStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3762);
    match(MySqlParser::SAVEPOINT);
    setState(3763);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RollbackStatementContext ------------------------------------------------------------------

MySqlParser::RollbackStatementContext::RollbackStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RollbackStatementContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

tree::TerminalNode* MySqlParser::RollbackStatementContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

MySqlParser::UidContext* MySqlParser::RollbackStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::RollbackStatementContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::RollbackStatementContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}


size_t MySqlParser::RollbackStatementContext::getRuleIndex() const {
  return MySqlParser::RuleRollbackStatement;
}


MySqlParser::RollbackStatementContext* MySqlParser::rollbackStatement() {
  RollbackStatementContext *_localctx = _tracker.createInstance<RollbackStatementContext>(_ctx, getState());
  enterRule(_localctx, 268, MySqlParser::RuleRollbackStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3765);
    match(MySqlParser::ROLLBACK);
    setState(3767);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3766);
      match(MySqlParser::WORK);
    }
    setState(3769);
    match(MySqlParser::TO);
    setState(3771);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 552, _ctx)) {
    case 1: {
      setState(3770);
      match(MySqlParser::SAVEPOINT);
      break;
    }

    }
    setState(3773);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReleaseStatementContext ------------------------------------------------------------------

MySqlParser::ReleaseStatementContext::ReleaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ReleaseStatementContext::RELEASE() {
  return getToken(MySqlParser::RELEASE, 0);
}

tree::TerminalNode* MySqlParser::ReleaseStatementContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}

MySqlParser::UidContext* MySqlParser::ReleaseStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::ReleaseStatementContext::getRuleIndex() const {
  return MySqlParser::RuleReleaseStatement;
}


MySqlParser::ReleaseStatementContext* MySqlParser::releaseStatement() {
  ReleaseStatementContext *_localctx = _tracker.createInstance<ReleaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 270, MySqlParser::RuleReleaseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3775);
    match(MySqlParser::RELEASE);
    setState(3776);
    match(MySqlParser::SAVEPOINT);
    setState(3777);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockTablesContext ------------------------------------------------------------------

MySqlParser::LockTablesContext::LockTablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LockTablesContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::LockTablesContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

std::vector<MySqlParser::LockTableElementContext *> MySqlParser::LockTablesContext::lockTableElement() {
  return getRuleContexts<MySqlParser::LockTableElementContext>();
}

MySqlParser::LockTableElementContext* MySqlParser::LockTablesContext::lockTableElement(size_t i) {
  return getRuleContext<MySqlParser::LockTableElementContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::LockTablesContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::LockTablesContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::LockTablesContext::getRuleIndex() const {
  return MySqlParser::RuleLockTables;
}


MySqlParser::LockTablesContext* MySqlParser::lockTables() {
  LockTablesContext *_localctx = _tracker.createInstance<LockTablesContext>(_ctx, getState());
  enterRule(_localctx, 272, MySqlParser::RuleLockTables);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3779);
    match(MySqlParser::LOCK);
    setState(3780);
    match(MySqlParser::TABLES);
    setState(3781);
    lockTableElement();
    setState(3786);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3782);
      match(MySqlParser::COMMA);
      setState(3783);
      lockTableElement();
      setState(3788);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnlockTablesContext ------------------------------------------------------------------

MySqlParser::UnlockTablesContext::UnlockTablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UnlockTablesContext::UNLOCK() {
  return getToken(MySqlParser::UNLOCK, 0);
}

tree::TerminalNode* MySqlParser::UnlockTablesContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}


size_t MySqlParser::UnlockTablesContext::getRuleIndex() const {
  return MySqlParser::RuleUnlockTables;
}


MySqlParser::UnlockTablesContext* MySqlParser::unlockTables() {
  UnlockTablesContext *_localctx = _tracker.createInstance<UnlockTablesContext>(_ctx, getState());
  enterRule(_localctx, 274, MySqlParser::RuleUnlockTables);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3789);
    match(MySqlParser::UNLOCK);
    setState(3790);
    match(MySqlParser::TABLES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetAutocommitStatementContext ------------------------------------------------------------------

MySqlParser::SetAutocommitStatementContext::SetAutocommitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SetAutocommitStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SetAutocommitStatementContext::AUTOCOMMIT() {
  return getToken(MySqlParser::AUTOCOMMIT, 0);
}

tree::TerminalNode* MySqlParser::SetAutocommitStatementContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::SetAutocommitStatementContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::SetAutocommitStatementContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}


size_t MySqlParser::SetAutocommitStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSetAutocommitStatement;
}


MySqlParser::SetAutocommitStatementContext* MySqlParser::setAutocommitStatement() {
  SetAutocommitStatementContext *_localctx = _tracker.createInstance<SetAutocommitStatementContext>(_ctx, getState());
  enterRule(_localctx, 276, MySqlParser::RuleSetAutocommitStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3792);
    match(MySqlParser::SET);
    setState(3793);
    match(MySqlParser::AUTOCOMMIT);
    setState(3794);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(3795);
    dynamic_cast<SetAutocommitStatementContext *>(_localctx)->autocommitValue = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::ZERO_DECIMAL

    || _la == MySqlParser::ONE_DECIMAL)) {
      dynamic_cast<SetAutocommitStatementContext *>(_localctx)->autocommitValue = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTransactionStatementContext ------------------------------------------------------------------

MySqlParser::SetTransactionStatementContext::SetTransactionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SetTransactionStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SetTransactionStatementContext::TRANSACTION() {
  return getToken(MySqlParser::TRANSACTION, 0);
}

std::vector<MySqlParser::TransactionOptionContext *> MySqlParser::SetTransactionStatementContext::transactionOption() {
  return getRuleContexts<MySqlParser::TransactionOptionContext>();
}

MySqlParser::TransactionOptionContext* MySqlParser::SetTransactionStatementContext::transactionOption(size_t i) {
  return getRuleContext<MySqlParser::TransactionOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetTransactionStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SetTransactionStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::SetTransactionStatementContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::SetTransactionStatementContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}


size_t MySqlParser::SetTransactionStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSetTransactionStatement;
}


MySqlParser::SetTransactionStatementContext* MySqlParser::setTransactionStatement() {
  SetTransactionStatementContext *_localctx = _tracker.createInstance<SetTransactionStatementContext>(_ctx, getState());
  enterRule(_localctx, 278, MySqlParser::RuleSetTransactionStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3797);
    match(MySqlParser::SET);
    setState(3799);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION) {
      setState(3798);
      dynamic_cast<SetTransactionStatementContext *>(_localctx)->transactionContext = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION)) {
        dynamic_cast<SetTransactionStatementContext *>(_localctx)->transactionContext = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3801);
    match(MySqlParser::TRANSACTION);
    setState(3802);
    transactionOption();
    setState(3807);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3803);
      match(MySqlParser::COMMA);
      setState(3804);
      transactionOption();
      setState(3809);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionModeContext ------------------------------------------------------------------

MySqlParser::TransactionModeContext::TransactionModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TransactionModeContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::TransactionModeContext::CONSISTENT() {
  return getToken(MySqlParser::CONSISTENT, 0);
}

tree::TerminalNode* MySqlParser::TransactionModeContext::SNAPSHOT() {
  return getToken(MySqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* MySqlParser::TransactionModeContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::TransactionModeContext::WRITE() {
  return getToken(MySqlParser::WRITE, 0);
}

tree::TerminalNode* MySqlParser::TransactionModeContext::ONLY() {
  return getToken(MySqlParser::ONLY, 0);
}


size_t MySqlParser::TransactionModeContext::getRuleIndex() const {
  return MySqlParser::RuleTransactionMode;
}


MySqlParser::TransactionModeContext* MySqlParser::transactionMode() {
  TransactionModeContext *_localctx = _tracker.createInstance<TransactionModeContext>(_ctx, getState());
  enterRule(_localctx, 280, MySqlParser::RuleTransactionMode);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3817);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 556, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3810);
      match(MySqlParser::WITH);
      setState(3811);
      match(MySqlParser::CONSISTENT);
      setState(3812);
      match(MySqlParser::SNAPSHOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3813);
      match(MySqlParser::READ);
      setState(3814);
      match(MySqlParser::WRITE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3815);
      match(MySqlParser::READ);
      setState(3816);
      match(MySqlParser::ONLY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockTableElementContext ------------------------------------------------------------------

MySqlParser::LockTableElementContext::LockTableElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::TableNameContext* MySqlParser::LockTableElementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

MySqlParser::LockActionContext* MySqlParser::LockTableElementContext::lockAction() {
  return getRuleContext<MySqlParser::LockActionContext>(0);
}

MySqlParser::UidContext* MySqlParser::LockTableElementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::LockTableElementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}


size_t MySqlParser::LockTableElementContext::getRuleIndex() const {
  return MySqlParser::RuleLockTableElement;
}


MySqlParser::LockTableElementContext* MySqlParser::lockTableElement() {
  LockTableElementContext *_localctx = _tracker.createInstance<LockTableElementContext>(_ctx, getState());
  enterRule(_localctx, 282, MySqlParser::RuleLockTableElement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3819);
    tableName();
    setState(3824);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::AS)
      | (1ULL << MySqlParser::CURRENT)
      | (1ULL << MySqlParser::DATABASE)
      | (1ULL << MySqlParser::DIAGNOSTICS))) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & ((1ULL << (MySqlParser::GROUP - 66))
      | (1ULL << (MySqlParser::LEFT - 66))
      | (1ULL << (MySqlParser::NUMBER - 66))
      | (1ULL << (MySqlParser::ORDER - 66)))) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & ((1ULL << (MySqlParser::RIGHT - 133))
      | (1ULL << (MySqlParser::SCHEMA - 133))
      | (1ULL << (MySqlParser::STACKED - 133)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(3821);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3820);
        match(MySqlParser::AS);
      }
      setState(3823);
      uid();
    }
    setState(3826);
    lockAction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockActionContext ------------------------------------------------------------------

MySqlParser::LockActionContext::LockActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LockActionContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::LockActionContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::LockActionContext::WRITE() {
  return getToken(MySqlParser::WRITE, 0);
}

tree::TerminalNode* MySqlParser::LockActionContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}


size_t MySqlParser::LockActionContext::getRuleIndex() const {
  return MySqlParser::RuleLockAction;
}


MySqlParser::LockActionContext* MySqlParser::lockAction() {
  LockActionContext *_localctx = _tracker.createInstance<LockActionContext>(_ctx, getState());
  enterRule(_localctx, 284, MySqlParser::RuleLockAction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3836);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::READ: {
        enterOuterAlt(_localctx, 1);
        setState(3828);
        match(MySqlParser::READ);
        setState(3830);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LOCAL) {
          setState(3829);
          match(MySqlParser::LOCAL);
        }
        break;
      }

      case MySqlParser::LOW_PRIORITY:
      case MySqlParser::WRITE: {
        enterOuterAlt(_localctx, 2);
        setState(3833);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LOW_PRIORITY) {
          setState(3832);
          match(MySqlParser::LOW_PRIORITY);
        }
        setState(3835);
        match(MySqlParser::WRITE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionOptionContext ------------------------------------------------------------------

MySqlParser::TransactionOptionContext::TransactionOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TransactionOptionContext::ISOLATION() {
  return getToken(MySqlParser::ISOLATION, 0);
}

tree::TerminalNode* MySqlParser::TransactionOptionContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

MySqlParser::TransactionLevelContext* MySqlParser::TransactionOptionContext::transactionLevel() {
  return getRuleContext<MySqlParser::TransactionLevelContext>(0);
}

tree::TerminalNode* MySqlParser::TransactionOptionContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::TransactionOptionContext::WRITE() {
  return getToken(MySqlParser::WRITE, 0);
}

tree::TerminalNode* MySqlParser::TransactionOptionContext::ONLY() {
  return getToken(MySqlParser::ONLY, 0);
}


size_t MySqlParser::TransactionOptionContext::getRuleIndex() const {
  return MySqlParser::RuleTransactionOption;
}


MySqlParser::TransactionOptionContext* MySqlParser::transactionOption() {
  TransactionOptionContext *_localctx = _tracker.createInstance<TransactionOptionContext>(_ctx, getState());
  enterRule(_localctx, 286, MySqlParser::RuleTransactionOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3845);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3838);
      match(MySqlParser::ISOLATION);
      setState(3839);
      match(MySqlParser::LEVEL);
      setState(3840);
      transactionLevel();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3841);
      match(MySqlParser::READ);
      setState(3842);
      match(MySqlParser::WRITE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3843);
      match(MySqlParser::READ);
      setState(3844);
      match(MySqlParser::ONLY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionLevelContext ------------------------------------------------------------------

MySqlParser::TransactionLevelContext::TransactionLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TransactionLevelContext::REPEATABLE() {
  return getToken(MySqlParser::REPEATABLE, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelContext::COMMITTED() {
  return getToken(MySqlParser::COMMITTED, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelContext::UNCOMMITTED() {
  return getToken(MySqlParser::UNCOMMITTED, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelContext::SERIALIZABLE() {
  return getToken(MySqlParser::SERIALIZABLE, 0);
}


size_t MySqlParser::TransactionLevelContext::getRuleIndex() const {
  return MySqlParser::RuleTransactionLevel;
}


MySqlParser::TransactionLevelContext* MySqlParser::transactionLevel() {
  TransactionLevelContext *_localctx = _tracker.createInstance<TransactionLevelContext>(_ctx, getState());
  enterRule(_localctx, 288, MySqlParser::RuleTransactionLevel);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3854);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 563, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3847);
      match(MySqlParser::REPEATABLE);
      setState(3848);
      match(MySqlParser::READ);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3849);
      match(MySqlParser::READ);
      setState(3850);
      match(MySqlParser::COMMITTED);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3851);
      match(MySqlParser::READ);
      setState(3852);
      match(MySqlParser::UNCOMMITTED);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3853);
      match(MySqlParser::SERIALIZABLE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChangeMasterContext ------------------------------------------------------------------

MySqlParser::ChangeMasterContext::ChangeMasterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ChangeMasterContext::CHANGE() {
  return getToken(MySqlParser::CHANGE, 0);
}

tree::TerminalNode* MySqlParser::ChangeMasterContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::ChangeMasterContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::MasterOptionContext *> MySqlParser::ChangeMasterContext::masterOption() {
  return getRuleContexts<MySqlParser::MasterOptionContext>();
}

MySqlParser::MasterOptionContext* MySqlParser::ChangeMasterContext::masterOption(size_t i) {
  return getRuleContext<MySqlParser::MasterOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::ChangeMasterContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ChangeMasterContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::ChannelOptionContext* MySqlParser::ChangeMasterContext::channelOption() {
  return getRuleContext<MySqlParser::ChannelOptionContext>(0);
}


size_t MySqlParser::ChangeMasterContext::getRuleIndex() const {
  return MySqlParser::RuleChangeMaster;
}


MySqlParser::ChangeMasterContext* MySqlParser::changeMaster() {
  ChangeMasterContext *_localctx = _tracker.createInstance<ChangeMasterContext>(_ctx, getState());
  enterRule(_localctx, 290, MySqlParser::RuleChangeMaster);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3856);
    match(MySqlParser::CHANGE);
    setState(3857);
    match(MySqlParser::MASTER);
    setState(3858);
    match(MySqlParser::TO);
    setState(3859);
    masterOption();
    setState(3864);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3860);
      match(MySqlParser::COMMA);
      setState(3861);
      masterOption();
      setState(3866);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3867);
      channelOption();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChangeReplicationFilterContext ------------------------------------------------------------------

MySqlParser::ChangeReplicationFilterContext::ChangeReplicationFilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ChangeReplicationFilterContext::CHANGE() {
  return getToken(MySqlParser::CHANGE, 0);
}

tree::TerminalNode* MySqlParser::ChangeReplicationFilterContext::REPLICATION() {
  return getToken(MySqlParser::REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::ChangeReplicationFilterContext::FILTER() {
  return getToken(MySqlParser::FILTER, 0);
}

std::vector<MySqlParser::ReplicationFilterContext *> MySqlParser::ChangeReplicationFilterContext::replicationFilter() {
  return getRuleContexts<MySqlParser::ReplicationFilterContext>();
}

MySqlParser::ReplicationFilterContext* MySqlParser::ChangeReplicationFilterContext::replicationFilter(size_t i) {
  return getRuleContext<MySqlParser::ReplicationFilterContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::ChangeReplicationFilterContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ChangeReplicationFilterContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::ChangeReplicationFilterContext::getRuleIndex() const {
  return MySqlParser::RuleChangeReplicationFilter;
}


MySqlParser::ChangeReplicationFilterContext* MySqlParser::changeReplicationFilter() {
  ChangeReplicationFilterContext *_localctx = _tracker.createInstance<ChangeReplicationFilterContext>(_ctx, getState());
  enterRule(_localctx, 292, MySqlParser::RuleChangeReplicationFilter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3870);
    match(MySqlParser::CHANGE);
    setState(3871);
    match(MySqlParser::REPLICATION);
    setState(3872);
    match(MySqlParser::FILTER);
    setState(3873);
    replicationFilter();
    setState(3878);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3874);
      match(MySqlParser::COMMA);
      setState(3875);
      replicationFilter();
      setState(3880);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PurgeBinaryLogsContext ------------------------------------------------------------------

MySqlParser::PurgeBinaryLogsContext::PurgeBinaryLogsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::PURGE() {
  return getToken(MySqlParser::PURGE, 0);
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::BEFORE() {
  return getToken(MySqlParser::BEFORE, 0);
}

tree::TerminalNode* MySqlParser::PurgeBinaryLogsContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::PurgeBinaryLogsContext::getRuleIndex() const {
  return MySqlParser::RulePurgeBinaryLogs;
}


MySqlParser::PurgeBinaryLogsContext* MySqlParser::purgeBinaryLogs() {
  PurgeBinaryLogsContext *_localctx = _tracker.createInstance<PurgeBinaryLogsContext>(_ctx, getState());
  enterRule(_localctx, 294, MySqlParser::RulePurgeBinaryLogs);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3881);
    match(MySqlParser::PURGE);
    setState(3882);
    dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->purgeFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BINARY || _la == MySqlParser::MASTER)) {
      dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->purgeFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3883);
    match(MySqlParser::LOGS);
    setState(3888);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::TO: {
        setState(3884);
        match(MySqlParser::TO);
        setState(3885);
        dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->fileName = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::BEFORE: {
        setState(3886);
        match(MySqlParser::BEFORE);
        setState(3887);
        dynamic_cast<PurgeBinaryLogsContext *>(_localctx)->timeValue = match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetMasterContext ------------------------------------------------------------------

MySqlParser::ResetMasterContext::ResetMasterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ResetMasterContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::ResetMasterContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}


size_t MySqlParser::ResetMasterContext::getRuleIndex() const {
  return MySqlParser::RuleResetMaster;
}


MySqlParser::ResetMasterContext* MySqlParser::resetMaster() {
  ResetMasterContext *_localctx = _tracker.createInstance<ResetMasterContext>(_ctx, getState());
  enterRule(_localctx, 296, MySqlParser::RuleResetMaster);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3890);
    match(MySqlParser::RESET);
    setState(3891);
    match(MySqlParser::MASTER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetSlaveContext ------------------------------------------------------------------

MySqlParser::ResetSlaveContext::ResetSlaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ResetSlaveContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::ResetSlaveContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::ResetSlaveContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::ChannelOptionContext* MySqlParser::ResetSlaveContext::channelOption() {
  return getRuleContext<MySqlParser::ChannelOptionContext>(0);
}


size_t MySqlParser::ResetSlaveContext::getRuleIndex() const {
  return MySqlParser::RuleResetSlave;
}


MySqlParser::ResetSlaveContext* MySqlParser::resetSlave() {
  ResetSlaveContext *_localctx = _tracker.createInstance<ResetSlaveContext>(_ctx, getState());
  enterRule(_localctx, 298, MySqlParser::RuleResetSlave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3893);
    match(MySqlParser::RESET);
    setState(3894);
    match(MySqlParser::SLAVE);
    setState(3896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALL) {
      setState(3895);
      match(MySqlParser::ALL);
    }
    setState(3899);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3898);
      channelOption();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartSlaveContext ------------------------------------------------------------------

MySqlParser::StartSlaveContext::StartSlaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::StartSlaveContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::StartSlaveContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

std::vector<MySqlParser::ThreadTypeContext *> MySqlParser::StartSlaveContext::threadType() {
  return getRuleContexts<MySqlParser::ThreadTypeContext>();
}

MySqlParser::ThreadTypeContext* MySqlParser::StartSlaveContext::threadType(size_t i) {
  return getRuleContext<MySqlParser::ThreadTypeContext>(i);
}

tree::TerminalNode* MySqlParser::StartSlaveContext::UNTIL() {
  return getToken(MySqlParser::UNTIL, 0);
}

MySqlParser::UntilOptionContext* MySqlParser::StartSlaveContext::untilOption() {
  return getRuleContext<MySqlParser::UntilOptionContext>(0);
}

std::vector<MySqlParser::ConnectionOptionContext *> MySqlParser::StartSlaveContext::connectionOption() {
  return getRuleContexts<MySqlParser::ConnectionOptionContext>();
}

MySqlParser::ConnectionOptionContext* MySqlParser::StartSlaveContext::connectionOption(size_t i) {
  return getRuleContext<MySqlParser::ConnectionOptionContext>(i);
}

MySqlParser::ChannelOptionContext* MySqlParser::StartSlaveContext::channelOption() {
  return getRuleContext<MySqlParser::ChannelOptionContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::StartSlaveContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::StartSlaveContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::StartSlaveContext::getRuleIndex() const {
  return MySqlParser::RuleStartSlave;
}


MySqlParser::StartSlaveContext* MySqlParser::startSlave() {
  StartSlaveContext *_localctx = _tracker.createInstance<StartSlaveContext>(_ctx, getState());
  enterRule(_localctx, 300, MySqlParser::RuleStartSlave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3901);
    match(MySqlParser::START);
    setState(3902);
    match(MySqlParser::SLAVE);
    setState(3911);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IO_THREAD || _la == MySqlParser::SQL_THREAD) {
      setState(3903);
      threadType();
      setState(3908);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3904);
        match(MySqlParser::COMMA);
        setState(3905);
        threadType();
        setState(3910);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3915);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::UNTIL) {
      setState(3913);
      match(MySqlParser::UNTIL);
      setState(3914);
      untilOption();
    }
    setState(3920);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::DEFAULT_AUTH || _la == MySqlParser::PASSWORD

    || _la == MySqlParser::PLUGIN_DIR || _la == MySqlParser::USER) {
      setState(3917);
      connectionOption();
      setState(3922);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3924);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3923);
      channelOption();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopSlaveContext ------------------------------------------------------------------

MySqlParser::StopSlaveContext::StopSlaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::StopSlaveContext::STOP() {
  return getToken(MySqlParser::STOP, 0);
}

tree::TerminalNode* MySqlParser::StopSlaveContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

std::vector<MySqlParser::ThreadTypeContext *> MySqlParser::StopSlaveContext::threadType() {
  return getRuleContexts<MySqlParser::ThreadTypeContext>();
}

MySqlParser::ThreadTypeContext* MySqlParser::StopSlaveContext::threadType(size_t i) {
  return getRuleContext<MySqlParser::ThreadTypeContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::StopSlaveContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::StopSlaveContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::StopSlaveContext::getRuleIndex() const {
  return MySqlParser::RuleStopSlave;
}


MySqlParser::StopSlaveContext* MySqlParser::stopSlave() {
  StopSlaveContext *_localctx = _tracker.createInstance<StopSlaveContext>(_ctx, getState());
  enterRule(_localctx, 302, MySqlParser::RuleStopSlave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3926);
    match(MySqlParser::STOP);
    setState(3927);
    match(MySqlParser::SLAVE);
    setState(3936);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IO_THREAD || _la == MySqlParser::SQL_THREAD) {
      setState(3928);
      threadType();
      setState(3933);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3929);
        match(MySqlParser::COMMA);
        setState(3930);
        threadType();
        setState(3935);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartGroupReplicationContext ------------------------------------------------------------------

MySqlParser::StartGroupReplicationContext::StartGroupReplicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::StartGroupReplicationContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::StartGroupReplicationContext::GROUP_REPLICATION() {
  return getToken(MySqlParser::GROUP_REPLICATION, 0);
}


size_t MySqlParser::StartGroupReplicationContext::getRuleIndex() const {
  return MySqlParser::RuleStartGroupReplication;
}


MySqlParser::StartGroupReplicationContext* MySqlParser::startGroupReplication() {
  StartGroupReplicationContext *_localctx = _tracker.createInstance<StartGroupReplicationContext>(_ctx, getState());
  enterRule(_localctx, 304, MySqlParser::RuleStartGroupReplication);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3938);
    match(MySqlParser::START);
    setState(3939);
    match(MySqlParser::GROUP_REPLICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopGroupReplicationContext ------------------------------------------------------------------

MySqlParser::StopGroupReplicationContext::StopGroupReplicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::StopGroupReplicationContext::STOP() {
  return getToken(MySqlParser::STOP, 0);
}

tree::TerminalNode* MySqlParser::StopGroupReplicationContext::GROUP_REPLICATION() {
  return getToken(MySqlParser::GROUP_REPLICATION, 0);
}


size_t MySqlParser::StopGroupReplicationContext::getRuleIndex() const {
  return MySqlParser::RuleStopGroupReplication;
}


MySqlParser::StopGroupReplicationContext* MySqlParser::stopGroupReplication() {
  StopGroupReplicationContext *_localctx = _tracker.createInstance<StopGroupReplicationContext>(_ctx, getState());
  enterRule(_localctx, 306, MySqlParser::RuleStopGroupReplication);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3941);
    match(MySqlParser::STOP);
    setState(3942);
    match(MySqlParser::GROUP_REPLICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MasterOptionContext ------------------------------------------------------------------

MySqlParser::MasterOptionContext::MasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::MasterOptionContext::getRuleIndex() const {
  return MySqlParser::RuleMasterOption;
}

void MySqlParser::MasterOptionContext::copyFrom(MasterOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MasterStringOptionContext ------------------------------------------------------------------

MySqlParser::StringMasterOptionContext* MySqlParser::MasterStringOptionContext::stringMasterOption() {
  return getRuleContext<MySqlParser::StringMasterOptionContext>(0);
}

tree::TerminalNode* MySqlParser::MasterStringOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::MasterStringOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::MasterStringOptionContext::MasterStringOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }


//----------------- MasterRealOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::MasterRealOptionContext::MASTER_HEARTBEAT_PERIOD() {
  return getToken(MySqlParser::MASTER_HEARTBEAT_PERIOD, 0);
}

tree::TerminalNode* MySqlParser::MasterRealOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::MasterRealOptionContext::REAL_LITERAL() {
  return getToken(MySqlParser::REAL_LITERAL, 0);
}

MySqlParser::MasterRealOptionContext::MasterRealOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }


//----------------- MasterBoolOptionContext ------------------------------------------------------------------

MySqlParser::BoolMasterOptionContext* MySqlParser::MasterBoolOptionContext::boolMasterOption() {
  return getRuleContext<MySqlParser::BoolMasterOptionContext>(0);
}

tree::TerminalNode* MySqlParser::MasterBoolOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::MasterBoolOptionContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::MasterBoolOptionContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

MySqlParser::MasterBoolOptionContext::MasterBoolOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }


//----------------- MasterUidListOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::MasterUidListOptionContext::IGNORE_SERVER_IDS() {
  return getToken(MySqlParser::IGNORE_SERVER_IDS, 0);
}

tree::TerminalNode* MySqlParser::MasterUidListOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::MasterUidListOptionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::MasterUidListOptionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::MasterUidListOptionContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::MasterUidListOptionContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::MasterUidListOptionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::MasterUidListOptionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::MasterUidListOptionContext::MasterUidListOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }


//----------------- MasterDecimalOptionContext ------------------------------------------------------------------

MySqlParser::DecimalMasterOptionContext* MySqlParser::MasterDecimalOptionContext::decimalMasterOption() {
  return getRuleContext<MySqlParser::DecimalMasterOptionContext>(0);
}

tree::TerminalNode* MySqlParser::MasterDecimalOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::MasterDecimalOptionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::MasterDecimalOptionContext::MasterDecimalOptionContext(MasterOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::MasterOptionContext* MySqlParser::masterOption() {
  MasterOptionContext *_localctx = _tracker.createInstance<MasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 308, MySqlParser::RuleMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3973);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::MASTER_BIND:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::RELAY_LOG_FILE: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySqlParser::MasterStringOptionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3944);
        stringMasterOption();
        setState(3945);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3946);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::RELAY_LOG_POS: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySqlParser::MasterDecimalOptionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3948);
        decimalMasterOption();
        setState(3949);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3950);
        decimalLiteral();
        break;
      }

      case MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_SSL: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySqlParser::MasterBoolOptionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3952);
        boolMasterOption();
        setState(3953);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3954);
        dynamic_cast<MasterBoolOptionContext *>(_localctx)->boolVal = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ZERO_DECIMAL

        || _la == MySqlParser::ONE_DECIMAL)) {
          dynamic_cast<MasterBoolOptionContext *>(_localctx)->boolVal = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::MASTER_HEARTBEAT_PERIOD: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySqlParser::MasterRealOptionContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3956);
        match(MySqlParser::MASTER_HEARTBEAT_PERIOD);
        setState(3957);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3958);
        match(MySqlParser::REAL_LITERAL);
        break;
      }

      case MySqlParser::IGNORE_SERVER_IDS: {
        _localctx = dynamic_cast<MasterOptionContext *>(_tracker.createInstance<MySqlParser::MasterUidListOptionContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(3959);
        match(MySqlParser::IGNORE_SERVER_IDS);
        setState(3960);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3961);
        match(MySqlParser::LR_BRACKET);
        setState(3970);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
          | (1ULL << (MySqlParser::DATABASE - 32))
          | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
          | (1ULL << (MySqlParser::GROUP - 32))
          | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
          | (1ULL << (MySqlParser::ORDER - 105))
          | (1ULL << (MySqlParser::RIGHT - 105))
          | (1ULL << (MySqlParser::SCHEMA - 105))
          | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::TIMESTAMP - 199))
          | (1ULL << (MySqlParser::DATETIME - 199))
          | (1ULL << (MySqlParser::YEAR - 199))
          | (1ULL << (MySqlParser::TEXT - 199))
          | (1ULL << (MySqlParser::ENUM - 199))
          | (1ULL << (MySqlParser::SERIAL - 199))
          | (1ULL << (MySqlParser::JSON_VALID - 199))
          | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
          | (1ULL << (MySqlParser::AVG - 199))
          | (1ULL << (MySqlParser::BIT_AND - 199))
          | (1ULL << (MySqlParser::BIT_OR - 199))
          | (1ULL << (MySqlParser::BIT_XOR - 199))
          | (1ULL << (MySqlParser::COUNT - 199))
          | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
          | (1ULL << (MySqlParser::MAX - 199))
          | (1ULL << (MySqlParser::MIN - 199))
          | (1ULL << (MySqlParser::STD - 199))
          | (1ULL << (MySqlParser::STDDEV - 199))
          | (1ULL << (MySqlParser::STDDEV_POP - 199))
          | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
          | (1ULL << (MySqlParser::SUM - 199))
          | (1ULL << (MySqlParser::VAR_POP - 199))
          | (1ULL << (MySqlParser::VAR_SAMP - 199))
          | (1ULL << (MySqlParser::VARIANCE - 199))
          | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
          | (1ULL << (MySqlParser::ACTION - 270))
          | (1ULL << (MySqlParser::AFTER - 270))
          | (1ULL << (MySqlParser::AGGREGATE - 270))
          | (1ULL << (MySqlParser::ALGORITHM - 270))
          | (1ULL << (MySqlParser::ANY - 270))
          | (1ULL << (MySqlParser::AT - 270))
          | (1ULL << (MySqlParser::AUTHORS - 270))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
          | (1ULL << (MySqlParser::BEGIN - 270))
          | (1ULL << (MySqlParser::BINLOG - 270))
          | (1ULL << (MySqlParser::BIT - 270))
          | (1ULL << (MySqlParser::BLOCK - 270))
          | (1ULL << (MySqlParser::BOOL - 270))
          | (1ULL << (MySqlParser::BOOLEAN - 270))
          | (1ULL << (MySqlParser::BTREE - 270))
          | (1ULL << (MySqlParser::CACHE - 270))
          | (1ULL << (MySqlParser::CASCADED - 270))
          | (1ULL << (MySqlParser::CHAIN - 270))
          | (1ULL << (MySqlParser::CHANGED - 270))
          | (1ULL << (MySqlParser::CHANNEL - 270))
          | (1ULL << (MySqlParser::CHECKSUM - 270))
          | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
          | (1ULL << (MySqlParser::CIPHER - 270))
          | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
          | (1ULL << (MySqlParser::CLIENT - 270))
          | (1ULL << (MySqlParser::CLOSE - 270))
          | (1ULL << (MySqlParser::COALESCE - 270))
          | (1ULL << (MySqlParser::CODE - 270))
          | (1ULL << (MySqlParser::COLUMNS - 270))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
          | (1ULL << (MySqlParser::COLUMN_NAME - 270))
          | (1ULL << (MySqlParser::COMMENT - 270))
          | (1ULL << (MySqlParser::COMMIT - 270))
          | (1ULL << (MySqlParser::COMPACT - 270))
          | (1ULL << (MySqlParser::COMPLETION - 270))
          | (1ULL << (MySqlParser::COMPRESSED - 270))
          | (1ULL << (MySqlParser::COMPRESSION - 270))
          | (1ULL << (MySqlParser::CONCURRENT - 270))
          | (1ULL << (MySqlParser::CONNECTION - 270))
          | (1ULL << (MySqlParser::CONSISTENT - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
          | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
          | (1ULL << (MySqlParser::CONTAINS - 270))
          | (1ULL << (MySqlParser::CONTEXT - 270))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
          | (1ULL << (MySqlParser::COPY - 270))
          | (1ULL << (MySqlParser::CPU - 270))
          | (1ULL << (MySqlParser::CURSOR_NAME - 270))
          | (1ULL << (MySqlParser::DATA - 270))
          | (1ULL << (MySqlParser::DATAFILE - 270))
          | (1ULL << (MySqlParser::DEALLOCATE - 270))
          | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
          | (1ULL << (MySqlParser::DEFINER - 270))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
          | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
          | (1ULL << (MySqlParser::DIRECTORY - 270))
          | (1ULL << (MySqlParser::DISABLE - 270))
          | (1ULL << (MySqlParser::DISCARD - 270))
          | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
          | (1ULL << (MySqlParser::DUMPFILE - 334))
          | (1ULL << (MySqlParser::DUPLICATE - 334))
          | (1ULL << (MySqlParser::DYNAMIC - 334))
          | (1ULL << (MySqlParser::ENABLE - 334))
          | (1ULL << (MySqlParser::ENCRYPTION - 334))
          | (1ULL << (MySqlParser::END - 334))
          | (1ULL << (MySqlParser::ENDS - 334))
          | (1ULL << (MySqlParser::ENGINE - 334))
          | (1ULL << (MySqlParser::ENGINES - 334))
          | (1ULL << (MySqlParser::ERROR - 334))
          | (1ULL << (MySqlParser::ERRORS - 334))
          | (1ULL << (MySqlParser::ESCAPE - 334))
          | (1ULL << (MySqlParser::EVEN - 334))
          | (1ULL << (MySqlParser::EVENT - 334))
          | (1ULL << (MySqlParser::EVENTS - 334))
          | (1ULL << (MySqlParser::EVERY - 334))
          | (1ULL << (MySqlParser::EXCHANGE - 334))
          | (1ULL << (MySqlParser::EXCLUSIVE - 334))
          | (1ULL << (MySqlParser::EXPIRE - 334))
          | (1ULL << (MySqlParser::EXPORT - 334))
          | (1ULL << (MySqlParser::EXTENDED - 334))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
          | (1ULL << (MySqlParser::FAST - 334))
          | (1ULL << (MySqlParser::FAULTS - 334))
          | (1ULL << (MySqlParser::FIELDS - 334))
          | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::FILTER - 334))
          | (1ULL << (MySqlParser::FIRST - 334))
          | (1ULL << (MySqlParser::FIXED - 334))
          | (1ULL << (MySqlParser::FLUSH - 334))
          | (1ULL << (MySqlParser::FOLLOWS - 334))
          | (1ULL << (MySqlParser::FOUND - 334))
          | (1ULL << (MySqlParser::FULL - 334))
          | (1ULL << (MySqlParser::FUNCTION - 334))
          | (1ULL << (MySqlParser::GENERAL - 334))
          | (1ULL << (MySqlParser::GLOBAL - 334))
          | (1ULL << (MySqlParser::GRANTS - 334))
          | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
          | (1ULL << (MySqlParser::HANDLER - 334))
          | (1ULL << (MySqlParser::HASH - 334))
          | (1ULL << (MySqlParser::HELP - 334))
          | (1ULL << (MySqlParser::HOST - 334))
          | (1ULL << (MySqlParser::HOSTS - 334))
          | (1ULL << (MySqlParser::IDENTIFIED - 334))
          | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
          | (1ULL << (MySqlParser::IMPORT - 334))
          | (1ULL << (MySqlParser::INDEXES - 334))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
          | (1ULL << (MySqlParser::INPLACE - 334))
          | (1ULL << (MySqlParser::INSERT_METHOD - 334))
          | (1ULL << (MySqlParser::INSTALL - 334))
          | (1ULL << (MySqlParser::INSTANCE - 334))
          | (1ULL << (MySqlParser::INVISIBLE - 334))
          | (1ULL << (MySqlParser::INVOKER - 334))
          | (1ULL << (MySqlParser::IO - 334))
          | (1ULL << (MySqlParser::IO_THREAD - 334))
          | (1ULL << (MySqlParser::IPC - 334))
          | (1ULL << (MySqlParser::ISOLATION - 334))
          | (1ULL << (MySqlParser::ISSUER - 334))
          | (1ULL << (MySqlParser::JSON - 334))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
          | (1ULL << (MySqlParser::LANGUAGE - 334))
          | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
          | (1ULL << (MySqlParser::LESS - 398))
          | (1ULL << (MySqlParser::LEVEL - 398))
          | (1ULL << (MySqlParser::LIST - 398))
          | (1ULL << (MySqlParser::LOCAL - 398))
          | (1ULL << (MySqlParser::LOGFILE - 398))
          | (1ULL << (MySqlParser::LOGS - 398))
          | (1ULL << (MySqlParser::MASTER - 398))
          | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
          | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
          | (1ULL << (MySqlParser::MASTER_DELAY - 398))
          | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
          | (1ULL << (MySqlParser::MASTER_HOST - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
          | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
          | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
          | (1ULL << (MySqlParser::MASTER_PORT - 398))
          | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
          | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
          | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
          | (1ULL << (MySqlParser::MASTER_USER - 398))
          | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_ROWS - 398))
          | (1ULL << (MySqlParser::MAX_SIZE - 398))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
          | (1ULL << (MySqlParser::MEDIUM - 398))
          | (1ULL << (MySqlParser::MEMBER - 398))
          | (1ULL << (MySqlParser::MERGE - 398))
          | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
          | (1ULL << (MySqlParser::MID - 398))
          | (1ULL << (MySqlParser::MIGRATE - 398))
          | (1ULL << (MySqlParser::MIN_ROWS - 398))
          | (1ULL << (MySqlParser::MODE - 398))
          | (1ULL << (MySqlParser::MODIFY - 398))
          | (1ULL << (MySqlParser::MUTEX - 398))
          | (1ULL << (MySqlParser::MYSQL - 398))
          | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
          | (1ULL << (MySqlParser::NAME - 398))
          | (1ULL << (MySqlParser::NAMES - 398))
          | (1ULL << (MySqlParser::NCHAR - 398))
          | (1ULL << (MySqlParser::NEVER - 398))
          | (1ULL << (MySqlParser::NEXT - 398))
          | (1ULL << (MySqlParser::NO - 398))
          | (1ULL << (MySqlParser::NODEGROUP - 398))
          | (1ULL << (MySqlParser::NONE - 398))
          | (1ULL << (MySqlParser::OFFLINE - 398))
          | (1ULL << (MySqlParser::OFFSET - 398))
          | (1ULL << (MySqlParser::OF - 398))
          | (1ULL << (MySqlParser::OJ - 398))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
          | (1ULL << (MySqlParser::ONE - 398))
          | (1ULL << (MySqlParser::ONLINE - 398))
          | (1ULL << (MySqlParser::ONLY - 398))
          | (1ULL << (MySqlParser::OPEN - 398))
          | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
          | (1ULL << (MySqlParser::OWNER - 462))
          | (1ULL << (MySqlParser::PACK_KEYS - 462))
          | (1ULL << (MySqlParser::PAGE - 462))
          | (1ULL << (MySqlParser::PARSER - 462))
          | (1ULL << (MySqlParser::PARTIAL - 462))
          | (1ULL << (MySqlParser::PARTITIONING - 462))
          | (1ULL << (MySqlParser::PARTITIONS - 462))
          | (1ULL << (MySqlParser::PASSWORD - 462))
          | (1ULL << (MySqlParser::PHASE - 462))
          | (1ULL << (MySqlParser::PLUGIN - 462))
          | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
          | (1ULL << (MySqlParser::PLUGINS - 462))
          | (1ULL << (MySqlParser::PORT - 462))
          | (1ULL << (MySqlParser::PRECEDES - 462))
          | (1ULL << (MySqlParser::PREPARE - 462))
          | (1ULL << (MySqlParser::PRESERVE - 462))
          | (1ULL << (MySqlParser::PREV - 462))
          | (1ULL << (MySqlParser::PROCESSLIST - 462))
          | (1ULL << (MySqlParser::PROFILE - 462))
          | (1ULL << (MySqlParser::PROFILES - 462))
          | (1ULL << (MySqlParser::PROXY - 462))
          | (1ULL << (MySqlParser::QUERY - 462))
          | (1ULL << (MySqlParser::QUICK - 462))
          | (1ULL << (MySqlParser::REBUILD - 462))
          | (1ULL << (MySqlParser::RECOVER - 462))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
          | (1ULL << (MySqlParser::REDUNDANT - 462))
          | (1ULL << (MySqlParser::RELAY - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
          | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
          | (1ULL << (MySqlParser::RELAYLOG - 462))
          | (1ULL << (MySqlParser::REMOVE - 462))
          | (1ULL << (MySqlParser::REORGANIZE - 462))
          | (1ULL << (MySqlParser::REPAIR - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
          | (1ULL << (MySqlParser::REPLICATION - 462))
          | (1ULL << (MySqlParser::RESET - 462))
          | (1ULL << (MySqlParser::RESUME - 462))
          | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
          | (1ULL << (MySqlParser::RETURNS - 462))
          | (1ULL << (MySqlParser::ROLE - 462))
          | (1ULL << (MySqlParser::ROLLBACK - 462))
          | (1ULL << (MySqlParser::ROLLUP - 462))
          | (1ULL << (MySqlParser::ROTATE - 462))
          | (1ULL << (MySqlParser::ROW - 462))
          | (1ULL << (MySqlParser::ROWS - 462))
          | (1ULL << (MySqlParser::ROW_FORMAT - 462))
          | (1ULL << (MySqlParser::SAVEPOINT - 462))
          | (1ULL << (MySqlParser::SCHEDULE - 462))
          | (1ULL << (MySqlParser::SECURITY - 462))
          | (1ULL << (MySqlParser::SERVER - 462))
          | (1ULL << (MySqlParser::SESSION - 462))
          | (1ULL << (MySqlParser::SHARE - 462))
          | (1ULL << (MySqlParser::SHARED - 462))
          | (1ULL << (MySqlParser::SIGNED - 462))
          | (1ULL << (MySqlParser::SIMPLE - 462))
          | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
          | (1ULL << (MySqlParser::SNAPSHOT - 526))
          | (1ULL << (MySqlParser::SOCKET - 526))
          | (1ULL << (MySqlParser::SOME - 526))
          | (1ULL << (MySqlParser::SONAME - 526))
          | (1ULL << (MySqlParser::SOUNDS - 526))
          | (1ULL << (MySqlParser::SOURCE - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
          | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
          | (1ULL << (MySqlParser::SQL_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
          | (1ULL << (MySqlParser::SQL_THREAD - 526))
          | (1ULL << (MySqlParser::START - 526))
          | (1ULL << (MySqlParser::STARTS - 526))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
          | (1ULL << (MySqlParser::STATUS - 526))
          | (1ULL << (MySqlParser::STOP - 526))
          | (1ULL << (MySqlParser::STORAGE - 526))
          | (1ULL << (MySqlParser::STRING - 526))
          | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
          | (1ULL << (MySqlParser::SUBJECT - 526))
          | (1ULL << (MySqlParser::SUBPARTITION - 526))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
          | (1ULL << (MySqlParser::SUSPEND - 526))
          | (1ULL << (MySqlParser::SWAPS - 526))
          | (1ULL << (MySqlParser::SWITCHES - 526))
          | (1ULL << (MySqlParser::TABLE_NAME - 526))
          | (1ULL << (MySqlParser::TABLESPACE - 526))
          | (1ULL << (MySqlParser::TEMPORARY - 526))
          | (1ULL << (MySqlParser::TEMPTABLE - 526))
          | (1ULL << (MySqlParser::THAN - 526))
          | (1ULL << (MySqlParser::TRADITIONAL - 526))
          | (1ULL << (MySqlParser::TRANSACTION - 526))
          | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
          | (1ULL << (MySqlParser::TRIGGERS - 526))
          | (1ULL << (MySqlParser::TRUNCATE - 526))
          | (1ULL << (MySqlParser::UNDEFINED - 526))
          | (1ULL << (MySqlParser::UNDOFILE - 526))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
          | (1ULL << (MySqlParser::UNINSTALL - 526))
          | (1ULL << (MySqlParser::UNKNOWN - 526))
          | (1ULL << (MySqlParser::UNTIL - 526))
          | (1ULL << (MySqlParser::UPGRADE - 526))
          | (1ULL << (MySqlParser::USER - 526))
          | (1ULL << (MySqlParser::USE_FRM - 526))
          | (1ULL << (MySqlParser::USER_RESOURCES - 526))
          | (1ULL << (MySqlParser::VALIDATION - 526))
          | (1ULL << (MySqlParser::VALUE - 526))
          | (1ULL << (MySqlParser::VARIABLES - 526))
          | (1ULL << (MySqlParser::VIEW - 526))
          | (1ULL << (MySqlParser::VISIBLE - 526))
          | (1ULL << (MySqlParser::WAIT - 526))
          | (1ULL << (MySqlParser::WARNINGS - 526))
          | (1ULL << (MySqlParser::WITHOUT - 526))
          | (1ULL << (MySqlParser::WORK - 526))
          | (1ULL << (MySqlParser::WRAPPER - 526))
          | (1ULL << (MySqlParser::X509 - 526))
          | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
          | (1ULL << (MySqlParser::INTERNAL - 590))
          | (1ULL << (MySqlParser::QUARTER - 590))
          | (1ULL << (MySqlParser::MONTH - 590))
          | (1ULL << (MySqlParser::DAY - 590))
          | (1ULL << (MySqlParser::HOUR - 590))
          | (1ULL << (MySqlParser::MINUTE - 590))
          | (1ULL << (MySqlParser::WEEK - 590))
          | (1ULL << (MySqlParser::SECOND - 590))
          | (1ULL << (MySqlParser::MICROSECOND - 590))
          | (1ULL << (MySqlParser::TABLES - 590))
          | (1ULL << (MySqlParser::ROUTINE - 590))
          | (1ULL << (MySqlParser::EXECUTE - 590))
          | (1ULL << (MySqlParser::FILE - 590))
          | (1ULL << (MySqlParser::PROCESS - 590))
          | (1ULL << (MySqlParser::RELOAD - 590))
          | (1ULL << (MySqlParser::SHUTDOWN - 590))
          | (1ULL << (MySqlParser::SUPER - 590))
          | (1ULL << (MySqlParser::PRIVILEGES - 590))
          | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
          | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
          | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
          | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
          | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
          | (1ULL << (MySqlParser::FIREWALL_USER - 590))
          | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
          | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
          | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
          | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
          | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
          | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
          | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
          | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::SET_USER_ID - 590))
          | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
          | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
          | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
          | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
          | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
          | (1ULL << (MySqlParser::ARMSCII8 - 590))
          | (1ULL << (MySqlParser::ASCII - 590))
          | (1ULL << (MySqlParser::BIG5 - 590))
          | (1ULL << (MySqlParser::CP1250 - 590))
          | (1ULL << (MySqlParser::CP1251 - 590))
          | (1ULL << (MySqlParser::CP1256 - 590))
          | (1ULL << (MySqlParser::CP1257 - 590))
          | (1ULL << (MySqlParser::CP850 - 590))
          | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
          | (1ULL << (MySqlParser::CP932 - 654))
          | (1ULL << (MySqlParser::DEC8 - 654))
          | (1ULL << (MySqlParser::EUCJPMS - 654))
          | (1ULL << (MySqlParser::EUCKR - 654))
          | (1ULL << (MySqlParser::GB2312 - 654))
          | (1ULL << (MySqlParser::GBK - 654))
          | (1ULL << (MySqlParser::GEOSTD8 - 654))
          | (1ULL << (MySqlParser::GREEK - 654))
          | (1ULL << (MySqlParser::HEBREW - 654))
          | (1ULL << (MySqlParser::HP8 - 654))
          | (1ULL << (MySqlParser::KEYBCS2 - 654))
          | (1ULL << (MySqlParser::KOI8R - 654))
          | (1ULL << (MySqlParser::KOI8U - 654))
          | (1ULL << (MySqlParser::LATIN1 - 654))
          | (1ULL << (MySqlParser::LATIN2 - 654))
          | (1ULL << (MySqlParser::LATIN5 - 654))
          | (1ULL << (MySqlParser::LATIN7 - 654))
          | (1ULL << (MySqlParser::MACCE - 654))
          | (1ULL << (MySqlParser::MACROMAN - 654))
          | (1ULL << (MySqlParser::SJIS - 654))
          | (1ULL << (MySqlParser::SWE7 - 654))
          | (1ULL << (MySqlParser::TIS620 - 654))
          | (1ULL << (MySqlParser::UCS2 - 654))
          | (1ULL << (MySqlParser::UJIS - 654))
          | (1ULL << (MySqlParser::UTF16 - 654))
          | (1ULL << (MySqlParser::UTF16LE - 654))
          | (1ULL << (MySqlParser::UTF32 - 654))
          | (1ULL << (MySqlParser::UTF8 - 654))
          | (1ULL << (MySqlParser::UTF8MB3 - 654))
          | (1ULL << (MySqlParser::UTF8MB4 - 654))
          | (1ULL << (MySqlParser::ARCHIVE - 654))
          | (1ULL << (MySqlParser::BLACKHOLE - 654))
          | (1ULL << (MySqlParser::CSV - 654))
          | (1ULL << (MySqlParser::FEDERATED - 654))
          | (1ULL << (MySqlParser::INNODB - 654))
          | (1ULL << (MySqlParser::MEMORY - 654))
          | (1ULL << (MySqlParser::MRG_MYISAM - 654))
          | (1ULL << (MySqlParser::MYISAM - 654))
          | (1ULL << (MySqlParser::NDB - 654))
          | (1ULL << (MySqlParser::NDBCLUSTER - 654))
          | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
          | (1ULL << (MySqlParser::TOKUDB - 654))
          | (1ULL << (MySqlParser::REPEATABLE - 654))
          | (1ULL << (MySqlParser::COMMITTED - 654))
          | (1ULL << (MySqlParser::UNCOMMITTED - 654))
          | (1ULL << (MySqlParser::SERIALIZABLE - 654))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
          | (1ULL << (MySqlParser::LINESTRING - 654))
          | (1ULL << (MySqlParser::MULTILINESTRING - 654))
          | (1ULL << (MySqlParser::MULTIPOINT - 654))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
          | (1ULL << (MySqlParser::POINT - 654))
          | (1ULL << (MySqlParser::POLYGON - 654))
          | (1ULL << (MySqlParser::ABS - 654))
          | (1ULL << (MySqlParser::ACOS - 654))
          | (1ULL << (MySqlParser::ADDDATE - 654))
          | (1ULL << (MySqlParser::ADDTIME - 654))
          | (1ULL << (MySqlParser::AES_DECRYPT - 654))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
          | (1ULL << (MySqlParser::AREA - 654))
          | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
          | (1ULL << (MySqlParser::ASTEXT - 718))
          | (1ULL << (MySqlParser::ASWKB - 718))
          | (1ULL << (MySqlParser::ASWKT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
          | (1ULL << (MySqlParser::ATAN - 718))
          | (1ULL << (MySqlParser::ATAN2 - 718))
          | (1ULL << (MySqlParser::BENCHMARK - 718))
          | (1ULL << (MySqlParser::BIN - 718))
          | (1ULL << (MySqlParser::BIT_COUNT - 718))
          | (1ULL << (MySqlParser::BIT_LENGTH - 718))
          | (1ULL << (MySqlParser::BUFFER - 718))
          | (1ULL << (MySqlParser::CATALOG_NAME - 718))
          | (1ULL << (MySqlParser::CEIL - 718))
          | (1ULL << (MySqlParser::CEILING - 718))
          | (1ULL << (MySqlParser::CENTROID - 718))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
          | (1ULL << (MySqlParser::CHARSET - 718))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
          | (1ULL << (MySqlParser::COERCIBILITY - 718))
          | (1ULL << (MySqlParser::COLLATION - 718))
          | (1ULL << (MySqlParser::COMPRESS - 718))
          | (1ULL << (MySqlParser::CONCAT - 718))
          | (1ULL << (MySqlParser::CONCAT_WS - 718))
          | (1ULL << (MySqlParser::CONNECTION_ID - 718))
          | (1ULL << (MySqlParser::CONV - 718))
          | (1ULL << (MySqlParser::CONVERT_TZ - 718))
          | (1ULL << (MySqlParser::COS - 718))
          | (1ULL << (MySqlParser::COT - 718))
          | (1ULL << (MySqlParser::CRC32 - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
          | (1ULL << (MySqlParser::CROSSES - 718))
          | (1ULL << (MySqlParser::DATEDIFF - 718))
          | (1ULL << (MySqlParser::DATE_FORMAT - 718))
          | (1ULL << (MySqlParser::DAYNAME - 718))
          | (1ULL << (MySqlParser::DAYOFMONTH - 718))
          | (1ULL << (MySqlParser::DAYOFWEEK - 718))
          | (1ULL << (MySqlParser::DAYOFYEAR - 718))
          | (1ULL << (MySqlParser::DECODE - 718))
          | (1ULL << (MySqlParser::DEGREES - 718))
          | (1ULL << (MySqlParser::DES_DECRYPT - 718))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
          | (1ULL << (MySqlParser::DIMENSION - 718))
          | (1ULL << (MySqlParser::DISJOINT - 718))
          | (1ULL << (MySqlParser::ELT - 718))
          | (1ULL << (MySqlParser::ENCODE - 718))
          | (1ULL << (MySqlParser::ENCRYPT - 718))
          | (1ULL << (MySqlParser::ENDPOINT - 718))
          | (1ULL << (MySqlParser::ENVELOPE - 718))
          | (1ULL << (MySqlParser::EQUALS - 718))
          | (1ULL << (MySqlParser::EXP - 718))
          | (1ULL << (MySqlParser::EXPORT_SET - 718))
          | (1ULL << (MySqlParser::EXTERIORRING - 718))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
          | (1ULL << (MySqlParser::FIELD - 718))
          | (1ULL << (MySqlParser::FIND_IN_SET - 718))
          | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
          | (1ULL << (MySqlParser::FOUND_ROWS - 782))
          | (1ULL << (MySqlParser::FROM_BASE64 - 782))
          | (1ULL << (MySqlParser::FROM_DAYS - 782))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
          | (1ULL << (MySqlParser::GEOMETRYN - 782))
          | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
          | (1ULL << (MySqlParser::GET_FORMAT - 782))
          | (1ULL << (MySqlParser::GET_LOCK - 782))
          | (1ULL << (MySqlParser::GLENGTH - 782))
          | (1ULL << (MySqlParser::GREATEST - 782))
          | (1ULL << (MySqlParser::GTID_SUBSET - 782))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
          | (1ULL << (MySqlParser::HEX - 782))
          | (1ULL << (MySqlParser::IFNULL - 782))
          | (1ULL << (MySqlParser::INET6_ATON - 782))
          | (1ULL << (MySqlParser::INET6_NTOA - 782))
          | (1ULL << (MySqlParser::INET_ATON - 782))
          | (1ULL << (MySqlParser::INET_NTOA - 782))
          | (1ULL << (MySqlParser::INSTR - 782))
          | (1ULL << (MySqlParser::INTERIORRINGN - 782))
          | (1ULL << (MySqlParser::INTERSECTS - 782))
          | (1ULL << (MySqlParser::ISCLOSED - 782))
          | (1ULL << (MySqlParser::ISEMPTY - 782))
          | (1ULL << (MySqlParser::ISNULL - 782))
          | (1ULL << (MySqlParser::ISSIMPLE - 782))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
          | (1ULL << (MySqlParser::IS_IPV4 - 782))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
          | (1ULL << (MySqlParser::IS_IPV6 - 782))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
          | (1ULL << (MySqlParser::LCASE - 782))
          | (1ULL << (MySqlParser::LEAST - 782))
          | (1ULL << (MySqlParser::LENGTH - 782))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINEFROMWKB - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
          | (1ULL << (MySqlParser::LN - 782))
          | (1ULL << (MySqlParser::LOAD_FILE - 782))
          | (1ULL << (MySqlParser::LOCATE - 782))
          | (1ULL << (MySqlParser::LOG - 782))
          | (1ULL << (MySqlParser::LOG10 - 782))
          | (1ULL << (MySqlParser::LOG2 - 782))
          | (1ULL << (MySqlParser::LOWER - 782))
          | (1ULL << (MySqlParser::LPAD - 782))
          | (1ULL << (MySqlParser::LTRIM - 782))
          | (1ULL << (MySqlParser::MAKEDATE - 782))
          | (1ULL << (MySqlParser::MAKETIME - 782))
          | (1ULL << (MySqlParser::MAKE_SET - 782))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
          | (1ULL << (MySqlParser::MBRCONTAINS - 782))
          | (1ULL << (MySqlParser::MBRDISJOINT - 782))
          | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
          | (1ULL << (MySqlParser::MBROVERLAPS - 846))
          | (1ULL << (MySqlParser::MBRTOUCHES - 846))
          | (1ULL << (MySqlParser::MBRWITHIN - 846))
          | (1ULL << (MySqlParser::MD5 - 846))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
          | (1ULL << (MySqlParser::MONTHNAME - 846))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::NAME_CONST - 846))
          | (1ULL << (MySqlParser::NULLIF - 846))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
          | (1ULL << (MySqlParser::NUMPOINTS - 846))
          | (1ULL << (MySqlParser::OCT - 846))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
          | (1ULL << (MySqlParser::ORD - 846))
          | (1ULL << (MySqlParser::OVERLAPS - 846))
          | (1ULL << (MySqlParser::PERIOD_ADD - 846))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
          | (1ULL << (MySqlParser::PI - 846))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
          | (1ULL << (MySqlParser::POINTFROMWKB - 846))
          | (1ULL << (MySqlParser::POINTN - 846))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYFROMWKB - 846))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
          | (1ULL << (MySqlParser::POW - 846))
          | (1ULL << (MySqlParser::POWER - 846))
          | (1ULL << (MySqlParser::QUOTE - 846))
          | (1ULL << (MySqlParser::RADIANS - 846))
          | (1ULL << (MySqlParser::RAND - 846))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
          | (1ULL << (MySqlParser::REVERSE - 846))
          | (1ULL << (MySqlParser::ROUND - 846))
          | (1ULL << (MySqlParser::ROW_COUNT - 846))
          | (1ULL << (MySqlParser::RPAD - 846))
          | (1ULL << (MySqlParser::RTRIM - 846))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
          | (1ULL << (MySqlParser::SESSION_USER - 846))
          | (1ULL << (MySqlParser::SHA - 846))
          | (1ULL << (MySqlParser::SHA1 - 846))
          | (1ULL << (MySqlParser::SHA2 - 846))
          | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
          | (1ULL << (MySqlParser::SIGN - 846))
          | (1ULL << (MySqlParser::SIN - 846))
          | (1ULL << (MySqlParser::SLEEP - 846))
          | (1ULL << (MySqlParser::SOUNDEX - 846))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
          | (1ULL << (MySqlParser::SQRT - 846))
          | (1ULL << (MySqlParser::SRID - 846))
          | (1ULL << (MySqlParser::STARTPOINT - 846))
          | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
          | (1ULL << (MySqlParser::ST_AREA - 910))
          | (1ULL << (MySqlParser::ST_ASBINARY - 910))
          | (1ULL << (MySqlParser::ST_ASTEXT - 910))
          | (1ULL << (MySqlParser::ST_ASWKB - 910))
          | (1ULL << (MySqlParser::ST_ASWKT - 910))
          | (1ULL << (MySqlParser::ST_BUFFER - 910))
          | (1ULL << (MySqlParser::ST_CENTROID - 910))
          | (1ULL << (MySqlParser::ST_CONTAINS - 910))
          | (1ULL << (MySqlParser::ST_CROSSES - 910))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_DIMENSION - 910))
          | (1ULL << (MySqlParser::ST_DISJOINT - 910))
          | (1ULL << (MySqlParser::ST_DISTANCE - 910))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
          | (1ULL << (MySqlParser::ST_EQUALS - 910))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POINTN - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
          | (1ULL << (MySqlParser::ST_SRID - 910))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
          | (1ULL << (MySqlParser::ST_TOUCHES - 910))
          | (1ULL << (MySqlParser::ST_UNION - 910))
          | (1ULL << (MySqlParser::ST_WITHIN - 910))
          | (1ULL << (MySqlParser::ST_X - 910))
          | (1ULL << (MySqlParser::ST_Y - 910))
          | (1ULL << (MySqlParser::SUBDATE - 910))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
          | (1ULL << (MySqlParser::SUBTIME - 910))
          | (1ULL << (MySqlParser::SYSTEM_USER - 910))
          | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
          | (1ULL << (MySqlParser::TIME_FORMAT - 974))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
          | (1ULL << (MySqlParser::TOUCHES - 974))
          | (1ULL << (MySqlParser::TO_BASE64 - 974))
          | (1ULL << (MySqlParser::TO_DAYS - 974))
          | (1ULL << (MySqlParser::TO_SECONDS - 974))
          | (1ULL << (MySqlParser::UCASE - 974))
          | (1ULL << (MySqlParser::UNCOMPRESS - 974))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
          | (1ULL << (MySqlParser::UNHEX - 974))
          | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
          | (1ULL << (MySqlParser::UPDATEXML - 974))
          | (1ULL << (MySqlParser::UPPER - 974))
          | (1ULL << (MySqlParser::UUID - 974))
          | (1ULL << (MySqlParser::UUID_SHORT - 974))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
          | (1ULL << (MySqlParser::VERSION - 974))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
          | (1ULL << (MySqlParser::WEEKDAY - 974))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
          | (1ULL << (MySqlParser::WITHIN - 974))
          | (1ULL << (MySqlParser::YEARWEEK - 974))
          | (1ULL << (MySqlParser::Y_FUNCTION - 974))
          | (1ULL << (MySqlParser::X_FUNCTION - 974))
          | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
          | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
          | (1ULL << (MySqlParser::ID - 1040))
          | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
          setState(3962);
          uid();
          setState(3967);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::COMMA) {
            setState(3963);
            match(MySqlParser::COMMA);
            setState(3964);
            uid();
            setState(3969);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(3972);
        match(MySqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringMasterOptionContext ------------------------------------------------------------------

MySqlParser::StringMasterOptionContext::StringMasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_BIND() {
  return getToken(MySqlParser::MASTER_BIND, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_HOST() {
  return getToken(MySqlParser::MASTER_HOST, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_USER() {
  return getToken(MySqlParser::MASTER_USER, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_PASSWORD() {
  return getToken(MySqlParser::MASTER_PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_LOG_FILE() {
  return getToken(MySqlParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::RELAY_LOG_FILE() {
  return getToken(MySqlParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_CA() {
  return getToken(MySqlParser::MASTER_SSL_CA, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_CAPATH() {
  return getToken(MySqlParser::MASTER_SSL_CAPATH, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_CERT() {
  return getToken(MySqlParser::MASTER_SSL_CERT, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_CRL() {
  return getToken(MySqlParser::MASTER_SSL_CRL, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_CRLPATH() {
  return getToken(MySqlParser::MASTER_SSL_CRLPATH, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_KEY() {
  return getToken(MySqlParser::MASTER_SSL_KEY, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_SSL_CIPHER() {
  return getToken(MySqlParser::MASTER_SSL_CIPHER, 0);
}

tree::TerminalNode* MySqlParser::StringMasterOptionContext::MASTER_TLS_VERSION() {
  return getToken(MySqlParser::MASTER_TLS_VERSION, 0);
}


size_t MySqlParser::StringMasterOptionContext::getRuleIndex() const {
  return MySqlParser::RuleStringMasterOption;
}


MySqlParser::StringMasterOptionContext* MySqlParser::stringMasterOption() {
  StringMasterOptionContext *_localctx = _tracker.createInstance<StringMasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 310, MySqlParser::RuleStringMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3975);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::MASTER_BIND || ((((_la - 410) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 410)) & ((1ULL << (MySqlParser::MASTER_HOST - 410))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 410))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 410))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 410))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 410))
      | (1ULL << (MySqlParser::MASTER_USER - 410)))) != 0) || _la == MySqlParser::RELAY_LOG_FILE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalMasterOptionContext ------------------------------------------------------------------

MySqlParser::DecimalMasterOptionContext::DecimalMasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DecimalMasterOptionContext::MASTER_PORT() {
  return getToken(MySqlParser::MASTER_PORT, 0);
}

tree::TerminalNode* MySqlParser::DecimalMasterOptionContext::MASTER_CONNECT_RETRY() {
  return getToken(MySqlParser::MASTER_CONNECT_RETRY, 0);
}

tree::TerminalNode* MySqlParser::DecimalMasterOptionContext::MASTER_RETRY_COUNT() {
  return getToken(MySqlParser::MASTER_RETRY_COUNT, 0);
}

tree::TerminalNode* MySqlParser::DecimalMasterOptionContext::MASTER_DELAY() {
  return getToken(MySqlParser::MASTER_DELAY, 0);
}

tree::TerminalNode* MySqlParser::DecimalMasterOptionContext::MASTER_LOG_POS() {
  return getToken(MySqlParser::MASTER_LOG_POS, 0);
}

tree::TerminalNode* MySqlParser::DecimalMasterOptionContext::RELAY_LOG_POS() {
  return getToken(MySqlParser::RELAY_LOG_POS, 0);
}


size_t MySqlParser::DecimalMasterOptionContext::getRuleIndex() const {
  return MySqlParser::RuleDecimalMasterOption;
}


MySqlParser::DecimalMasterOptionContext* MySqlParser::decimalMasterOption() {
  DecimalMasterOptionContext *_localctx = _tracker.createInstance<DecimalMasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 312, MySqlParser::RuleDecimalMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3977);
    _la = _input->LA(1);
    if (!(((((_la - 407) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 407)) & ((1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 407))
      | (1ULL << (MySqlParser::MASTER_DELAY - 407))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 407))
      | (1ULL << (MySqlParser::MASTER_PORT - 407))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 407)))) != 0) || _la == MySqlParser::RELAY_LOG_POS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BoolMasterOptionContext ------------------------------------------------------------------

MySqlParser::BoolMasterOptionContext::BoolMasterOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::BoolMasterOptionContext::MASTER_AUTO_POSITION() {
  return getToken(MySqlParser::MASTER_AUTO_POSITION, 0);
}

tree::TerminalNode* MySqlParser::BoolMasterOptionContext::MASTER_SSL() {
  return getToken(MySqlParser::MASTER_SSL, 0);
}

tree::TerminalNode* MySqlParser::BoolMasterOptionContext::MASTER_SSL_VERIFY_SERVER_CERT() {
  return getToken(MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT, 0);
}


size_t MySqlParser::BoolMasterOptionContext::getRuleIndex() const {
  return MySqlParser::RuleBoolMasterOption;
}


MySqlParser::BoolMasterOptionContext* MySqlParser::boolMasterOption() {
  BoolMasterOptionContext *_localctx = _tracker.createInstance<BoolMasterOptionContext>(_ctx, getState());
  enterRule(_localctx, 314, MySqlParser::RuleBoolMasterOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3979);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT || _la == MySqlParser::MASTER_AUTO_POSITION

    || _la == MySqlParser::MASTER_SSL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChannelOptionContext ------------------------------------------------------------------

MySqlParser::ChannelOptionContext::ChannelOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ChannelOptionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ChannelOptionContext::CHANNEL() {
  return getToken(MySqlParser::CHANNEL, 0);
}

tree::TerminalNode* MySqlParser::ChannelOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::ChannelOptionContext::getRuleIndex() const {
  return MySqlParser::RuleChannelOption;
}


MySqlParser::ChannelOptionContext* MySqlParser::channelOption() {
  ChannelOptionContext *_localctx = _tracker.createInstance<ChannelOptionContext>(_ctx, getState());
  enterRule(_localctx, 316, MySqlParser::RuleChannelOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3981);
    match(MySqlParser::FOR);
    setState(3982);
    match(MySqlParser::CHANNEL);
    setState(3983);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplicationFilterContext ------------------------------------------------------------------

MySqlParser::ReplicationFilterContext::ReplicationFilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ReplicationFilterContext::getRuleIndex() const {
  return MySqlParser::RuleReplicationFilter;
}

void MySqlParser::ReplicationFilterContext::copyFrom(ReplicationFilterContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WildIgnoreTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::WildIgnoreTableReplicationContext::REPLICATE_WILD_IGNORE_TABLE() {
  return getToken(MySqlParser::REPLICATE_WILD_IGNORE_TABLE, 0);
}

tree::TerminalNode* MySqlParser::WildIgnoreTableReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::WildIgnoreTableReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::SimpleStringsContext* MySqlParser::WildIgnoreTableReplicationContext::simpleStrings() {
  return getRuleContext<MySqlParser::SimpleStringsContext>(0);
}

tree::TerminalNode* MySqlParser::WildIgnoreTableReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::WildIgnoreTableReplicationContext::WildIgnoreTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


//----------------- DoTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DoTableReplicationContext::REPLICATE_DO_TABLE() {
  return getToken(MySqlParser::REPLICATE_DO_TABLE, 0);
}

tree::TerminalNode* MySqlParser::DoTableReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::DoTableReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::TablesContext* MySqlParser::DoTableReplicationContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::DoTableReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::DoTableReplicationContext::DoTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


//----------------- IgnoreTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::IgnoreTableReplicationContext::REPLICATE_IGNORE_TABLE() {
  return getToken(MySqlParser::REPLICATE_IGNORE_TABLE, 0);
}

tree::TerminalNode* MySqlParser::IgnoreTableReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::IgnoreTableReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::TablesContext* MySqlParser::IgnoreTableReplicationContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::IgnoreTableReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::IgnoreTableReplicationContext::IgnoreTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


//----------------- RewriteDbReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RewriteDbReplicationContext::REPLICATE_REWRITE_DB() {
  return getToken(MySqlParser::REPLICATE_REWRITE_DB, 0);
}

tree::TerminalNode* MySqlParser::RewriteDbReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::RewriteDbReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::TablePairContext *> MySqlParser::RewriteDbReplicationContext::tablePair() {
  return getRuleContexts<MySqlParser::TablePairContext>();
}

MySqlParser::TablePairContext* MySqlParser::RewriteDbReplicationContext::tablePair(size_t i) {
  return getRuleContext<MySqlParser::TablePairContext>(i);
}

tree::TerminalNode* MySqlParser::RewriteDbReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::RewriteDbReplicationContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::RewriteDbReplicationContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::RewriteDbReplicationContext::RewriteDbReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


//----------------- DoDbReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DoDbReplicationContext::REPLICATE_DO_DB() {
  return getToken(MySqlParser::REPLICATE_DO_DB, 0);
}

tree::TerminalNode* MySqlParser::DoDbReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::DoDbReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::DoDbReplicationContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::DoDbReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::DoDbReplicationContext::DoDbReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


//----------------- IgnoreDbReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::IgnoreDbReplicationContext::REPLICATE_IGNORE_DB() {
  return getToken(MySqlParser::REPLICATE_IGNORE_DB, 0);
}

tree::TerminalNode* MySqlParser::IgnoreDbReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::IgnoreDbReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::IgnoreDbReplicationContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::IgnoreDbReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::IgnoreDbReplicationContext::IgnoreDbReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


//----------------- WildDoTableReplicationContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::WildDoTableReplicationContext::REPLICATE_WILD_DO_TABLE() {
  return getToken(MySqlParser::REPLICATE_WILD_DO_TABLE, 0);
}

tree::TerminalNode* MySqlParser::WildDoTableReplicationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::WildDoTableReplicationContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::SimpleStringsContext* MySqlParser::WildDoTableReplicationContext::simpleStrings() {
  return getRuleContext<MySqlParser::SimpleStringsContext>(0);
}

tree::TerminalNode* MySqlParser::WildDoTableReplicationContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::WildDoTableReplicationContext::WildDoTableReplicationContext(ReplicationFilterContext *ctx) { copyFrom(ctx); }


MySqlParser::ReplicationFilterContext* MySqlParser::replicationFilter() {
  ReplicationFilterContext *_localctx = _tracker.createInstance<ReplicationFilterContext>(_ctx, getState());
  enterRule(_localctx, 318, MySqlParser::RuleReplicationFilter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4034);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::REPLICATE_DO_DB: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::DoDbReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3985);
        match(MySqlParser::REPLICATE_DO_DB);
        setState(3986);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3987);
        match(MySqlParser::LR_BRACKET);
        setState(3988);
        uidList();
        setState(3989);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_IGNORE_DB: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::IgnoreDbReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3991);
        match(MySqlParser::REPLICATE_IGNORE_DB);
        setState(3992);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3993);
        match(MySqlParser::LR_BRACKET);
        setState(3994);
        uidList();
        setState(3995);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_DO_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::DoTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3997);
        match(MySqlParser::REPLICATE_DO_TABLE);
        setState(3998);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3999);
        match(MySqlParser::LR_BRACKET);
        setState(4000);
        tables();
        setState(4001);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_IGNORE_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::IgnoreTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4003);
        match(MySqlParser::REPLICATE_IGNORE_TABLE);
        setState(4004);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4005);
        match(MySqlParser::LR_BRACKET);
        setState(4006);
        tables();
        setState(4007);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_WILD_DO_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::WildDoTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(4009);
        match(MySqlParser::REPLICATE_WILD_DO_TABLE);
        setState(4010);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4011);
        match(MySqlParser::LR_BRACKET);
        setState(4012);
        simpleStrings();
        setState(4013);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::WildIgnoreTableReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(4015);
        match(MySqlParser::REPLICATE_WILD_IGNORE_TABLE);
        setState(4016);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4017);
        match(MySqlParser::LR_BRACKET);
        setState(4018);
        simpleStrings();
        setState(4019);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_REWRITE_DB: {
        _localctx = dynamic_cast<ReplicationFilterContext *>(_tracker.createInstance<MySqlParser::RewriteDbReplicationContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(4021);
        match(MySqlParser::REPLICATE_REWRITE_DB);
        setState(4022);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4023);
        match(MySqlParser::LR_BRACKET);
        setState(4024);
        tablePair();
        setState(4029);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(4025);
          match(MySqlParser::COMMA);
          setState(4026);
          tablePair();
          setState(4031);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(4032);
        match(MySqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePairContext ------------------------------------------------------------------

MySqlParser::TablePairContext::TablePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TablePairContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::TablePairContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

tree::TerminalNode* MySqlParser::TablePairContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::TableNameContext *> MySqlParser::TablePairContext::tableName() {
  return getRuleContexts<MySqlParser::TableNameContext>();
}

MySqlParser::TableNameContext* MySqlParser::TablePairContext::tableName(size_t i) {
  return getRuleContext<MySqlParser::TableNameContext>(i);
}


size_t MySqlParser::TablePairContext::getRuleIndex() const {
  return MySqlParser::RuleTablePair;
}


MySqlParser::TablePairContext* MySqlParser::tablePair() {
  TablePairContext *_localctx = _tracker.createInstance<TablePairContext>(_ctx, getState());
  enterRule(_localctx, 320, MySqlParser::RuleTablePair);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4036);
    match(MySqlParser::LR_BRACKET);
    setState(4037);
    dynamic_cast<TablePairContext *>(_localctx)->firstTable = tableName();
    setState(4038);
    match(MySqlParser::COMMA);
    setState(4039);
    dynamic_cast<TablePairContext *>(_localctx)->secondTable = tableName();
    setState(4040);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThreadTypeContext ------------------------------------------------------------------

MySqlParser::ThreadTypeContext::ThreadTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ThreadTypeContext::IO_THREAD() {
  return getToken(MySqlParser::IO_THREAD, 0);
}

tree::TerminalNode* MySqlParser::ThreadTypeContext::SQL_THREAD() {
  return getToken(MySqlParser::SQL_THREAD, 0);
}


size_t MySqlParser::ThreadTypeContext::getRuleIndex() const {
  return MySqlParser::RuleThreadType;
}


MySqlParser::ThreadTypeContext* MySqlParser::threadType() {
  ThreadTypeContext *_localctx = _tracker.createInstance<ThreadTypeContext>(_ctx, getState());
  enterRule(_localctx, 322, MySqlParser::RuleThreadType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4042);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::IO_THREAD || _la == MySqlParser::SQL_THREAD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UntilOptionContext ------------------------------------------------------------------

MySqlParser::UntilOptionContext::UntilOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::UntilOptionContext::getRuleIndex() const {
  return MySqlParser::RuleUntilOption;
}

void MySqlParser::UntilOptionContext::copyFrom(UntilOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GtidsUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::GtidsUntilOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::GtuidSetContext* MySqlParser::GtidsUntilOptionContext::gtuidSet() {
  return getRuleContext<MySqlParser::GtuidSetContext>(0);
}

tree::TerminalNode* MySqlParser::GtidsUntilOptionContext::SQL_BEFORE_GTIDS() {
  return getToken(MySqlParser::SQL_BEFORE_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::GtidsUntilOptionContext::SQL_AFTER_GTIDS() {
  return getToken(MySqlParser::SQL_AFTER_GTIDS, 0);
}

MySqlParser::GtidsUntilOptionContext::GtidsUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }


//----------------- SqlGapsUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SqlGapsUntilOptionContext::SQL_AFTER_MTS_GAPS() {
  return getToken(MySqlParser::SQL_AFTER_MTS_GAPS, 0);
}

MySqlParser::SqlGapsUntilOptionContext::SqlGapsUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }


//----------------- MasterLogUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::MasterLogUntilOptionContext::MASTER_LOG_FILE() {
  return getToken(MySqlParser::MASTER_LOG_FILE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::MasterLogUntilOptionContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::MasterLogUntilOptionContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

tree::TerminalNode* MySqlParser::MasterLogUntilOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::MasterLogUntilOptionContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

tree::TerminalNode* MySqlParser::MasterLogUntilOptionContext::MASTER_LOG_POS() {
  return getToken(MySqlParser::MASTER_LOG_POS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::MasterLogUntilOptionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::MasterLogUntilOptionContext::MasterLogUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }


//----------------- RelayLogUntilOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RelayLogUntilOptionContext::RELAY_LOG_FILE() {
  return getToken(MySqlParser::RELAY_LOG_FILE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::RelayLogUntilOptionContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::RelayLogUntilOptionContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

tree::TerminalNode* MySqlParser::RelayLogUntilOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::RelayLogUntilOptionContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

tree::TerminalNode* MySqlParser::RelayLogUntilOptionContext::RELAY_LOG_POS() {
  return getToken(MySqlParser::RELAY_LOG_POS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::RelayLogUntilOptionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::RelayLogUntilOptionContext::RelayLogUntilOptionContext(UntilOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::UntilOptionContext* MySqlParser::untilOption() {
  UntilOptionContext *_localctx = _tracker.createInstance<UntilOptionContext>(_ctx, getState());
  enterRule(_localctx, 324, MySqlParser::RuleUntilOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4062);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_BEFORE_GTIDS: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySqlParser::GtidsUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4044);
        dynamic_cast<GtidsUntilOptionContext *>(_localctx)->gtids = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::SQL_AFTER_GTIDS

        || _la == MySqlParser::SQL_BEFORE_GTIDS)) {
          dynamic_cast<GtidsUntilOptionContext *>(_localctx)->gtids = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4045);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4046);
        gtuidSet();
        break;
      }

      case MySqlParser::MASTER_LOG_FILE: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySqlParser::MasterLogUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4047);
        match(MySqlParser::MASTER_LOG_FILE);
        setState(4048);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4049);
        match(MySqlParser::STRING_LITERAL);
        setState(4050);
        match(MySqlParser::COMMA);
        setState(4051);
        match(MySqlParser::MASTER_LOG_POS);
        setState(4052);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4053);
        decimalLiteral();
        break;
      }

      case MySqlParser::RELAY_LOG_FILE: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySqlParser::RelayLogUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4054);
        match(MySqlParser::RELAY_LOG_FILE);
        setState(4055);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4056);
        match(MySqlParser::STRING_LITERAL);
        setState(4057);
        match(MySqlParser::COMMA);
        setState(4058);
        match(MySqlParser::RELAY_LOG_POS);
        setState(4059);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4060);
        decimalLiteral();
        break;
      }

      case MySqlParser::SQL_AFTER_MTS_GAPS: {
        _localctx = dynamic_cast<UntilOptionContext *>(_tracker.createInstance<MySqlParser::SqlGapsUntilOptionContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4061);
        match(MySqlParser::SQL_AFTER_MTS_GAPS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectionOptionContext ------------------------------------------------------------------

MySqlParser::ConnectionOptionContext::ConnectionOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ConnectionOptionContext::getRuleIndex() const {
  return MySqlParser::RuleConnectionOption;
}

void MySqlParser::ConnectionOptionContext::copyFrom(ConnectionOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PluginDirConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PluginDirConnectionOptionContext::PLUGIN_DIR() {
  return getToken(MySqlParser::PLUGIN_DIR, 0);
}

tree::TerminalNode* MySqlParser::PluginDirConnectionOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::PluginDirConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::PluginDirConnectionOptionContext::PluginDirConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }


//----------------- UserConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::UserConnectionOptionContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::UserConnectionOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::UserConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::UserConnectionOptionContext::UserConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }


//----------------- DefaultAuthConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DefaultAuthConnectionOptionContext::DEFAULT_AUTH() {
  return getToken(MySqlParser::DEFAULT_AUTH, 0);
}

tree::TerminalNode* MySqlParser::DefaultAuthConnectionOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::DefaultAuthConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::DefaultAuthConnectionOptionContext::DefaultAuthConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }


//----------------- PasswordConnectionOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PasswordConnectionOptionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::PasswordConnectionOptionContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::PasswordConnectionOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::PasswordConnectionOptionContext::PasswordConnectionOptionContext(ConnectionOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::ConnectionOptionContext* MySqlParser::connectionOption() {
  ConnectionOptionContext *_localctx = _tracker.createInstance<ConnectionOptionContext>(_ctx, getState());
  enterRule(_localctx, 326, MySqlParser::RuleConnectionOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4076);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::USER: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySqlParser::UserConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4064);
        match(MySqlParser::USER);
        setState(4065);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4066);
        dynamic_cast<UserConnectionOptionContext *>(_localctx)->conOptUser = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PASSWORD: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySqlParser::PasswordConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4067);
        match(MySqlParser::PASSWORD);
        setState(4068);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4069);
        dynamic_cast<PasswordConnectionOptionContext *>(_localctx)->conOptPassword = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::DEFAULT_AUTH: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySqlParser::DefaultAuthConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4070);
        match(MySqlParser::DEFAULT_AUTH);
        setState(4071);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4072);
        dynamic_cast<DefaultAuthConnectionOptionContext *>(_localctx)->conOptDefAuth = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PLUGIN_DIR: {
        _localctx = dynamic_cast<ConnectionOptionContext *>(_tracker.createInstance<MySqlParser::PluginDirConnectionOptionContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4073);
        match(MySqlParser::PLUGIN_DIR);
        setState(4074);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4075);
        dynamic_cast<PluginDirConnectionOptionContext *>(_localctx)->conOptPluginDir = match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GtuidSetContext ------------------------------------------------------------------

MySqlParser::GtuidSetContext::GtuidSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::UuidSetContext *> MySqlParser::GtuidSetContext::uuidSet() {
  return getRuleContexts<MySqlParser::UuidSetContext>();
}

MySqlParser::UuidSetContext* MySqlParser::GtuidSetContext::uuidSet(size_t i) {
  return getRuleContext<MySqlParser::UuidSetContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::GtuidSetContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::GtuidSetContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::GtuidSetContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::GtuidSetContext::getRuleIndex() const {
  return MySqlParser::RuleGtuidSet;
}


MySqlParser::GtuidSetContext* MySqlParser::gtuidSet() {
  GtuidSetContext *_localctx = _tracker.createInstance<GtuidSetContext>(_ctx, getState());
  enterRule(_localctx, 328, MySqlParser::RuleGtuidSet);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4087);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4078);
        uuidSet();
        setState(4083);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(4079);
          match(MySqlParser::COMMA);
          setState(4080);
          uuidSet();
          setState(4085);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(4086);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaStartTransactionContext ------------------------------------------------------------------

MySqlParser::XaStartTransactionContext::XaStartTransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XaStartTransactionContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

MySqlParser::XidContext* MySqlParser::XaStartTransactionContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}

tree::TerminalNode* MySqlParser::XaStartTransactionContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::XaStartTransactionContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::XaStartTransactionContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

tree::TerminalNode* MySqlParser::XaStartTransactionContext::RESUME() {
  return getToken(MySqlParser::RESUME, 0);
}


size_t MySqlParser::XaStartTransactionContext::getRuleIndex() const {
  return MySqlParser::RuleXaStartTransaction;
}


MySqlParser::XaStartTransactionContext* MySqlParser::xaStartTransaction() {
  XaStartTransactionContext *_localctx = _tracker.createInstance<XaStartTransactionContext>(_ctx, getState());
  enterRule(_localctx, 330, MySqlParser::RuleXaStartTransaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4089);
    match(MySqlParser::XA);
    setState(4090);
    dynamic_cast<XaStartTransactionContext *>(_localctx)->xaStart = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BEGIN || _la == MySqlParser::START)) {
      dynamic_cast<XaStartTransactionContext *>(_localctx)->xaStart = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4091);
    xid();
    setState(4093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::JOIN || _la == MySqlParser::RESUME) {
      setState(4092);
      dynamic_cast<XaStartTransactionContext *>(_localctx)->xaAction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::JOIN || _la == MySqlParser::RESUME)) {
        dynamic_cast<XaStartTransactionContext *>(_localctx)->xaAction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaEndTransactionContext ------------------------------------------------------------------

MySqlParser::XaEndTransactionContext::XaEndTransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XaEndTransactionContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::XaEndTransactionContext::END() {
  return getToken(MySqlParser::END, 0);
}

MySqlParser::XidContext* MySqlParser::XaEndTransactionContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}

tree::TerminalNode* MySqlParser::XaEndTransactionContext::SUSPEND() {
  return getToken(MySqlParser::SUSPEND, 0);
}

tree::TerminalNode* MySqlParser::XaEndTransactionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::XaEndTransactionContext::MIGRATE() {
  return getToken(MySqlParser::MIGRATE, 0);
}


size_t MySqlParser::XaEndTransactionContext::getRuleIndex() const {
  return MySqlParser::RuleXaEndTransaction;
}


MySqlParser::XaEndTransactionContext* MySqlParser::xaEndTransaction() {
  XaEndTransactionContext *_localctx = _tracker.createInstance<XaEndTransactionContext>(_ctx, getState());
  enterRule(_localctx, 332, MySqlParser::RuleXaEndTransaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4095);
    match(MySqlParser::XA);
    setState(4096);
    match(MySqlParser::END);
    setState(4097);
    xid();
    setState(4103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SUSPEND) {
      setState(4098);
      match(MySqlParser::SUSPEND);
      setState(4101);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(4099);
        match(MySqlParser::FOR);
        setState(4100);
        match(MySqlParser::MIGRATE);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaPrepareStatementContext ------------------------------------------------------------------

MySqlParser::XaPrepareStatementContext::XaPrepareStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XaPrepareStatementContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::XaPrepareStatementContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

MySqlParser::XidContext* MySqlParser::XaPrepareStatementContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}


size_t MySqlParser::XaPrepareStatementContext::getRuleIndex() const {
  return MySqlParser::RuleXaPrepareStatement;
}


MySqlParser::XaPrepareStatementContext* MySqlParser::xaPrepareStatement() {
  XaPrepareStatementContext *_localctx = _tracker.createInstance<XaPrepareStatementContext>(_ctx, getState());
  enterRule(_localctx, 334, MySqlParser::RuleXaPrepareStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4105);
    match(MySqlParser::XA);
    setState(4106);
    match(MySqlParser::PREPARE);
    setState(4107);
    xid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaCommitWorkContext ------------------------------------------------------------------

MySqlParser::XaCommitWorkContext::XaCommitWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XaCommitWorkContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::XaCommitWorkContext::COMMIT() {
  return getToken(MySqlParser::COMMIT, 0);
}

MySqlParser::XidContext* MySqlParser::XaCommitWorkContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}

tree::TerminalNode* MySqlParser::XaCommitWorkContext::ONE() {
  return getToken(MySqlParser::ONE, 0);
}

tree::TerminalNode* MySqlParser::XaCommitWorkContext::PHASE() {
  return getToken(MySqlParser::PHASE, 0);
}


size_t MySqlParser::XaCommitWorkContext::getRuleIndex() const {
  return MySqlParser::RuleXaCommitWork;
}


MySqlParser::XaCommitWorkContext* MySqlParser::xaCommitWork() {
  XaCommitWorkContext *_localctx = _tracker.createInstance<XaCommitWorkContext>(_ctx, getState());
  enterRule(_localctx, 336, MySqlParser::RuleXaCommitWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4109);
    match(MySqlParser::XA);
    setState(4110);
    match(MySqlParser::COMMIT);
    setState(4111);
    xid();
    setState(4114);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ONE) {
      setState(4112);
      match(MySqlParser::ONE);
      setState(4113);
      match(MySqlParser::PHASE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaRollbackWorkContext ------------------------------------------------------------------

MySqlParser::XaRollbackWorkContext::XaRollbackWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XaRollbackWorkContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::XaRollbackWorkContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

MySqlParser::XidContext* MySqlParser::XaRollbackWorkContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}


size_t MySqlParser::XaRollbackWorkContext::getRuleIndex() const {
  return MySqlParser::RuleXaRollbackWork;
}


MySqlParser::XaRollbackWorkContext* MySqlParser::xaRollbackWork() {
  XaRollbackWorkContext *_localctx = _tracker.createInstance<XaRollbackWorkContext>(_ctx, getState());
  enterRule(_localctx, 338, MySqlParser::RuleXaRollbackWork);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4116);
    match(MySqlParser::XA);
    setState(4117);
    match(MySqlParser::ROLLBACK);
    setState(4118);
    xid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XaRecoverWorkContext ------------------------------------------------------------------

MySqlParser::XaRecoverWorkContext::XaRecoverWorkContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XaRecoverWorkContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::XaRecoverWorkContext::RECOVER() {
  return getToken(MySqlParser::RECOVER, 0);
}

tree::TerminalNode* MySqlParser::XaRecoverWorkContext::CONVERT() {
  return getToken(MySqlParser::CONVERT, 0);
}

MySqlParser::XidContext* MySqlParser::XaRecoverWorkContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}


size_t MySqlParser::XaRecoverWorkContext::getRuleIndex() const {
  return MySqlParser::RuleXaRecoverWork;
}


MySqlParser::XaRecoverWorkContext* MySqlParser::xaRecoverWork() {
  XaRecoverWorkContext *_localctx = _tracker.createInstance<XaRecoverWorkContext>(_ctx, getState());
  enterRule(_localctx, 340, MySqlParser::RuleXaRecoverWork);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4120);
    match(MySqlParser::XA);
    setState(4121);
    match(MySqlParser::RECOVER);
    setState(4124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CONVERT) {
      setState(4122);
      match(MySqlParser::CONVERT);
      setState(4123);
      xid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrepareStatementContext ------------------------------------------------------------------

MySqlParser::PrepareStatementContext::PrepareStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PrepareStatementContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

MySqlParser::UidContext* MySqlParser::PrepareStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::PrepareStatementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::PrepareStatementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::PrepareStatementContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}


size_t MySqlParser::PrepareStatementContext::getRuleIndex() const {
  return MySqlParser::RulePrepareStatement;
}


MySqlParser::PrepareStatementContext* MySqlParser::prepareStatement() {
  PrepareStatementContext *_localctx = _tracker.createInstance<PrepareStatementContext>(_ctx, getState());
  enterRule(_localctx, 342, MySqlParser::RulePrepareStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4126);
    match(MySqlParser::PREPARE);
    setState(4127);
    uid();
    setState(4128);
    match(MySqlParser::FROM);
    setState(4131);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STRING_LITERAL: {
        setState(4129);
        dynamic_cast<PrepareStatementContext *>(_localctx)->query = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::LOCAL_ID: {
        setState(4130);
        dynamic_cast<PrepareStatementContext *>(_localctx)->variable = match(MySqlParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecuteStatementContext ------------------------------------------------------------------

MySqlParser::ExecuteStatementContext::ExecuteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ExecuteStatementContext::EXECUTE() {
  return getToken(MySqlParser::EXECUTE, 0);
}

MySqlParser::UidContext* MySqlParser::ExecuteStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::ExecuteStatementContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::UserVariablesContext* MySqlParser::ExecuteStatementContext::userVariables() {
  return getRuleContext<MySqlParser::UserVariablesContext>(0);
}


size_t MySqlParser::ExecuteStatementContext::getRuleIndex() const {
  return MySqlParser::RuleExecuteStatement;
}


MySqlParser::ExecuteStatementContext* MySqlParser::executeStatement() {
  ExecuteStatementContext *_localctx = _tracker.createInstance<ExecuteStatementContext>(_ctx, getState());
  enterRule(_localctx, 344, MySqlParser::RuleExecuteStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4133);
    match(MySqlParser::EXECUTE);
    setState(4134);
    uid();
    setState(4137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::USING) {
      setState(4135);
      match(MySqlParser::USING);
      setState(4136);
      userVariables();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeallocatePrepareContext ------------------------------------------------------------------

MySqlParser::DeallocatePrepareContext::DeallocatePrepareContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DeallocatePrepareContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

MySqlParser::UidContext* MySqlParser::DeallocatePrepareContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DeallocatePrepareContext::DEALLOCATE() {
  return getToken(MySqlParser::DEALLOCATE, 0);
}

tree::TerminalNode* MySqlParser::DeallocatePrepareContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}


size_t MySqlParser::DeallocatePrepareContext::getRuleIndex() const {
  return MySqlParser::RuleDeallocatePrepare;
}


MySqlParser::DeallocatePrepareContext* MySqlParser::deallocatePrepare() {
  DeallocatePrepareContext *_localctx = _tracker.createInstance<DeallocatePrepareContext>(_ctx, getState());
  enterRule(_localctx, 346, MySqlParser::RuleDeallocatePrepare);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4139);
    dynamic_cast<DeallocatePrepareContext *>(_localctx)->dropFormat = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DROP || _la == MySqlParser::DEALLOCATE)) {
      dynamic_cast<DeallocatePrepareContext *>(_localctx)->dropFormat = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4140);
    match(MySqlParser::PREPARE);
    setState(4141);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoutineBodyContext ------------------------------------------------------------------

MySqlParser::RoutineBodyContext::RoutineBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::BlockStatementContext* MySqlParser::RoutineBodyContext::blockStatement() {
  return getRuleContext<MySqlParser::BlockStatementContext>(0);
}

MySqlParser::SqlStatementContext* MySqlParser::RoutineBodyContext::sqlStatement() {
  return getRuleContext<MySqlParser::SqlStatementContext>(0);
}


size_t MySqlParser::RoutineBodyContext::getRuleIndex() const {
  return MySqlParser::RuleRoutineBody;
}


MySqlParser::RoutineBodyContext* MySqlParser::routineBody() {
  RoutineBodyContext *_localctx = _tracker.createInstance<RoutineBodyContext>(_ctx, getState());
  enterRule(_localctx, 348, MySqlParser::RuleRoutineBody);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4145);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 593, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4143);
      blockStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4144);
      sqlStatement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

MySqlParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::BlockStatementContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::BlockStatementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::BlockStatementContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::BlockStatementContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::BlockStatementContext::COLON_SYMB() {
  return getToken(MySqlParser::COLON_SYMB, 0);
}

std::vector<MySqlParser::DeclareVariableContext *> MySqlParser::BlockStatementContext::declareVariable() {
  return getRuleContexts<MySqlParser::DeclareVariableContext>();
}

MySqlParser::DeclareVariableContext* MySqlParser::BlockStatementContext::declareVariable(size_t i) {
  return getRuleContext<MySqlParser::DeclareVariableContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::BlockStatementContext::SEMI() {
  return getTokens(MySqlParser::SEMI);
}

tree::TerminalNode* MySqlParser::BlockStatementContext::SEMI(size_t i) {
  return getToken(MySqlParser::SEMI, i);
}

std::vector<MySqlParser::DeclareConditionContext *> MySqlParser::BlockStatementContext::declareCondition() {
  return getRuleContexts<MySqlParser::DeclareConditionContext>();
}

MySqlParser::DeclareConditionContext* MySqlParser::BlockStatementContext::declareCondition(size_t i) {
  return getRuleContext<MySqlParser::DeclareConditionContext>(i);
}

std::vector<MySqlParser::DeclareCursorContext *> MySqlParser::BlockStatementContext::declareCursor() {
  return getRuleContexts<MySqlParser::DeclareCursorContext>();
}

MySqlParser::DeclareCursorContext* MySqlParser::BlockStatementContext::declareCursor(size_t i) {
  return getRuleContext<MySqlParser::DeclareCursorContext>(i);
}

std::vector<MySqlParser::DeclareHandlerContext *> MySqlParser::BlockStatementContext::declareHandler() {
  return getRuleContexts<MySqlParser::DeclareHandlerContext>();
}

MySqlParser::DeclareHandlerContext* MySqlParser::BlockStatementContext::declareHandler(size_t i) {
  return getRuleContext<MySqlParser::DeclareHandlerContext>(i);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::BlockStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::BlockStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::BlockStatementContext::getRuleIndex() const {
  return MySqlParser::RuleBlockStatement;
}


MySqlParser::BlockStatementContext* MySqlParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 350, MySqlParser::RuleBlockStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4150);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 594, _ctx)) {
    case 1: {
      setState(4147);
      uid();
      setState(4148);
      match(MySqlParser::COLON_SYMB);
      break;
    }

    }
    setState(4152);
    match(MySqlParser::BEGIN);
    setState(4191);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 600, _ctx)) {
    case 1: {
      setState(4158);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 595, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4153);
          declareVariable();
          setState(4154);
          match(MySqlParser::SEMI); 
        }
        setState(4160);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 595, _ctx);
      }
      setState(4166);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 596, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4161);
          declareCondition();
          setState(4162);
          match(MySqlParser::SEMI); 
        }
        setState(4168);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 596, _ctx);
      }
      setState(4174);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 597, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4169);
          declareCursor();
          setState(4170);
          match(MySqlParser::SEMI); 
        }
        setState(4176);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 597, _ctx);
      }
      setState(4182);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::DECLARE) {
        setState(4177);
        declareHandler();
        setState(4178);
        match(MySqlParser::SEMI);
        setState(4184);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4188);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 599, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4185);
          procedureSqlStatement(); 
        }
        setState(4190);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 599, _ctx);
      }
      break;
    }

    }
    setState(4193);
    match(MySqlParser::END);
    setState(4195);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 601, _ctx)) {
    case 1: {
      setState(4194);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStatementContext ------------------------------------------------------------------

MySqlParser::CaseStatementContext::CaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::CaseStatementContext::CASE() {
  return getTokens(MySqlParser::CASE);
}

tree::TerminalNode* MySqlParser::CaseStatementContext::CASE(size_t i) {
  return getToken(MySqlParser::CASE, i);
}

tree::TerminalNode* MySqlParser::CaseStatementContext::END() {
  return getToken(MySqlParser::END, 0);
}

MySqlParser::UidContext* MySqlParser::CaseStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::CaseStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

std::vector<MySqlParser::CaseAlternativeContext *> MySqlParser::CaseStatementContext::caseAlternative() {
  return getRuleContexts<MySqlParser::CaseAlternativeContext>();
}

MySqlParser::CaseAlternativeContext* MySqlParser::CaseStatementContext::caseAlternative(size_t i) {
  return getRuleContext<MySqlParser::CaseAlternativeContext>(i);
}

tree::TerminalNode* MySqlParser::CaseStatementContext::ELSE() {
  return getToken(MySqlParser::ELSE, 0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::CaseStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::CaseStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::CaseStatementContext::getRuleIndex() const {
  return MySqlParser::RuleCaseStatement;
}


MySqlParser::CaseStatementContext* MySqlParser::caseStatement() {
  CaseStatementContext *_localctx = _tracker.createInstance<CaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 352, MySqlParser::RuleCaseStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4197);
    match(MySqlParser::CASE);
    setState(4200);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 602, _ctx)) {
    case 1: {
      setState(4198);
      uid();
      break;
    }

    case 2: {
      setState(4199);
      expression(0);
      break;
    }

    }
    setState(4203); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4202);
      caseAlternative();
      setState(4205); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySqlParser::WHEN);
    setState(4213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ELSE) {
      setState(4207);
      match(MySqlParser::ELSE);
      setState(4209); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(4208);
                procedureSqlStatement();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(4211); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 604, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    }
    setState(4215);
    match(MySqlParser::END);
    setState(4216);
    match(MySqlParser::CASE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

MySqlParser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::IfStatementContext::IF() {
  return getTokens(MySqlParser::IF);
}

tree::TerminalNode* MySqlParser::IfStatementContext::IF(size_t i) {
  return getToken(MySqlParser::IF, i);
}

MySqlParser::ExpressionContext* MySqlParser::IfStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::IfStatementContext::THEN() {
  return getToken(MySqlParser::THEN, 0);
}

tree::TerminalNode* MySqlParser::IfStatementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::ElifAlternativeContext *> MySqlParser::IfStatementContext::elifAlternative() {
  return getRuleContexts<MySqlParser::ElifAlternativeContext>();
}

MySqlParser::ElifAlternativeContext* MySqlParser::IfStatementContext::elifAlternative(size_t i) {
  return getRuleContext<MySqlParser::ElifAlternativeContext>(i);
}

tree::TerminalNode* MySqlParser::IfStatementContext::ELSE() {
  return getToken(MySqlParser::ELSE, 0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::IfStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::IfStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::IfStatementContext::getRuleIndex() const {
  return MySqlParser::RuleIfStatement;
}


MySqlParser::IfStatementContext* MySqlParser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 354, MySqlParser::RuleIfStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4218);
    match(MySqlParser::IF);
    setState(4219);
    expression(0);
    setState(4220);
    match(MySqlParser::THEN);
    setState(4222); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4221);
              dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext = procedureSqlStatement();
              dynamic_cast<IfStatementContext *>(_localctx)->thenStatements.push_back(dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4224); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 606, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4229);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::ELSEIF) {
      setState(4226);
      elifAlternative();
      setState(4231);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ELSE) {
      setState(4232);
      match(MySqlParser::ELSE);
      setState(4234); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(4233);
                dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext = procedureSqlStatement();
                dynamic_cast<IfStatementContext *>(_localctx)->elseStatements.push_back(dynamic_cast<IfStatementContext *>(_localctx)->procedureSqlStatementContext);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(4236); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 608, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    }
    setState(4240);
    match(MySqlParser::END);
    setState(4241);
    match(MySqlParser::IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterateStatementContext ------------------------------------------------------------------

MySqlParser::IterateStatementContext::IterateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IterateStatementContext::ITERATE() {
  return getToken(MySqlParser::ITERATE, 0);
}

MySqlParser::UidContext* MySqlParser::IterateStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::IterateStatementContext::getRuleIndex() const {
  return MySqlParser::RuleIterateStatement;
}


MySqlParser::IterateStatementContext* MySqlParser::iterateStatement() {
  IterateStatementContext *_localctx = _tracker.createInstance<IterateStatementContext>(_ctx, getState());
  enterRule(_localctx, 356, MySqlParser::RuleIterateStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4243);
    match(MySqlParser::ITERATE);
    setState(4244);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeaveStatementContext ------------------------------------------------------------------

MySqlParser::LeaveStatementContext::LeaveStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LeaveStatementContext::LEAVE() {
  return getToken(MySqlParser::LEAVE, 0);
}

MySqlParser::UidContext* MySqlParser::LeaveStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::LeaveStatementContext::getRuleIndex() const {
  return MySqlParser::RuleLeaveStatement;
}


MySqlParser::LeaveStatementContext* MySqlParser::leaveStatement() {
  LeaveStatementContext *_localctx = _tracker.createInstance<LeaveStatementContext>(_ctx, getState());
  enterRule(_localctx, 358, MySqlParser::RuleLeaveStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4246);
    match(MySqlParser::LEAVE);
    setState(4247);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStatementContext ------------------------------------------------------------------

MySqlParser::LoopStatementContext::LoopStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::LoopStatementContext::LOOP() {
  return getTokens(MySqlParser::LOOP);
}

tree::TerminalNode* MySqlParser::LoopStatementContext::LOOP(size_t i) {
  return getToken(MySqlParser::LOOP, i);
}

tree::TerminalNode* MySqlParser::LoopStatementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::LoopStatementContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::LoopStatementContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::LoopStatementContext::COLON_SYMB() {
  return getToken(MySqlParser::COLON_SYMB, 0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::LoopStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::LoopStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::LoopStatementContext::getRuleIndex() const {
  return MySqlParser::RuleLoopStatement;
}


MySqlParser::LoopStatementContext* MySqlParser::loopStatement() {
  LoopStatementContext *_localctx = _tracker.createInstance<LoopStatementContext>(_ctx, getState());
  enterRule(_localctx, 360, MySqlParser::RuleLoopStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(4249);
      uid();
      setState(4250);
      match(MySqlParser::COLON_SYMB);
    }
    setState(4254);
    match(MySqlParser::LOOP);
    setState(4256); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4255);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4258); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 611, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4260);
    match(MySqlParser::END);
    setState(4261);
    match(MySqlParser::LOOP);
    setState(4263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(4262);
      uid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatStatementContext ------------------------------------------------------------------

MySqlParser::RepeatStatementContext::RepeatStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::RepeatStatementContext::REPEAT() {
  return getTokens(MySqlParser::REPEAT);
}

tree::TerminalNode* MySqlParser::RepeatStatementContext::REPEAT(size_t i) {
  return getToken(MySqlParser::REPEAT, i);
}

tree::TerminalNode* MySqlParser::RepeatStatementContext::UNTIL() {
  return getToken(MySqlParser::UNTIL, 0);
}

MySqlParser::ExpressionContext* MySqlParser::RepeatStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::RepeatStatementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::RepeatStatementContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::RepeatStatementContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::RepeatStatementContext::COLON_SYMB() {
  return getToken(MySqlParser::COLON_SYMB, 0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::RepeatStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::RepeatStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::RepeatStatementContext::getRuleIndex() const {
  return MySqlParser::RuleRepeatStatement;
}


MySqlParser::RepeatStatementContext* MySqlParser::repeatStatement() {
  RepeatStatementContext *_localctx = _tracker.createInstance<RepeatStatementContext>(_ctx, getState());
  enterRule(_localctx, 362, MySqlParser::RuleRepeatStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4268);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(4265);
      uid();
      setState(4266);
      match(MySqlParser::COLON_SYMB);
    }
    setState(4270);
    match(MySqlParser::REPEAT);
    setState(4272); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4271);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4274); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 614, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4276);
    match(MySqlParser::UNTIL);
    setState(4277);
    expression(0);
    setState(4278);
    match(MySqlParser::END);
    setState(4279);
    match(MySqlParser::REPEAT);
    setState(4281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(4280);
      uid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

MySqlParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ReturnStatementContext::RETURN() {
  return getToken(MySqlParser::RETURN, 0);
}

MySqlParser::ExpressionContext* MySqlParser::ReturnStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::ReturnStatementContext::getRuleIndex() const {
  return MySqlParser::RuleReturnStatement;
}


MySqlParser::ReturnStatementContext* MySqlParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 364, MySqlParser::RuleReturnStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4283);
    match(MySqlParser::RETURN);
    setState(4284);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

MySqlParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::WhileStatementContext::WHILE() {
  return getTokens(MySqlParser::WHILE);
}

tree::TerminalNode* MySqlParser::WhileStatementContext::WHILE(size_t i) {
  return getToken(MySqlParser::WHILE, i);
}

MySqlParser::ExpressionContext* MySqlParser::WhileStatementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::WhileStatementContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

tree::TerminalNode* MySqlParser::WhileStatementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::UidContext *> MySqlParser::WhileStatementContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::WhileStatementContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::WhileStatementContext::COLON_SYMB() {
  return getToken(MySqlParser::COLON_SYMB, 0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::WhileStatementContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::WhileStatementContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::WhileStatementContext::getRuleIndex() const {
  return MySqlParser::RuleWhileStatement;
}


MySqlParser::WhileStatementContext* MySqlParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 366, MySqlParser::RuleWhileStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4289);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(4286);
      uid();
      setState(4287);
      match(MySqlParser::COLON_SYMB);
    }
    setState(4291);
    match(MySqlParser::WHILE);
    setState(4292);
    expression(0);
    setState(4293);
    match(MySqlParser::DO);
    setState(4295); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4294);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4297); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 617, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4299);
    match(MySqlParser::END);
    setState(4300);
    match(MySqlParser::WHILE);
    setState(4302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DATABASE - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32))
      | (1ULL << (MySqlParser::LEFT - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::RIGHT - 105))
      | (1ULL << (MySqlParser::SCHEMA - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199))
      | (1ULL << (MySqlParser::SERIAL - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::AVG - 199))
      | (1ULL << (MySqlParser::BIT_AND - 199))
      | (1ULL << (MySqlParser::BIT_OR - 199))
      | (1ULL << (MySqlParser::BIT_XOR - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 199))
      | (1ULL << (MySqlParser::MAX - 199))
      | (1ULL << (MySqlParser::MIN - 199))
      | (1ULL << (MySqlParser::STD - 199))
      | (1ULL << (MySqlParser::STDDEV - 199))
      | (1ULL << (MySqlParser::STDDEV_POP - 199))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 199))
      | (1ULL << (MySqlParser::SUM - 199))
      | (1ULL << (MySqlParser::VAR_POP - 199))
      | (1ULL << (MySqlParser::VAR_SAMP - 199))
      | (1ULL << (MySqlParser::VARIANCE - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || ((((_la - 270) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 270)) & ((1ULL << (MySqlParser::ACCOUNT - 270))
      | (1ULL << (MySqlParser::ACTION - 270))
      | (1ULL << (MySqlParser::AFTER - 270))
      | (1ULL << (MySqlParser::AGGREGATE - 270))
      | (1ULL << (MySqlParser::ALGORITHM - 270))
      | (1ULL << (MySqlParser::ANY - 270))
      | (1ULL << (MySqlParser::AT - 270))
      | (1ULL << (MySqlParser::AUTHORS - 270))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 270))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 270))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 270))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 270))
      | (1ULL << (MySqlParser::BEGIN - 270))
      | (1ULL << (MySqlParser::BINLOG - 270))
      | (1ULL << (MySqlParser::BIT - 270))
      | (1ULL << (MySqlParser::BLOCK - 270))
      | (1ULL << (MySqlParser::BOOL - 270))
      | (1ULL << (MySqlParser::BOOLEAN - 270))
      | (1ULL << (MySqlParser::BTREE - 270))
      | (1ULL << (MySqlParser::CACHE - 270))
      | (1ULL << (MySqlParser::CASCADED - 270))
      | (1ULL << (MySqlParser::CHAIN - 270))
      | (1ULL << (MySqlParser::CHANGED - 270))
      | (1ULL << (MySqlParser::CHANNEL - 270))
      | (1ULL << (MySqlParser::CHECKSUM - 270))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 270))
      | (1ULL << (MySqlParser::CIPHER - 270))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 270))
      | (1ULL << (MySqlParser::CLIENT - 270))
      | (1ULL << (MySqlParser::CLOSE - 270))
      | (1ULL << (MySqlParser::COALESCE - 270))
      | (1ULL << (MySqlParser::CODE - 270))
      | (1ULL << (MySqlParser::COLUMNS - 270))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 270))
      | (1ULL << (MySqlParser::COLUMN_NAME - 270))
      | (1ULL << (MySqlParser::COMMENT - 270))
      | (1ULL << (MySqlParser::COMMIT - 270))
      | (1ULL << (MySqlParser::COMPACT - 270))
      | (1ULL << (MySqlParser::COMPLETION - 270))
      | (1ULL << (MySqlParser::COMPRESSED - 270))
      | (1ULL << (MySqlParser::COMPRESSION - 270))
      | (1ULL << (MySqlParser::CONCURRENT - 270))
      | (1ULL << (MySqlParser::CONNECTION - 270))
      | (1ULL << (MySqlParser::CONSISTENT - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 270))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 270))
      | (1ULL << (MySqlParser::CONTAINS - 270))
      | (1ULL << (MySqlParser::CONTEXT - 270))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 270))
      | (1ULL << (MySqlParser::COPY - 270))
      | (1ULL << (MySqlParser::CPU - 270))
      | (1ULL << (MySqlParser::CURSOR_NAME - 270))
      | (1ULL << (MySqlParser::DATA - 270))
      | (1ULL << (MySqlParser::DATAFILE - 270))
      | (1ULL << (MySqlParser::DEALLOCATE - 270))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 270))
      | (1ULL << (MySqlParser::DEFINER - 270))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 270))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 270))
      | (1ULL << (MySqlParser::DIRECTORY - 270))
      | (1ULL << (MySqlParser::DISABLE - 270))
      | (1ULL << (MySqlParser::DISCARD - 270))
      | (1ULL << (MySqlParser::DISK - 270)))) != 0) || ((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & ((1ULL << (MySqlParser::DO - 334))
      | (1ULL << (MySqlParser::DUMPFILE - 334))
      | (1ULL << (MySqlParser::DUPLICATE - 334))
      | (1ULL << (MySqlParser::DYNAMIC - 334))
      | (1ULL << (MySqlParser::ENABLE - 334))
      | (1ULL << (MySqlParser::ENCRYPTION - 334))
      | (1ULL << (MySqlParser::END - 334))
      | (1ULL << (MySqlParser::ENDS - 334))
      | (1ULL << (MySqlParser::ENGINE - 334))
      | (1ULL << (MySqlParser::ENGINES - 334))
      | (1ULL << (MySqlParser::ERROR - 334))
      | (1ULL << (MySqlParser::ERRORS - 334))
      | (1ULL << (MySqlParser::ESCAPE - 334))
      | (1ULL << (MySqlParser::EVEN - 334))
      | (1ULL << (MySqlParser::EVENT - 334))
      | (1ULL << (MySqlParser::EVENTS - 334))
      | (1ULL << (MySqlParser::EVERY - 334))
      | (1ULL << (MySqlParser::EXCHANGE - 334))
      | (1ULL << (MySqlParser::EXCLUSIVE - 334))
      | (1ULL << (MySqlParser::EXPIRE - 334))
      | (1ULL << (MySqlParser::EXPORT - 334))
      | (1ULL << (MySqlParser::EXTENDED - 334))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 334))
      | (1ULL << (MySqlParser::FAST - 334))
      | (1ULL << (MySqlParser::FAULTS - 334))
      | (1ULL << (MySqlParser::FIELDS - 334))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::FILTER - 334))
      | (1ULL << (MySqlParser::FIRST - 334))
      | (1ULL << (MySqlParser::FIXED - 334))
      | (1ULL << (MySqlParser::FLUSH - 334))
      | (1ULL << (MySqlParser::FOLLOWS - 334))
      | (1ULL << (MySqlParser::FOUND - 334))
      | (1ULL << (MySqlParser::FULL - 334))
      | (1ULL << (MySqlParser::FUNCTION - 334))
      | (1ULL << (MySqlParser::GENERAL - 334))
      | (1ULL << (MySqlParser::GLOBAL - 334))
      | (1ULL << (MySqlParser::GRANTS - 334))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 334))
      | (1ULL << (MySqlParser::HANDLER - 334))
      | (1ULL << (MySqlParser::HASH - 334))
      | (1ULL << (MySqlParser::HELP - 334))
      | (1ULL << (MySqlParser::HOST - 334))
      | (1ULL << (MySqlParser::HOSTS - 334))
      | (1ULL << (MySqlParser::IDENTIFIED - 334))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 334))
      | (1ULL << (MySqlParser::IMPORT - 334))
      | (1ULL << (MySqlParser::INDEXES - 334))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 334))
      | (1ULL << (MySqlParser::INPLACE - 334))
      | (1ULL << (MySqlParser::INSERT_METHOD - 334))
      | (1ULL << (MySqlParser::INSTALL - 334))
      | (1ULL << (MySqlParser::INSTANCE - 334))
      | (1ULL << (MySqlParser::INVISIBLE - 334))
      | (1ULL << (MySqlParser::INVOKER - 334))
      | (1ULL << (MySqlParser::IO - 334))
      | (1ULL << (MySqlParser::IO_THREAD - 334))
      | (1ULL << (MySqlParser::IPC - 334))
      | (1ULL << (MySqlParser::ISOLATION - 334))
      | (1ULL << (MySqlParser::ISSUER - 334))
      | (1ULL << (MySqlParser::JSON - 334))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 334))
      | (1ULL << (MySqlParser::LANGUAGE - 334))
      | (1ULL << (MySqlParser::LAST - 334)))) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & ((1ULL << (MySqlParser::LEAVES - 398))
      | (1ULL << (MySqlParser::LESS - 398))
      | (1ULL << (MySqlParser::LEVEL - 398))
      | (1ULL << (MySqlParser::LIST - 398))
      | (1ULL << (MySqlParser::LOCAL - 398))
      | (1ULL << (MySqlParser::LOGFILE - 398))
      | (1ULL << (MySqlParser::LOGS - 398))
      | (1ULL << (MySqlParser::MASTER - 398))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 398))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 398))
      | (1ULL << (MySqlParser::MASTER_DELAY - 398))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 398))
      | (1ULL << (MySqlParser::MASTER_HOST - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 398))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 398))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 398))
      | (1ULL << (MySqlParser::MASTER_PORT - 398))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 398))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 398))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 398))
      | (1ULL << (MySqlParser::MASTER_USER - 398))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_ROWS - 398))
      | (1ULL << (MySqlParser::MAX_SIZE - 398))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 398))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 398))
      | (1ULL << (MySqlParser::MEDIUM - 398))
      | (1ULL << (MySqlParser::MEMBER - 398))
      | (1ULL << (MySqlParser::MERGE - 398))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 398))
      | (1ULL << (MySqlParser::MID - 398))
      | (1ULL << (MySqlParser::MIGRATE - 398))
      | (1ULL << (MySqlParser::MIN_ROWS - 398))
      | (1ULL << (MySqlParser::MODE - 398))
      | (1ULL << (MySqlParser::MODIFY - 398))
      | (1ULL << (MySqlParser::MUTEX - 398))
      | (1ULL << (MySqlParser::MYSQL - 398))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 398))
      | (1ULL << (MySqlParser::NAME - 398))
      | (1ULL << (MySqlParser::NAMES - 398))
      | (1ULL << (MySqlParser::NCHAR - 398))
      | (1ULL << (MySqlParser::NEVER - 398))
      | (1ULL << (MySqlParser::NEXT - 398))
      | (1ULL << (MySqlParser::NO - 398))
      | (1ULL << (MySqlParser::NODEGROUP - 398))
      | (1ULL << (MySqlParser::NONE - 398))
      | (1ULL << (MySqlParser::OFFLINE - 398))
      | (1ULL << (MySqlParser::OFFSET - 398))
      | (1ULL << (MySqlParser::OF - 398))
      | (1ULL << (MySqlParser::OJ - 398))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 398))
      | (1ULL << (MySqlParser::ONE - 398))
      | (1ULL << (MySqlParser::ONLINE - 398))
      | (1ULL << (MySqlParser::ONLY - 398))
      | (1ULL << (MySqlParser::OPEN - 398))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 398)))) != 0) || ((((_la - 462) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 462)) & ((1ULL << (MySqlParser::OPTIONS - 462))
      | (1ULL << (MySqlParser::OWNER - 462))
      | (1ULL << (MySqlParser::PACK_KEYS - 462))
      | (1ULL << (MySqlParser::PAGE - 462))
      | (1ULL << (MySqlParser::PARSER - 462))
      | (1ULL << (MySqlParser::PARTIAL - 462))
      | (1ULL << (MySqlParser::PARTITIONING - 462))
      | (1ULL << (MySqlParser::PARTITIONS - 462))
      | (1ULL << (MySqlParser::PASSWORD - 462))
      | (1ULL << (MySqlParser::PHASE - 462))
      | (1ULL << (MySqlParser::PLUGIN - 462))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 462))
      | (1ULL << (MySqlParser::PLUGINS - 462))
      | (1ULL << (MySqlParser::PORT - 462))
      | (1ULL << (MySqlParser::PRECEDES - 462))
      | (1ULL << (MySqlParser::PREPARE - 462))
      | (1ULL << (MySqlParser::PRESERVE - 462))
      | (1ULL << (MySqlParser::PREV - 462))
      | (1ULL << (MySqlParser::PROCESSLIST - 462))
      | (1ULL << (MySqlParser::PROFILE - 462))
      | (1ULL << (MySqlParser::PROFILES - 462))
      | (1ULL << (MySqlParser::PROXY - 462))
      | (1ULL << (MySqlParser::QUERY - 462))
      | (1ULL << (MySqlParser::QUICK - 462))
      | (1ULL << (MySqlParser::REBUILD - 462))
      | (1ULL << (MySqlParser::RECOVER - 462))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 462))
      | (1ULL << (MySqlParser::REDUNDANT - 462))
      | (1ULL << (MySqlParser::RELAY - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 462))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 462))
      | (1ULL << (MySqlParser::RELAYLOG - 462))
      | (1ULL << (MySqlParser::REMOVE - 462))
      | (1ULL << (MySqlParser::REORGANIZE - 462))
      | (1ULL << (MySqlParser::REPAIR - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 462))
      | (1ULL << (MySqlParser::REPLICATION - 462))
      | (1ULL << (MySqlParser::RESET - 462))
      | (1ULL << (MySqlParser::RESUME - 462))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 462))
      | (1ULL << (MySqlParser::RETURNS - 462))
      | (1ULL << (MySqlParser::ROLE - 462))
      | (1ULL << (MySqlParser::ROLLBACK - 462))
      | (1ULL << (MySqlParser::ROLLUP - 462))
      | (1ULL << (MySqlParser::ROTATE - 462))
      | (1ULL << (MySqlParser::ROW - 462))
      | (1ULL << (MySqlParser::ROWS - 462))
      | (1ULL << (MySqlParser::ROW_FORMAT - 462))
      | (1ULL << (MySqlParser::SAVEPOINT - 462))
      | (1ULL << (MySqlParser::SCHEDULE - 462))
      | (1ULL << (MySqlParser::SECURITY - 462))
      | (1ULL << (MySqlParser::SERVER - 462))
      | (1ULL << (MySqlParser::SESSION - 462))
      | (1ULL << (MySqlParser::SHARE - 462))
      | (1ULL << (MySqlParser::SHARED - 462))
      | (1ULL << (MySqlParser::SIGNED - 462))
      | (1ULL << (MySqlParser::SIMPLE - 462))
      | (1ULL << (MySqlParser::SLAVE - 462)))) != 0) || ((((_la - 526) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 526)) & ((1ULL << (MySqlParser::SLOW - 526))
      | (1ULL << (MySqlParser::SNAPSHOT - 526))
      | (1ULL << (MySqlParser::SOCKET - 526))
      | (1ULL << (MySqlParser::SOME - 526))
      | (1ULL << (MySqlParser::SONAME - 526))
      | (1ULL << (MySqlParser::SOUNDS - 526))
      | (1ULL << (MySqlParser::SOURCE - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 526))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 526))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 526))
      | (1ULL << (MySqlParser::SQL_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 526))
      | (1ULL << (MySqlParser::SQL_THREAD - 526))
      | (1ULL << (MySqlParser::START - 526))
      | (1ULL << (MySqlParser::STARTS - 526))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 526))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 526))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 526))
      | (1ULL << (MySqlParser::STATUS - 526))
      | (1ULL << (MySqlParser::STOP - 526))
      | (1ULL << (MySqlParser::STORAGE - 526))
      | (1ULL << (MySqlParser::STRING - 526))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 526))
      | (1ULL << (MySqlParser::SUBJECT - 526))
      | (1ULL << (MySqlParser::SUBPARTITION - 526))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 526))
      | (1ULL << (MySqlParser::SUSPEND - 526))
      | (1ULL << (MySqlParser::SWAPS - 526))
      | (1ULL << (MySqlParser::SWITCHES - 526))
      | (1ULL << (MySqlParser::TABLE_NAME - 526))
      | (1ULL << (MySqlParser::TABLESPACE - 526))
      | (1ULL << (MySqlParser::TEMPORARY - 526))
      | (1ULL << (MySqlParser::TEMPTABLE - 526))
      | (1ULL << (MySqlParser::THAN - 526))
      | (1ULL << (MySqlParser::TRADITIONAL - 526))
      | (1ULL << (MySqlParser::TRANSACTION - 526))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 526))
      | (1ULL << (MySqlParser::TRIGGERS - 526))
      | (1ULL << (MySqlParser::TRUNCATE - 526))
      | (1ULL << (MySqlParser::UNDEFINED - 526))
      | (1ULL << (MySqlParser::UNDOFILE - 526))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 526))
      | (1ULL << (MySqlParser::UNINSTALL - 526))
      | (1ULL << (MySqlParser::UNKNOWN - 526))
      | (1ULL << (MySqlParser::UNTIL - 526))
      | (1ULL << (MySqlParser::UPGRADE - 526))
      | (1ULL << (MySqlParser::USER - 526))
      | (1ULL << (MySqlParser::USE_FRM - 526))
      | (1ULL << (MySqlParser::USER_RESOURCES - 526))
      | (1ULL << (MySqlParser::VALIDATION - 526))
      | (1ULL << (MySqlParser::VALUE - 526))
      | (1ULL << (MySqlParser::VARIABLES - 526))
      | (1ULL << (MySqlParser::VIEW - 526))
      | (1ULL << (MySqlParser::VISIBLE - 526))
      | (1ULL << (MySqlParser::WAIT - 526))
      | (1ULL << (MySqlParser::WARNINGS - 526))
      | (1ULL << (MySqlParser::WITHOUT - 526))
      | (1ULL << (MySqlParser::WORK - 526))
      | (1ULL << (MySqlParser::WRAPPER - 526))
      | (1ULL << (MySqlParser::X509 - 526))
      | (1ULL << (MySqlParser::XA - 526)))) != 0) || ((((_la - 590) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 590)) & ((1ULL << (MySqlParser::XML - 590))
      | (1ULL << (MySqlParser::INTERNAL - 590))
      | (1ULL << (MySqlParser::QUARTER - 590))
      | (1ULL << (MySqlParser::MONTH - 590))
      | (1ULL << (MySqlParser::DAY - 590))
      | (1ULL << (MySqlParser::HOUR - 590))
      | (1ULL << (MySqlParser::MINUTE - 590))
      | (1ULL << (MySqlParser::WEEK - 590))
      | (1ULL << (MySqlParser::SECOND - 590))
      | (1ULL << (MySqlParser::MICROSECOND - 590))
      | (1ULL << (MySqlParser::TABLES - 590))
      | (1ULL << (MySqlParser::ROUTINE - 590))
      | (1ULL << (MySqlParser::EXECUTE - 590))
      | (1ULL << (MySqlParser::FILE - 590))
      | (1ULL << (MySqlParser::PROCESS - 590))
      | (1ULL << (MySqlParser::RELOAD - 590))
      | (1ULL << (MySqlParser::SHUTDOWN - 590))
      | (1ULL << (MySqlParser::SUPER - 590))
      | (1ULL << (MySqlParser::PRIVILEGES - 590))
      | (1ULL << (MySqlParser::AUDIT_ADMIN - 590))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 590))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 590))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 590))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 590))
      | (1ULL << (MySqlParser::FIREWALL_USER - 590))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 590))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 590))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 590))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 590))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 590))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 590))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 590))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::SET_USER_ID - 590))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 590))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 590))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 590))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 590))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 590))
      | (1ULL << (MySqlParser::ARMSCII8 - 590))
      | (1ULL << (MySqlParser::ASCII - 590))
      | (1ULL << (MySqlParser::BIG5 - 590))
      | (1ULL << (MySqlParser::CP1250 - 590))
      | (1ULL << (MySqlParser::CP1251 - 590))
      | (1ULL << (MySqlParser::CP1256 - 590))
      | (1ULL << (MySqlParser::CP1257 - 590))
      | (1ULL << (MySqlParser::CP850 - 590))
      | (1ULL << (MySqlParser::CP852 - 590)))) != 0) || ((((_la - 654) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 654)) & ((1ULL << (MySqlParser::CP866 - 654))
      | (1ULL << (MySqlParser::CP932 - 654))
      | (1ULL << (MySqlParser::DEC8 - 654))
      | (1ULL << (MySqlParser::EUCJPMS - 654))
      | (1ULL << (MySqlParser::EUCKR - 654))
      | (1ULL << (MySqlParser::GB2312 - 654))
      | (1ULL << (MySqlParser::GBK - 654))
      | (1ULL << (MySqlParser::GEOSTD8 - 654))
      | (1ULL << (MySqlParser::GREEK - 654))
      | (1ULL << (MySqlParser::HEBREW - 654))
      | (1ULL << (MySqlParser::HP8 - 654))
      | (1ULL << (MySqlParser::KEYBCS2 - 654))
      | (1ULL << (MySqlParser::KOI8R - 654))
      | (1ULL << (MySqlParser::KOI8U - 654))
      | (1ULL << (MySqlParser::LATIN1 - 654))
      | (1ULL << (MySqlParser::LATIN2 - 654))
      | (1ULL << (MySqlParser::LATIN5 - 654))
      | (1ULL << (MySqlParser::LATIN7 - 654))
      | (1ULL << (MySqlParser::MACCE - 654))
      | (1ULL << (MySqlParser::MACROMAN - 654))
      | (1ULL << (MySqlParser::SJIS - 654))
      | (1ULL << (MySqlParser::SWE7 - 654))
      | (1ULL << (MySqlParser::TIS620 - 654))
      | (1ULL << (MySqlParser::UCS2 - 654))
      | (1ULL << (MySqlParser::UJIS - 654))
      | (1ULL << (MySqlParser::UTF16 - 654))
      | (1ULL << (MySqlParser::UTF16LE - 654))
      | (1ULL << (MySqlParser::UTF32 - 654))
      | (1ULL << (MySqlParser::UTF8 - 654))
      | (1ULL << (MySqlParser::UTF8MB3 - 654))
      | (1ULL << (MySqlParser::UTF8MB4 - 654))
      | (1ULL << (MySqlParser::ARCHIVE - 654))
      | (1ULL << (MySqlParser::BLACKHOLE - 654))
      | (1ULL << (MySqlParser::CSV - 654))
      | (1ULL << (MySqlParser::FEDERATED - 654))
      | (1ULL << (MySqlParser::INNODB - 654))
      | (1ULL << (MySqlParser::MEMORY - 654))
      | (1ULL << (MySqlParser::MRG_MYISAM - 654))
      | (1ULL << (MySqlParser::MYISAM - 654))
      | (1ULL << (MySqlParser::NDB - 654))
      | (1ULL << (MySqlParser::NDBCLUSTER - 654))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 654))
      | (1ULL << (MySqlParser::TOKUDB - 654))
      | (1ULL << (MySqlParser::REPEATABLE - 654))
      | (1ULL << (MySqlParser::COMMITTED - 654))
      | (1ULL << (MySqlParser::UNCOMMITTED - 654))
      | (1ULL << (MySqlParser::SERIALIZABLE - 654))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 654))
      | (1ULL << (MySqlParser::LINESTRING - 654))
      | (1ULL << (MySqlParser::MULTILINESTRING - 654))
      | (1ULL << (MySqlParser::MULTIPOINT - 654))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 654))
      | (1ULL << (MySqlParser::POINT - 654))
      | (1ULL << (MySqlParser::POLYGON - 654))
      | (1ULL << (MySqlParser::ABS - 654))
      | (1ULL << (MySqlParser::ACOS - 654))
      | (1ULL << (MySqlParser::ADDDATE - 654))
      | (1ULL << (MySqlParser::ADDTIME - 654))
      | (1ULL << (MySqlParser::AES_DECRYPT - 654))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 654))
      | (1ULL << (MySqlParser::AREA - 654))
      | (1ULL << (MySqlParser::ASBINARY - 654)))) != 0) || ((((_la - 718) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 718)) & ((1ULL << (MySqlParser::ASIN - 718))
      | (1ULL << (MySqlParser::ASTEXT - 718))
      | (1ULL << (MySqlParser::ASWKB - 718))
      | (1ULL << (MySqlParser::ASWKT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 718))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 718))
      | (1ULL << (MySqlParser::ATAN - 718))
      | (1ULL << (MySqlParser::ATAN2 - 718))
      | (1ULL << (MySqlParser::BENCHMARK - 718))
      | (1ULL << (MySqlParser::BIN - 718))
      | (1ULL << (MySqlParser::BIT_COUNT - 718))
      | (1ULL << (MySqlParser::BIT_LENGTH - 718))
      | (1ULL << (MySqlParser::BUFFER - 718))
      | (1ULL << (MySqlParser::CATALOG_NAME - 718))
      | (1ULL << (MySqlParser::CEIL - 718))
      | (1ULL << (MySqlParser::CEILING - 718))
      | (1ULL << (MySqlParser::CENTROID - 718))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 718))
      | (1ULL << (MySqlParser::CHARSET - 718))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 718))
      | (1ULL << (MySqlParser::COERCIBILITY - 718))
      | (1ULL << (MySqlParser::COLLATION - 718))
      | (1ULL << (MySqlParser::COMPRESS - 718))
      | (1ULL << (MySqlParser::CONCAT - 718))
      | (1ULL << (MySqlParser::CONCAT_WS - 718))
      | (1ULL << (MySqlParser::CONNECTION_ID - 718))
      | (1ULL << (MySqlParser::CONV - 718))
      | (1ULL << (MySqlParser::CONVERT_TZ - 718))
      | (1ULL << (MySqlParser::COS - 718))
      | (1ULL << (MySqlParser::COT - 718))
      | (1ULL << (MySqlParser::CRC32 - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 718))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 718))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 718))
      | (1ULL << (MySqlParser::CROSSES - 718))
      | (1ULL << (MySqlParser::DATEDIFF - 718))
      | (1ULL << (MySqlParser::DATE_FORMAT - 718))
      | (1ULL << (MySqlParser::DAYNAME - 718))
      | (1ULL << (MySqlParser::DAYOFMONTH - 718))
      | (1ULL << (MySqlParser::DAYOFWEEK - 718))
      | (1ULL << (MySqlParser::DAYOFYEAR - 718))
      | (1ULL << (MySqlParser::DECODE - 718))
      | (1ULL << (MySqlParser::DEGREES - 718))
      | (1ULL << (MySqlParser::DES_DECRYPT - 718))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 718))
      | (1ULL << (MySqlParser::DIMENSION - 718))
      | (1ULL << (MySqlParser::DISJOINT - 718))
      | (1ULL << (MySqlParser::ELT - 718))
      | (1ULL << (MySqlParser::ENCODE - 718))
      | (1ULL << (MySqlParser::ENCRYPT - 718))
      | (1ULL << (MySqlParser::ENDPOINT - 718))
      | (1ULL << (MySqlParser::ENVELOPE - 718))
      | (1ULL << (MySqlParser::EQUALS - 718))
      | (1ULL << (MySqlParser::EXP - 718))
      | (1ULL << (MySqlParser::EXPORT_SET - 718))
      | (1ULL << (MySqlParser::EXTERIORRING - 718))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 718))
      | (1ULL << (MySqlParser::FIELD - 718))
      | (1ULL << (MySqlParser::FIND_IN_SET - 718))
      | (1ULL << (MySqlParser::FLOOR - 718)))) != 0) || ((((_la - 782) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 782)) & ((1ULL << (MySqlParser::FORMAT - 782))
      | (1ULL << (MySqlParser::FOUND_ROWS - 782))
      | (1ULL << (MySqlParser::FROM_BASE64 - 782))
      | (1ULL << (MySqlParser::FROM_DAYS - 782))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 782))
      | (1ULL << (MySqlParser::GEOMETRYN - 782))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 782))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 782))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 782))
      | (1ULL << (MySqlParser::GET_FORMAT - 782))
      | (1ULL << (MySqlParser::GET_LOCK - 782))
      | (1ULL << (MySqlParser::GLENGTH - 782))
      | (1ULL << (MySqlParser::GREATEST - 782))
      | (1ULL << (MySqlParser::GTID_SUBSET - 782))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 782))
      | (1ULL << (MySqlParser::HEX - 782))
      | (1ULL << (MySqlParser::IFNULL - 782))
      | (1ULL << (MySqlParser::INET6_ATON - 782))
      | (1ULL << (MySqlParser::INET6_NTOA - 782))
      | (1ULL << (MySqlParser::INET_ATON - 782))
      | (1ULL << (MySqlParser::INET_NTOA - 782))
      | (1ULL << (MySqlParser::INSTR - 782))
      | (1ULL << (MySqlParser::INTERIORRINGN - 782))
      | (1ULL << (MySqlParser::INTERSECTS - 782))
      | (1ULL << (MySqlParser::ISCLOSED - 782))
      | (1ULL << (MySqlParser::ISEMPTY - 782))
      | (1ULL << (MySqlParser::ISNULL - 782))
      | (1ULL << (MySqlParser::ISSIMPLE - 782))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 782))
      | (1ULL << (MySqlParser::IS_IPV4 - 782))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 782))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 782))
      | (1ULL << (MySqlParser::IS_IPV6 - 782))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 782))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 782))
      | (1ULL << (MySqlParser::LCASE - 782))
      | (1ULL << (MySqlParser::LEAST - 782))
      | (1ULL << (MySqlParser::LENGTH - 782))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINEFROMWKB - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 782))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 782))
      | (1ULL << (MySqlParser::LN - 782))
      | (1ULL << (MySqlParser::LOAD_FILE - 782))
      | (1ULL << (MySqlParser::LOCATE - 782))
      | (1ULL << (MySqlParser::LOG - 782))
      | (1ULL << (MySqlParser::LOG10 - 782))
      | (1ULL << (MySqlParser::LOG2 - 782))
      | (1ULL << (MySqlParser::LOWER - 782))
      | (1ULL << (MySqlParser::LPAD - 782))
      | (1ULL << (MySqlParser::LTRIM - 782))
      | (1ULL << (MySqlParser::MAKEDATE - 782))
      | (1ULL << (MySqlParser::MAKETIME - 782))
      | (1ULL << (MySqlParser::MAKE_SET - 782))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 782))
      | (1ULL << (MySqlParser::MBRCONTAINS - 782))
      | (1ULL << (MySqlParser::MBRDISJOINT - 782))
      | (1ULL << (MySqlParser::MBREQUAL - 782)))) != 0) || ((((_la - 846) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 846)) & ((1ULL << (MySqlParser::MBRINTERSECTS - 846))
      | (1ULL << (MySqlParser::MBROVERLAPS - 846))
      | (1ULL << (MySqlParser::MBRTOUCHES - 846))
      | (1ULL << (MySqlParser::MBRWITHIN - 846))
      | (1ULL << (MySqlParser::MD5 - 846))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 846))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 846))
      | (1ULL << (MySqlParser::MONTHNAME - 846))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::NAME_CONST - 846))
      | (1ULL << (MySqlParser::NULLIF - 846))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 846))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 846))
      | (1ULL << (MySqlParser::NUMPOINTS - 846))
      | (1ULL << (MySqlParser::OCT - 846))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 846))
      | (1ULL << (MySqlParser::ORD - 846))
      | (1ULL << (MySqlParser::OVERLAPS - 846))
      | (1ULL << (MySqlParser::PERIOD_ADD - 846))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 846))
      | (1ULL << (MySqlParser::PI - 846))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 846))
      | (1ULL << (MySqlParser::POINTFROMWKB - 846))
      | (1ULL << (MySqlParser::POINTN - 846))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYFROMWKB - 846))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 846))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 846))
      | (1ULL << (MySqlParser::POW - 846))
      | (1ULL << (MySqlParser::POWER - 846))
      | (1ULL << (MySqlParser::QUOTE - 846))
      | (1ULL << (MySqlParser::RADIANS - 846))
      | (1ULL << (MySqlParser::RAND - 846))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 846))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 846))
      | (1ULL << (MySqlParser::REVERSE - 846))
      | (1ULL << (MySqlParser::ROUND - 846))
      | (1ULL << (MySqlParser::ROW_COUNT - 846))
      | (1ULL << (MySqlParser::RPAD - 846))
      | (1ULL << (MySqlParser::RTRIM - 846))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 846))
      | (1ULL << (MySqlParser::SESSION_USER - 846))
      | (1ULL << (MySqlParser::SHA - 846))
      | (1ULL << (MySqlParser::SHA1 - 846))
      | (1ULL << (MySqlParser::SHA2 - 846))
      | (1ULL << (MySqlParser::SCHEMA_NAME - 846))
      | (1ULL << (MySqlParser::SIGN - 846))
      | (1ULL << (MySqlParser::SIN - 846))
      | (1ULL << (MySqlParser::SLEEP - 846))
      | (1ULL << (MySqlParser::SOUNDEX - 846))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 846))
      | (1ULL << (MySqlParser::SQRT - 846))
      | (1ULL << (MySqlParser::SRID - 846))
      | (1ULL << (MySqlParser::STARTPOINT - 846))
      | (1ULL << (MySqlParser::STRCMP - 846)))) != 0) || ((((_la - 910) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 910)) & ((1ULL << (MySqlParser::STR_TO_DATE - 910))
      | (1ULL << (MySqlParser::ST_AREA - 910))
      | (1ULL << (MySqlParser::ST_ASBINARY - 910))
      | (1ULL << (MySqlParser::ST_ASTEXT - 910))
      | (1ULL << (MySqlParser::ST_ASWKB - 910))
      | (1ULL << (MySqlParser::ST_ASWKT - 910))
      | (1ULL << (MySqlParser::ST_BUFFER - 910))
      | (1ULL << (MySqlParser::ST_CENTROID - 910))
      | (1ULL << (MySqlParser::ST_CONTAINS - 910))
      | (1ULL << (MySqlParser::ST_CROSSES - 910))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_DIMENSION - 910))
      | (1ULL << (MySqlParser::ST_DISJOINT - 910))
      | (1ULL << (MySqlParser::ST_DISTANCE - 910))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 910))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 910))
      | (1ULL << (MySqlParser::ST_EQUALS - 910))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 910))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 910))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 910))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 910))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 910))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 910))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 910))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 910))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POINTN - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 910))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 910))
      | (1ULL << (MySqlParser::ST_SRID - 910))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 910))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 910))
      | (1ULL << (MySqlParser::ST_TOUCHES - 910))
      | (1ULL << (MySqlParser::ST_UNION - 910))
      | (1ULL << (MySqlParser::ST_WITHIN - 910))
      | (1ULL << (MySqlParser::ST_X - 910))
      | (1ULL << (MySqlParser::ST_Y - 910))
      | (1ULL << (MySqlParser::SUBDATE - 910))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 910))
      | (1ULL << (MySqlParser::SUBTIME - 910))
      | (1ULL << (MySqlParser::SYSTEM_USER - 910))
      | (1ULL << (MySqlParser::TAN - 910)))) != 0) || ((((_la - 974) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 974)) & ((1ULL << (MySqlParser::TIMEDIFF - 974))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 974))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 974))
      | (1ULL << (MySqlParser::TIME_FORMAT - 974))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 974))
      | (1ULL << (MySqlParser::TOUCHES - 974))
      | (1ULL << (MySqlParser::TO_BASE64 - 974))
      | (1ULL << (MySqlParser::TO_DAYS - 974))
      | (1ULL << (MySqlParser::TO_SECONDS - 974))
      | (1ULL << (MySqlParser::UCASE - 974))
      | (1ULL << (MySqlParser::UNCOMPRESS - 974))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 974))
      | (1ULL << (MySqlParser::UNHEX - 974))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 974))
      | (1ULL << (MySqlParser::UPDATEXML - 974))
      | (1ULL << (MySqlParser::UPPER - 974))
      | (1ULL << (MySqlParser::UUID - 974))
      | (1ULL << (MySqlParser::UUID_SHORT - 974))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 974))
      | (1ULL << (MySqlParser::VERSION - 974))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974))
      | (1ULL << (MySqlParser::WEEKDAY - 974))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 974))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 974))
      | (1ULL << (MySqlParser::WITHIN - 974))
      | (1ULL << (MySqlParser::YEARWEEK - 974))
      | (1ULL << (MySqlParser::Y_FUNCTION - 974))
      | (1ULL << (MySqlParser::X_FUNCTION - 974))
      | (1ULL << (MySqlParser::MOD - 974)))) != 0) || ((((_la - 1040) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1040)) & ((1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 1040))
      | (1ULL << (MySqlParser::STRING_LITERAL - 1040))
      | (1ULL << (MySqlParser::ID - 1040))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1040)))) != 0)) {
      setState(4301);
      uid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CursorStatementContext ------------------------------------------------------------------

MySqlParser::CursorStatementContext::CursorStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::CursorStatementContext::getRuleIndex() const {
  return MySqlParser::RuleCursorStatement;
}

void MySqlParser::CursorStatementContext::copyFrom(CursorStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CloseCursorContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CloseCursorContext::CLOSE() {
  return getToken(MySqlParser::CLOSE, 0);
}

MySqlParser::UidContext* MySqlParser::CloseCursorContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::CloseCursorContext::CloseCursorContext(CursorStatementContext *ctx) { copyFrom(ctx); }


//----------------- OpenCursorContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::OpenCursorContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}

MySqlParser::UidContext* MySqlParser::OpenCursorContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::OpenCursorContext::OpenCursorContext(CursorStatementContext *ctx) { copyFrom(ctx); }


//----------------- FetchCursorContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::FetchCursorContext::FETCH() {
  return getToken(MySqlParser::FETCH, 0);
}

MySqlParser::UidContext* MySqlParser::FetchCursorContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::FetchCursorContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

MySqlParser::UidListContext* MySqlParser::FetchCursorContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::FetchCursorContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::FetchCursorContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

MySqlParser::FetchCursorContext::FetchCursorContext(CursorStatementContext *ctx) { copyFrom(ctx); }


MySqlParser::CursorStatementContext* MySqlParser::cursorStatement() {
  CursorStatementContext *_localctx = _tracker.createInstance<CursorStatementContext>(_ctx, getState());
  enterRule(_localctx, 368, MySqlParser::RuleCursorStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4319);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CLOSE: {
        _localctx = dynamic_cast<CursorStatementContext *>(_tracker.createInstance<MySqlParser::CloseCursorContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4304);
        match(MySqlParser::CLOSE);
        setState(4305);
        uid();
        break;
      }

      case MySqlParser::FETCH: {
        _localctx = dynamic_cast<CursorStatementContext *>(_tracker.createInstance<MySqlParser::FetchCursorContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4306);
        match(MySqlParser::FETCH);
        setState(4311);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 620, _ctx)) {
        case 1: {
          setState(4308);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NEXT) {
            setState(4307);
            match(MySqlParser::NEXT);
          }
          setState(4310);
          match(MySqlParser::FROM);
          break;
        }

        }
        setState(4313);
        uid();
        setState(4314);
        match(MySqlParser::INTO);
        setState(4315);
        uidList();
        break;
      }

      case MySqlParser::OPEN: {
        _localctx = dynamic_cast<CursorStatementContext *>(_tracker.createInstance<MySqlParser::OpenCursorContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4317);
        match(MySqlParser::OPEN);
        setState(4318);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareVariableContext ------------------------------------------------------------------

MySqlParser::DeclareVariableContext::DeclareVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DeclareVariableContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

MySqlParser::UidListContext* MySqlParser::DeclareVariableContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

MySqlParser::DataTypeContext* MySqlParser::DeclareVariableContext::dataType() {
  return getRuleContext<MySqlParser::DataTypeContext>(0);
}

tree::TerminalNode* MySqlParser::DeclareVariableContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::ExpressionContext* MySqlParser::DeclareVariableContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::DeclareVariableContext::getRuleIndex() const {
  return MySqlParser::RuleDeclareVariable;
}


MySqlParser::DeclareVariableContext* MySqlParser::declareVariable() {
  DeclareVariableContext *_localctx = _tracker.createInstance<DeclareVariableContext>(_ctx, getState());
  enterRule(_localctx, 370, MySqlParser::RuleDeclareVariable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4321);
    match(MySqlParser::DECLARE);
    setState(4322);
    uidList();
    setState(4323);
    dataType();
    setState(4326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFAULT) {
      setState(4324);
      match(MySqlParser::DEFAULT);
      setState(4325);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareConditionContext ------------------------------------------------------------------

MySqlParser::DeclareConditionContext::DeclareConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DeclareConditionContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

MySqlParser::UidContext* MySqlParser::DeclareConditionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DeclareConditionContext::CONDITION() {
  return getToken(MySqlParser::CONDITION, 0);
}

tree::TerminalNode* MySqlParser::DeclareConditionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::DeclareConditionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::DeclareConditionContext::SQLSTATE() {
  return getToken(MySqlParser::SQLSTATE, 0);
}

tree::TerminalNode* MySqlParser::DeclareConditionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::DeclareConditionContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}


size_t MySqlParser::DeclareConditionContext::getRuleIndex() const {
  return MySqlParser::RuleDeclareCondition;
}


MySqlParser::DeclareConditionContext* MySqlParser::declareCondition() {
  DeclareConditionContext *_localctx = _tracker.createInstance<DeclareConditionContext>(_ctx, getState());
  enterRule(_localctx, 372, MySqlParser::RuleDeclareCondition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4328);
    match(MySqlParser::DECLARE);
    setState(4329);
    uid();
    setState(4330);
    match(MySqlParser::CONDITION);
    setState(4331);
    match(MySqlParser::FOR);
    setState(4338);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        setState(4332);
        decimalLiteral();
        break;
      }

      case MySqlParser::SQLSTATE: {
        setState(4333);
        match(MySqlParser::SQLSTATE);
        setState(4335);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::VALUE) {
          setState(4334);
          match(MySqlParser::VALUE);
        }
        setState(4337);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareCursorContext ------------------------------------------------------------------

MySqlParser::DeclareCursorContext::DeclareCursorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DeclareCursorContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

MySqlParser::UidContext* MySqlParser::DeclareCursorContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DeclareCursorContext::CURSOR() {
  return getToken(MySqlParser::CURSOR, 0);
}

tree::TerminalNode* MySqlParser::DeclareCursorContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::DeclareCursorContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}


size_t MySqlParser::DeclareCursorContext::getRuleIndex() const {
  return MySqlParser::RuleDeclareCursor;
}


MySqlParser::DeclareCursorContext* MySqlParser::declareCursor() {
  DeclareCursorContext *_localctx = _tracker.createInstance<DeclareCursorContext>(_ctx, getState());
  enterRule(_localctx, 374, MySqlParser::RuleDeclareCursor);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4340);
    match(MySqlParser::DECLARE);
    setState(4341);
    uid();
    setState(4342);
    match(MySqlParser::CURSOR);
    setState(4343);
    match(MySqlParser::FOR);
    setState(4344);
    selectStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareHandlerContext ------------------------------------------------------------------

MySqlParser::DeclareHandlerContext::DeclareHandlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

std::vector<MySqlParser::HandlerConditionValueContext *> MySqlParser::DeclareHandlerContext::handlerConditionValue() {
  return getRuleContexts<MySqlParser::HandlerConditionValueContext>();
}

MySqlParser::HandlerConditionValueContext* MySqlParser::DeclareHandlerContext::handlerConditionValue(size_t i) {
  return getRuleContext<MySqlParser::HandlerConditionValueContext>(i);
}

MySqlParser::RoutineBodyContext* MySqlParser::DeclareHandlerContext::routineBody() {
  return getRuleContext<MySqlParser::RoutineBodyContext>(0);
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::CONTINUE() {
  return getToken(MySqlParser::CONTINUE, 0);
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::EXIT() {
  return getToken(MySqlParser::EXIT, 0);
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::UNDO() {
  return getToken(MySqlParser::UNDO, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::DeclareHandlerContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::DeclareHandlerContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::DeclareHandlerContext::getRuleIndex() const {
  return MySqlParser::RuleDeclareHandler;
}


MySqlParser::DeclareHandlerContext* MySqlParser::declareHandler() {
  DeclareHandlerContext *_localctx = _tracker.createInstance<DeclareHandlerContext>(_ctx, getState());
  enterRule(_localctx, 376, MySqlParser::RuleDeclareHandler);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4346);
    match(MySqlParser::DECLARE);
    setState(4347);
    dynamic_cast<DeclareHandlerContext *>(_localctx)->handlerAction = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::CONTINUE

    || _la == MySqlParser::EXIT || _la == MySqlParser::UNDO)) {
      dynamic_cast<DeclareHandlerContext *>(_localctx)->handlerAction = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4348);
    match(MySqlParser::HANDLER);
    setState(4349);
    match(MySqlParser::FOR);
    setState(4350);
    handlerConditionValue();
    setState(4355);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4351);
      match(MySqlParser::COMMA);
      setState(4352);
      handlerConditionValue();
      setState(4357);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4358);
    routineBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerConditionValueContext ------------------------------------------------------------------

MySqlParser::HandlerConditionValueContext::HandlerConditionValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::HandlerConditionValueContext::getRuleIndex() const {
  return MySqlParser::RuleHandlerConditionValue;
}

void MySqlParser::HandlerConditionValueContext::copyFrom(HandlerConditionValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- HandlerConditionWarningContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::HandlerConditionWarningContext::SQLWARNING() {
  return getToken(MySqlParser::SQLWARNING, 0);
}

MySqlParser::HandlerConditionWarningContext::HandlerConditionWarningContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }


//----------------- HandlerConditionCodeContext ------------------------------------------------------------------

MySqlParser::DecimalLiteralContext* MySqlParser::HandlerConditionCodeContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::HandlerConditionCodeContext::HandlerConditionCodeContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }


//----------------- HandlerConditionNotfoundContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::HandlerConditionNotfoundContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::HandlerConditionNotfoundContext::FOUND() {
  return getToken(MySqlParser::FOUND, 0);
}

MySqlParser::HandlerConditionNotfoundContext::HandlerConditionNotfoundContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }


//----------------- HandlerConditionStateContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::HandlerConditionStateContext::SQLSTATE() {
  return getToken(MySqlParser::SQLSTATE, 0);
}

tree::TerminalNode* MySqlParser::HandlerConditionStateContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::HandlerConditionStateContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}

MySqlParser::HandlerConditionStateContext::HandlerConditionStateContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }


//----------------- HandlerConditionExceptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::HandlerConditionExceptionContext::SQLEXCEPTION() {
  return getToken(MySqlParser::SQLEXCEPTION, 0);
}

MySqlParser::HandlerConditionExceptionContext::HandlerConditionExceptionContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }


//----------------- HandlerConditionNameContext ------------------------------------------------------------------

MySqlParser::UidContext* MySqlParser::HandlerConditionNameContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::HandlerConditionNameContext::HandlerConditionNameContext(HandlerConditionValueContext *ctx) { copyFrom(ctx); }


MySqlParser::HandlerConditionValueContext* MySqlParser::handlerConditionValue() {
  HandlerConditionValueContext *_localctx = _tracker.createInstance<HandlerConditionValueContext>(_ctx, getState());
  enterRule(_localctx, 378, MySqlParser::RuleHandlerConditionValue);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4371);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySqlParser::HandlerConditionCodeContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4360);
        decimalLiteral();
        break;
      }

      case MySqlParser::SQLSTATE: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySqlParser::HandlerConditionStateContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4361);
        match(MySqlParser::SQLSTATE);
        setState(4363);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::VALUE) {
          setState(4362);
          match(MySqlParser::VALUE);
        }
        setState(4365);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySqlParser::HandlerConditionNameContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(4366);
        uid();
        break;
      }

      case MySqlParser::SQLWARNING: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySqlParser::HandlerConditionWarningContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(4367);
        match(MySqlParser::SQLWARNING);
        break;
      }

      case MySqlParser::NOT: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySqlParser::HandlerConditionNotfoundContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(4368);
        match(MySqlParser::NOT);
        setState(4369);
        match(MySqlParser::FOUND);
        break;
      }

      case MySqlParser::SQLEXCEPTION: {
        _localctx = dynamic_cast<HandlerConditionValueContext *>(_tracker.createInstance<MySqlParser::HandlerConditionExceptionContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(4370);
        match(MySqlParser::SQLEXCEPTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureSqlStatementContext ------------------------------------------------------------------

MySqlParser::ProcedureSqlStatementContext::ProcedureSqlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ProcedureSqlStatementContext::SEMI() {
  return getToken(MySqlParser::SEMI, 0);
}

MySqlParser::CompoundStatementContext* MySqlParser::ProcedureSqlStatementContext::compoundStatement() {
  return getRuleContext<MySqlParser::CompoundStatementContext>(0);
}

MySqlParser::SqlStatementContext* MySqlParser::ProcedureSqlStatementContext::sqlStatement() {
  return getRuleContext<MySqlParser::SqlStatementContext>(0);
}


size_t MySqlParser::ProcedureSqlStatementContext::getRuleIndex() const {
  return MySqlParser::RuleProcedureSqlStatement;
}


MySqlParser::ProcedureSqlStatementContext* MySqlParser::procedureSqlStatement() {
  ProcedureSqlStatementContext *_localctx = _tracker.createInstance<ProcedureSqlStatementContext>(_ctx, getState());
  enterRule(_localctx, 380, MySqlParser::RuleProcedureSqlStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4375);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 628, _ctx)) {
    case 1: {
      setState(4373);
      compoundStatement();
      break;
    }

    case 2: {
      setState(4374);
      sqlStatement();
      break;
    }

    }
    setState(4377);
    match(MySqlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseAlternativeContext ------------------------------------------------------------------

MySqlParser::CaseAlternativeContext::CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CaseAlternativeContext::WHEN() {
  return getToken(MySqlParser::WHEN, 0);
}

tree::TerminalNode* MySqlParser::CaseAlternativeContext::THEN() {
  return getToken(MySqlParser::THEN, 0);
}

MySqlParser::ConstantContext* MySqlParser::CaseAlternativeContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::CaseAlternativeContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::CaseAlternativeContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::CaseAlternativeContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::CaseAlternativeContext::getRuleIndex() const {
  return MySqlParser::RuleCaseAlternative;
}


MySqlParser::CaseAlternativeContext* MySqlParser::caseAlternative() {
  CaseAlternativeContext *_localctx = _tracker.createInstance<CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 382, MySqlParser::RuleCaseAlternative);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4379);
    match(MySqlParser::WHEN);
    setState(4382);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 629, _ctx)) {
    case 1: {
      setState(4380);
      constant();
      break;
    }

    case 2: {
      setState(4381);
      expression(0);
      break;
    }

    }
    setState(4384);
    match(MySqlParser::THEN);
    setState(4386); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4385);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4388); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 630, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElifAlternativeContext ------------------------------------------------------------------

MySqlParser::ElifAlternativeContext::ElifAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ElifAlternativeContext::ELSEIF() {
  return getToken(MySqlParser::ELSEIF, 0);
}

MySqlParser::ExpressionContext* MySqlParser::ElifAlternativeContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::ElifAlternativeContext::THEN() {
  return getToken(MySqlParser::THEN, 0);
}

std::vector<MySqlParser::ProcedureSqlStatementContext *> MySqlParser::ElifAlternativeContext::procedureSqlStatement() {
  return getRuleContexts<MySqlParser::ProcedureSqlStatementContext>();
}

MySqlParser::ProcedureSqlStatementContext* MySqlParser::ElifAlternativeContext::procedureSqlStatement(size_t i) {
  return getRuleContext<MySqlParser::ProcedureSqlStatementContext>(i);
}


size_t MySqlParser::ElifAlternativeContext::getRuleIndex() const {
  return MySqlParser::RuleElifAlternative;
}


MySqlParser::ElifAlternativeContext* MySqlParser::elifAlternative() {
  ElifAlternativeContext *_localctx = _tracker.createInstance<ElifAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 384, MySqlParser::RuleElifAlternative);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4390);
    match(MySqlParser::ELSEIF);
    setState(4391);
    expression(0);
    setState(4392);
    match(MySqlParser::THEN);
    setState(4394); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4393);
              procedureSqlStatement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4396); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 631, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterUserContext ------------------------------------------------------------------

MySqlParser::AlterUserContext::AlterUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::AlterUserContext::getRuleIndex() const {
  return MySqlParser::RuleAlterUser;
}

void MySqlParser::AlterUserContext::copyFrom(AlterUserContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterUserMysqlV56Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterUserMysqlV56Context::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV56Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::UserSpecificationContext *> MySqlParser::AlterUserMysqlV56Context::userSpecification() {
  return getRuleContexts<MySqlParser::UserSpecificationContext>();
}

MySqlParser::UserSpecificationContext* MySqlParser::AlterUserMysqlV56Context::userSpecification(size_t i) {
  return getRuleContext<MySqlParser::UserSpecificationContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterUserMysqlV56Context::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV56Context::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::AlterUserMysqlV56Context::AlterUserMysqlV56Context(AlterUserContext *ctx) { copyFrom(ctx); }


//----------------- AlterUserMysqlV57Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::UserAuthOptionContext *> MySqlParser::AlterUserMysqlV57Context::userAuthOption() {
  return getRuleContexts<MySqlParser::UserAuthOptionContext>();
}

MySqlParser::UserAuthOptionContext* MySqlParser::AlterUserMysqlV57Context::userAuthOption(size_t i) {
  return getRuleContext<MySqlParser::UserAuthOptionContext>(i);
}

MySqlParser::IfExistsContext* MySqlParser::AlterUserMysqlV57Context::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterUserMysqlV57Context::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::REQUIRE() {
  return getToken(MySqlParser::REQUIRE, 0);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

std::vector<MySqlParser::UserPasswordOptionContext *> MySqlParser::AlterUserMysqlV57Context::userPasswordOption() {
  return getRuleContexts<MySqlParser::UserPasswordOptionContext>();
}

MySqlParser::UserPasswordOptionContext* MySqlParser::AlterUserMysqlV57Context::userPasswordOption(size_t i) {
  return getRuleContext<MySqlParser::UserPasswordOptionContext>(i);
}

std::vector<MySqlParser::UserLockOptionContext *> MySqlParser::AlterUserMysqlV57Context::userLockOption() {
  return getRuleContexts<MySqlParser::UserLockOptionContext>();
}

MySqlParser::UserLockOptionContext* MySqlParser::AlterUserMysqlV57Context::userLockOption(size_t i) {
  return getRuleContext<MySqlParser::UserLockOptionContext>(i);
}

std::vector<MySqlParser::TlsOptionContext *> MySqlParser::AlterUserMysqlV57Context::tlsOption() {
  return getRuleContexts<MySqlParser::TlsOptionContext>();
}

MySqlParser::TlsOptionContext* MySqlParser::AlterUserMysqlV57Context::tlsOption(size_t i) {
  return getRuleContext<MySqlParser::TlsOptionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

std::vector<MySqlParser::UserResourceOptionContext *> MySqlParser::AlterUserMysqlV57Context::userResourceOption() {
  return getRuleContexts<MySqlParser::UserResourceOptionContext>();
}

MySqlParser::UserResourceOptionContext* MySqlParser::AlterUserMysqlV57Context::userResourceOption(size_t i) {
  return getRuleContext<MySqlParser::UserResourceOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterUserMysqlV57Context::AND() {
  return getTokens(MySqlParser::AND);
}

tree::TerminalNode* MySqlParser::AlterUserMysqlV57Context::AND(size_t i) {
  return getToken(MySqlParser::AND, i);
}

MySqlParser::AlterUserMysqlV57Context::AlterUserMysqlV57Context(AlterUserContext *ctx) { copyFrom(ctx); }


MySqlParser::AlterUserContext* MySqlParser::alterUser() {
  AlterUserContext *_localctx = _tracker.createInstance<AlterUserContext>(_ctx, getState());
  enterRule(_localctx, 386, MySqlParser::RuleAlterUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4452);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 643, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<AlterUserContext *>(_tracker.createInstance<MySqlParser::AlterUserMysqlV56Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4398);
      match(MySqlParser::ALTER);
      setState(4399);
      match(MySqlParser::USER);
      setState(4400);
      userSpecification();
      setState(4405);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4401);
        match(MySqlParser::COMMA);
        setState(4402);
        userSpecification();
        setState(4407);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<AlterUserContext *>(_tracker.createInstance<MySqlParser::AlterUserMysqlV57Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4408);
      match(MySqlParser::ALTER);
      setState(4409);
      match(MySqlParser::USER);
      setState(4411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(4410);
        ifExists();
      }
      setState(4413);
      userAuthOption();
      setState(4418);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4414);
        match(MySqlParser::COMMA);
        setState(4415);
        userAuthOption();
        setState(4420);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::REQUIRE) {
        setState(4421);
        match(MySqlParser::REQUIRE);
        setState(4433);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::NONE: {
            setState(4422);
            dynamic_cast<AlterUserMysqlV57Context *>(_localctx)->tlsNone = match(MySqlParser::NONE);
            break;
          }

          case MySqlParser::SSL:
          case MySqlParser::CIPHER:
          case MySqlParser::ISSUER:
          case MySqlParser::SUBJECT:
          case MySqlParser::X509: {
            setState(4423);
            tlsOption();
            setState(4430);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == MySqlParser::AND || _la == MySqlParser::SSL || _la == MySqlParser::CIPHER || _la == MySqlParser::ISSUER || _la == MySqlParser::SUBJECT

            || _la == MySqlParser::X509) {
              setState(4425);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == MySqlParser::AND) {
                setState(4424);
                match(MySqlParser::AND);
              }
              setState(4427);
              tlsOption();
              setState(4432);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(4443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4437);
        match(MySqlParser::WITH);
        setState(4439); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4438);
          userResourceOption();
          setState(4441); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 426) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 426)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 426))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 426))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 426))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 426)))) != 0));
      }
      setState(4449);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::ACCOUNT || _la == MySqlParser::PASSWORD) {
        setState(4447);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::PASSWORD: {
            setState(4445);
            userPasswordOption();
            break;
          }

          case MySqlParser::ACCOUNT: {
            setState(4446);
            userLockOption();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4451);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateUserContext ------------------------------------------------------------------

MySqlParser::CreateUserContext::CreateUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::CreateUserContext::getRuleIndex() const {
  return MySqlParser::RuleCreateUser;
}

void MySqlParser::CreateUserContext::copyFrom(CreateUserContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CreateUserMysqlV57Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::UserAuthOptionContext *> MySqlParser::CreateUserMysqlV57Context::userAuthOption() {
  return getRuleContexts<MySqlParser::UserAuthOptionContext>();
}

MySqlParser::UserAuthOptionContext* MySqlParser::CreateUserMysqlV57Context::userAuthOption(size_t i) {
  return getRuleContext<MySqlParser::UserAuthOptionContext>(i);
}

MySqlParser::IfNotExistsContext* MySqlParser::CreateUserMysqlV57Context::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateUserMysqlV57Context::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::REQUIRE() {
  return getToken(MySqlParser::REQUIRE, 0);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

std::vector<MySqlParser::UserPasswordOptionContext *> MySqlParser::CreateUserMysqlV57Context::userPasswordOption() {
  return getRuleContexts<MySqlParser::UserPasswordOptionContext>();
}

MySqlParser::UserPasswordOptionContext* MySqlParser::CreateUserMysqlV57Context::userPasswordOption(size_t i) {
  return getRuleContext<MySqlParser::UserPasswordOptionContext>(i);
}

std::vector<MySqlParser::UserLockOptionContext *> MySqlParser::CreateUserMysqlV57Context::userLockOption() {
  return getRuleContexts<MySqlParser::UserLockOptionContext>();
}

MySqlParser::UserLockOptionContext* MySqlParser::CreateUserMysqlV57Context::userLockOption(size_t i) {
  return getRuleContext<MySqlParser::UserLockOptionContext>(i);
}

std::vector<MySqlParser::TlsOptionContext *> MySqlParser::CreateUserMysqlV57Context::tlsOption() {
  return getRuleContexts<MySqlParser::TlsOptionContext>();
}

MySqlParser::TlsOptionContext* MySqlParser::CreateUserMysqlV57Context::tlsOption(size_t i) {
  return getRuleContext<MySqlParser::TlsOptionContext>(i);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

std::vector<MySqlParser::UserResourceOptionContext *> MySqlParser::CreateUserMysqlV57Context::userResourceOption() {
  return getRuleContexts<MySqlParser::UserResourceOptionContext>();
}

MySqlParser::UserResourceOptionContext* MySqlParser::CreateUserMysqlV57Context::userResourceOption(size_t i) {
  return getRuleContext<MySqlParser::UserResourceOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateUserMysqlV57Context::AND() {
  return getTokens(MySqlParser::AND);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV57Context::AND(size_t i) {
  return getToken(MySqlParser::AND, i);
}

MySqlParser::CreateUserMysqlV57Context::CreateUserMysqlV57Context(CreateUserContext *ctx) { copyFrom(ctx); }


//----------------- CreateUserMysqlV56Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CreateUserMysqlV56Context::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV56Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::UserAuthOptionContext *> MySqlParser::CreateUserMysqlV56Context::userAuthOption() {
  return getRuleContexts<MySqlParser::UserAuthOptionContext>();
}

MySqlParser::UserAuthOptionContext* MySqlParser::CreateUserMysqlV56Context::userAuthOption(size_t i) {
  return getRuleContext<MySqlParser::UserAuthOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateUserMysqlV56Context::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CreateUserMysqlV56Context::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::CreateUserMysqlV56Context::CreateUserMysqlV56Context(CreateUserContext *ctx) { copyFrom(ctx); }


MySqlParser::CreateUserContext* MySqlParser::createUser() {
  CreateUserContext *_localctx = _tracker.createInstance<CreateUserContext>(_ctx, getState());
  enterRule(_localctx, 388, MySqlParser::RuleCreateUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4508);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 655, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<CreateUserContext *>(_tracker.createInstance<MySqlParser::CreateUserMysqlV56Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4454);
      match(MySqlParser::CREATE);
      setState(4455);
      match(MySqlParser::USER);
      setState(4456);
      userAuthOption();
      setState(4461);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4457);
        match(MySqlParser::COMMA);
        setState(4458);
        userAuthOption();
        setState(4463);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<CreateUserContext *>(_tracker.createInstance<MySqlParser::CreateUserMysqlV57Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4464);
      match(MySqlParser::CREATE);
      setState(4465);
      match(MySqlParser::USER);
      setState(4467);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(4466);
        ifNotExists();
      }
      setState(4469);
      userAuthOption();
      setState(4474);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4470);
        match(MySqlParser::COMMA);
        setState(4471);
        userAuthOption();
        setState(4476);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4491);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::REQUIRE) {
        setState(4477);
        match(MySqlParser::REQUIRE);
        setState(4489);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::NONE: {
            setState(4478);
            dynamic_cast<CreateUserMysqlV57Context *>(_localctx)->tlsNone = match(MySqlParser::NONE);
            break;
          }

          case MySqlParser::SSL:
          case MySqlParser::CIPHER:
          case MySqlParser::ISSUER:
          case MySqlParser::SUBJECT:
          case MySqlParser::X509: {
            setState(4479);
            tlsOption();
            setState(4486);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == MySqlParser::AND || _la == MySqlParser::SSL || _la == MySqlParser::CIPHER || _la == MySqlParser::ISSUER || _la == MySqlParser::SUBJECT

            || _la == MySqlParser::X509) {
              setState(4481);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == MySqlParser::AND) {
                setState(4480);
                match(MySqlParser::AND);
              }
              setState(4483);
              tlsOption();
              setState(4488);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(4499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4493);
        match(MySqlParser::WITH);
        setState(4495); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4494);
          userResourceOption();
          setState(4497); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 426) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 426)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 426))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 426))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 426))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 426)))) != 0));
      }
      setState(4505);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::ACCOUNT || _la == MySqlParser::PASSWORD) {
        setState(4503);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::PASSWORD: {
            setState(4501);
            userPasswordOption();
            break;
          }

          case MySqlParser::ACCOUNT: {
            setState(4502);
            userLockOption();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4507);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropUserContext ------------------------------------------------------------------

MySqlParser::DropUserContext::DropUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DropUserContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::DropUserContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::UserNameContext *> MySqlParser::DropUserContext::userName() {
  return getRuleContexts<MySqlParser::UserNameContext>();
}

MySqlParser::UserNameContext* MySqlParser::DropUserContext::userName(size_t i) {
  return getRuleContext<MySqlParser::UserNameContext>(i);
}

MySqlParser::IfExistsContext* MySqlParser::DropUserContext::ifExists() {
  return getRuleContext<MySqlParser::IfExistsContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::DropUserContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::DropUserContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::DropUserContext::getRuleIndex() const {
  return MySqlParser::RuleDropUser;
}


MySqlParser::DropUserContext* MySqlParser::dropUser() {
  DropUserContext *_localctx = _tracker.createInstance<DropUserContext>(_ctx, getState());
  enterRule(_localctx, 390, MySqlParser::RuleDropUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4510);
    match(MySqlParser::DROP);
    setState(4511);
    match(MySqlParser::USER);
    setState(4513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(4512);
      ifExists();
    }
    setState(4515);
    userName();
    setState(4520);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4516);
      match(MySqlParser::COMMA);
      setState(4517);
      userName();
      setState(4522);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GrantStatementContext ------------------------------------------------------------------

MySqlParser::GrantStatementContext::GrantStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::GrantStatementContext::GRANT() {
  return getTokens(MySqlParser::GRANT);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::GRANT(size_t i) {
  return getToken(MySqlParser::GRANT, i);
}

std::vector<MySqlParser::PrivelegeClauseContext *> MySqlParser::GrantStatementContext::privelegeClause() {
  return getRuleContexts<MySqlParser::PrivelegeClauseContext>();
}

MySqlParser::PrivelegeClauseContext* MySqlParser::GrantStatementContext::privelegeClause(size_t i) {
  return getRuleContext<MySqlParser::PrivelegeClauseContext>(i);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::PrivilegeLevelContext* MySqlParser::GrantStatementContext::privilegeLevel() {
  return getRuleContext<MySqlParser::PrivilegeLevelContext>(0);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::UserAuthOptionContext *> MySqlParser::GrantStatementContext::userAuthOption() {
  return getRuleContexts<MySqlParser::UserAuthOptionContext>();
}

MySqlParser::UserAuthOptionContext* MySqlParser::GrantStatementContext::userAuthOption(size_t i) {
  return getRuleContext<MySqlParser::UserAuthOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::GrantStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::REQUIRE() {
  return getToken(MySqlParser::REQUIRE, 0);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

std::vector<MySqlParser::TlsOptionContext *> MySqlParser::GrantStatementContext::tlsOption() {
  return getRuleContexts<MySqlParser::TlsOptionContext>();
}

MySqlParser::TlsOptionContext* MySqlParser::GrantStatementContext::tlsOption(size_t i) {
  return getRuleContext<MySqlParser::TlsOptionContext>(i);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::GrantStatementContext::OPTION() {
  return getTokens(MySqlParser::OPTION);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::OPTION(size_t i) {
  return getToken(MySqlParser::OPTION, i);
}

std::vector<MySqlParser::UserResourceOptionContext *> MySqlParser::GrantStatementContext::userResourceOption() {
  return getRuleContexts<MySqlParser::UserResourceOptionContext>();
}

MySqlParser::UserResourceOptionContext* MySqlParser::GrantStatementContext::userResourceOption(size_t i) {
  return getRuleContext<MySqlParser::UserResourceOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::GrantStatementContext::AND() {
  return getTokens(MySqlParser::AND);
}

tree::TerminalNode* MySqlParser::GrantStatementContext::AND(size_t i) {
  return getToken(MySqlParser::AND, i);
}


size_t MySqlParser::GrantStatementContext::getRuleIndex() const {
  return MySqlParser::RuleGrantStatement;
}


MySqlParser::GrantStatementContext* MySqlParser::grantStatement() {
  GrantStatementContext *_localctx = _tracker.createInstance<GrantStatementContext>(_ctx, getState());
  enterRule(_localctx, 392, MySqlParser::RuleGrantStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4523);
    match(MySqlParser::GRANT);
    setState(4524);
    privelegeClause();
    setState(4529);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4525);
      match(MySqlParser::COMMA);
      setState(4526);
      privelegeClause();
      setState(4531);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4532);
    match(MySqlParser::ON);
    setState(4534);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 659, _ctx)) {
    case 1: {
      setState(4533);
      dynamic_cast<GrantStatementContext *>(_localctx)->privilegeObject = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::PROCEDURE

      || _la == MySqlParser::TABLE || _la == MySqlParser::FUNCTION)) {
        dynamic_cast<GrantStatementContext *>(_localctx)->privilegeObject = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(4536);
    privilegeLevel();
    setState(4537);
    match(MySqlParser::TO);
    setState(4538);
    userAuthOption();
    setState(4543);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4539);
      match(MySqlParser::COMMA);
      setState(4540);
      userAuthOption();
      setState(4545);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4560);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::REQUIRE) {
      setState(4546);
      match(MySqlParser::REQUIRE);
      setState(4558);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::NONE: {
          setState(4547);
          dynamic_cast<GrantStatementContext *>(_localctx)->tlsNone = match(MySqlParser::NONE);
          break;
        }

        case MySqlParser::SSL:
        case MySqlParser::CIPHER:
        case MySqlParser::ISSUER:
        case MySqlParser::SUBJECT:
        case MySqlParser::X509: {
          setState(4548);
          tlsOption();
          setState(4555);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::AND || _la == MySqlParser::SSL || _la == MySqlParser::CIPHER || _la == MySqlParser::ISSUER || _la == MySqlParser::SUBJECT

          || _la == MySqlParser::X509) {
            setState(4550);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::AND) {
              setState(4549);
              match(MySqlParser::AND);
            }
            setState(4552);
            tlsOption();
            setState(4557);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(4571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(4562);
      match(MySqlParser::WITH);
      setState(4568);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 666, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(4566);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case MySqlParser::GRANT: {
              setState(4563);
              match(MySqlParser::GRANT);
              setState(4564);
              match(MySqlParser::OPTION);
              break;
            }

            case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
            case MySqlParser::MAX_QUERIES_PER_HOUR:
            case MySqlParser::MAX_UPDATES_PER_HOUR:
            case MySqlParser::MAX_USER_CONNECTIONS: {
              setState(4565);
              userResourceOption();
              break;
            }

          default:
            throw NoViableAltException(this);
          } 
        }
        setState(4570);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 666, _ctx);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GrantProxyContext ------------------------------------------------------------------

MySqlParser::GrantProxyContext::GrantProxyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::GrantProxyContext::GRANT() {
  return getTokens(MySqlParser::GRANT);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::GRANT(size_t i) {
  return getToken(MySqlParser::GRANT, i);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::UserNameContext *> MySqlParser::GrantProxyContext::userName() {
  return getRuleContexts<MySqlParser::UserNameContext>();
}

MySqlParser::UserNameContext* MySqlParser::GrantProxyContext::userName(size_t i) {
  return getRuleContext<MySqlParser::UserNameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::GrantProxyContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::GrantProxyContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}


size_t MySqlParser::GrantProxyContext::getRuleIndex() const {
  return MySqlParser::RuleGrantProxy;
}


MySqlParser::GrantProxyContext* MySqlParser::grantProxy() {
  GrantProxyContext *_localctx = _tracker.createInstance<GrantProxyContext>(_ctx, getState());
  enterRule(_localctx, 394, MySqlParser::RuleGrantProxy);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4573);
    match(MySqlParser::GRANT);
    setState(4574);
    match(MySqlParser::PROXY);
    setState(4575);
    match(MySqlParser::ON);
    setState(4576);
    dynamic_cast<GrantProxyContext *>(_localctx)->fromFirst = userName();
    setState(4577);
    match(MySqlParser::TO);
    setState(4578);
    dynamic_cast<GrantProxyContext *>(_localctx)->toFirst = userName();
    setState(4583);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4579);
      match(MySqlParser::COMMA);
      setState(4580);
      dynamic_cast<GrantProxyContext *>(_localctx)->userNameContext = userName();
      dynamic_cast<GrantProxyContext *>(_localctx)->toOther.push_back(dynamic_cast<GrantProxyContext *>(_localctx)->userNameContext);
      setState(4585);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4589);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(4586);
      match(MySqlParser::WITH);
      setState(4587);
      match(MySqlParser::GRANT);
      setState(4588);
      match(MySqlParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameUserContext ------------------------------------------------------------------

MySqlParser::RenameUserContext::RenameUserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RenameUserContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::RenameUserContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::RenameUserClauseContext *> MySqlParser::RenameUserContext::renameUserClause() {
  return getRuleContexts<MySqlParser::RenameUserClauseContext>();
}

MySqlParser::RenameUserClauseContext* MySqlParser::RenameUserContext::renameUserClause(size_t i) {
  return getRuleContext<MySqlParser::RenameUserClauseContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::RenameUserContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::RenameUserContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::RenameUserContext::getRuleIndex() const {
  return MySqlParser::RuleRenameUser;
}


MySqlParser::RenameUserContext* MySqlParser::renameUser() {
  RenameUserContext *_localctx = _tracker.createInstance<RenameUserContext>(_ctx, getState());
  enterRule(_localctx, 396, MySqlParser::RuleRenameUser);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4591);
    match(MySqlParser::RENAME);
    setState(4592);
    match(MySqlParser::USER);
    setState(4593);
    renameUserClause();
    setState(4598);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4594);
      match(MySqlParser::COMMA);
      setState(4595);
      renameUserClause();
      setState(4600);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RevokeStatementContext ------------------------------------------------------------------

MySqlParser::RevokeStatementContext::RevokeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::RevokeStatementContext::getRuleIndex() const {
  return MySqlParser::RuleRevokeStatement;
}

void MySqlParser::RevokeStatementContext::copyFrom(RevokeStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DetailRevokeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DetailRevokeContext::REVOKE() {
  return getToken(MySqlParser::REVOKE, 0);
}

std::vector<MySqlParser::PrivelegeClauseContext *> MySqlParser::DetailRevokeContext::privelegeClause() {
  return getRuleContexts<MySqlParser::PrivelegeClauseContext>();
}

MySqlParser::PrivelegeClauseContext* MySqlParser::DetailRevokeContext::privelegeClause(size_t i) {
  return getRuleContext<MySqlParser::PrivelegeClauseContext>(i);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::PrivilegeLevelContext* MySqlParser::DetailRevokeContext::privilegeLevel() {
  return getRuleContext<MySqlParser::PrivilegeLevelContext>(0);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

std::vector<MySqlParser::UserNameContext *> MySqlParser::DetailRevokeContext::userName() {
  return getRuleContexts<MySqlParser::UserNameContext>();
}

MySqlParser::UserNameContext* MySqlParser::DetailRevokeContext::userName(size_t i) {
  return getRuleContext<MySqlParser::UserNameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::DetailRevokeContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::DetailRevokeContext::DetailRevokeContext(RevokeStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShortRevokeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShortRevokeContext::REVOKE() {
  return getToken(MySqlParser::REVOKE, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ShortRevokeContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::GRANT() {
  return getToken(MySqlParser::GRANT, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

std::vector<MySqlParser::UserNameContext *> MySqlParser::ShortRevokeContext::userName() {
  return getRuleContexts<MySqlParser::UserNameContext>();
}

MySqlParser::UserNameContext* MySqlParser::ShortRevokeContext::userName(size_t i) {
  return getRuleContext<MySqlParser::UserNameContext>(i);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

MySqlParser::ShortRevokeContext::ShortRevokeContext(RevokeStatementContext *ctx) { copyFrom(ctx); }


MySqlParser::RevokeStatementContext* MySqlParser::revokeStatement() {
  RevokeStatementContext *_localctx = _tracker.createInstance<RevokeStatementContext>(_ctx, getState());
  enterRule(_localctx, 398, MySqlParser::RuleRevokeStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4641);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 676, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<RevokeStatementContext *>(_tracker.createInstance<MySqlParser::DetailRevokeContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4601);
      match(MySqlParser::REVOKE);
      setState(4602);
      privelegeClause();
      setState(4607);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4603);
        match(MySqlParser::COMMA);
        setState(4604);
        privelegeClause();
        setState(4609);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4610);
      match(MySqlParser::ON);
      setState(4612);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 672, _ctx)) {
      case 1: {
        setState(4611);
        dynamic_cast<DetailRevokeContext *>(_localctx)->privilegeObject = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::PROCEDURE

        || _la == MySqlParser::TABLE || _la == MySqlParser::FUNCTION)) {
          dynamic_cast<DetailRevokeContext *>(_localctx)->privilegeObject = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(4614);
      privilegeLevel();
      setState(4615);
      match(MySqlParser::FROM);
      setState(4616);
      userName();
      setState(4621);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4617);
        match(MySqlParser::COMMA);
        setState(4618);
        userName();
        setState(4623);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<RevokeStatementContext *>(_tracker.createInstance<MySqlParser::ShortRevokeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4624);
      match(MySqlParser::REVOKE);
      setState(4625);
      match(MySqlParser::ALL);
      setState(4627);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PRIVILEGES) {
        setState(4626);
        match(MySqlParser::PRIVILEGES);
      }
      setState(4629);
      match(MySqlParser::COMMA);
      setState(4630);
      match(MySqlParser::GRANT);
      setState(4631);
      match(MySqlParser::OPTION);
      setState(4632);
      match(MySqlParser::FROM);
      setState(4633);
      userName();
      setState(4638);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4634);
        match(MySqlParser::COMMA);
        setState(4635);
        userName();
        setState(4640);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RevokeProxyContext ------------------------------------------------------------------

MySqlParser::RevokeProxyContext::RevokeProxyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RevokeProxyContext::REVOKE() {
  return getToken(MySqlParser::REVOKE, 0);
}

tree::TerminalNode* MySqlParser::RevokeProxyContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::RevokeProxyContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::RevokeProxyContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

std::vector<MySqlParser::UserNameContext *> MySqlParser::RevokeProxyContext::userName() {
  return getRuleContexts<MySqlParser::UserNameContext>();
}

MySqlParser::UserNameContext* MySqlParser::RevokeProxyContext::userName(size_t i) {
  return getRuleContext<MySqlParser::UserNameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::RevokeProxyContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::RevokeProxyContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::RevokeProxyContext::getRuleIndex() const {
  return MySqlParser::RuleRevokeProxy;
}


MySqlParser::RevokeProxyContext* MySqlParser::revokeProxy() {
  RevokeProxyContext *_localctx = _tracker.createInstance<RevokeProxyContext>(_ctx, getState());
  enterRule(_localctx, 400, MySqlParser::RuleRevokeProxy);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4643);
    match(MySqlParser::REVOKE);
    setState(4644);
    match(MySqlParser::PROXY);
    setState(4645);
    match(MySqlParser::ON);
    setState(4646);
    dynamic_cast<RevokeProxyContext *>(_localctx)->onUser = userName();
    setState(4647);
    match(MySqlParser::FROM);
    setState(4648);
    dynamic_cast<RevokeProxyContext *>(_localctx)->fromFirst = userName();
    setState(4653);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4649);
      match(MySqlParser::COMMA);
      setState(4650);
      dynamic_cast<RevokeProxyContext *>(_localctx)->userNameContext = userName();
      dynamic_cast<RevokeProxyContext *>(_localctx)->fromOther.push_back(dynamic_cast<RevokeProxyContext *>(_localctx)->userNameContext);
      setState(4655);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetPasswordStatementContext ------------------------------------------------------------------

MySqlParser::SetPasswordStatementContext::SetPasswordStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SetPasswordStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SetPasswordStatementContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::SetPasswordStatementContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

MySqlParser::PasswordFunctionClauseContext* MySqlParser::SetPasswordStatementContext::passwordFunctionClause() {
  return getRuleContext<MySqlParser::PasswordFunctionClauseContext>(0);
}

tree::TerminalNode* MySqlParser::SetPasswordStatementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::SetPasswordStatementContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::UserNameContext* MySqlParser::SetPasswordStatementContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}


size_t MySqlParser::SetPasswordStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSetPasswordStatement;
}


MySqlParser::SetPasswordStatementContext* MySqlParser::setPasswordStatement() {
  SetPasswordStatementContext *_localctx = _tracker.createInstance<SetPasswordStatementContext>(_ctx, getState());
  enterRule(_localctx, 402, MySqlParser::RuleSetPasswordStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4656);
    match(MySqlParser::SET);
    setState(4657);
    match(MySqlParser::PASSWORD);
    setState(4660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(4658);
      match(MySqlParser::FOR);
      setState(4659);
      userName();
    }
    setState(4662);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(4665);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::PASSWORD: {
        setState(4663);
        passwordFunctionClause();
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        setState(4664);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserSpecificationContext ------------------------------------------------------------------

MySqlParser::UserSpecificationContext::UserSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UserNameContext* MySqlParser::UserSpecificationContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

MySqlParser::UserPasswordOptionContext* MySqlParser::UserSpecificationContext::userPasswordOption() {
  return getRuleContext<MySqlParser::UserPasswordOptionContext>(0);
}


size_t MySqlParser::UserSpecificationContext::getRuleIndex() const {
  return MySqlParser::RuleUserSpecification;
}


MySqlParser::UserSpecificationContext* MySqlParser::userSpecification() {
  UserSpecificationContext *_localctx = _tracker.createInstance<UserSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 404, MySqlParser::RuleUserSpecification);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4667);
    userName();
    setState(4668);
    userPasswordOption();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserAuthOptionContext ------------------------------------------------------------------

MySqlParser::UserAuthOptionContext::UserAuthOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::UserAuthOptionContext::getRuleIndex() const {
  return MySqlParser::RuleUserAuthOption;
}

void MySqlParser::UserAuthOptionContext::copyFrom(UserAuthOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SimpleAuthOptionContext ------------------------------------------------------------------

MySqlParser::UserNameContext* MySqlParser::SimpleAuthOptionContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

MySqlParser::SimpleAuthOptionContext::SimpleAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }


//----------------- PasswordAuthOptionContext ------------------------------------------------------------------

MySqlParser::UserNameContext* MySqlParser::PasswordAuthOptionContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

tree::TerminalNode* MySqlParser::PasswordAuthOptionContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::PasswordAuthOptionContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::PasswordAuthOptionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::PasswordAuthOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::PasswordAuthOptionContext::PasswordAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }


//----------------- StringAuthOptionContext ------------------------------------------------------------------

MySqlParser::UserNameContext* MySqlParser::StringAuthOptionContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

tree::TerminalNode* MySqlParser::StringAuthOptionContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::StringAuthOptionContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::StringAuthOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::StringAuthOptionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

MySqlParser::AuthPluginContext* MySqlParser::StringAuthOptionContext::authPlugin() {
  return getRuleContext<MySqlParser::AuthPluginContext>(0);
}

MySqlParser::StringAuthOptionContext::StringAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }


//----------------- HashAuthOptionContext ------------------------------------------------------------------

MySqlParser::UserNameContext* MySqlParser::HashAuthOptionContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

tree::TerminalNode* MySqlParser::HashAuthOptionContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::HashAuthOptionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

MySqlParser::AuthPluginContext* MySqlParser::HashAuthOptionContext::authPlugin() {
  return getRuleContext<MySqlParser::AuthPluginContext>(0);
}

tree::TerminalNode* MySqlParser::HashAuthOptionContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

tree::TerminalNode* MySqlParser::HashAuthOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::HashAuthOptionContext::HashAuthOptionContext(UserAuthOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::UserAuthOptionContext* MySqlParser::userAuthOption() {
  UserAuthOptionContext *_localctx = _tracker.createInstance<UserAuthOptionContext>(_ctx, getState());
  enterRule(_localctx, 406, MySqlParser::RuleUserAuthOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4694);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 682, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySqlParser::PasswordAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4670);
      userName();
      setState(4671);
      match(MySqlParser::IDENTIFIED);
      setState(4672);
      match(MySqlParser::BY);
      setState(4673);
      match(MySqlParser::PASSWORD);
      setState(4674);
      dynamic_cast<PasswordAuthOptionContext *>(_localctx)->hashed = match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySqlParser::StringAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4676);
      userName();
      setState(4677);
      match(MySqlParser::IDENTIFIED);
      setState(4680);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4678);
        match(MySqlParser::WITH);
        setState(4679);
        authPlugin();
      }
      setState(4682);
      match(MySqlParser::BY);
      setState(4683);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySqlParser::HashAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4685);
      userName();
      setState(4686);
      match(MySqlParser::IDENTIFIED);
      setState(4687);
      match(MySqlParser::WITH);
      setState(4688);
      authPlugin();
      setState(4691);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(4689);
        match(MySqlParser::AS);
        setState(4690);
        match(MySqlParser::STRING_LITERAL);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<UserAuthOptionContext *>(_tracker.createInstance<MySqlParser::SimpleAuthOptionContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4693);
      userName();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TlsOptionContext ------------------------------------------------------------------

MySqlParser::TlsOptionContext::TlsOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TlsOptionContext::SSL() {
  return getToken(MySqlParser::SSL, 0);
}

tree::TerminalNode* MySqlParser::TlsOptionContext::X509() {
  return getToken(MySqlParser::X509, 0);
}

tree::TerminalNode* MySqlParser::TlsOptionContext::CIPHER() {
  return getToken(MySqlParser::CIPHER, 0);
}

tree::TerminalNode* MySqlParser::TlsOptionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::TlsOptionContext::ISSUER() {
  return getToken(MySqlParser::ISSUER, 0);
}

tree::TerminalNode* MySqlParser::TlsOptionContext::SUBJECT() {
  return getToken(MySqlParser::SUBJECT, 0);
}


size_t MySqlParser::TlsOptionContext::getRuleIndex() const {
  return MySqlParser::RuleTlsOption;
}


MySqlParser::TlsOptionContext* MySqlParser::tlsOption() {
  TlsOptionContext *_localctx = _tracker.createInstance<TlsOptionContext>(_ctx, getState());
  enterRule(_localctx, 408, MySqlParser::RuleTlsOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4704);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SSL: {
        enterOuterAlt(_localctx, 1);
        setState(4696);
        match(MySqlParser::SSL);
        break;
      }

      case MySqlParser::X509: {
        enterOuterAlt(_localctx, 2);
        setState(4697);
        match(MySqlParser::X509);
        break;
      }

      case MySqlParser::CIPHER: {
        enterOuterAlt(_localctx, 3);
        setState(4698);
        match(MySqlParser::CIPHER);
        setState(4699);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::ISSUER: {
        enterOuterAlt(_localctx, 4);
        setState(4700);
        match(MySqlParser::ISSUER);
        setState(4701);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::SUBJECT: {
        enterOuterAlt(_localctx, 5);
        setState(4702);
        match(MySqlParser::SUBJECT);
        setState(4703);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserResourceOptionContext ------------------------------------------------------------------

MySqlParser::UserResourceOptionContext::UserResourceOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UserResourceOptionContext::MAX_QUERIES_PER_HOUR() {
  return getToken(MySqlParser::MAX_QUERIES_PER_HOUR, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::UserResourceOptionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::UserResourceOptionContext::MAX_UPDATES_PER_HOUR() {
  return getToken(MySqlParser::MAX_UPDATES_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::UserResourceOptionContext::MAX_CONNECTIONS_PER_HOUR() {
  return getToken(MySqlParser::MAX_CONNECTIONS_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::UserResourceOptionContext::MAX_USER_CONNECTIONS() {
  return getToken(MySqlParser::MAX_USER_CONNECTIONS, 0);
}


size_t MySqlParser::UserResourceOptionContext::getRuleIndex() const {
  return MySqlParser::RuleUserResourceOption;
}


MySqlParser::UserResourceOptionContext* MySqlParser::userResourceOption() {
  UserResourceOptionContext *_localctx = _tracker.createInstance<UserResourceOptionContext>(_ctx, getState());
  enterRule(_localctx, 410, MySqlParser::RuleUserResourceOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4714);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::MAX_QUERIES_PER_HOUR: {
        enterOuterAlt(_localctx, 1);
        setState(4706);
        match(MySqlParser::MAX_QUERIES_PER_HOUR);
        setState(4707);
        decimalLiteral();
        break;
      }

      case MySqlParser::MAX_UPDATES_PER_HOUR: {
        enterOuterAlt(_localctx, 2);
        setState(4708);
        match(MySqlParser::MAX_UPDATES_PER_HOUR);
        setState(4709);
        decimalLiteral();
        break;
      }

      case MySqlParser::MAX_CONNECTIONS_PER_HOUR: {
        enterOuterAlt(_localctx, 3);
        setState(4710);
        match(MySqlParser::MAX_CONNECTIONS_PER_HOUR);
        setState(4711);
        decimalLiteral();
        break;
      }

      case MySqlParser::MAX_USER_CONNECTIONS: {
        enterOuterAlt(_localctx, 4);
        setState(4712);
        match(MySqlParser::MAX_USER_CONNECTIONS);
        setState(4713);
        decimalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserPasswordOptionContext ------------------------------------------------------------------

MySqlParser::UserPasswordOptionContext::UserPasswordOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UserPasswordOptionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::UserPasswordOptionContext::EXPIRE() {
  return getToken(MySqlParser::EXPIRE, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::UserPasswordOptionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::UserPasswordOptionContext::DAY() {
  return getToken(MySqlParser::DAY, 0);
}

tree::TerminalNode* MySqlParser::UserPasswordOptionContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::UserPasswordOptionContext::NEVER() {
  return getToken(MySqlParser::NEVER, 0);
}

tree::TerminalNode* MySqlParser::UserPasswordOptionContext::INTERVAL() {
  return getToken(MySqlParser::INTERVAL, 0);
}


size_t MySqlParser::UserPasswordOptionContext::getRuleIndex() const {
  return MySqlParser::RuleUserPasswordOption;
}


MySqlParser::UserPasswordOptionContext* MySqlParser::userPasswordOption() {
  UserPasswordOptionContext *_localctx = _tracker.createInstance<UserPasswordOptionContext>(_ctx, getState());
  enterRule(_localctx, 412, MySqlParser::RuleUserPasswordOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4716);
    match(MySqlParser::PASSWORD);
    setState(4717);
    match(MySqlParser::EXPIRE);
    setState(4724);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DEFAULT: {
        setState(4718);
        dynamic_cast<UserPasswordOptionContext *>(_localctx)->expireType = match(MySqlParser::DEFAULT);
        break;
      }

      case MySqlParser::NEVER: {
        setState(4719);
        dynamic_cast<UserPasswordOptionContext *>(_localctx)->expireType = match(MySqlParser::NEVER);
        break;
      }

      case MySqlParser::INTERVAL: {
        setState(4720);
        dynamic_cast<UserPasswordOptionContext *>(_localctx)->expireType = match(MySqlParser::INTERVAL);
        setState(4721);
        decimalLiteral();
        setState(4722);
        match(MySqlParser::DAY);
        break;
      }

      case MySqlParser::EOF:
      case MySqlParser::ALTER:
      case MySqlParser::ANALYZE:
      case MySqlParser::CALL:
      case MySqlParser::CHANGE:
      case MySqlParser::CHECK:
      case MySqlParser::CREATE:
      case MySqlParser::DELETE:
      case MySqlParser::DESC:
      case MySqlParser::DESCRIBE:
      case MySqlParser::DROP:
      case MySqlParser::EXPLAIN:
      case MySqlParser::GET:
      case MySqlParser::GRANT:
      case MySqlParser::INSERT:
      case MySqlParser::KILL:
      case MySqlParser::LOAD:
      case MySqlParser::LOCK:
      case MySqlParser::OPTIMIZE:
      case MySqlParser::PURGE:
      case MySqlParser::RELEASE:
      case MySqlParser::RENAME:
      case MySqlParser::REPLACE:
      case MySqlParser::RESIGNAL:
      case MySqlParser::REVOKE:
      case MySqlParser::SELECT:
      case MySqlParser::SET:
      case MySqlParser::SHOW:
      case MySqlParser::SIGNAL:
      case MySqlParser::UNLOCK:
      case MySqlParser::UPDATE:
      case MySqlParser::USE:
      case MySqlParser::ACCOUNT:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::CACHE:
      case MySqlParser::CHECKSUM:
      case MySqlParser::COMMIT:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DO:
      case MySqlParser::FLUSH:
      case MySqlParser::HANDLER:
      case MySqlParser::HELP:
      case MySqlParser::INSTALL:
      case MySqlParser::PASSWORD:
      case MySqlParser::PREPARE:
      case MySqlParser::REPAIR:
      case MySqlParser::RESET:
      case MySqlParser::ROLLBACK:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::START:
      case MySqlParser::STOP:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::XA:
      case MySqlParser::EXECUTE:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::MINUSMINUS:
      case MySqlParser::LR_BRACKET:
      case MySqlParser::COMMA:
      case MySqlParser::SEMI: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserLockOptionContext ------------------------------------------------------------------

MySqlParser::UserLockOptionContext::UserLockOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UserLockOptionContext::ACCOUNT() {
  return getToken(MySqlParser::ACCOUNT, 0);
}

tree::TerminalNode* MySqlParser::UserLockOptionContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::UserLockOptionContext::UNLOCK() {
  return getToken(MySqlParser::UNLOCK, 0);
}


size_t MySqlParser::UserLockOptionContext::getRuleIndex() const {
  return MySqlParser::RuleUserLockOption;
}


MySqlParser::UserLockOptionContext* MySqlParser::userLockOption() {
  UserLockOptionContext *_localctx = _tracker.createInstance<UserLockOptionContext>(_ctx, getState());
  enterRule(_localctx, 414, MySqlParser::RuleUserLockOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4726);
    match(MySqlParser::ACCOUNT);
    setState(4727);
    dynamic_cast<UserLockOptionContext *>(_localctx)->lockType = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::LOCK || _la == MySqlParser::UNLOCK)) {
      dynamic_cast<UserLockOptionContext *>(_localctx)->lockType = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivelegeClauseContext ------------------------------------------------------------------

MySqlParser::PrivelegeClauseContext::PrivelegeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::PrivilegeContext* MySqlParser::PrivelegeClauseContext::privilege() {
  return getRuleContext<MySqlParser::PrivilegeContext>(0);
}

tree::TerminalNode* MySqlParser::PrivelegeClauseContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::PrivelegeClauseContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::PrivelegeClauseContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}


size_t MySqlParser::PrivelegeClauseContext::getRuleIndex() const {
  return MySqlParser::RulePrivelegeClause;
}


MySqlParser::PrivelegeClauseContext* MySqlParser::privelegeClause() {
  PrivelegeClauseContext *_localctx = _tracker.createInstance<PrivelegeClauseContext>(_ctx, getState());
  enterRule(_localctx, 416, MySqlParser::RulePrivelegeClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4729);
    privilege();
    setState(4734);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(4730);
      match(MySqlParser::LR_BRACKET);
      setState(4731);
      uidList();
      setState(4732);
      match(MySqlParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeContext ------------------------------------------------------------------

MySqlParser::PrivilegeContext::PrivilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ROUTINE() {
  return getToken(MySqlParser::ROUTINE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ROLE() {
  return getToken(MySqlParser::ROLE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::EXECUTE() {
  return getToken(MySqlParser::EXECUTE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FILE() {
  return getToken(MySqlParser::FILE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::GRANT() {
  return getToken(MySqlParser::GRANT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PROCESS() {
  return getToken(MySqlParser::PROCESS, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::REFERENCES() {
  return getToken(MySqlParser::REFERENCES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::RELOAD() {
  return getToken(MySqlParser::RELOAD, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::REPLICATION() {
  return getToken(MySqlParser::REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::CLIENT() {
  return getToken(MySqlParser::CLIENT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SELECT() {
  return getToken(MySqlParser::SELECT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::DATABASES() {
  return getToken(MySqlParser::DATABASES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SHUTDOWN() {
  return getToken(MySqlParser::SHUTDOWN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SUPER() {
  return getToken(MySqlParser::SUPER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::USAGE() {
  return getToken(MySqlParser::USAGE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::APPLICATION_PASSWORD_ADMIN() {
  return getToken(MySqlParser::APPLICATION_PASSWORD_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::AUDIT_ADMIN() {
  return getToken(MySqlParser::AUDIT_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::BACKUP_ADMIN() {
  return getToken(MySqlParser::BACKUP_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::BINLOG_ADMIN() {
  return getToken(MySqlParser::BINLOG_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::BINLOG_ENCRYPTION_ADMIN() {
  return getToken(MySqlParser::BINLOG_ENCRYPTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::CLONE_ADMIN() {
  return getToken(MySqlParser::CLONE_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::CONNECTION_ADMIN() {
  return getToken(MySqlParser::CONNECTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ENCRYPTION_KEY_ADMIN() {
  return getToken(MySqlParser::ENCRYPTION_KEY_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FIREWALL_ADMIN() {
  return getToken(MySqlParser::FIREWALL_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FIREWALL_USER() {
  return getToken(MySqlParser::FIREWALL_USER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FLUSH_OPTIMIZER_COSTS() {
  return getToken(MySqlParser::FLUSH_OPTIMIZER_COSTS, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FLUSH_STATUS() {
  return getToken(MySqlParser::FLUSH_STATUS, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FLUSH_TABLES() {
  return getToken(MySqlParser::FLUSH_TABLES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FLUSH_USER_RESOURCES() {
  return getToken(MySqlParser::FLUSH_USER_RESOURCES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::GROUP_REPLICATION_ADMIN() {
  return getToken(MySqlParser::GROUP_REPLICATION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::INNODB_REDO_LOG_ARCHIVE() {
  return getToken(MySqlParser::INNODB_REDO_LOG_ARCHIVE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::INNODB_REDO_LOG_ENABLE() {
  return getToken(MySqlParser::INNODB_REDO_LOG_ENABLE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::NDB_STORED_USER() {
  return getToken(MySqlParser::NDB_STORED_USER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PERSIST_RO_VARIABLES_ADMIN() {
  return getToken(MySqlParser::PERSIST_RO_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::REPLICATION_APPLIER() {
  return getToken(MySqlParser::REPLICATION_APPLIER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::REPLICATION_SLAVE_ADMIN() {
  return getToken(MySqlParser::REPLICATION_SLAVE_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::RESOURCE_GROUP_ADMIN() {
  return getToken(MySqlParser::RESOURCE_GROUP_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::RESOURCE_GROUP_USER() {
  return getToken(MySqlParser::RESOURCE_GROUP_USER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ROLE_ADMIN() {
  return getToken(MySqlParser::ROLE_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SERVICE_CONNECTION_ADMIN() {
  return getToken(MySqlParser::SERVICE_CONNECTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SESSION_VARIABLES_ADMIN() {
  return getToken(MySqlParser::SESSION_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SET_USER_ID() {
  return getToken(MySqlParser::SET_USER_ID, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SHOW_ROUTINE() {
  return getToken(MySqlParser::SHOW_ROUTINE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SYSTEM_USER() {
  return getToken(MySqlParser::SYSTEM_USER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SYSTEM_VARIABLES_ADMIN() {
  return getToken(MySqlParser::SYSTEM_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TABLE_ENCRYPTION_ADMIN() {
  return getToken(MySqlParser::TABLE_ENCRYPTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::VERSION_TOKEN_ADMIN() {
  return getToken(MySqlParser::VERSION_TOKEN_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::XA_RECOVER_ADMIN() {
  return getToken(MySqlParser::XA_RECOVER_ADMIN, 0);
}


size_t MySqlParser::PrivilegeContext::getRuleIndex() const {
  return MySqlParser::RulePrivilege;
}


MySqlParser::PrivilegeContext* MySqlParser::privilege() {
  PrivilegeContext *_localctx = _tracker.createInstance<PrivilegeContext>(_ctx, getState());
  enterRule(_localctx, 418, MySqlParser::RulePrivilege);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4815);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(4736);
        match(MySqlParser::ALL);
        setState(4738);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::PRIVILEGES) {
          setState(4737);
          match(MySqlParser::PRIVILEGES);
        }
        break;
      }

      case MySqlParser::ALTER: {
        enterOuterAlt(_localctx, 2);
        setState(4740);
        match(MySqlParser::ALTER);
        setState(4742);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ROUTINE) {
          setState(4741);
          match(MySqlParser::ROUTINE);
        }
        break;
      }

      case MySqlParser::CREATE: {
        enterOuterAlt(_localctx, 3);
        setState(4744);
        match(MySqlParser::CREATE);
        setState(4752);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::TEMPORARY: {
            setState(4745);
            match(MySqlParser::TEMPORARY);
            setState(4746);
            match(MySqlParser::TABLES);
            break;
          }

          case MySqlParser::ROUTINE: {
            setState(4747);
            match(MySqlParser::ROUTINE);
            break;
          }

          case MySqlParser::VIEW: {
            setState(4748);
            match(MySqlParser::VIEW);
            break;
          }

          case MySqlParser::USER: {
            setState(4749);
            match(MySqlParser::USER);
            break;
          }

          case MySqlParser::TABLESPACE: {
            setState(4750);
            match(MySqlParser::TABLESPACE);
            break;
          }

          case MySqlParser::ROLE: {
            setState(4751);
            match(MySqlParser::ROLE);
            break;
          }

          case MySqlParser::ON:
          case MySqlParser::LR_BRACKET:
          case MySqlParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case MySqlParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(4754);
        match(MySqlParser::DELETE);
        break;
      }

      case MySqlParser::DROP: {
        enterOuterAlt(_localctx, 5);
        setState(4755);
        match(MySqlParser::DROP);
        setState(4757);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ROLE) {
          setState(4756);
          match(MySqlParser::ROLE);
        }
        break;
      }

      case MySqlParser::EVENT: {
        enterOuterAlt(_localctx, 6);
        setState(4759);
        match(MySqlParser::EVENT);
        break;
      }

      case MySqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 7);
        setState(4760);
        match(MySqlParser::EXECUTE);
        break;
      }

      case MySqlParser::FILE: {
        enterOuterAlt(_localctx, 8);
        setState(4761);
        match(MySqlParser::FILE);
        break;
      }

      case MySqlParser::GRANT: {
        enterOuterAlt(_localctx, 9);
        setState(4762);
        match(MySqlParser::GRANT);
        setState(4763);
        match(MySqlParser::OPTION);
        break;
      }

      case MySqlParser::INDEX: {
        enterOuterAlt(_localctx, 10);
        setState(4764);
        match(MySqlParser::INDEX);
        break;
      }

      case MySqlParser::INSERT: {
        enterOuterAlt(_localctx, 11);
        setState(4765);
        match(MySqlParser::INSERT);
        break;
      }

      case MySqlParser::LOCK: {
        enterOuterAlt(_localctx, 12);
        setState(4766);
        match(MySqlParser::LOCK);
        setState(4767);
        match(MySqlParser::TABLES);
        break;
      }

      case MySqlParser::PROCESS: {
        enterOuterAlt(_localctx, 13);
        setState(4768);
        match(MySqlParser::PROCESS);
        break;
      }

      case MySqlParser::PROXY: {
        enterOuterAlt(_localctx, 14);
        setState(4769);
        match(MySqlParser::PROXY);
        break;
      }

      case MySqlParser::REFERENCES: {
        enterOuterAlt(_localctx, 15);
        setState(4770);
        match(MySqlParser::REFERENCES);
        break;
      }

      case MySqlParser::RELOAD: {
        enterOuterAlt(_localctx, 16);
        setState(4771);
        match(MySqlParser::RELOAD);
        break;
      }

      case MySqlParser::REPLICATION: {
        enterOuterAlt(_localctx, 17);
        setState(4772);
        match(MySqlParser::REPLICATION);
        setState(4773);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CLIENT || _la == MySqlParser::SLAVE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::SELECT: {
        enterOuterAlt(_localctx, 18);
        setState(4774);
        match(MySqlParser::SELECT);
        break;
      }

      case MySqlParser::SHOW: {
        enterOuterAlt(_localctx, 19);
        setState(4775);
        match(MySqlParser::SHOW);
        setState(4776);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DATABASES || _la == MySqlParser::VIEW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::SHUTDOWN: {
        enterOuterAlt(_localctx, 20);
        setState(4777);
        match(MySqlParser::SHUTDOWN);
        break;
      }

      case MySqlParser::SUPER: {
        enterOuterAlt(_localctx, 21);
        setState(4778);
        match(MySqlParser::SUPER);
        break;
      }

      case MySqlParser::TRIGGER: {
        enterOuterAlt(_localctx, 22);
        setState(4779);
        match(MySqlParser::TRIGGER);
        break;
      }

      case MySqlParser::UPDATE: {
        enterOuterAlt(_localctx, 23);
        setState(4780);
        match(MySqlParser::UPDATE);
        break;
      }

      case MySqlParser::USAGE: {
        enterOuterAlt(_localctx, 24);
        setState(4781);
        match(MySqlParser::USAGE);
        break;
      }

      case MySqlParser::APPLICATION_PASSWORD_ADMIN: {
        enterOuterAlt(_localctx, 25);
        setState(4782);
        match(MySqlParser::APPLICATION_PASSWORD_ADMIN);
        break;
      }

      case MySqlParser::AUDIT_ADMIN: {
        enterOuterAlt(_localctx, 26);
        setState(4783);
        match(MySqlParser::AUDIT_ADMIN);
        break;
      }

      case MySqlParser::BACKUP_ADMIN: {
        enterOuterAlt(_localctx, 27);
        setState(4784);
        match(MySqlParser::BACKUP_ADMIN);
        break;
      }

      case MySqlParser::BINLOG_ADMIN: {
        enterOuterAlt(_localctx, 28);
        setState(4785);
        match(MySqlParser::BINLOG_ADMIN);
        break;
      }

      case MySqlParser::BINLOG_ENCRYPTION_ADMIN: {
        enterOuterAlt(_localctx, 29);
        setState(4786);
        match(MySqlParser::BINLOG_ENCRYPTION_ADMIN);
        break;
      }

      case MySqlParser::CLONE_ADMIN: {
        enterOuterAlt(_localctx, 30);
        setState(4787);
        match(MySqlParser::CLONE_ADMIN);
        break;
      }

      case MySqlParser::CONNECTION_ADMIN: {
        enterOuterAlt(_localctx, 31);
        setState(4788);
        match(MySqlParser::CONNECTION_ADMIN);
        break;
      }

      case MySqlParser::ENCRYPTION_KEY_ADMIN: {
        enterOuterAlt(_localctx, 32);
        setState(4789);
        match(MySqlParser::ENCRYPTION_KEY_ADMIN);
        break;
      }

      case MySqlParser::FIREWALL_ADMIN: {
        enterOuterAlt(_localctx, 33);
        setState(4790);
        match(MySqlParser::FIREWALL_ADMIN);
        break;
      }

      case MySqlParser::FIREWALL_USER: {
        enterOuterAlt(_localctx, 34);
        setState(4791);
        match(MySqlParser::FIREWALL_USER);
        break;
      }

      case MySqlParser::FLUSH_OPTIMIZER_COSTS: {
        enterOuterAlt(_localctx, 35);
        setState(4792);
        match(MySqlParser::FLUSH_OPTIMIZER_COSTS);
        break;
      }

      case MySqlParser::FLUSH_STATUS: {
        enterOuterAlt(_localctx, 36);
        setState(4793);
        match(MySqlParser::FLUSH_STATUS);
        break;
      }

      case MySqlParser::FLUSH_TABLES: {
        enterOuterAlt(_localctx, 37);
        setState(4794);
        match(MySqlParser::FLUSH_TABLES);
        break;
      }

      case MySqlParser::FLUSH_USER_RESOURCES: {
        enterOuterAlt(_localctx, 38);
        setState(4795);
        match(MySqlParser::FLUSH_USER_RESOURCES);
        break;
      }

      case MySqlParser::GROUP_REPLICATION_ADMIN: {
        enterOuterAlt(_localctx, 39);
        setState(4796);
        match(MySqlParser::GROUP_REPLICATION_ADMIN);
        break;
      }

      case MySqlParser::INNODB_REDO_LOG_ARCHIVE: {
        enterOuterAlt(_localctx, 40);
        setState(4797);
        match(MySqlParser::INNODB_REDO_LOG_ARCHIVE);
        break;
      }

      case MySqlParser::INNODB_REDO_LOG_ENABLE: {
        enterOuterAlt(_localctx, 41);
        setState(4798);
        match(MySqlParser::INNODB_REDO_LOG_ENABLE);
        break;
      }

      case MySqlParser::NDB_STORED_USER: {
        enterOuterAlt(_localctx, 42);
        setState(4799);
        match(MySqlParser::NDB_STORED_USER);
        break;
      }

      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN: {
        enterOuterAlt(_localctx, 43);
        setState(4800);
        match(MySqlParser::PERSIST_RO_VARIABLES_ADMIN);
        break;
      }

      case MySqlParser::REPLICATION_APPLIER: {
        enterOuterAlt(_localctx, 44);
        setState(4801);
        match(MySqlParser::REPLICATION_APPLIER);
        break;
      }

      case MySqlParser::REPLICATION_SLAVE_ADMIN: {
        enterOuterAlt(_localctx, 45);
        setState(4802);
        match(MySqlParser::REPLICATION_SLAVE_ADMIN);
        break;
      }

      case MySqlParser::RESOURCE_GROUP_ADMIN: {
        enterOuterAlt(_localctx, 46);
        setState(4803);
        match(MySqlParser::RESOURCE_GROUP_ADMIN);
        break;
      }

      case MySqlParser::RESOURCE_GROUP_USER: {
        enterOuterAlt(_localctx, 47);
        setState(4804);
        match(MySqlParser::RESOURCE_GROUP_USER);
        break;
      }

      case MySqlParser::ROLE_ADMIN: {
        enterOuterAlt(_localctx, 48);
        setState(4805);
        match(MySqlParser::ROLE_ADMIN);
        break;
      }

      case MySqlParser::SERVICE_CONNECTION_ADMIN: {
        enterOuterAlt(_localctx, 49);
        setState(4806);
        match(MySqlParser::SERVICE_CONNECTION_ADMIN);
        break;
      }

      case MySqlParser::SESSION_VARIABLES_ADMIN: {
        enterOuterAlt(_localctx, 50);
        setState(4807);
        match(MySqlParser::SESSION_VARIABLES_ADMIN);
        break;
      }

      case MySqlParser::SET_USER_ID: {
        enterOuterAlt(_localctx, 51);
        setState(4808);
        match(MySqlParser::SET_USER_ID);
        break;
      }

      case MySqlParser::SHOW_ROUTINE: {
        enterOuterAlt(_localctx, 52);
        setState(4809);
        match(MySqlParser::SHOW_ROUTINE);
        break;
      }

      case MySqlParser::SYSTEM_USER: {
        enterOuterAlt(_localctx, 53);
        setState(4810);
        match(MySqlParser::SYSTEM_USER);
        break;
      }

      case MySqlParser::SYSTEM_VARIABLES_ADMIN: {
        enterOuterAlt(_localctx, 54);
        setState(4811);
        match(MySqlParser::SYSTEM_VARIABLES_ADMIN);
        break;
      }

      case MySqlParser::TABLE_ENCRYPTION_ADMIN: {
        enterOuterAlt(_localctx, 55);
        setState(4812);
        match(MySqlParser::TABLE_ENCRYPTION_ADMIN);
        break;
      }

      case MySqlParser::VERSION_TOKEN_ADMIN: {
        enterOuterAlt(_localctx, 56);
        setState(4813);
        match(MySqlParser::VERSION_TOKEN_ADMIN);
        break;
      }

      case MySqlParser::XA_RECOVER_ADMIN: {
        enterOuterAlt(_localctx, 57);
        setState(4814);
        match(MySqlParser::XA_RECOVER_ADMIN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeLevelContext ------------------------------------------------------------------

MySqlParser::PrivilegeLevelContext::PrivilegeLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::PrivilegeLevelContext::getRuleIndex() const {
  return MySqlParser::RulePrivilegeLevel;
}

void MySqlParser::PrivilegeLevelContext::copyFrom(PrivilegeLevelContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DefiniteSchemaPrivLevelContext ------------------------------------------------------------------

MySqlParser::UidContext* MySqlParser::DefiniteSchemaPrivLevelContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::DefiniteSchemaPrivLevelContext::DOT() {
  return getToken(MySqlParser::DOT, 0);
}

tree::TerminalNode* MySqlParser::DefiniteSchemaPrivLevelContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

MySqlParser::DefiniteSchemaPrivLevelContext::DefiniteSchemaPrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }


//----------------- DefiniteFullTablePrivLevel2Context ------------------------------------------------------------------

MySqlParser::UidContext* MySqlParser::DefiniteFullTablePrivLevel2Context::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::DottedIdContext* MySqlParser::DefiniteFullTablePrivLevel2Context::dottedId() {
  return getRuleContext<MySqlParser::DottedIdContext>(0);
}

MySqlParser::DefiniteFullTablePrivLevel2Context::DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext *ctx) { copyFrom(ctx); }


//----------------- DefiniteFullTablePrivLevelContext ------------------------------------------------------------------

std::vector<MySqlParser::UidContext *> MySqlParser::DefiniteFullTablePrivLevelContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::DefiniteFullTablePrivLevelContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::DefiniteFullTablePrivLevelContext::DOT() {
  return getToken(MySqlParser::DOT, 0);
}

MySqlParser::DefiniteFullTablePrivLevelContext::DefiniteFullTablePrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }


//----------------- GlobalPrivLevelContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MySqlParser::GlobalPrivLevelContext::STAR() {
  return getTokens(MySqlParser::STAR);
}

tree::TerminalNode* MySqlParser::GlobalPrivLevelContext::STAR(size_t i) {
  return getToken(MySqlParser::STAR, i);
}

tree::TerminalNode* MySqlParser::GlobalPrivLevelContext::DOT() {
  return getToken(MySqlParser::DOT, 0);
}

MySqlParser::GlobalPrivLevelContext::GlobalPrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }


//----------------- DefiniteTablePrivLevelContext ------------------------------------------------------------------

MySqlParser::UidContext* MySqlParser::DefiniteTablePrivLevelContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::DefiniteTablePrivLevelContext::DefiniteTablePrivLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }


//----------------- CurrentSchemaPriviLevelContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CurrentSchemaPriviLevelContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

MySqlParser::CurrentSchemaPriviLevelContext::CurrentSchemaPriviLevelContext(PrivilegeLevelContext *ctx) { copyFrom(ctx); }


MySqlParser::PrivilegeLevelContext* MySqlParser::privilegeLevel() {
  PrivilegeLevelContext *_localctx = _tracker.createInstance<PrivilegeLevelContext>(_ctx, getState());
  enterRule(_localctx, 420, MySqlParser::RulePrivilegeLevel);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4833);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 692, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySqlParser::CurrentSchemaPriviLevelContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4817);
      match(MySqlParser::STAR);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySqlParser::GlobalPrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4818);
      match(MySqlParser::STAR);
      setState(4819);
      match(MySqlParser::DOT);
      setState(4820);
      match(MySqlParser::STAR);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySqlParser::DefiniteSchemaPrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4821);
      uid();
      setState(4822);
      match(MySqlParser::DOT);
      setState(4823);
      match(MySqlParser::STAR);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySqlParser::DefiniteFullTablePrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4825);
      uid();
      setState(4826);
      match(MySqlParser::DOT);
      setState(4827);
      uid();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySqlParser::DefiniteFullTablePrivLevel2Context>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4829);
      uid();
      setState(4830);
      dottedId();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<PrivilegeLevelContext *>(_tracker.createInstance<MySqlParser::DefiniteTablePrivLevelContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(4832);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RenameUserClauseContext ------------------------------------------------------------------

MySqlParser::RenameUserClauseContext::RenameUserClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RenameUserClauseContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::UserNameContext *> MySqlParser::RenameUserClauseContext::userName() {
  return getRuleContexts<MySqlParser::UserNameContext>();
}

MySqlParser::UserNameContext* MySqlParser::RenameUserClauseContext::userName(size_t i) {
  return getRuleContext<MySqlParser::UserNameContext>(i);
}


size_t MySqlParser::RenameUserClauseContext::getRuleIndex() const {
  return MySqlParser::RuleRenameUserClause;
}


MySqlParser::RenameUserClauseContext* MySqlParser::renameUserClause() {
  RenameUserClauseContext *_localctx = _tracker.createInstance<RenameUserClauseContext>(_ctx, getState());
  enterRule(_localctx, 422, MySqlParser::RuleRenameUserClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4835);
    dynamic_cast<RenameUserClauseContext *>(_localctx)->fromFirst = userName();
    setState(4836);
    match(MySqlParser::TO);
    setState(4837);
    dynamic_cast<RenameUserClauseContext *>(_localctx)->toFirst = userName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnalyzeTableContext ------------------------------------------------------------------

MySqlParser::AnalyzeTableContext::AnalyzeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AnalyzeTableContext::ANALYZE() {
  return getToken(MySqlParser::ANALYZE, 0);
}

tree::TerminalNode* MySqlParser::AnalyzeTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TablesContext* MySqlParser::AnalyzeTableContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::AnalyzeTableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::AnalyzeTableContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::AnalyzeTableContext::getRuleIndex() const {
  return MySqlParser::RuleAnalyzeTable;
}


MySqlParser::AnalyzeTableContext* MySqlParser::analyzeTable() {
  AnalyzeTableContext *_localctx = _tracker.createInstance<AnalyzeTableContext>(_ctx, getState());
  enterRule(_localctx, 424, MySqlParser::RuleAnalyzeTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4839);
    match(MySqlParser::ANALYZE);
    setState(4841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4840);
      dynamic_cast<AnalyzeTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
        dynamic_cast<AnalyzeTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4843);
    match(MySqlParser::TABLE);
    setState(4844);
    tables();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CheckTableContext ------------------------------------------------------------------

MySqlParser::CheckTableContext::CheckTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CheckTableContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::CheckTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TablesContext* MySqlParser::CheckTableContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

std::vector<MySqlParser::CheckTableOptionContext *> MySqlParser::CheckTableContext::checkTableOption() {
  return getRuleContexts<MySqlParser::CheckTableOptionContext>();
}

MySqlParser::CheckTableOptionContext* MySqlParser::CheckTableContext::checkTableOption(size_t i) {
  return getRuleContext<MySqlParser::CheckTableOptionContext>(i);
}


size_t MySqlParser::CheckTableContext::getRuleIndex() const {
  return MySqlParser::RuleCheckTable;
}


MySqlParser::CheckTableContext* MySqlParser::checkTable() {
  CheckTableContext *_localctx = _tracker.createInstance<CheckTableContext>(_ctx, getState());
  enterRule(_localctx, 426, MySqlParser::RuleCheckTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4846);
    match(MySqlParser::CHECK);
    setState(4847);
    match(MySqlParser::TABLE);
    setState(4848);
    tables();
    setState(4852);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::FOR || _la == MySqlParser::CHANGED

    || _la == MySqlParser::EXTENDED || _la == MySqlParser::FAST || _la == MySqlParser::MEDIUM

    || _la == MySqlParser::QUICK) {
      setState(4849);
      checkTableOption();
      setState(4854);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChecksumTableContext ------------------------------------------------------------------

MySqlParser::ChecksumTableContext::ChecksumTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ChecksumTableContext::CHECKSUM() {
  return getToken(MySqlParser::CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::ChecksumTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TablesContext* MySqlParser::ChecksumTableContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::ChecksumTableContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::ChecksumTableContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}


size_t MySqlParser::ChecksumTableContext::getRuleIndex() const {
  return MySqlParser::RuleChecksumTable;
}


MySqlParser::ChecksumTableContext* MySqlParser::checksumTable() {
  ChecksumTableContext *_localctx = _tracker.createInstance<ChecksumTableContext>(_ctx, getState());
  enterRule(_localctx, 428, MySqlParser::RuleChecksumTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4855);
    match(MySqlParser::CHECKSUM);
    setState(4856);
    match(MySqlParser::TABLE);
    setState(4857);
    tables();
    setState(4859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENDED || _la == MySqlParser::QUICK) {
      setState(4858);
      dynamic_cast<ChecksumTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::EXTENDED || _la == MySqlParser::QUICK)) {
        dynamic_cast<ChecksumTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptimizeTableContext ------------------------------------------------------------------

MySqlParser::OptimizeTableContext::OptimizeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::OptimizeTableContext::OPTIMIZE() {
  return getToken(MySqlParser::OPTIMIZE, 0);
}

MySqlParser::TablesContext* MySqlParser::OptimizeTableContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::OptimizeTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::OptimizeTableContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::OptimizeTableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::OptimizeTableContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::OptimizeTableContext::getRuleIndex() const {
  return MySqlParser::RuleOptimizeTable;
}


MySqlParser::OptimizeTableContext* MySqlParser::optimizeTable() {
  OptimizeTableContext *_localctx = _tracker.createInstance<OptimizeTableContext>(_ctx, getState());
  enterRule(_localctx, 430, MySqlParser::RuleOptimizeTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4861);
    match(MySqlParser::OPTIMIZE);
    setState(4863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4862);
      dynamic_cast<OptimizeTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
        dynamic_cast<OptimizeTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4865);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::TABLE || _la == MySqlParser::TABLES)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4866);
    tables();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepairTableContext ------------------------------------------------------------------

MySqlParser::RepairTableContext::RepairTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RepairTableContext::REPAIR() {
  return getToken(MySqlParser::REPAIR, 0);
}

tree::TerminalNode* MySqlParser::RepairTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::TablesContext* MySqlParser::RepairTableContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

tree::TerminalNode* MySqlParser::RepairTableContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::RepairTableContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::RepairTableContext::USE_FRM() {
  return getToken(MySqlParser::USE_FRM, 0);
}

tree::TerminalNode* MySqlParser::RepairTableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::RepairTableContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::RepairTableContext::getRuleIndex() const {
  return MySqlParser::RuleRepairTable;
}


MySqlParser::RepairTableContext* MySqlParser::repairTable() {
  RepairTableContext *_localctx = _tracker.createInstance<RepairTableContext>(_ctx, getState());
  enterRule(_localctx, 432, MySqlParser::RuleRepairTable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4868);
    match(MySqlParser::REPAIR);
    setState(4870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4869);
      dynamic_cast<RepairTableContext *>(_localctx)->actionOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
        dynamic_cast<RepairTableContext *>(_localctx)->actionOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4872);
    match(MySqlParser::TABLE);
    setState(4873);
    tables();
    setState(4875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::QUICK) {
      setState(4874);
      match(MySqlParser::QUICK);
    }
    setState(4878);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENDED) {
      setState(4877);
      match(MySqlParser::EXTENDED);
    }
    setState(4881);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::USE_FRM) {
      setState(4880);
      match(MySqlParser::USE_FRM);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CheckTableOptionContext ------------------------------------------------------------------

MySqlParser::CheckTableOptionContext::CheckTableOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::FAST() {
  return getToken(MySqlParser::FAST, 0);
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::MEDIUM() {
  return getToken(MySqlParser::MEDIUM, 0);
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::CheckTableOptionContext::CHANGED() {
  return getToken(MySqlParser::CHANGED, 0);
}


size_t MySqlParser::CheckTableOptionContext::getRuleIndex() const {
  return MySqlParser::RuleCheckTableOption;
}


MySqlParser::CheckTableOptionContext* MySqlParser::checkTableOption() {
  CheckTableOptionContext *_localctx = _tracker.createInstance<CheckTableOptionContext>(_ctx, getState());
  enterRule(_localctx, 434, MySqlParser::RuleCheckTableOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4890);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(4883);
        match(MySqlParser::FOR);
        setState(4884);
        match(MySqlParser::UPGRADE);
        break;
      }

      case MySqlParser::QUICK: {
        enterOuterAlt(_localctx, 2);
        setState(4885);
        match(MySqlParser::QUICK);
        break;
      }

      case MySqlParser::FAST: {
        enterOuterAlt(_localctx, 3);
        setState(4886);
        match(MySqlParser::FAST);
        break;
      }

      case MySqlParser::MEDIUM: {
        enterOuterAlt(_localctx, 4);
        setState(4887);
        match(MySqlParser::MEDIUM);
        break;
      }

      case MySqlParser::EXTENDED: {
        enterOuterAlt(_localctx, 5);
        setState(4888);
        match(MySqlParser::EXTENDED);
        break;
      }

      case MySqlParser::CHANGED: {
        enterOuterAlt(_localctx, 6);
        setState(4889);
        match(MySqlParser::CHANGED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateUdfunctionContext ------------------------------------------------------------------

MySqlParser::CreateUdfunctionContext::CreateUdfunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::UidContext* MySqlParser::CreateUdfunctionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::RETURNS() {
  return getToken(MySqlParser::RETURNS, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::SONAME() {
  return getToken(MySqlParser::SONAME, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::STRING() {
  return getToken(MySqlParser::STRING, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::INTEGER() {
  return getToken(MySqlParser::INTEGER, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::REAL() {
  return getToken(MySqlParser::REAL, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::DECIMAL() {
  return getToken(MySqlParser::DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::CreateUdfunctionContext::AGGREGATE() {
  return getToken(MySqlParser::AGGREGATE, 0);
}


size_t MySqlParser::CreateUdfunctionContext::getRuleIndex() const {
  return MySqlParser::RuleCreateUdfunction;
}


MySqlParser::CreateUdfunctionContext* MySqlParser::createUdfunction() {
  CreateUdfunctionContext *_localctx = _tracker.createInstance<CreateUdfunctionContext>(_ctx, getState());
  enterRule(_localctx, 436, MySqlParser::RuleCreateUdfunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4892);
    match(MySqlParser::CREATE);
    setState(4894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AGGREGATE) {
      setState(4893);
      match(MySqlParser::AGGREGATE);
    }
    setState(4896);
    match(MySqlParser::FUNCTION);
    setState(4897);
    uid();
    setState(4898);
    match(MySqlParser::RETURNS);
    setState(4899);
    dynamic_cast<CreateUdfunctionContext *>(_localctx)->returnType = _input->LT(1);
    _la = _input->LA(1);
    if (!(((((_la - 188) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 188)) & ((1ULL << (MySqlParser::INTEGER - 188))
      | (1ULL << (MySqlParser::REAL - 188))
      | (1ULL << (MySqlParser::DECIMAL - 188)))) != 0) || _la == MySqlParser::STRING)) {
      dynamic_cast<CreateUdfunctionContext *>(_localctx)->returnType = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4900);
    match(MySqlParser::SONAME);
    setState(4901);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstallPluginContext ------------------------------------------------------------------

MySqlParser::InstallPluginContext::InstallPluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::InstallPluginContext::INSTALL() {
  return getToken(MySqlParser::INSTALL, 0);
}

tree::TerminalNode* MySqlParser::InstallPluginContext::PLUGIN() {
  return getToken(MySqlParser::PLUGIN, 0);
}

MySqlParser::UidContext* MySqlParser::InstallPluginContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::InstallPluginContext::SONAME() {
  return getToken(MySqlParser::SONAME, 0);
}

tree::TerminalNode* MySqlParser::InstallPluginContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::InstallPluginContext::getRuleIndex() const {
  return MySqlParser::RuleInstallPlugin;
}


MySqlParser::InstallPluginContext* MySqlParser::installPlugin() {
  InstallPluginContext *_localctx = _tracker.createInstance<InstallPluginContext>(_ctx, getState());
  enterRule(_localctx, 438, MySqlParser::RuleInstallPlugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4903);
    match(MySqlParser::INSTALL);
    setState(4904);
    match(MySqlParser::PLUGIN);
    setState(4905);
    uid();
    setState(4906);
    match(MySqlParser::SONAME);
    setState(4907);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UninstallPluginContext ------------------------------------------------------------------

MySqlParser::UninstallPluginContext::UninstallPluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UninstallPluginContext::UNINSTALL() {
  return getToken(MySqlParser::UNINSTALL, 0);
}

tree::TerminalNode* MySqlParser::UninstallPluginContext::PLUGIN() {
  return getToken(MySqlParser::PLUGIN, 0);
}

MySqlParser::UidContext* MySqlParser::UninstallPluginContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::UninstallPluginContext::getRuleIndex() const {
  return MySqlParser::RuleUninstallPlugin;
}


MySqlParser::UninstallPluginContext* MySqlParser::uninstallPlugin() {
  UninstallPluginContext *_localctx = _tracker.createInstance<UninstallPluginContext>(_ctx, getState());
  enterRule(_localctx, 440, MySqlParser::RuleUninstallPlugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4909);
    match(MySqlParser::UNINSTALL);
    setState(4910);
    match(MySqlParser::PLUGIN);
    setState(4911);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetStatementContext ------------------------------------------------------------------

MySqlParser::SetStatementContext::SetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::SetStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSetStatement;
}

void MySqlParser::SetStatementContext::copyFrom(SetStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SetTransactionContext ------------------------------------------------------------------

MySqlParser::SetTransactionStatementContext* MySqlParser::SetTransactionContext::setTransactionStatement() {
  return getRuleContext<MySqlParser::SetTransactionStatementContext>(0);
}

MySqlParser::SetTransactionContext::SetTransactionContext(SetStatementContext *ctx) { copyFrom(ctx); }


//----------------- SetCharsetContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MySqlParser::SetCharsetContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::SetCharsetContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::SetCharsetContext::SetCharsetContext(SetStatementContext *ctx) { copyFrom(ctx); }


//----------------- SetNamesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SetNamesContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SetNamesContext::NAMES() {
  return getToken(MySqlParser::NAMES, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::SetNamesContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::SetNamesContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::SetNamesContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::SetNamesContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

MySqlParser::SetNamesContext::SetNamesContext(SetStatementContext *ctx) { copyFrom(ctx); }


//----------------- SetPasswordContext ------------------------------------------------------------------

MySqlParser::SetPasswordStatementContext* MySqlParser::SetPasswordContext::setPasswordStatement() {
  return getRuleContext<MySqlParser::SetPasswordStatementContext>(0);
}

MySqlParser::SetPasswordContext::SetPasswordContext(SetStatementContext *ctx) { copyFrom(ctx); }


//----------------- SetAutocommitContext ------------------------------------------------------------------

MySqlParser::SetAutocommitStatementContext* MySqlParser::SetAutocommitContext::setAutocommitStatement() {
  return getRuleContext<MySqlParser::SetAutocommitStatementContext>(0);
}

MySqlParser::SetAutocommitContext::SetAutocommitContext(SetStatementContext *ctx) { copyFrom(ctx); }


//----------------- SetNewValueInsideTriggerContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SetNewValueInsideTriggerContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::FullIdContext *> MySqlParser::SetNewValueInsideTriggerContext::fullId() {
  return getRuleContexts<MySqlParser::FullIdContext>();
}

MySqlParser::FullIdContext* MySqlParser::SetNewValueInsideTriggerContext::fullId(size_t i) {
  return getRuleContext<MySqlParser::FullIdContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::SetNewValueInsideTriggerContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::SetNewValueInsideTriggerContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetNewValueInsideTriggerContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::SetNewValueInsideTriggerContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetNewValueInsideTriggerContext::VAR_ASSIGN() {
  return getTokens(MySqlParser::VAR_ASSIGN);
}

tree::TerminalNode* MySqlParser::SetNewValueInsideTriggerContext::VAR_ASSIGN(size_t i) {
  return getToken(MySqlParser::VAR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetNewValueInsideTriggerContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SetNewValueInsideTriggerContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::SetNewValueInsideTriggerContext::SetNewValueInsideTriggerContext(SetStatementContext *ctx) { copyFrom(ctx); }


//----------------- SetVariableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SetVariableContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::VariableClauseContext *> MySqlParser::SetVariableContext::variableClause() {
  return getRuleContexts<MySqlParser::VariableClauseContext>();
}

MySqlParser::VariableClauseContext* MySqlParser::SetVariableContext::variableClause(size_t i) {
  return getRuleContext<MySqlParser::VariableClauseContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::SetVariableContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::SetVariableContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetVariableContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::SetVariableContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetVariableContext::VAR_ASSIGN() {
  return getTokens(MySqlParser::VAR_ASSIGN);
}

tree::TerminalNode* MySqlParser::SetVariableContext::VAR_ASSIGN(size_t i) {
  return getToken(MySqlParser::VAR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SetVariableContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SetVariableContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::SetVariableContext::SetVariableContext(SetStatementContext *ctx) { copyFrom(ctx); }


MySqlParser::SetStatementContext* MySqlParser::setStatement() {
  SetStatementContext *_localctx = _tracker.createInstance<SetStatementContext>(_ctx, getState());
  enterRule(_localctx, 442, MySqlParser::RuleSetStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4964);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 709, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetVariableContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4913);
      match(MySqlParser::SET);
      setState(4914);
      variableClause();
      setState(4915);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::VAR_ASSIGN

      || _la == MySqlParser::EQUAL_SYMBOL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4916);
      expression(0);
      setState(4924);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4917);
        match(MySqlParser::COMMA);
        setState(4918);
        variableClause();
        setState(4919);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::VAR_ASSIGN

        || _la == MySqlParser::EQUAL_SYMBOL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4920);
        expression(0);
        setState(4926);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4927);
      match(MySqlParser::SET);
      setState(4931);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CHARACTER: {
          setState(4928);
          match(MySqlParser::CHARACTER);
          setState(4929);
          match(MySqlParser::SET);
          break;
        }

        case MySqlParser::CHARSET: {
          setState(4930);
          match(MySqlParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4935);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::BINARY:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL: {
          setState(4933);
          charsetName();
          break;
        }

        case MySqlParser::DEFAULT: {
          setState(4934);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetNamesContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4937);
      match(MySqlParser::SET);
      setState(4938);
      match(MySqlParser::NAMES);
      setState(4945);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::BINARY:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL: {
          setState(4939);
          charsetName();
          setState(4942);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::COLLATE) {
            setState(4940);
            match(MySqlParser::COLLATE);
            setState(4941);
            collationName();
          }
          break;
        }

        case MySqlParser::DEFAULT: {
          setState(4944);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetPasswordContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4947);
      setPasswordStatement();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetTransactionContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4948);
      setTransactionStatement();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetAutocommitContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(4949);
      setAutocommitStatement();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<SetStatementContext *>(_tracker.createInstance<MySqlParser::SetNewValueInsideTriggerContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(4950);
      match(MySqlParser::SET);
      setState(4951);
      fullId();
      setState(4952);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::VAR_ASSIGN

      || _la == MySqlParser::EQUAL_SYMBOL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4953);
      expression(0);
      setState(4961);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4954);
        match(MySqlParser::COMMA);
        setState(4955);
        fullId();
        setState(4956);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::VAR_ASSIGN

        || _la == MySqlParser::EQUAL_SYMBOL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4957);
        expression(0);
        setState(4963);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowStatementContext ------------------------------------------------------------------

MySqlParser::ShowStatementContext::ShowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ShowStatementContext::getRuleIndex() const {
  return MySqlParser::RuleShowStatement;
}

void MySqlParser::ShowStatementContext::copyFrom(ShowStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ShowOpenTablesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowOpenTablesContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowOpenTablesContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}

tree::TerminalNode* MySqlParser::ShowOpenTablesContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

MySqlParser::UidContext* MySqlParser::ShowOpenTablesContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::ShowFilterContext* MySqlParser::ShowOpenTablesContext::showFilter() {
  return getRuleContext<MySqlParser::ShowFilterContext>(0);
}

tree::TerminalNode* MySqlParser::ShowOpenTablesContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ShowOpenTablesContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::ShowOpenTablesContext::ShowOpenTablesContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowGlobalInfoContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowGlobalInfoContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::ShowGlobalInfoClauseContext* MySqlParser::ShowGlobalInfoContext::showGlobalInfoClause() {
  return getRuleContext<MySqlParser::ShowGlobalInfoClauseContext>(0);
}

MySqlParser::ShowGlobalInfoContext::ShowGlobalInfoContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowCreateFullIdObjectContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

MySqlParser::FullIdContext* MySqlParser::ShowCreateFullIdObjectContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullIdObjectContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

MySqlParser::ShowCreateFullIdObjectContext::ShowCreateFullIdObjectContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowCreateUserContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCreateUserContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateUserContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateUserContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

MySqlParser::UserNameContext* MySqlParser::ShowCreateUserContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

MySqlParser::ShowCreateUserContext::ShowCreateUserContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowErrorsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowErrorsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowErrorsContext::ERRORS() {
  return getToken(MySqlParser::ERRORS, 0);
}

tree::TerminalNode* MySqlParser::ShowErrorsContext::WARNINGS() {
  return getToken(MySqlParser::WARNINGS, 0);
}

tree::TerminalNode* MySqlParser::ShowErrorsContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::ShowErrorsContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::ShowErrorsContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::ShowErrorsContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

MySqlParser::ShowErrorsContext::ShowErrorsContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowCountErrorsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::ERRORS() {
  return getToken(MySqlParser::ERRORS, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrorsContext::WARNINGS() {
  return getToken(MySqlParser::WARNINGS, 0);
}

MySqlParser::ShowCountErrorsContext::ShowCountErrorsContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowObjectFilterContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowObjectFilterContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::ShowCommonEntityContext* MySqlParser::ShowObjectFilterContext::showCommonEntity() {
  return getRuleContext<MySqlParser::ShowCommonEntityContext>(0);
}

MySqlParser::ShowFilterContext* MySqlParser::ShowObjectFilterContext::showFilter() {
  return getRuleContext<MySqlParser::ShowFilterContext>(0);
}

MySqlParser::ShowObjectFilterContext::ShowObjectFilterContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowCreateDbContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCreateDbContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateDbContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

MySqlParser::UidContext* MySqlParser::ShowCreateDbContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::ShowCreateDbContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateDbContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::IfNotExistsContext* MySqlParser::ShowCreateDbContext::ifNotExists() {
  return getRuleContext<MySqlParser::IfNotExistsContext>(0);
}

MySqlParser::ShowCreateDbContext::ShowCreateDbContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowEngineContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowEngineContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::EngineNameContext* MySqlParser::ShowEngineContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

tree::TerminalNode* MySqlParser::ShowEngineContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowEngineContext::MUTEX() {
  return getToken(MySqlParser::MUTEX, 0);
}

MySqlParser::ShowEngineContext::ShowEngineContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowSchemaFilterContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowSchemaFilterContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::ShowSchemaEntityContext* MySqlParser::ShowSchemaFilterContext::showSchemaEntity() {
  return getRuleContext<MySqlParser::ShowSchemaEntityContext>(0);
}

MySqlParser::UidContext* MySqlParser::ShowSchemaFilterContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::ShowFilterContext* MySqlParser::ShowSchemaFilterContext::showFilter() {
  return getRuleContext<MySqlParser::ShowFilterContext>(0);
}

tree::TerminalNode* MySqlParser::ShowSchemaFilterContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ShowSchemaFilterContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::ShowSchemaFilterContext::ShowSchemaFilterContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowIndexesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowIndexesContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::TableNameContext* MySqlParser::ShowIndexesContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::INDEXES() {
  return getToken(MySqlParser::INDEXES, 0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::KEYS() {
  return getToken(MySqlParser::KEYS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowIndexesContext::FROM() {
  return getTokens(MySqlParser::FROM);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::FROM(size_t i) {
  return getToken(MySqlParser::FROM, i);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowIndexesContext::IN() {
  return getTokens(MySqlParser::IN);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::IN(size_t i) {
  return getToken(MySqlParser::IN, i);
}

MySqlParser::UidContext* MySqlParser::ShowIndexesContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::ShowIndexesContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::ShowIndexesContext::ShowIndexesContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowLogEventsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowLogEventsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::EVENTS() {
  return getToken(MySqlParser::EVENTS, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::BINLOG() {
  return getToken(MySqlParser::BINLOG, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::RELAYLOG() {
  return getToken(MySqlParser::RELAYLOG, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::ShowLogEventsContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::ShowLogEventsContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::ShowLogEventsContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

MySqlParser::ShowLogEventsContext::ShowLogEventsContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowMasterLogsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowMasterLogsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowMasterLogsContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::ShowMasterLogsContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::ShowMasterLogsContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

MySqlParser::ShowMasterLogsContext::ShowMasterLogsContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowGrantsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowGrantsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowGrantsContext::GRANTS() {
  return getToken(MySqlParser::GRANTS, 0);
}

tree::TerminalNode* MySqlParser::ShowGrantsContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::UserNameContext* MySqlParser::ShowGrantsContext::userName() {
  return getRuleContext<MySqlParser::UserNameContext>(0);
}

MySqlParser::ShowGrantsContext::ShowGrantsContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowSlaveStatusContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowSlaveStatusContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowSlaveStatusContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::ShowSlaveStatusContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowSlaveStatusContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ShowSlaveStatusContext::CHANNEL() {
  return getToken(MySqlParser::CHANNEL, 0);
}

tree::TerminalNode* MySqlParser::ShowSlaveStatusContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::ShowSlaveStatusContext::ShowSlaveStatusContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowRoutineContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowRoutineContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowRoutineContext::CODE() {
  return getToken(MySqlParser::CODE, 0);
}

MySqlParser::FullIdContext* MySqlParser::ShowRoutineContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::ShowRoutineContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::ShowRoutineContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::ShowRoutineContext::ShowRoutineContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowProfileContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowProfileContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::PROFILE() {
  return getToken(MySqlParser::PROFILE, 0);
}

std::vector<MySqlParser::ShowProfileTypeContext *> MySqlParser::ShowProfileContext::showProfileType() {
  return getRuleContexts<MySqlParser::ShowProfileTypeContext>();
}

MySqlParser::ShowProfileTypeContext* MySqlParser::ShowProfileContext::showProfileType(size_t i) {
  return getRuleContext<MySqlParser::ShowProfileTypeContext>(i);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowProfileContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::ShowProfileContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::ShowProfileContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

MySqlParser::ShowProfileContext::ShowProfileContext(ShowStatementContext *ctx) { copyFrom(ctx); }


//----------------- ShowColumnsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowColumnsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::TableNameContext* MySqlParser::ShowColumnsContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowColumnsContext::FROM() {
  return getTokens(MySqlParser::FROM);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::FROM(size_t i) {
  return getToken(MySqlParser::FROM, i);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowColumnsContext::IN() {
  return getTokens(MySqlParser::IN);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::IN(size_t i) {
  return getToken(MySqlParser::IN, i);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

MySqlParser::UidContext* MySqlParser::ShowColumnsContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::ShowFilterContext* MySqlParser::ShowColumnsContext::showFilter() {
  return getRuleContext<MySqlParser::ShowFilterContext>(0);
}

MySqlParser::ShowColumnsContext::ShowColumnsContext(ShowStatementContext *ctx) { copyFrom(ctx); }


MySqlParser::ShowStatementContext* MySqlParser::showStatement() {
  ShowStatementContext *_localctx = _tracker.createInstance<ShowStatementContext>(_ctx, getState());
  enterRule(_localctx, 444, MySqlParser::RuleShowStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5117);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 731, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowMasterLogsContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4966);
      match(MySqlParser::SHOW);
      setState(4967);
      dynamic_cast<ShowMasterLogsContext *>(_localctx)->logFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::BINARY || _la == MySqlParser::MASTER)) {
        dynamic_cast<ShowMasterLogsContext *>(_localctx)->logFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4968);
      match(MySqlParser::LOGS);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowLogEventsContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4969);
      match(MySqlParser::SHOW);
      setState(4970);
      dynamic_cast<ShowLogEventsContext *>(_localctx)->logFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::BINLOG || _la == MySqlParser::RELAYLOG)) {
        dynamic_cast<ShowLogEventsContext *>(_localctx)->logFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4971);
      match(MySqlParser::EVENTS);
      setState(4974);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IN) {
        setState(4972);
        match(MySqlParser::IN);
        setState(4973);
        dynamic_cast<ShowLogEventsContext *>(_localctx)->filename = match(MySqlParser::STRING_LITERAL);
      }
      setState(4978);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM) {
        setState(4976);
        match(MySqlParser::FROM);
        setState(4977);
        dynamic_cast<ShowLogEventsContext *>(_localctx)->fromPosition = decimalLiteral();
      }
      setState(4987);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIMIT) {
        setState(4980);
        match(MySqlParser::LIMIT);
        setState(4984);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 712, _ctx)) {
        case 1: {
          setState(4981);
          dynamic_cast<ShowLogEventsContext *>(_localctx)->offset = decimalLiteral();
          setState(4982);
          match(MySqlParser::COMMA);
          break;
        }

        }
        setState(4986);
        dynamic_cast<ShowLogEventsContext *>(_localctx)->rowCount = decimalLiteral();
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowObjectFilterContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4989);
      match(MySqlParser::SHOW);
      setState(4990);
      showCommonEntity();
      setState(4992);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(4991);
        showFilter();
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowColumnsContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4994);
      match(MySqlParser::SHOW);
      setState(4996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FULL) {
        setState(4995);
        match(MySqlParser::FULL);
      }
      setState(4998);
      dynamic_cast<ShowColumnsContext *>(_localctx)->columnsFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::COLUMNS

      || _la == MySqlParser::FIELDS)) {
        dynamic_cast<ShowColumnsContext *>(_localctx)->columnsFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4999);
      dynamic_cast<ShowColumnsContext *>(_localctx)->tableFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FROM

      || _la == MySqlParser::IN)) {
        dynamic_cast<ShowColumnsContext *>(_localctx)->tableFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5000);
      tableName();
      setState(5003);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(5001);
        dynamic_cast<ShowColumnsContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
          dynamic_cast<ShowColumnsContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5002);
        uid();
      }
      setState(5006);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(5005);
        showFilter();
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowCreateDbContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5008);
      match(MySqlParser::SHOW);
      setState(5009);
      match(MySqlParser::CREATE);
      setState(5010);
      dynamic_cast<ShowCreateDbContext *>(_localctx)->schemaFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
        dynamic_cast<ShowCreateDbContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5012);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(5011);
        ifNotExists();
      }
      setState(5014);
      uid();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowCreateFullIdObjectContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(5015);
      match(MySqlParser::SHOW);
      setState(5016);
      match(MySqlParser::CREATE);
      setState(5017);
      dynamic_cast<ShowCreateFullIdObjectContext *>(_localctx)->namedEntity = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 117) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 117)) & ((1ULL << (MySqlParser::PROCEDURE - 117))
        | (1ULL << (MySqlParser::TABLE - 117))
        | (1ULL << (MySqlParser::TRIGGER - 117)))) != 0) || _la == MySqlParser::EVENT

      || _la == MySqlParser::FUNCTION || _la == MySqlParser::VIEW)) {
        dynamic_cast<ShowCreateFullIdObjectContext *>(_localctx)->namedEntity = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5018);
      fullId();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowCreateUserContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(5019);
      match(MySqlParser::SHOW);
      setState(5020);
      match(MySqlParser::CREATE);
      setState(5021);
      match(MySqlParser::USER);
      setState(5022);
      userName();
      break;
    }

    case 8: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowEngineContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(5023);
      match(MySqlParser::SHOW);
      setState(5024);
      match(MySqlParser::ENGINE);
      setState(5025);
      engineName();
      setState(5026);
      dynamic_cast<ShowEngineContext *>(_localctx)->engineOption = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::MUTEX || _la == MySqlParser::STATUS)) {
        dynamic_cast<ShowEngineContext *>(_localctx)->engineOption = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowGlobalInfoContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(5028);
      match(MySqlParser::SHOW);
      setState(5029);
      showGlobalInfoClause();
      break;
    }

    case 10: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowErrorsContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(5030);
      match(MySqlParser::SHOW);
      setState(5031);
      dynamic_cast<ShowErrorsContext *>(_localctx)->errorFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ERRORS || _la == MySqlParser::WARNINGS)) {
        dynamic_cast<ShowErrorsContext *>(_localctx)->errorFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }

      setState(5032);
      match(MySqlParser::LIMIT);
      setState(5036);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 719, _ctx)) {
      case 1: {
        setState(5033);
        dynamic_cast<ShowErrorsContext *>(_localctx)->offset = decimalLiteral();
        setState(5034);
        match(MySqlParser::COMMA);
        break;
      }

      }
      setState(5038);
      dynamic_cast<ShowErrorsContext *>(_localctx)->rowCount = decimalLiteral();
      break;
    }

    case 11: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowCountErrorsContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(5039);
      match(MySqlParser::SHOW);
      setState(5040);
      match(MySqlParser::COUNT);
      setState(5041);
      match(MySqlParser::LR_BRACKET);
      setState(5042);
      match(MySqlParser::STAR);
      setState(5043);
      match(MySqlParser::RR_BRACKET);
      setState(5044);
      dynamic_cast<ShowCountErrorsContext *>(_localctx)->errorFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ERRORS || _la == MySqlParser::WARNINGS)) {
        dynamic_cast<ShowCountErrorsContext *>(_localctx)->errorFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowSchemaFilterContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(5045);
      match(MySqlParser::SHOW);
      setState(5046);
      showSchemaEntity();
      setState(5049);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(5047);
        dynamic_cast<ShowSchemaFilterContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
          dynamic_cast<ShowSchemaFilterContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5048);
        uid();
      }
      setState(5052);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(5051);
        showFilter();
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowRoutineContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(5054);
      match(MySqlParser::SHOW);
      setState(5055);
      dynamic_cast<ShowRoutineContext *>(_localctx)->routine = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::PROCEDURE || _la == MySqlParser::FUNCTION)) {
        dynamic_cast<ShowRoutineContext *>(_localctx)->routine = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5056);
      match(MySqlParser::CODE);
      setState(5057);
      fullId();
      break;
    }

    case 14: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowGrantsContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(5058);
      match(MySqlParser::SHOW);
      setState(5059);
      match(MySqlParser::GRANTS);
      setState(5062);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(5060);
        match(MySqlParser::FOR);
        setState(5061);
        userName();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowIndexesContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(5064);
      match(MySqlParser::SHOW);
      setState(5065);
      dynamic_cast<ShowIndexesContext *>(_localctx)->indexFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEYS || _la == MySqlParser::INDEXES)) {
        dynamic_cast<ShowIndexesContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5066);
      dynamic_cast<ShowIndexesContext *>(_localctx)->tableFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FROM

      || _la == MySqlParser::IN)) {
        dynamic_cast<ShowIndexesContext *>(_localctx)->tableFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5067);
      tableName();
      setState(5070);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(5068);
        dynamic_cast<ShowIndexesContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
          dynamic_cast<ShowIndexesContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5069);
        uid();
      }
      setState(5074);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WHERE) {
        setState(5072);
        match(MySqlParser::WHERE);
        setState(5073);
        expression(0);
      }
      break;
    }

    case 16: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowOpenTablesContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(5076);
      match(MySqlParser::SHOW);
      setState(5077);
      match(MySqlParser::OPEN);
      setState(5078);
      match(MySqlParser::TABLES);
      setState(5081);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(5079);
        dynamic_cast<ShowOpenTablesContext *>(_localctx)->schemaFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
          dynamic_cast<ShowOpenTablesContext *>(_localctx)->schemaFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5080);
        uid();
      }
      setState(5084);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(5083);
        showFilter();
      }
      break;
    }

    case 17: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowProfileContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(5086);
      match(MySqlParser::SHOW);
      setState(5087);
      match(MySqlParser::PROFILE);
      setState(5088);
      showProfileType();
      setState(5093);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(5089);
        match(MySqlParser::COMMA);
        setState(5090);
        showProfileType();
        setState(5095);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(5099);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(5096);
        match(MySqlParser::FOR);
        setState(5097);
        match(MySqlParser::QUERY);
        setState(5098);
        dynamic_cast<ShowProfileContext *>(_localctx)->queryCount = decimalLiteral();
      }

      setState(5101);
      match(MySqlParser::LIMIT);
      setState(5105);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 729, _ctx)) {
      case 1: {
        setState(5102);
        dynamic_cast<ShowProfileContext *>(_localctx)->offset = decimalLiteral();
        setState(5103);
        match(MySqlParser::COMMA);
        break;
      }

      }
      setState(5107);
      dynamic_cast<ShowProfileContext *>(_localctx)->rowCount = decimalLiteral();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<ShowStatementContext *>(_tracker.createInstance<MySqlParser::ShowSlaveStatusContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(5109);
      match(MySqlParser::SHOW);
      setState(5110);
      match(MySqlParser::SLAVE);
      setState(5111);
      match(MySqlParser::STATUS);
      setState(5115);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(5112);
        match(MySqlParser::FOR);
        setState(5113);
        match(MySqlParser::CHANNEL);
        setState(5114);
        match(MySqlParser::STRING_LITERAL);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableClauseContext ------------------------------------------------------------------

MySqlParser::VariableClauseContext::VariableClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::VariableClauseContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::VariableClauseContext::GLOBAL_ID() {
  return getToken(MySqlParser::GLOBAL_ID, 0);
}

MySqlParser::UidContext* MySqlParser::VariableClauseContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::VariableClauseContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::VariableClauseContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}

tree::TerminalNode* MySqlParser::VariableClauseContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::VariableClauseContext::AT_SIGN() {
  return getTokens(MySqlParser::AT_SIGN);
}

tree::TerminalNode* MySqlParser::VariableClauseContext::AT_SIGN(size_t i) {
  return getToken(MySqlParser::AT_SIGN, i);
}


size_t MySqlParser::VariableClauseContext::getRuleIndex() const {
  return MySqlParser::RuleVariableClause;
}


MySqlParser::VariableClauseContext* MySqlParser::variableClause() {
  VariableClauseContext *_localctx = _tracker.createInstance<VariableClauseContext>(_ctx, getState());
  enterRule(_localctx, 446, MySqlParser::RuleVariableClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5129);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5119);
        match(MySqlParser::LOCAL_ID);
        break;
      }

      case MySqlParser::GLOBAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(5120);
        match(MySqlParser::GLOBAL_ID);
        break;
      }

      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::AT_SIGN:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 3);
        setState(5126);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 733, _ctx)) {
        case 1: {
          setState(5123);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::AT_SIGN) {
            setState(5121);
            match(MySqlParser::AT_SIGN);
            setState(5122);
            match(MySqlParser::AT_SIGN);
          }
          setState(5125);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::GLOBAL

          || _la == MySqlParser::LOCAL || _la == MySqlParser::SESSION)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        }
        setState(5128);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowCommonEntityContext ------------------------------------------------------------------

MySqlParser::ShowCommonEntityContext::ShowCommonEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::COLLATION() {
  return getToken(MySqlParser::COLLATION, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::DATABASES() {
  return getToken(MySqlParser::DATABASES, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::SCHEMAS() {
  return getToken(MySqlParser::SCHEMAS, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::VARIABLES() {
  return getToken(MySqlParser::VARIABLES, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::ShowCommonEntityContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}


size_t MySqlParser::ShowCommonEntityContext::getRuleIndex() const {
  return MySqlParser::RuleShowCommonEntity;
}


MySqlParser::ShowCommonEntityContext* MySqlParser::showCommonEntity() {
  ShowCommonEntityContext *_localctx = _tracker.createInstance<ShowCommonEntityContext>(_ctx, getState());
  enterRule(_localctx, 448, MySqlParser::RuleShowCommonEntity);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5144);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CHARACTER: {
        enterOuterAlt(_localctx, 1);
        setState(5131);
        match(MySqlParser::CHARACTER);
        setState(5132);
        match(MySqlParser::SET);
        break;
      }

      case MySqlParser::COLLATION: {
        enterOuterAlt(_localctx, 2);
        setState(5133);
        match(MySqlParser::COLLATION);
        break;
      }

      case MySqlParser::DATABASES: {
        enterOuterAlt(_localctx, 3);
        setState(5134);
        match(MySqlParser::DATABASES);
        break;
      }

      case MySqlParser::SCHEMAS: {
        enterOuterAlt(_localctx, 4);
        setState(5135);
        match(MySqlParser::SCHEMAS);
        break;
      }

      case MySqlParser::FUNCTION: {
        enterOuterAlt(_localctx, 5);
        setState(5136);
        match(MySqlParser::FUNCTION);
        setState(5137);
        match(MySqlParser::STATUS);
        break;
      }

      case MySqlParser::PROCEDURE: {
        enterOuterAlt(_localctx, 6);
        setState(5138);
        match(MySqlParser::PROCEDURE);
        setState(5139);
        match(MySqlParser::STATUS);
        break;
      }

      case MySqlParser::GLOBAL:
      case MySqlParser::SESSION:
      case MySqlParser::STATUS:
      case MySqlParser::VARIABLES: {
        enterOuterAlt(_localctx, 7);
        setState(5141);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION) {
          setState(5140);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(5143);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::STATUS

        || _la == MySqlParser::VARIABLES)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowFilterContext ------------------------------------------------------------------

MySqlParser::ShowFilterContext::ShowFilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ShowFilterContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

tree::TerminalNode* MySqlParser::ShowFilterContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ShowFilterContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::ShowFilterContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::ShowFilterContext::getRuleIndex() const {
  return MySqlParser::RuleShowFilter;
}


MySqlParser::ShowFilterContext* MySqlParser::showFilter() {
  ShowFilterContext *_localctx = _tracker.createInstance<ShowFilterContext>(_ctx, getState());
  enterRule(_localctx, 450, MySqlParser::RuleShowFilter);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LIKE: {
        enterOuterAlt(_localctx, 1);
        setState(5146);
        match(MySqlParser::LIKE);
        setState(5147);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::WHERE: {
        enterOuterAlt(_localctx, 2);
        setState(5148);
        match(MySqlParser::WHERE);
        setState(5149);
        expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowGlobalInfoClauseContext ------------------------------------------------------------------

MySqlParser::ShowGlobalInfoClauseContext::ShowGlobalInfoClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::ENGINES() {
  return getToken(MySqlParser::ENGINES, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::PLUGINS() {
  return getToken(MySqlParser::PLUGINS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::PROCESSLIST() {
  return getToken(MySqlParser::PROCESSLIST, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::PROFILES() {
  return getToken(MySqlParser::PROFILES, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::HOSTS() {
  return getToken(MySqlParser::HOSTS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::AUTHORS() {
  return getToken(MySqlParser::AUTHORS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalInfoClauseContext::CONTRIBUTORS() {
  return getToken(MySqlParser::CONTRIBUTORS, 0);
}


size_t MySqlParser::ShowGlobalInfoClauseContext::getRuleIndex() const {
  return MySqlParser::RuleShowGlobalInfoClause;
}


MySqlParser::ShowGlobalInfoClauseContext* MySqlParser::showGlobalInfoClause() {
  ShowGlobalInfoClauseContext *_localctx = _tracker.createInstance<ShowGlobalInfoClauseContext>(_ctx, getState());
  enterRule(_localctx, 452, MySqlParser::RuleShowGlobalInfoClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5169);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ENGINES:
      case MySqlParser::STORAGE: {
        enterOuterAlt(_localctx, 1);
        setState(5153);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::STORAGE) {
          setState(5152);
          match(MySqlParser::STORAGE);
        }
        setState(5155);
        match(MySqlParser::ENGINES);
        break;
      }

      case MySqlParser::MASTER: {
        enterOuterAlt(_localctx, 2);
        setState(5156);
        match(MySqlParser::MASTER);
        setState(5157);
        match(MySqlParser::STATUS);
        break;
      }

      case MySqlParser::PLUGINS: {
        enterOuterAlt(_localctx, 3);
        setState(5158);
        match(MySqlParser::PLUGINS);
        break;
      }

      case MySqlParser::PRIVILEGES: {
        enterOuterAlt(_localctx, 4);
        setState(5159);
        match(MySqlParser::PRIVILEGES);
        break;
      }

      case MySqlParser::FULL:
      case MySqlParser::PROCESSLIST: {
        enterOuterAlt(_localctx, 5);
        setState(5161);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::FULL) {
          setState(5160);
          match(MySqlParser::FULL);
        }
        setState(5163);
        match(MySqlParser::PROCESSLIST);
        break;
      }

      case MySqlParser::PROFILES: {
        enterOuterAlt(_localctx, 6);
        setState(5164);
        match(MySqlParser::PROFILES);
        break;
      }

      case MySqlParser::SLAVE: {
        enterOuterAlt(_localctx, 7);
        setState(5165);
        match(MySqlParser::SLAVE);
        setState(5166);
        match(MySqlParser::HOSTS);
        break;
      }

      case MySqlParser::AUTHORS: {
        enterOuterAlt(_localctx, 8);
        setState(5167);
        match(MySqlParser::AUTHORS);
        break;
      }

      case MySqlParser::CONTRIBUTORS: {
        enterOuterAlt(_localctx, 9);
        setState(5168);
        match(MySqlParser::CONTRIBUTORS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowSchemaEntityContext ------------------------------------------------------------------

MySqlParser::ShowSchemaEntityContext::ShowSchemaEntityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ShowSchemaEntityContext::EVENTS() {
  return getToken(MySqlParser::EVENTS, 0);
}

tree::TerminalNode* MySqlParser::ShowSchemaEntityContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::ShowSchemaEntityContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowSchemaEntityContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::ShowSchemaEntityContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

tree::TerminalNode* MySqlParser::ShowSchemaEntityContext::TRIGGERS() {
  return getToken(MySqlParser::TRIGGERS, 0);
}


size_t MySqlParser::ShowSchemaEntityContext::getRuleIndex() const {
  return MySqlParser::RuleShowSchemaEntity;
}


MySqlParser::ShowSchemaEntityContext* MySqlParser::showSchemaEntity() {
  ShowSchemaEntityContext *_localctx = _tracker.createInstance<ShowSchemaEntityContext>(_ctx, getState());
  enterRule(_localctx, 454, MySqlParser::RuleShowSchemaEntity);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5179);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::EVENTS: {
        enterOuterAlt(_localctx, 1);
        setState(5171);
        match(MySqlParser::EVENTS);
        break;
      }

      case MySqlParser::TABLE: {
        enterOuterAlt(_localctx, 2);
        setState(5172);
        match(MySqlParser::TABLE);
        setState(5173);
        match(MySqlParser::STATUS);
        break;
      }

      case MySqlParser::FULL:
      case MySqlParser::TABLES: {
        enterOuterAlt(_localctx, 3);
        setState(5175);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::FULL) {
          setState(5174);
          match(MySqlParser::FULL);
        }
        setState(5177);
        match(MySqlParser::TABLES);
        break;
      }

      case MySqlParser::TRIGGERS: {
        enterOuterAlt(_localctx, 4);
        setState(5178);
        match(MySqlParser::TRIGGERS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowProfileTypeContext ------------------------------------------------------------------

MySqlParser::ShowProfileTypeContext::ShowProfileTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::BLOCK() {
  return getToken(MySqlParser::BLOCK, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::IO() {
  return getToken(MySqlParser::IO, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::CONTEXT() {
  return getToken(MySqlParser::CONTEXT, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::SWITCHES() {
  return getToken(MySqlParser::SWITCHES, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::CPU() {
  return getToken(MySqlParser::CPU, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::IPC() {
  return getToken(MySqlParser::IPC, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::PAGE() {
  return getToken(MySqlParser::PAGE, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::FAULTS() {
  return getToken(MySqlParser::FAULTS, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::SOURCE() {
  return getToken(MySqlParser::SOURCE, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileTypeContext::SWAPS() {
  return getToken(MySqlParser::SWAPS, 0);
}


size_t MySqlParser::ShowProfileTypeContext::getRuleIndex() const {
  return MySqlParser::RuleShowProfileType;
}


MySqlParser::ShowProfileTypeContext* MySqlParser::showProfileType() {
  ShowProfileTypeContext *_localctx = _tracker.createInstance<ShowProfileTypeContext>(_ctx, getState());
  enterRule(_localctx, 456, MySqlParser::RuleShowProfileType);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5193);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(5181);
        match(MySqlParser::ALL);
        break;
      }

      case MySqlParser::BLOCK: {
        enterOuterAlt(_localctx, 2);
        setState(5182);
        match(MySqlParser::BLOCK);
        setState(5183);
        match(MySqlParser::IO);
        break;
      }

      case MySqlParser::CONTEXT: {
        enterOuterAlt(_localctx, 3);
        setState(5184);
        match(MySqlParser::CONTEXT);
        setState(5185);
        match(MySqlParser::SWITCHES);
        break;
      }

      case MySqlParser::CPU: {
        enterOuterAlt(_localctx, 4);
        setState(5186);
        match(MySqlParser::CPU);
        break;
      }

      case MySqlParser::IPC: {
        enterOuterAlt(_localctx, 5);
        setState(5187);
        match(MySqlParser::IPC);
        break;
      }

      case MySqlParser::MEMORY: {
        enterOuterAlt(_localctx, 6);
        setState(5188);
        match(MySqlParser::MEMORY);
        break;
      }

      case MySqlParser::PAGE: {
        enterOuterAlt(_localctx, 7);
        setState(5189);
        match(MySqlParser::PAGE);
        setState(5190);
        match(MySqlParser::FAULTS);
        break;
      }

      case MySqlParser::SOURCE: {
        enterOuterAlt(_localctx, 8);
        setState(5191);
        match(MySqlParser::SOURCE);
        break;
      }

      case MySqlParser::SWAPS: {
        enterOuterAlt(_localctx, 9);
        setState(5192);
        match(MySqlParser::SWAPS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinlogStatementContext ------------------------------------------------------------------

MySqlParser::BinlogStatementContext::BinlogStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::BinlogStatementContext::BINLOG() {
  return getToken(MySqlParser::BINLOG, 0);
}

tree::TerminalNode* MySqlParser::BinlogStatementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::BinlogStatementContext::getRuleIndex() const {
  return MySqlParser::RuleBinlogStatement;
}


MySqlParser::BinlogStatementContext* MySqlParser::binlogStatement() {
  BinlogStatementContext *_localctx = _tracker.createInstance<BinlogStatementContext>(_ctx, getState());
  enterRule(_localctx, 458, MySqlParser::RuleBinlogStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5195);
    match(MySqlParser::BINLOG);
    setState(5196);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CacheIndexStatementContext ------------------------------------------------------------------

MySqlParser::CacheIndexStatementContext::CacheIndexStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

std::vector<MySqlParser::TableIndexesContext *> MySqlParser::CacheIndexStatementContext::tableIndexes() {
  return getRuleContexts<MySqlParser::TableIndexesContext>();
}

MySqlParser::TableIndexesContext* MySqlParser::CacheIndexStatementContext::tableIndexes(size_t i) {
  return getRuleContext<MySqlParser::TableIndexesContext>(i);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::UidContext* MySqlParser::CacheIndexStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::CacheIndexStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::CacheIndexStatementContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::CacheIndexStatementContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}


size_t MySqlParser::CacheIndexStatementContext::getRuleIndex() const {
  return MySqlParser::RuleCacheIndexStatement;
}


MySqlParser::CacheIndexStatementContext* MySqlParser::cacheIndexStatement() {
  CacheIndexStatementContext *_localctx = _tracker.createInstance<CacheIndexStatementContext>(_ctx, getState());
  enterRule(_localctx, 460, MySqlParser::RuleCacheIndexStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5198);
    match(MySqlParser::CACHE);
    setState(5199);
    match(MySqlParser::INDEX);
    setState(5200);
    tableIndexes();
    setState(5205);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5201);
      match(MySqlParser::COMMA);
      setState(5202);
      tableIndexes();
      setState(5207);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(5208);
      match(MySqlParser::PARTITION);
      setState(5209);
      match(MySqlParser::LR_BRACKET);
      setState(5212);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(5210);
          uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(5211);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5214);
      match(MySqlParser::RR_BRACKET);
    }
    setState(5217);
    match(MySqlParser::IN);
    setState(5218);
    dynamic_cast<CacheIndexStatementContext *>(_localctx)->schema = uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlushStatementContext ------------------------------------------------------------------

MySqlParser::FlushStatementContext::FlushStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::FlushStatementContext::FLUSH() {
  return getToken(MySqlParser::FLUSH, 0);
}

std::vector<MySqlParser::FlushOptionContext *> MySqlParser::FlushStatementContext::flushOption() {
  return getRuleContexts<MySqlParser::FlushOptionContext>();
}

MySqlParser::FlushOptionContext* MySqlParser::FlushStatementContext::flushOption(size_t i) {
  return getRuleContext<MySqlParser::FlushOptionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::FlushStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::FlushStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::FlushStatementContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::FlushStatementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::FlushStatementContext::getRuleIndex() const {
  return MySqlParser::RuleFlushStatement;
}


MySqlParser::FlushStatementContext* MySqlParser::flushStatement() {
  FlushStatementContext *_localctx = _tracker.createInstance<FlushStatementContext>(_ctx, getState());
  enterRule(_localctx, 462, MySqlParser::RuleFlushStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5220);
    match(MySqlParser::FLUSH);
    setState(5222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(5221);
      dynamic_cast<FlushStatementContext *>(_localctx)->flushFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
        dynamic_cast<FlushStatementContext *>(_localctx)->flushFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5224);
    flushOption();
    setState(5229);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5225);
      match(MySqlParser::COMMA);
      setState(5226);
      flushOption();
      setState(5231);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KillStatementContext ------------------------------------------------------------------

MySqlParser::KillStatementContext::KillStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::KillStatementContext::KILL() {
  return getToken(MySqlParser::KILL, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::KillStatementContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::KillStatementContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::KillStatementContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

tree::TerminalNode* MySqlParser::KillStatementContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}


size_t MySqlParser::KillStatementContext::getRuleIndex() const {
  return MySqlParser::RuleKillStatement;
}


MySqlParser::KillStatementContext* MySqlParser::killStatement() {
  KillStatementContext *_localctx = _tracker.createInstance<KillStatementContext>(_ctx, getState());
  enterRule(_localctx, 464, MySqlParser::RuleKillStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5232);
    match(MySqlParser::KILL);
    setState(5234);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CONNECTION || _la == MySqlParser::QUERY) {
      setState(5233);
      dynamic_cast<KillStatementContext *>(_localctx)->connectionFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CONNECTION || _la == MySqlParser::QUERY)) {
        dynamic_cast<KillStatementContext *>(_localctx)->connectionFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5237); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5236);
      decimalLiteral();
      setState(5239); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 1033) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1033)) & ((1ULL << (MySqlParser::ZERO_DECIMAL - 1033))
      | (1ULL << (MySqlParser::ONE_DECIMAL - 1033))
      | (1ULL << (MySqlParser::TWO_DECIMAL - 1033))
      | (1ULL << (MySqlParser::DECIMAL_LITERAL - 1033)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadIndexIntoCacheContext ------------------------------------------------------------------

MySqlParser::LoadIndexIntoCacheContext::LoadIndexIntoCacheContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LoadIndexIntoCacheContext::LOAD() {
  return getToken(MySqlParser::LOAD, 0);
}

tree::TerminalNode* MySqlParser::LoadIndexIntoCacheContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::LoadIndexIntoCacheContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::LoadIndexIntoCacheContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

std::vector<MySqlParser::LoadedTableIndexesContext *> MySqlParser::LoadIndexIntoCacheContext::loadedTableIndexes() {
  return getRuleContexts<MySqlParser::LoadedTableIndexesContext>();
}

MySqlParser::LoadedTableIndexesContext* MySqlParser::LoadIndexIntoCacheContext::loadedTableIndexes(size_t i) {
  return getRuleContext<MySqlParser::LoadedTableIndexesContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadIndexIntoCacheContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::LoadIndexIntoCacheContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::LoadIndexIntoCacheContext::getRuleIndex() const {
  return MySqlParser::RuleLoadIndexIntoCache;
}


MySqlParser::LoadIndexIntoCacheContext* MySqlParser::loadIndexIntoCache() {
  LoadIndexIntoCacheContext *_localctx = _tracker.createInstance<LoadIndexIntoCacheContext>(_ctx, getState());
  enterRule(_localctx, 466, MySqlParser::RuleLoadIndexIntoCache);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5241);
    match(MySqlParser::LOAD);
    setState(5242);
    match(MySqlParser::INDEX);
    setState(5243);
    match(MySqlParser::INTO);
    setState(5244);
    match(MySqlParser::CACHE);
    setState(5245);
    loadedTableIndexes();
    setState(5250);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5246);
      match(MySqlParser::COMMA);
      setState(5247);
      loadedTableIndexes();
      setState(5252);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetStatementContext ------------------------------------------------------------------

MySqlParser::ResetStatementContext::ResetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ResetStatementContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::ResetStatementContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

tree::TerminalNode* MySqlParser::ResetStatementContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}


size_t MySqlParser::ResetStatementContext::getRuleIndex() const {
  return MySqlParser::RuleResetStatement;
}


MySqlParser::ResetStatementContext* MySqlParser::resetStatement() {
  ResetStatementContext *_localctx = _tracker.createInstance<ResetStatementContext>(_ctx, getState());
  enterRule(_localctx, 468, MySqlParser::RuleResetStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5253);
    match(MySqlParser::RESET);
    setState(5254);
    match(MySqlParser::QUERY);
    setState(5255);
    match(MySqlParser::CACHE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShutdownStatementContext ------------------------------------------------------------------

MySqlParser::ShutdownStatementContext::ShutdownStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ShutdownStatementContext::SHUTDOWN() {
  return getToken(MySqlParser::SHUTDOWN, 0);
}


size_t MySqlParser::ShutdownStatementContext::getRuleIndex() const {
  return MySqlParser::RuleShutdownStatement;
}


MySqlParser::ShutdownStatementContext* MySqlParser::shutdownStatement() {
  ShutdownStatementContext *_localctx = _tracker.createInstance<ShutdownStatementContext>(_ctx, getState());
  enterRule(_localctx, 470, MySqlParser::RuleShutdownStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5257);
    match(MySqlParser::SHUTDOWN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIndexesContext ------------------------------------------------------------------

MySqlParser::TableIndexesContext::TableIndexesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::TableNameContext* MySqlParser::TableIndexesContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::TableIndexesContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::UidListContext* MySqlParser::TableIndexesContext::uidList() {
  return getRuleContext<MySqlParser::UidListContext>(0);
}

tree::TerminalNode* MySqlParser::TableIndexesContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::TableIndexesContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::TableIndexesContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}


size_t MySqlParser::TableIndexesContext::getRuleIndex() const {
  return MySqlParser::RuleTableIndexes;
}


MySqlParser::TableIndexesContext* MySqlParser::tableIndexes() {
  TableIndexesContext *_localctx = _tracker.createInstance<TableIndexesContext>(_ctx, getState());
  enterRule(_localctx, 472, MySqlParser::RuleTableIndexes);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5259);
    tableName();
    setState(5267);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INDEX

    || _la == MySqlParser::KEY || _la == MySqlParser::LR_BRACKET) {
      setState(5261);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(5260);
        dynamic_cast<TableIndexesContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
          dynamic_cast<TableIndexesContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5263);
      match(MySqlParser::LR_BRACKET);
      setState(5264);
      uidList();
      setState(5265);
      match(MySqlParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlushOptionContext ------------------------------------------------------------------

MySqlParser::FlushOptionContext::FlushOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::FlushOptionContext::getRuleIndex() const {
  return MySqlParser::RuleFlushOption;
}

void MySqlParser::FlushOptionContext::copyFrom(FlushOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableFlushOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TableFlushOptionContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

MySqlParser::TablesContext* MySqlParser::TableFlushOptionContext::tables() {
  return getRuleContext<MySqlParser::TablesContext>(0);
}

MySqlParser::FlushTableOptionContext* MySqlParser::TableFlushOptionContext::flushTableOption() {
  return getRuleContext<MySqlParser::FlushTableOptionContext>(0);
}

MySqlParser::TableFlushOptionContext::TableFlushOptionContext(FlushOptionContext *ctx) { copyFrom(ctx); }


//----------------- ChannelFlushOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ChannelFlushOptionContext::RELAY() {
  return getToken(MySqlParser::RELAY, 0);
}

tree::TerminalNode* MySqlParser::ChannelFlushOptionContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

MySqlParser::ChannelOptionContext* MySqlParser::ChannelFlushOptionContext::channelOption() {
  return getRuleContext<MySqlParser::ChannelOptionContext>(0);
}

MySqlParser::ChannelFlushOptionContext::ChannelFlushOptionContext(FlushOptionContext *ctx) { copyFrom(ctx); }


//----------------- SimpleFlushOptionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::DES_KEY_FILE() {
  return getToken(MySqlParser::DES_KEY_FILE, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::HOSTS() {
  return getToken(MySqlParser::HOSTS, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::OPTIMIZER_COSTS() {
  return getToken(MySqlParser::OPTIMIZER_COSTS, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::USER_RESOURCES() {
  return getToken(MySqlParser::USER_RESOURCES, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::ERROR() {
  return getToken(MySqlParser::ERROR, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::GENERAL() {
  return getToken(MySqlParser::GENERAL, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::RELAY() {
  return getToken(MySqlParser::RELAY, 0);
}

tree::TerminalNode* MySqlParser::SimpleFlushOptionContext::SLOW() {
  return getToken(MySqlParser::SLOW, 0);
}

MySqlParser::SimpleFlushOptionContext::SimpleFlushOptionContext(FlushOptionContext *ctx) { copyFrom(ctx); }


MySqlParser::FlushOptionContext* MySqlParser::flushOption() {
  FlushOptionContext *_localctx = _tracker.createInstance<FlushOptionContext>(_ctx, getState());
  enterRule(_localctx, 474, MySqlParser::RuleFlushOption);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5299);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 759, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FlushOptionContext *>(_tracker.createInstance<MySqlParser::SimpleFlushOptionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5287);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::DES_KEY_FILE: {
          setState(5269);
          match(MySqlParser::DES_KEY_FILE);
          break;
        }

        case MySqlParser::HOSTS: {
          setState(5270);
          match(MySqlParser::HOSTS);
          break;
        }

        case MySqlParser::BINARY:
        case MySqlParser::ENGINE:
        case MySqlParser::ERROR:
        case MySqlParser::GENERAL:
        case MySqlParser::LOGS:
        case MySqlParser::RELAY:
        case MySqlParser::SLOW: {
          setState(5272);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::BINARY || ((((_la - 342) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 342)) & ((1ULL << (MySqlParser::ENGINE - 342))
            | (1ULL << (MySqlParser::ERROR - 342))
            | (1ULL << (MySqlParser::GENERAL - 342)))) != 0) || _la == MySqlParser::RELAY

          || _la == MySqlParser::SLOW) {
            setState(5271);
            _la = _input->LA(1);
            if (!(_la == MySqlParser::BINARY || ((((_la - 342) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 342)) & ((1ULL << (MySqlParser::ENGINE - 342))
              | (1ULL << (MySqlParser::ERROR - 342))
              | (1ULL << (MySqlParser::GENERAL - 342)))) != 0) || _la == MySqlParser::RELAY

            || _la == MySqlParser::SLOW)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
          }
          setState(5274);
          match(MySqlParser::LOGS);
          break;
        }

        case MySqlParser::OPTIMIZER_COSTS: {
          setState(5275);
          match(MySqlParser::OPTIMIZER_COSTS);
          break;
        }

        case MySqlParser::PRIVILEGES: {
          setState(5276);
          match(MySqlParser::PRIVILEGES);
          break;
        }

        case MySqlParser::QUERY: {
          setState(5277);
          match(MySqlParser::QUERY);
          setState(5278);
          match(MySqlParser::CACHE);
          break;
        }

        case MySqlParser::STATUS: {
          setState(5279);
          match(MySqlParser::STATUS);
          break;
        }

        case MySqlParser::USER_RESOURCES: {
          setState(5280);
          match(MySqlParser::USER_RESOURCES);
          break;
        }

        case MySqlParser::TABLES: {
          setState(5281);
          match(MySqlParser::TABLES);
          setState(5285);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::WITH) {
            setState(5282);
            match(MySqlParser::WITH);
            setState(5283);
            match(MySqlParser::READ);
            setState(5284);
            match(MySqlParser::LOCK);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FlushOptionContext *>(_tracker.createInstance<MySqlParser::ChannelFlushOptionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5289);
      match(MySqlParser::RELAY);
      setState(5290);
      match(MySqlParser::LOGS);
      setState(5292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(5291);
        channelOption();
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<FlushOptionContext *>(_tracker.createInstance<MySqlParser::TableFlushOptionContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5294);
      match(MySqlParser::TABLES);
      setState(5295);
      tables();
      setState(5297);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR || _la == MySqlParser::WITH) {
        setState(5296);
        flushTableOption();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FlushTableOptionContext ------------------------------------------------------------------

MySqlParser::FlushTableOptionContext::FlushTableOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::FlushTableOptionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::FlushTableOptionContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::FlushTableOptionContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::FlushTableOptionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::FlushTableOptionContext::EXPORT() {
  return getToken(MySqlParser::EXPORT, 0);
}


size_t MySqlParser::FlushTableOptionContext::getRuleIndex() const {
  return MySqlParser::RuleFlushTableOption;
}


MySqlParser::FlushTableOptionContext* MySqlParser::flushTableOption() {
  FlushTableOptionContext *_localctx = _tracker.createInstance<FlushTableOptionContext>(_ctx, getState());
  enterRule(_localctx, 476, MySqlParser::RuleFlushTableOption);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5306);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(5301);
        match(MySqlParser::WITH);
        setState(5302);
        match(MySqlParser::READ);
        setState(5303);
        match(MySqlParser::LOCK);
        break;
      }

      case MySqlParser::FOR: {
        enterOuterAlt(_localctx, 2);
        setState(5304);
        match(MySqlParser::FOR);
        setState(5305);
        match(MySqlParser::EXPORT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadedTableIndexesContext ------------------------------------------------------------------

MySqlParser::LoadedTableIndexesContext::LoadedTableIndexesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::TableNameContext* MySqlParser::LoadedTableIndexesContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadedTableIndexesContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::LoadedTableIndexesContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::LEAVES() {
  return getToken(MySqlParser::LEAVES, 0);
}

std::vector<MySqlParser::UidListContext *> MySqlParser::LoadedTableIndexesContext::uidList() {
  return getRuleContexts<MySqlParser::UidListContext>();
}

MySqlParser::UidListContext* MySqlParser::LoadedTableIndexesContext::uidList(size_t i) {
  return getRuleContext<MySqlParser::UidListContext>(i);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::LoadedTableIndexesContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}


size_t MySqlParser::LoadedTableIndexesContext::getRuleIndex() const {
  return MySqlParser::RuleLoadedTableIndexes;
}


MySqlParser::LoadedTableIndexesContext* MySqlParser::loadedTableIndexes() {
  LoadedTableIndexesContext *_localctx = _tracker.createInstance<LoadedTableIndexesContext>(_ctx, getState());
  enterRule(_localctx, 478, MySqlParser::RuleLoadedTableIndexes);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5308);
    tableName();
    setState(5316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(5309);
      match(MySqlParser::PARTITION);
      setState(5310);
      match(MySqlParser::LR_BRACKET);
      setState(5313);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CURRENT:
        case MySqlParser::DATABASE:
        case MySqlParser::DIAGNOSTICS:
        case MySqlParser::GROUP:
        case MySqlParser::LEFT:
        case MySqlParser::NUMBER:
        case MySqlParser::ORDER:
        case MySqlParser::RIGHT:
        case MySqlParser::SCHEMA:
        case MySqlParser::STACKED:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::SERIAL:
        case MySqlParser::JSON_VALID:
        case MySqlParser::JSON_SCHEMA_VALID:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::POSITION:
        case MySqlParser::ACCOUNT:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::AGGREGATE:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BLOCK:
        case MySqlParser::BOOL:
        case MySqlParser::BOOLEAN:
        case MySqlParser::BTREE:
        case MySqlParser::CACHE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHANGED:
        case MySqlParser::CHANNEL:
        case MySqlParser::CHECKSUM:
        case MySqlParser::PAGE_CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLASS_ORIGIN:
        case MySqlParser::CLIENT:
        case MySqlParser::CLOSE:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COLUMN_NAME:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::COMPRESSION:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONSTRAINT_CATALOG:
        case MySqlParser::CONSTRAINT_SCHEMA:
        case MySqlParser::CONSTRAINT_NAME:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTEXT:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::CPU:
        case MySqlParser::CURSOR_NAME:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEALLOCATE:
        case MySqlParser::DEFAULT_AUTH:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DES_KEY_FILE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENCRYPTION:
        case MySqlParser::END:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERROR:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXPORT:
        case MySqlParser::EXTENDED:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FAST:
        case MySqlParser::FAULTS:
        case MySqlParser::FIELDS:
        case MySqlParser::FILE_BLOCK_SIZE:
        case MySqlParser::FILTER:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FLUSH:
        case MySqlParser::FOLLOWS:
        case MySqlParser::FOUND:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GENERAL:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::GROUP_REPLICATION:
        case MySqlParser::HANDLER:
        case MySqlParser::HASH:
        case MySqlParser::HELP:
        case MySqlParser::HOST:
        case MySqlParser::HOSTS:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IGNORE_SERVER_IDS:
        case MySqlParser::IMPORT:
        case MySqlParser::INDEXES:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INSTALL:
        case MySqlParser::INSTANCE:
        case MySqlParser::INVISIBLE:
        case MySqlParser::INVOKER:
        case MySqlParser::IO:
        case MySqlParser::IO_THREAD:
        case MySqlParser::IPC:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::JSON:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LEAVES:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MASTER_AUTO_POSITION:
        case MySqlParser::MASTER_CONNECT_RETRY:
        case MySqlParser::MASTER_DELAY:
        case MySqlParser::MASTER_HEARTBEAT_PERIOD:
        case MySqlParser::MASTER_HOST:
        case MySqlParser::MASTER_LOG_FILE:
        case MySqlParser::MASTER_LOG_POS:
        case MySqlParser::MASTER_PASSWORD:
        case MySqlParser::MASTER_PORT:
        case MySqlParser::MASTER_RETRY_COUNT:
        case MySqlParser::MASTER_SSL:
        case MySqlParser::MASTER_SSL_CA:
        case MySqlParser::MASTER_SSL_CAPATH:
        case MySqlParser::MASTER_SSL_CERT:
        case MySqlParser::MASTER_SSL_CIPHER:
        case MySqlParser::MASTER_SSL_CRL:
        case MySqlParser::MASTER_SSL_CRLPATH:
        case MySqlParser::MASTER_SSL_KEY:
        case MySqlParser::MASTER_TLS_VERSION:
        case MySqlParser::MASTER_USER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MEDIUM:
        case MySqlParser::MEMBER:
        case MySqlParser::MERGE:
        case MySqlParser::MESSAGE_TEXT:
        case MySqlParser::MID:
        case MySqlParser::MIGRATE:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODE:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::MYSQL_ERRNO:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NEVER:
        case MySqlParser::NEXT:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OF:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONE:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPEN:
        case MySqlParser::OPTIMIZER_COSTS:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PAGE:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PHASE:
        case MySqlParser::PLUGIN:
        case MySqlParser::PLUGIN_DIR:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRECEDES:
        case MySqlParser::PREPARE:
        case MySqlParser::PRESERVE:
        case MySqlParser::PREV:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::RECOVER:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAY:
        case MySqlParser::RELAY_LOG_FILE:
        case MySqlParser::RELAY_LOG_POS:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATE_DO_DB:
        case MySqlParser::REPLICATE_DO_TABLE:
        case MySqlParser::REPLICATE_IGNORE_DB:
        case MySqlParser::REPLICATE_IGNORE_TABLE:
        case MySqlParser::REPLICATE_REWRITE_DB:
        case MySqlParser::REPLICATE_WILD_DO_TABLE:
        case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
        case MySqlParser::REPLICATION:
        case MySqlParser::RESET:
        case MySqlParser::RESUME:
        case MySqlParser::RETURNED_SQLSTATE:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLE:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROTATE:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SLOW:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SONAME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SOURCE:
        case MySqlParser::SQL_AFTER_GTIDS:
        case MySqlParser::SQL_AFTER_MTS_GAPS:
        case MySqlParser::SQL_BEFORE_GTIDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::SQL_THREAD:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STOP:
        case MySqlParser::STORAGE:
        case MySqlParser::STRING:
        case MySqlParser::SUBCLASS_ORIGIN:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::SUSPEND:
        case MySqlParser::SWAPS:
        case MySqlParser::SWITCHES:
        case MySqlParser::TABLE_NAME:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRADITIONAL:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRANSACTIONAL:
        case MySqlParser::TRIGGERS:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNINSTALL:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UNTIL:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::USE_FRM:
        case MySqlParser::USER_RESOURCES:
        case MySqlParser::VALIDATION:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::VISIBLE:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WITHOUT:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XA:
        case MySqlParser::XML:
        case MySqlParser::INTERNAL:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::AUDIT_ADMIN:
        case MySqlParser::BACKUP_ADMIN:
        case MySqlParser::BINLOG_ADMIN:
        case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
        case MySqlParser::CLONE_ADMIN:
        case MySqlParser::CONNECTION_ADMIN:
        case MySqlParser::ENCRYPTION_KEY_ADMIN:
        case MySqlParser::FIREWALL_ADMIN:
        case MySqlParser::FIREWALL_USER:
        case MySqlParser::GROUP_REPLICATION_ADMIN:
        case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
        case MySqlParser::NDB_STORED_USER:
        case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
        case MySqlParser::REPLICATION_APPLIER:
        case MySqlParser::REPLICATION_SLAVE_ADMIN:
        case MySqlParser::RESOURCE_GROUP_ADMIN:
        case MySqlParser::RESOURCE_GROUP_USER:
        case MySqlParser::ROLE_ADMIN:
        case MySqlParser::SESSION_VARIABLES_ADMIN:
        case MySqlParser::SET_USER_ID:
        case MySqlParser::SHOW_ROUTINE:
        case MySqlParser::SYSTEM_VARIABLES_ADMIN:
        case MySqlParser::TABLE_ENCRYPTION_ADMIN:
        case MySqlParser::VERSION_TOKEN_ADMIN:
        case MySqlParser::XA_RECOVER_ADMIN:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFORMANCE_SCHEMA:
        case MySqlParser::TOKUDB:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CATALOG_NAME:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SCHEMA_NAME:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MOD:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(5311);
          dynamic_cast<LoadedTableIndexesContext *>(_localctx)->partitionList = uidList();
          break;
        }

        case MySqlParser::ALL: {
          setState(5312);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5315);
      match(MySqlParser::RR_BRACKET);
    }
    setState(5325);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 764, _ctx)) {
    case 1: {
      setState(5319);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(5318);
        dynamic_cast<LoadedTableIndexesContext *>(_localctx)->indexFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
          dynamic_cast<LoadedTableIndexesContext *>(_localctx)->indexFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5321);
      match(MySqlParser::LR_BRACKET);
      setState(5322);
      dynamic_cast<LoadedTableIndexesContext *>(_localctx)->indexList = uidList();
      setState(5323);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
    setState(5329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(5327);
      match(MySqlParser::IGNORE);
      setState(5328);
      match(MySqlParser::LEAVES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDescribeStatementContext ------------------------------------------------------------------

MySqlParser::SimpleDescribeStatementContext::SimpleDescribeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::TableNameContext* MySqlParser::SimpleDescribeStatementContext::tableName() {
  return getRuleContext<MySqlParser::TableNameContext>(0);
}

tree::TerminalNode* MySqlParser::SimpleDescribeStatementContext::EXPLAIN() {
  return getToken(MySqlParser::EXPLAIN, 0);
}

tree::TerminalNode* MySqlParser::SimpleDescribeStatementContext::DESCRIBE() {
  return getToken(MySqlParser::DESCRIBE, 0);
}

tree::TerminalNode* MySqlParser::SimpleDescribeStatementContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}

MySqlParser::UidContext* MySqlParser::SimpleDescribeStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::SimpleDescribeStatementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::SimpleDescribeStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSimpleDescribeStatement;
}


MySqlParser::SimpleDescribeStatementContext* MySqlParser::simpleDescribeStatement() {
  SimpleDescribeStatementContext *_localctx = _tracker.createInstance<SimpleDescribeStatementContext>(_ctx, getState());
  enterRule(_localctx, 480, MySqlParser::RuleSimpleDescribeStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5331);
    dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->command = _input->LT(1);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::DESC)
      | (1ULL << MySqlParser::DESCRIBE)
      | (1ULL << MySqlParser::EXPLAIN))) != 0))) {
      dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->command = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5332);
    tableName();
    setState(5335);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 766, _ctx)) {
    case 1: {
      setState(5333);
      dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->column = uid();
      break;
    }

    case 2: {
      setState(5334);
      dynamic_cast<SimpleDescribeStatementContext *>(_localctx)->pattern = match(MySqlParser::STRING_LITERAL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullDescribeStatementContext ------------------------------------------------------------------

MySqlParser::FullDescribeStatementContext::FullDescribeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::DescribeObjectClauseContext* MySqlParser::FullDescribeStatementContext::describeObjectClause() {
  return getRuleContext<MySqlParser::DescribeObjectClauseContext>(0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::EXPLAIN() {
  return getToken(MySqlParser::EXPLAIN, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::DESCRIBE() {
  return getToken(MySqlParser::DESCRIBE, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::PARTITIONS() {
  return getToken(MySqlParser::PARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::FORMAT() {
  return getToken(MySqlParser::FORMAT, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::TRADITIONAL() {
  return getToken(MySqlParser::TRADITIONAL, 0);
}

tree::TerminalNode* MySqlParser::FullDescribeStatementContext::JSON() {
  return getToken(MySqlParser::JSON, 0);
}


size_t MySqlParser::FullDescribeStatementContext::getRuleIndex() const {
  return MySqlParser::RuleFullDescribeStatement;
}


MySqlParser::FullDescribeStatementContext* MySqlParser::fullDescribeStatement() {
  FullDescribeStatementContext *_localctx = _tracker.createInstance<FullDescribeStatementContext>(_ctx, getState());
  enterRule(_localctx, 482, MySqlParser::RuleFullDescribeStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5337);
    dynamic_cast<FullDescribeStatementContext *>(_localctx)->command = _input->LT(1);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::DESC)
      | (1ULL << MySqlParser::DESCRIBE)
      | (1ULL << MySqlParser::EXPLAIN))) != 0))) {
      dynamic_cast<FullDescribeStatementContext *>(_localctx)->command = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENDED || _la == MySqlParser::PARTITIONS || _la == MySqlParser::FORMAT) {
      setState(5338);
      dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::EXTENDED || _la == MySqlParser::PARTITIONS || _la == MySqlParser::FORMAT)) {
        dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5339);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(5340);
      dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::JSON || _la == MySqlParser::TRADITIONAL)) {
        dynamic_cast<FullDescribeStatementContext *>(_localctx)->formatValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5343);
    describeObjectClause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HelpStatementContext ------------------------------------------------------------------

MySqlParser::HelpStatementContext::HelpStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HelpStatementContext::HELP() {
  return getToken(MySqlParser::HELP, 0);
}

tree::TerminalNode* MySqlParser::HelpStatementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::HelpStatementContext::getRuleIndex() const {
  return MySqlParser::RuleHelpStatement;
}


MySqlParser::HelpStatementContext* MySqlParser::helpStatement() {
  HelpStatementContext *_localctx = _tracker.createInstance<HelpStatementContext>(_ctx, getState());
  enterRule(_localctx, 484, MySqlParser::RuleHelpStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5345);
    match(MySqlParser::HELP);
    setState(5346);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseStatementContext ------------------------------------------------------------------

MySqlParser::UseStatementContext::UseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UseStatementContext::USE() {
  return getToken(MySqlParser::USE, 0);
}

MySqlParser::UidContext* MySqlParser::UseStatementContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::UseStatementContext::getRuleIndex() const {
  return MySqlParser::RuleUseStatement;
}


MySqlParser::UseStatementContext* MySqlParser::useStatement() {
  UseStatementContext *_localctx = _tracker.createInstance<UseStatementContext>(_ctx, getState());
  enterRule(_localctx, 486, MySqlParser::RuleUseStatement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5348);
    match(MySqlParser::USE);
    setState(5349);
    uid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignalStatementContext ------------------------------------------------------------------

MySqlParser::SignalStatementContext::SignalStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SignalStatementContext::SIGNAL() {
  return getToken(MySqlParser::SIGNAL, 0);
}

tree::TerminalNode* MySqlParser::SignalStatementContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

tree::TerminalNode* MySqlParser::SignalStatementContext::REVERSE_QUOTE_ID() {
  return getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
}

tree::TerminalNode* MySqlParser::SignalStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::SignalConditionInformationContext *> MySqlParser::SignalStatementContext::signalConditionInformation() {
  return getRuleContexts<MySqlParser::SignalConditionInformationContext>();
}

MySqlParser::SignalConditionInformationContext* MySqlParser::SignalStatementContext::signalConditionInformation(size_t i) {
  return getRuleContext<MySqlParser::SignalConditionInformationContext>(i);
}

tree::TerminalNode* MySqlParser::SignalStatementContext::SQLSTATE() {
  return getToken(MySqlParser::SQLSTATE, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::SignalStatementContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::SignalStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SignalStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::SignalStatementContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}


size_t MySqlParser::SignalStatementContext::getRuleIndex() const {
  return MySqlParser::RuleSignalStatement;
}


MySqlParser::SignalStatementContext* MySqlParser::signalStatement() {
  SignalStatementContext *_localctx = _tracker.createInstance<SignalStatementContext>(_ctx, getState());
  enterRule(_localctx, 488, MySqlParser::RuleSignalStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5351);
    match(MySqlParser::SIGNAL);
    setState(5359);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SQLSTATE: {
        setState(5352);
        match(MySqlParser::SQLSTATE);
        setState(5354);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::VALUE) {
          setState(5353);
          match(MySqlParser::VALUE);
        }
        setState(5356);
        stringLiteral();
        break;
      }

      case MySqlParser::ID: {
        setState(5357);
        match(MySqlParser::ID);
        break;
      }

      case MySqlParser::REVERSE_QUOTE_ID: {
        setState(5358);
        match(MySqlParser::REVERSE_QUOTE_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(5370);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 771, _ctx)) {
    case 1: {
      setState(5361);
      match(MySqlParser::SET);
      setState(5362);
      signalConditionInformation();
      setState(5367);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(5363);
        match(MySqlParser::COMMA);
        setState(5364);
        signalConditionInformation();
        setState(5369);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResignalStatementContext ------------------------------------------------------------------

MySqlParser::ResignalStatementContext::ResignalStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::RESIGNAL() {
  return getToken(MySqlParser::RESIGNAL, 0);
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::REVERSE_QUOTE_ID() {
  return getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::SignalConditionInformationContext *> MySqlParser::ResignalStatementContext::signalConditionInformation() {
  return getRuleContexts<MySqlParser::SignalConditionInformationContext>();
}

MySqlParser::SignalConditionInformationContext* MySqlParser::ResignalStatementContext::signalConditionInformation(size_t i) {
  return getRuleContext<MySqlParser::SignalConditionInformationContext>(i);
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::SQLSTATE() {
  return getToken(MySqlParser::SQLSTATE, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::ResignalStatementContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::ResignalStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

tree::TerminalNode* MySqlParser::ResignalStatementContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}


size_t MySqlParser::ResignalStatementContext::getRuleIndex() const {
  return MySqlParser::RuleResignalStatement;
}


MySqlParser::ResignalStatementContext* MySqlParser::resignalStatement() {
  ResignalStatementContext *_localctx = _tracker.createInstance<ResignalStatementContext>(_ctx, getState());
  enterRule(_localctx, 490, MySqlParser::RuleResignalStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5372);
    match(MySqlParser::RESIGNAL);
    setState(5380);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SQLSTATE: {
        setState(5373);
        match(MySqlParser::SQLSTATE);
        setState(5375);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::VALUE) {
          setState(5374);
          match(MySqlParser::VALUE);
        }
        setState(5377);
        stringLiteral();
        break;
      }

      case MySqlParser::ID: {
        setState(5378);
        match(MySqlParser::ID);
        break;
      }

      case MySqlParser::REVERSE_QUOTE_ID: {
        setState(5379);
        match(MySqlParser::REVERSE_QUOTE_ID);
        break;
      }

      case MySqlParser::EOF:
      case MySqlParser::ALTER:
      case MySqlParser::ANALYZE:
      case MySqlParser::CALL:
      case MySqlParser::CHANGE:
      case MySqlParser::CHECK:
      case MySqlParser::CREATE:
      case MySqlParser::DELETE:
      case MySqlParser::DESC:
      case MySqlParser::DESCRIBE:
      case MySqlParser::DROP:
      case MySqlParser::EXPLAIN:
      case MySqlParser::GET:
      case MySqlParser::GRANT:
      case MySqlParser::INSERT:
      case MySqlParser::KILL:
      case MySqlParser::LOAD:
      case MySqlParser::LOCK:
      case MySqlParser::OPTIMIZE:
      case MySqlParser::PURGE:
      case MySqlParser::RELEASE:
      case MySqlParser::RENAME:
      case MySqlParser::REPLACE:
      case MySqlParser::RESIGNAL:
      case MySqlParser::REVOKE:
      case MySqlParser::SELECT:
      case MySqlParser::SET:
      case MySqlParser::SHOW:
      case MySqlParser::SIGNAL:
      case MySqlParser::UNLOCK:
      case MySqlParser::UPDATE:
      case MySqlParser::USE:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::CACHE:
      case MySqlParser::CHECKSUM:
      case MySqlParser::COMMIT:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DO:
      case MySqlParser::FLUSH:
      case MySqlParser::HANDLER:
      case MySqlParser::HELP:
      case MySqlParser::INSTALL:
      case MySqlParser::PREPARE:
      case MySqlParser::REPAIR:
      case MySqlParser::RESET:
      case MySqlParser::ROLLBACK:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::START:
      case MySqlParser::STOP:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::XA:
      case MySqlParser::EXECUTE:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::MINUSMINUS:
      case MySqlParser::LR_BRACKET:
      case MySqlParser::SEMI: {
        break;
      }

    default:
      break;
    }
    setState(5391);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 775, _ctx)) {
    case 1: {
      setState(5382);
      match(MySqlParser::SET);
      setState(5383);
      signalConditionInformation();
      setState(5388);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(5384);
        match(MySqlParser::COMMA);
        setState(5385);
        signalConditionInformation();
        setState(5390);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignalConditionInformationContext ------------------------------------------------------------------

MySqlParser::SignalConditionInformationContext::SignalConditionInformationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::CLASS_ORIGIN() {
  return getToken(MySqlParser::CLASS_ORIGIN, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::SUBCLASS_ORIGIN() {
  return getToken(MySqlParser::SUBCLASS_ORIGIN, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::MESSAGE_TEXT() {
  return getToken(MySqlParser::MESSAGE_TEXT, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::MYSQL_ERRNO() {
  return getToken(MySqlParser::MYSQL_ERRNO, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::CONSTRAINT_CATALOG() {
  return getToken(MySqlParser::CONSTRAINT_CATALOG, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::CONSTRAINT_SCHEMA() {
  return getToken(MySqlParser::CONSTRAINT_SCHEMA, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::CONSTRAINT_NAME() {
  return getToken(MySqlParser::CONSTRAINT_NAME, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::CATALOG_NAME() {
  return getToken(MySqlParser::CATALOG_NAME, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::SCHEMA_NAME() {
  return getToken(MySqlParser::SCHEMA_NAME, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::TABLE_NAME() {
  return getToken(MySqlParser::TABLE_NAME, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::COLUMN_NAME() {
  return getToken(MySqlParser::COLUMN_NAME, 0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::CURSOR_NAME() {
  return getToken(MySqlParser::CURSOR_NAME, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::SignalConditionInformationContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::SignalConditionInformationContext::DECIMAL_LITERAL() {
  return getToken(MySqlParser::DECIMAL_LITERAL, 0);
}

MySqlParser::MysqlVariableContext* MySqlParser::SignalConditionInformationContext::mysqlVariable() {
  return getRuleContext<MySqlParser::MysqlVariableContext>(0);
}

MySqlParser::SimpleIdContext* MySqlParser::SignalConditionInformationContext::simpleId() {
  return getRuleContext<MySqlParser::SimpleIdContext>(0);
}


size_t MySqlParser::SignalConditionInformationContext::getRuleIndex() const {
  return MySqlParser::RuleSignalConditionInformation;
}


MySqlParser::SignalConditionInformationContext* MySqlParser::signalConditionInformation() {
  SignalConditionInformationContext *_localctx = _tracker.createInstance<SignalConditionInformationContext>(_ctx, getState());
  enterRule(_localctx, 492, MySqlParser::RuleSignalConditionInformation);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5393);
    _la = _input->LA(1);
    if (!(((((_la - 297) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 297)) & ((1ULL << (MySqlParser::CLASS_ORIGIN - 297))
      | (1ULL << (MySqlParser::COLUMN_NAME - 297))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 297))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 297))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 297))
      | (1ULL << (MySqlParser::CURSOR_NAME - 297)))) != 0) || _la == MySqlParser::MESSAGE_TEXT

    || _la == MySqlParser::MYSQL_ERRNO || _la == MySqlParser::SUBCLASS_ORIGIN

    || _la == MySqlParser::TABLE_NAME || _la == MySqlParser::CATALOG_NAME || _la == MySqlParser::SCHEMA_NAME)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5394);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(5399);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 776, _ctx)) {
    case 1: {
      setState(5395);
      stringLiteral();
      break;
    }

    case 2: {
      setState(5396);
      match(MySqlParser::DECIMAL_LITERAL);
      break;
    }

    case 3: {
      setState(5397);
      mysqlVariable();
      break;
    }

    case 4: {
      setState(5398);
      simpleId();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiagnosticsStatementContext ------------------------------------------------------------------

MySqlParser::DiagnosticsStatementContext::DiagnosticsStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::GET() {
  return getToken(MySqlParser::GET, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::DIAGNOSTICS() {
  return getToken(MySqlParser::DIAGNOSTICS, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::CURRENT() {
  return getToken(MySqlParser::CURRENT, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::STACKED() {
  return getToken(MySqlParser::STACKED, 0);
}

std::vector<MySqlParser::VariableClauseContext *> MySqlParser::DiagnosticsStatementContext::variableClause() {
  return getRuleContexts<MySqlParser::VariableClauseContext>();
}

MySqlParser::VariableClauseContext* MySqlParser::DiagnosticsStatementContext::variableClause(size_t i) {
  return getRuleContext<MySqlParser::VariableClauseContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::DiagnosticsStatementContext::EQUAL_SYMBOL() {
  return getTokens(MySqlParser::EQUAL_SYMBOL);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::EQUAL_SYMBOL(size_t i) {
  return getToken(MySqlParser::EQUAL_SYMBOL, i);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::CONDITION() {
  return getToken(MySqlParser::CONDITION, 0);
}

std::vector<MySqlParser::DiagnosticsConditionInformationNameContext *> MySqlParser::DiagnosticsStatementContext::diagnosticsConditionInformationName() {
  return getRuleContexts<MySqlParser::DiagnosticsConditionInformationNameContext>();
}

MySqlParser::DiagnosticsConditionInformationNameContext* MySqlParser::DiagnosticsStatementContext::diagnosticsConditionInformationName(size_t i) {
  return getRuleContext<MySqlParser::DiagnosticsConditionInformationNameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::DiagnosticsStatementContext::NUMBER() {
  return getTokens(MySqlParser::NUMBER);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::NUMBER(size_t i) {
  return getToken(MySqlParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> MySqlParser::DiagnosticsStatementContext::ROW_COUNT() {
  return getTokens(MySqlParser::ROW_COUNT);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::ROW_COUNT(size_t i) {
  return getToken(MySqlParser::ROW_COUNT, i);
}

MySqlParser::DecimalLiteralContext* MySqlParser::DiagnosticsStatementContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::DiagnosticsStatementContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::DiagnosticsStatementContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::DiagnosticsStatementContext::getRuleIndex() const {
  return MySqlParser::RuleDiagnosticsStatement;
}


MySqlParser::DiagnosticsStatementContext* MySqlParser::diagnosticsStatement() {
  DiagnosticsStatementContext *_localctx = _tracker.createInstance<DiagnosticsStatementContext>(_ctx, getState());
  enterRule(_localctx, 494, MySqlParser::RuleDiagnosticsStatement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5401);
    match(MySqlParser::GET);
    setState(5403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CURRENT || _la == MySqlParser::STACKED) {
      setState(5402);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CURRENT || _la == MySqlParser::STACKED)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5405);
    match(MySqlParser::DIAGNOSTICS);
    setState(5437);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CURRENT:
      case MySqlParser::DATABASE:
      case MySqlParser::DIAGNOSTICS:
      case MySqlParser::GROUP:
      case MySqlParser::LEFT:
      case MySqlParser::NUMBER:
      case MySqlParser::ORDER:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::STACKED:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::SERIAL:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::POSITION:
      case MySqlParser::ACCOUNT:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::AGGREGATE:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BLOCK:
      case MySqlParser::BOOL:
      case MySqlParser::BOOLEAN:
      case MySqlParser::BTREE:
      case MySqlParser::CACHE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHANGED:
      case MySqlParser::CHANNEL:
      case MySqlParser::CHECKSUM:
      case MySqlParser::PAGE_CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLASS_ORIGIN:
      case MySqlParser::CLIENT:
      case MySqlParser::CLOSE:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COLUMN_NAME:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::COMPRESSION:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONSTRAINT_CATALOG:
      case MySqlParser::CONSTRAINT_SCHEMA:
      case MySqlParser::CONSTRAINT_NAME:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTEXT:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::CPU:
      case MySqlParser::CURSOR_NAME:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DEFAULT_AUTH:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DES_KEY_FILE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENCRYPTION:
      case MySqlParser::END:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERROR:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXPORT:
      case MySqlParser::EXTENDED:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FAST:
      case MySqlParser::FAULTS:
      case MySqlParser::FIELDS:
      case MySqlParser::FILE_BLOCK_SIZE:
      case MySqlParser::FILTER:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FLUSH:
      case MySqlParser::FOLLOWS:
      case MySqlParser::FOUND:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GENERAL:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::GROUP_REPLICATION:
      case MySqlParser::HANDLER:
      case MySqlParser::HASH:
      case MySqlParser::HELP:
      case MySqlParser::HOST:
      case MySqlParser::HOSTS:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IGNORE_SERVER_IDS:
      case MySqlParser::IMPORT:
      case MySqlParser::INDEXES:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INSTALL:
      case MySqlParser::INSTANCE:
      case MySqlParser::INVISIBLE:
      case MySqlParser::INVOKER:
      case MySqlParser::IO:
      case MySqlParser::IO_THREAD:
      case MySqlParser::IPC:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::JSON:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LEAVES:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_HEARTBEAT_PERIOD:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::MASTER_SSL:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MEDIUM:
      case MySqlParser::MEMBER:
      case MySqlParser::MERGE:
      case MySqlParser::MESSAGE_TEXT:
      case MySqlParser::MID:
      case MySqlParser::MIGRATE:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODE:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::MYSQL_ERRNO:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NEVER:
      case MySqlParser::NEXT:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OF:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONE:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPEN:
      case MySqlParser::OPTIMIZER_COSTS:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PAGE:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PHASE:
      case MySqlParser::PLUGIN:
      case MySqlParser::PLUGIN_DIR:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRECEDES:
      case MySqlParser::PREPARE:
      case MySqlParser::PRESERVE:
      case MySqlParser::PREV:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::RECOVER:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAY:
      case MySqlParser::RELAY_LOG_FILE:
      case MySqlParser::RELAY_LOG_POS:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATE_DO_DB:
      case MySqlParser::REPLICATE_DO_TABLE:
      case MySqlParser::REPLICATE_IGNORE_DB:
      case MySqlParser::REPLICATE_IGNORE_TABLE:
      case MySqlParser::REPLICATE_REWRITE_DB:
      case MySqlParser::REPLICATE_WILD_DO_TABLE:
      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
      case MySqlParser::REPLICATION:
      case MySqlParser::RESET:
      case MySqlParser::RESUME:
      case MySqlParser::RETURNED_SQLSTATE:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLE:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROTATE:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SLOW:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SONAME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SOURCE:
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_AFTER_MTS_GAPS:
      case MySqlParser::SQL_BEFORE_GTIDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::SQL_THREAD:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STOP:
      case MySqlParser::STORAGE:
      case MySqlParser::STRING:
      case MySqlParser::SUBCLASS_ORIGIN:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::SUSPEND:
      case MySqlParser::SWAPS:
      case MySqlParser::SWITCHES:
      case MySqlParser::TABLE_NAME:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRADITIONAL:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRANSACTIONAL:
      case MySqlParser::TRIGGERS:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UNTIL:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::USE_FRM:
      case MySqlParser::USER_RESOURCES:
      case MySqlParser::VALIDATION:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::VISIBLE:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WITHOUT:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XA:
      case MySqlParser::XML:
      case MySqlParser::INTERNAL:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::AUDIT_ADMIN:
      case MySqlParser::BACKUP_ADMIN:
      case MySqlParser::BINLOG_ADMIN:
      case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
      case MySqlParser::CLONE_ADMIN:
      case MySqlParser::CONNECTION_ADMIN:
      case MySqlParser::ENCRYPTION_KEY_ADMIN:
      case MySqlParser::FIREWALL_ADMIN:
      case MySqlParser::FIREWALL_USER:
      case MySqlParser::GROUP_REPLICATION_ADMIN:
      case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
      case MySqlParser::NDB_STORED_USER:
      case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
      case MySqlParser::REPLICATION_APPLIER:
      case MySqlParser::REPLICATION_SLAVE_ADMIN:
      case MySqlParser::RESOURCE_GROUP_ADMIN:
      case MySqlParser::RESOURCE_GROUP_USER:
      case MySqlParser::ROLE_ADMIN:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::SET_USER_ID:
      case MySqlParser::SHOW_ROUTINE:
      case MySqlParser::SYSTEM_VARIABLES_ADMIN:
      case MySqlParser::TABLE_ENCRYPTION_ADMIN:
      case MySqlParser::VERSION_TOKEN_ADMIN:
      case MySqlParser::XA_RECOVER_ADMIN:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFORMANCE_SCHEMA:
      case MySqlParser::TOKUDB:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CATALOG_NAME:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SCHEMA_NAME:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD:
      case MySqlParser::AT_SIGN:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID:
      case MySqlParser::LOCAL_ID:
      case MySqlParser::GLOBAL_ID: {
        setState(5406);
        variableClause();
        setState(5407);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(5408);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::NUMBER || _la == MySqlParser::ROW_COUNT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5416);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(5409);
          match(MySqlParser::COMMA);
          setState(5410);
          variableClause();
          setState(5411);
          match(MySqlParser::EQUAL_SYMBOL);
          setState(5412);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::NUMBER || _la == MySqlParser::ROW_COUNT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(5418);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::CONDITION: {
        setState(5419);
        match(MySqlParser::CONDITION);
        setState(5422);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ZERO_DECIMAL:
          case MySqlParser::ONE_DECIMAL:
          case MySqlParser::TWO_DECIMAL:
          case MySqlParser::DECIMAL_LITERAL: {
            setState(5420);
            decimalLiteral();
            break;
          }

          case MySqlParser::CURRENT:
          case MySqlParser::DATABASE:
          case MySqlParser::DIAGNOSTICS:
          case MySqlParser::GROUP:
          case MySqlParser::LEFT:
          case MySqlParser::NUMBER:
          case MySqlParser::ORDER:
          case MySqlParser::RIGHT:
          case MySqlParser::SCHEMA:
          case MySqlParser::STACKED:
          case MySqlParser::DATE:
          case MySqlParser::TIME:
          case MySqlParser::TIMESTAMP:
          case MySqlParser::DATETIME:
          case MySqlParser::YEAR:
          case MySqlParser::TEXT:
          case MySqlParser::ENUM:
          case MySqlParser::SERIAL:
          case MySqlParser::JSON_VALID:
          case MySqlParser::JSON_SCHEMA_VALID:
          case MySqlParser::AVG:
          case MySqlParser::BIT_AND:
          case MySqlParser::BIT_OR:
          case MySqlParser::BIT_XOR:
          case MySqlParser::COUNT:
          case MySqlParser::GROUP_CONCAT:
          case MySqlParser::MAX:
          case MySqlParser::MIN:
          case MySqlParser::STD:
          case MySqlParser::STDDEV:
          case MySqlParser::STDDEV_POP:
          case MySqlParser::STDDEV_SAMP:
          case MySqlParser::SUM:
          case MySqlParser::VAR_POP:
          case MySqlParser::VAR_SAMP:
          case MySqlParser::VARIANCE:
          case MySqlParser::POSITION:
          case MySqlParser::ACCOUNT:
          case MySqlParser::ACTION:
          case MySqlParser::AFTER:
          case MySqlParser::AGGREGATE:
          case MySqlParser::ALGORITHM:
          case MySqlParser::ANY:
          case MySqlParser::AT:
          case MySqlParser::AUTHORS:
          case MySqlParser::AUTOCOMMIT:
          case MySqlParser::AUTOEXTEND_SIZE:
          case MySqlParser::AUTO_INCREMENT:
          case MySqlParser::AVG_ROW_LENGTH:
          case MySqlParser::BEGIN:
          case MySqlParser::BINLOG:
          case MySqlParser::BIT:
          case MySqlParser::BLOCK:
          case MySqlParser::BOOL:
          case MySqlParser::BOOLEAN:
          case MySqlParser::BTREE:
          case MySqlParser::CACHE:
          case MySqlParser::CASCADED:
          case MySqlParser::CHAIN:
          case MySqlParser::CHANGED:
          case MySqlParser::CHANNEL:
          case MySqlParser::CHECKSUM:
          case MySqlParser::PAGE_CHECKSUM:
          case MySqlParser::CIPHER:
          case MySqlParser::CLASS_ORIGIN:
          case MySqlParser::CLIENT:
          case MySqlParser::CLOSE:
          case MySqlParser::COALESCE:
          case MySqlParser::CODE:
          case MySqlParser::COLUMNS:
          case MySqlParser::COLUMN_FORMAT:
          case MySqlParser::COLUMN_NAME:
          case MySqlParser::COMMENT:
          case MySqlParser::COMMIT:
          case MySqlParser::COMPACT:
          case MySqlParser::COMPLETION:
          case MySqlParser::COMPRESSED:
          case MySqlParser::COMPRESSION:
          case MySqlParser::CONCURRENT:
          case MySqlParser::CONNECTION:
          case MySqlParser::CONSISTENT:
          case MySqlParser::CONSTRAINT_CATALOG:
          case MySqlParser::CONSTRAINT_SCHEMA:
          case MySqlParser::CONSTRAINT_NAME:
          case MySqlParser::CONTAINS:
          case MySqlParser::CONTEXT:
          case MySqlParser::CONTRIBUTORS:
          case MySqlParser::COPY:
          case MySqlParser::CPU:
          case MySqlParser::CURSOR_NAME:
          case MySqlParser::DATA:
          case MySqlParser::DATAFILE:
          case MySqlParser::DEALLOCATE:
          case MySqlParser::DEFAULT_AUTH:
          case MySqlParser::DEFINER:
          case MySqlParser::DELAY_KEY_WRITE:
          case MySqlParser::DES_KEY_FILE:
          case MySqlParser::DIRECTORY:
          case MySqlParser::DISABLE:
          case MySqlParser::DISCARD:
          case MySqlParser::DISK:
          case MySqlParser::DO:
          case MySqlParser::DUMPFILE:
          case MySqlParser::DUPLICATE:
          case MySqlParser::DYNAMIC:
          case MySqlParser::ENABLE:
          case MySqlParser::ENCRYPTION:
          case MySqlParser::END:
          case MySqlParser::ENDS:
          case MySqlParser::ENGINE:
          case MySqlParser::ENGINES:
          case MySqlParser::ERROR:
          case MySqlParser::ERRORS:
          case MySqlParser::ESCAPE:
          case MySqlParser::EVEN:
          case MySqlParser::EVENT:
          case MySqlParser::EVENTS:
          case MySqlParser::EVERY:
          case MySqlParser::EXCHANGE:
          case MySqlParser::EXCLUSIVE:
          case MySqlParser::EXPIRE:
          case MySqlParser::EXPORT:
          case MySqlParser::EXTENDED:
          case MySqlParser::EXTENT_SIZE:
          case MySqlParser::FAST:
          case MySqlParser::FAULTS:
          case MySqlParser::FIELDS:
          case MySqlParser::FILE_BLOCK_SIZE:
          case MySqlParser::FILTER:
          case MySqlParser::FIRST:
          case MySqlParser::FIXED:
          case MySqlParser::FLUSH:
          case MySqlParser::FOLLOWS:
          case MySqlParser::FOUND:
          case MySqlParser::FULL:
          case MySqlParser::FUNCTION:
          case MySqlParser::GENERAL:
          case MySqlParser::GLOBAL:
          case MySqlParser::GRANTS:
          case MySqlParser::GROUP_REPLICATION:
          case MySqlParser::HANDLER:
          case MySqlParser::HASH:
          case MySqlParser::HELP:
          case MySqlParser::HOST:
          case MySqlParser::HOSTS:
          case MySqlParser::IDENTIFIED:
          case MySqlParser::IGNORE_SERVER_IDS:
          case MySqlParser::IMPORT:
          case MySqlParser::INDEXES:
          case MySqlParser::INITIAL_SIZE:
          case MySqlParser::INPLACE:
          case MySqlParser::INSERT_METHOD:
          case MySqlParser::INSTALL:
          case MySqlParser::INSTANCE:
          case MySqlParser::INVISIBLE:
          case MySqlParser::INVOKER:
          case MySqlParser::IO:
          case MySqlParser::IO_THREAD:
          case MySqlParser::IPC:
          case MySqlParser::ISOLATION:
          case MySqlParser::ISSUER:
          case MySqlParser::JSON:
          case MySqlParser::KEY_BLOCK_SIZE:
          case MySqlParser::LANGUAGE:
          case MySqlParser::LAST:
          case MySqlParser::LEAVES:
          case MySqlParser::LESS:
          case MySqlParser::LEVEL:
          case MySqlParser::LIST:
          case MySqlParser::LOCAL:
          case MySqlParser::LOGFILE:
          case MySqlParser::LOGS:
          case MySqlParser::MASTER:
          case MySqlParser::MASTER_AUTO_POSITION:
          case MySqlParser::MASTER_CONNECT_RETRY:
          case MySqlParser::MASTER_DELAY:
          case MySqlParser::MASTER_HEARTBEAT_PERIOD:
          case MySqlParser::MASTER_HOST:
          case MySqlParser::MASTER_LOG_FILE:
          case MySqlParser::MASTER_LOG_POS:
          case MySqlParser::MASTER_PASSWORD:
          case MySqlParser::MASTER_PORT:
          case MySqlParser::MASTER_RETRY_COUNT:
          case MySqlParser::MASTER_SSL:
          case MySqlParser::MASTER_SSL_CA:
          case MySqlParser::MASTER_SSL_CAPATH:
          case MySqlParser::MASTER_SSL_CERT:
          case MySqlParser::MASTER_SSL_CIPHER:
          case MySqlParser::MASTER_SSL_CRL:
          case MySqlParser::MASTER_SSL_CRLPATH:
          case MySqlParser::MASTER_SSL_KEY:
          case MySqlParser::MASTER_TLS_VERSION:
          case MySqlParser::MASTER_USER:
          case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
          case MySqlParser::MAX_QUERIES_PER_HOUR:
          case MySqlParser::MAX_ROWS:
          case MySqlParser::MAX_SIZE:
          case MySqlParser::MAX_UPDATES_PER_HOUR:
          case MySqlParser::MAX_USER_CONNECTIONS:
          case MySqlParser::MEDIUM:
          case MySqlParser::MEMBER:
          case MySqlParser::MERGE:
          case MySqlParser::MESSAGE_TEXT:
          case MySqlParser::MID:
          case MySqlParser::MIGRATE:
          case MySqlParser::MIN_ROWS:
          case MySqlParser::MODE:
          case MySqlParser::MODIFY:
          case MySqlParser::MUTEX:
          case MySqlParser::MYSQL:
          case MySqlParser::MYSQL_ERRNO:
          case MySqlParser::NAME:
          case MySqlParser::NAMES:
          case MySqlParser::NCHAR:
          case MySqlParser::NEVER:
          case MySqlParser::NEXT:
          case MySqlParser::NO:
          case MySqlParser::NODEGROUP:
          case MySqlParser::NONE:
          case MySqlParser::OFFLINE:
          case MySqlParser::OFFSET:
          case MySqlParser::OF:
          case MySqlParser::OJ:
          case MySqlParser::OLD_PASSWORD:
          case MySqlParser::ONE:
          case MySqlParser::ONLINE:
          case MySqlParser::ONLY:
          case MySqlParser::OPEN:
          case MySqlParser::OPTIMIZER_COSTS:
          case MySqlParser::OPTIONS:
          case MySqlParser::OWNER:
          case MySqlParser::PACK_KEYS:
          case MySqlParser::PAGE:
          case MySqlParser::PARSER:
          case MySqlParser::PARTIAL:
          case MySqlParser::PARTITIONING:
          case MySqlParser::PARTITIONS:
          case MySqlParser::PASSWORD:
          case MySqlParser::PHASE:
          case MySqlParser::PLUGIN:
          case MySqlParser::PLUGIN_DIR:
          case MySqlParser::PLUGINS:
          case MySqlParser::PORT:
          case MySqlParser::PRECEDES:
          case MySqlParser::PREPARE:
          case MySqlParser::PRESERVE:
          case MySqlParser::PREV:
          case MySqlParser::PROCESSLIST:
          case MySqlParser::PROFILE:
          case MySqlParser::PROFILES:
          case MySqlParser::PROXY:
          case MySqlParser::QUERY:
          case MySqlParser::QUICK:
          case MySqlParser::REBUILD:
          case MySqlParser::RECOVER:
          case MySqlParser::REDO_BUFFER_SIZE:
          case MySqlParser::REDUNDANT:
          case MySqlParser::RELAY:
          case MySqlParser::RELAY_LOG_FILE:
          case MySqlParser::RELAY_LOG_POS:
          case MySqlParser::RELAYLOG:
          case MySqlParser::REMOVE:
          case MySqlParser::REORGANIZE:
          case MySqlParser::REPAIR:
          case MySqlParser::REPLICATE_DO_DB:
          case MySqlParser::REPLICATE_DO_TABLE:
          case MySqlParser::REPLICATE_IGNORE_DB:
          case MySqlParser::REPLICATE_IGNORE_TABLE:
          case MySqlParser::REPLICATE_REWRITE_DB:
          case MySqlParser::REPLICATE_WILD_DO_TABLE:
          case MySqlParser::REPLICATE_WILD_IGNORE_TABLE:
          case MySqlParser::REPLICATION:
          case MySqlParser::RESET:
          case MySqlParser::RESUME:
          case MySqlParser::RETURNED_SQLSTATE:
          case MySqlParser::RETURNS:
          case MySqlParser::ROLE:
          case MySqlParser::ROLLBACK:
          case MySqlParser::ROLLUP:
          case MySqlParser::ROTATE:
          case MySqlParser::ROW:
          case MySqlParser::ROWS:
          case MySqlParser::ROW_FORMAT:
          case MySqlParser::SAVEPOINT:
          case MySqlParser::SCHEDULE:
          case MySqlParser::SECURITY:
          case MySqlParser::SERVER:
          case MySqlParser::SESSION:
          case MySqlParser::SHARE:
          case MySqlParser::SHARED:
          case MySqlParser::SIGNED:
          case MySqlParser::SIMPLE:
          case MySqlParser::SLAVE:
          case MySqlParser::SLOW:
          case MySqlParser::SNAPSHOT:
          case MySqlParser::SOCKET:
          case MySqlParser::SOME:
          case MySqlParser::SONAME:
          case MySqlParser::SOUNDS:
          case MySqlParser::SOURCE:
          case MySqlParser::SQL_AFTER_GTIDS:
          case MySqlParser::SQL_AFTER_MTS_GAPS:
          case MySqlParser::SQL_BEFORE_GTIDS:
          case MySqlParser::SQL_BUFFER_RESULT:
          case MySqlParser::SQL_CACHE:
          case MySqlParser::SQL_NO_CACHE:
          case MySqlParser::SQL_THREAD:
          case MySqlParser::START:
          case MySqlParser::STARTS:
          case MySqlParser::STATS_AUTO_RECALC:
          case MySqlParser::STATS_PERSISTENT:
          case MySqlParser::STATS_SAMPLE_PAGES:
          case MySqlParser::STATUS:
          case MySqlParser::STOP:
          case MySqlParser::STORAGE:
          case MySqlParser::STRING:
          case MySqlParser::SUBCLASS_ORIGIN:
          case MySqlParser::SUBJECT:
          case MySqlParser::SUBPARTITION:
          case MySqlParser::SUBPARTITIONS:
          case MySqlParser::SUSPEND:
          case MySqlParser::SWAPS:
          case MySqlParser::SWITCHES:
          case MySqlParser::TABLE_NAME:
          case MySqlParser::TABLESPACE:
          case MySqlParser::TEMPORARY:
          case MySqlParser::TEMPTABLE:
          case MySqlParser::THAN:
          case MySqlParser::TRADITIONAL:
          case MySqlParser::TRANSACTION:
          case MySqlParser::TRANSACTIONAL:
          case MySqlParser::TRIGGERS:
          case MySqlParser::TRUNCATE:
          case MySqlParser::UNDEFINED:
          case MySqlParser::UNDOFILE:
          case MySqlParser::UNDO_BUFFER_SIZE:
          case MySqlParser::UNINSTALL:
          case MySqlParser::UNKNOWN:
          case MySqlParser::UNTIL:
          case MySqlParser::UPGRADE:
          case MySqlParser::USER:
          case MySqlParser::USE_FRM:
          case MySqlParser::USER_RESOURCES:
          case MySqlParser::VALIDATION:
          case MySqlParser::VALUE:
          case MySqlParser::VARIABLES:
          case MySqlParser::VIEW:
          case MySqlParser::VISIBLE:
          case MySqlParser::WAIT:
          case MySqlParser::WARNINGS:
          case MySqlParser::WITHOUT:
          case MySqlParser::WORK:
          case MySqlParser::WRAPPER:
          case MySqlParser::X509:
          case MySqlParser::XA:
          case MySqlParser::XML:
          case MySqlParser::INTERNAL:
          case MySqlParser::QUARTER:
          case MySqlParser::MONTH:
          case MySqlParser::DAY:
          case MySqlParser::HOUR:
          case MySqlParser::MINUTE:
          case MySqlParser::WEEK:
          case MySqlParser::SECOND:
          case MySqlParser::MICROSECOND:
          case MySqlParser::TABLES:
          case MySqlParser::ROUTINE:
          case MySqlParser::EXECUTE:
          case MySqlParser::FILE:
          case MySqlParser::PROCESS:
          case MySqlParser::RELOAD:
          case MySqlParser::SHUTDOWN:
          case MySqlParser::SUPER:
          case MySqlParser::PRIVILEGES:
          case MySqlParser::AUDIT_ADMIN:
          case MySqlParser::BACKUP_ADMIN:
          case MySqlParser::BINLOG_ADMIN:
          case MySqlParser::BINLOG_ENCRYPTION_ADMIN:
          case MySqlParser::CLONE_ADMIN:
          case MySqlParser::CONNECTION_ADMIN:
          case MySqlParser::ENCRYPTION_KEY_ADMIN:
          case MySqlParser::FIREWALL_ADMIN:
          case MySqlParser::FIREWALL_USER:
          case MySqlParser::GROUP_REPLICATION_ADMIN:
          case MySqlParser::INNODB_REDO_LOG_ARCHIVE:
          case MySqlParser::NDB_STORED_USER:
          case MySqlParser::PERSIST_RO_VARIABLES_ADMIN:
          case MySqlParser::REPLICATION_APPLIER:
          case MySqlParser::REPLICATION_SLAVE_ADMIN:
          case MySqlParser::RESOURCE_GROUP_ADMIN:
          case MySqlParser::RESOURCE_GROUP_USER:
          case MySqlParser::ROLE_ADMIN:
          case MySqlParser::SESSION_VARIABLES_ADMIN:
          case MySqlParser::SET_USER_ID:
          case MySqlParser::SHOW_ROUTINE:
          case MySqlParser::SYSTEM_VARIABLES_ADMIN:
          case MySqlParser::TABLE_ENCRYPTION_ADMIN:
          case MySqlParser::VERSION_TOKEN_ADMIN:
          case MySqlParser::XA_RECOVER_ADMIN:
          case MySqlParser::ARMSCII8:
          case MySqlParser::ASCII:
          case MySqlParser::BIG5:
          case MySqlParser::CP1250:
          case MySqlParser::CP1251:
          case MySqlParser::CP1256:
          case MySqlParser::CP1257:
          case MySqlParser::CP850:
          case MySqlParser::CP852:
          case MySqlParser::CP866:
          case MySqlParser::CP932:
          case MySqlParser::DEC8:
          case MySqlParser::EUCJPMS:
          case MySqlParser::EUCKR:
          case MySqlParser::GB2312:
          case MySqlParser::GBK:
          case MySqlParser::GEOSTD8:
          case MySqlParser::GREEK:
          case MySqlParser::HEBREW:
          case MySqlParser::HP8:
          case MySqlParser::KEYBCS2:
          case MySqlParser::KOI8R:
          case MySqlParser::KOI8U:
          case MySqlParser::LATIN1:
          case MySqlParser::LATIN2:
          case MySqlParser::LATIN5:
          case MySqlParser::LATIN7:
          case MySqlParser::MACCE:
          case MySqlParser::MACROMAN:
          case MySqlParser::SJIS:
          case MySqlParser::SWE7:
          case MySqlParser::TIS620:
          case MySqlParser::UCS2:
          case MySqlParser::UJIS:
          case MySqlParser::UTF16:
          case MySqlParser::UTF16LE:
          case MySqlParser::UTF32:
          case MySqlParser::UTF8:
          case MySqlParser::UTF8MB3:
          case MySqlParser::UTF8MB4:
          case MySqlParser::ARCHIVE:
          case MySqlParser::BLACKHOLE:
          case MySqlParser::CSV:
          case MySqlParser::FEDERATED:
          case MySqlParser::INNODB:
          case MySqlParser::MEMORY:
          case MySqlParser::MRG_MYISAM:
          case MySqlParser::MYISAM:
          case MySqlParser::NDB:
          case MySqlParser::NDBCLUSTER:
          case MySqlParser::PERFORMANCE_SCHEMA:
          case MySqlParser::TOKUDB:
          case MySqlParser::REPEATABLE:
          case MySqlParser::COMMITTED:
          case MySqlParser::UNCOMMITTED:
          case MySqlParser::SERIALIZABLE:
          case MySqlParser::GEOMETRYCOLLECTION:
          case MySqlParser::LINESTRING:
          case MySqlParser::MULTILINESTRING:
          case MySqlParser::MULTIPOINT:
          case MySqlParser::MULTIPOLYGON:
          case MySqlParser::POINT:
          case MySqlParser::POLYGON:
          case MySqlParser::ABS:
          case MySqlParser::ACOS:
          case MySqlParser::ADDDATE:
          case MySqlParser::ADDTIME:
          case MySqlParser::AES_DECRYPT:
          case MySqlParser::AES_ENCRYPT:
          case MySqlParser::AREA:
          case MySqlParser::ASBINARY:
          case MySqlParser::ASIN:
          case MySqlParser::ASTEXT:
          case MySqlParser::ASWKB:
          case MySqlParser::ASWKT:
          case MySqlParser::ASYMMETRIC_DECRYPT:
          case MySqlParser::ASYMMETRIC_DERIVE:
          case MySqlParser::ASYMMETRIC_ENCRYPT:
          case MySqlParser::ASYMMETRIC_SIGN:
          case MySqlParser::ASYMMETRIC_VERIFY:
          case MySqlParser::ATAN:
          case MySqlParser::ATAN2:
          case MySqlParser::BENCHMARK:
          case MySqlParser::BIN:
          case MySqlParser::BIT_COUNT:
          case MySqlParser::BIT_LENGTH:
          case MySqlParser::BUFFER:
          case MySqlParser::CATALOG_NAME:
          case MySqlParser::CEIL:
          case MySqlParser::CEILING:
          case MySqlParser::CENTROID:
          case MySqlParser::CHARACTER_LENGTH:
          case MySqlParser::CHARSET:
          case MySqlParser::CHAR_LENGTH:
          case MySqlParser::COERCIBILITY:
          case MySqlParser::COLLATION:
          case MySqlParser::COMPRESS:
          case MySqlParser::CONCAT:
          case MySqlParser::CONCAT_WS:
          case MySqlParser::CONNECTION_ID:
          case MySqlParser::CONV:
          case MySqlParser::CONVERT_TZ:
          case MySqlParser::COS:
          case MySqlParser::COT:
          case MySqlParser::CRC32:
          case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
          case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
          case MySqlParser::CREATE_DH_PARAMETERS:
          case MySqlParser::CREATE_DIGEST:
          case MySqlParser::CROSSES:
          case MySqlParser::DATEDIFF:
          case MySqlParser::DATE_FORMAT:
          case MySqlParser::DAYNAME:
          case MySqlParser::DAYOFMONTH:
          case MySqlParser::DAYOFWEEK:
          case MySqlParser::DAYOFYEAR:
          case MySqlParser::DECODE:
          case MySqlParser::DEGREES:
          case MySqlParser::DES_DECRYPT:
          case MySqlParser::DES_ENCRYPT:
          case MySqlParser::DIMENSION:
          case MySqlParser::DISJOINT:
          case MySqlParser::ELT:
          case MySqlParser::ENCODE:
          case MySqlParser::ENCRYPT:
          case MySqlParser::ENDPOINT:
          case MySqlParser::ENVELOPE:
          case MySqlParser::EQUALS:
          case MySqlParser::EXP:
          case MySqlParser::EXPORT_SET:
          case MySqlParser::EXTERIORRING:
          case MySqlParser::EXTRACTVALUE:
          case MySqlParser::FIELD:
          case MySqlParser::FIND_IN_SET:
          case MySqlParser::FLOOR:
          case MySqlParser::FORMAT:
          case MySqlParser::FOUND_ROWS:
          case MySqlParser::FROM_BASE64:
          case MySqlParser::FROM_DAYS:
          case MySqlParser::FROM_UNIXTIME:
          case MySqlParser::GEOMCOLLFROMTEXT:
          case MySqlParser::GEOMCOLLFROMWKB:
          case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
          case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
          case MySqlParser::GEOMETRYFROMTEXT:
          case MySqlParser::GEOMETRYFROMWKB:
          case MySqlParser::GEOMETRYN:
          case MySqlParser::GEOMETRYTYPE:
          case MySqlParser::GEOMFROMTEXT:
          case MySqlParser::GEOMFROMWKB:
          case MySqlParser::GET_FORMAT:
          case MySqlParser::GET_LOCK:
          case MySqlParser::GLENGTH:
          case MySqlParser::GREATEST:
          case MySqlParser::GTID_SUBSET:
          case MySqlParser::GTID_SUBTRACT:
          case MySqlParser::HEX:
          case MySqlParser::IFNULL:
          case MySqlParser::INET6_ATON:
          case MySqlParser::INET6_NTOA:
          case MySqlParser::INET_ATON:
          case MySqlParser::INET_NTOA:
          case MySqlParser::INSTR:
          case MySqlParser::INTERIORRINGN:
          case MySqlParser::INTERSECTS:
          case MySqlParser::ISCLOSED:
          case MySqlParser::ISEMPTY:
          case MySqlParser::ISNULL:
          case MySqlParser::ISSIMPLE:
          case MySqlParser::IS_FREE_LOCK:
          case MySqlParser::IS_IPV4:
          case MySqlParser::IS_IPV4_COMPAT:
          case MySqlParser::IS_IPV4_MAPPED:
          case MySqlParser::IS_IPV6:
          case MySqlParser::IS_USED_LOCK:
          case MySqlParser::LAST_INSERT_ID:
          case MySqlParser::LCASE:
          case MySqlParser::LEAST:
          case MySqlParser::LENGTH:
          case MySqlParser::LINEFROMTEXT:
          case MySqlParser::LINEFROMWKB:
          case MySqlParser::LINESTRINGFROMTEXT:
          case MySqlParser::LINESTRINGFROMWKB:
          case MySqlParser::LN:
          case MySqlParser::LOAD_FILE:
          case MySqlParser::LOCATE:
          case MySqlParser::LOG:
          case MySqlParser::LOG10:
          case MySqlParser::LOG2:
          case MySqlParser::LOWER:
          case MySqlParser::LPAD:
          case MySqlParser::LTRIM:
          case MySqlParser::MAKEDATE:
          case MySqlParser::MAKETIME:
          case MySqlParser::MAKE_SET:
          case MySqlParser::MASTER_POS_WAIT:
          case MySqlParser::MBRCONTAINS:
          case MySqlParser::MBRDISJOINT:
          case MySqlParser::MBREQUAL:
          case MySqlParser::MBRINTERSECTS:
          case MySqlParser::MBROVERLAPS:
          case MySqlParser::MBRTOUCHES:
          case MySqlParser::MBRWITHIN:
          case MySqlParser::MD5:
          case MySqlParser::MLINEFROMTEXT:
          case MySqlParser::MLINEFROMWKB:
          case MySqlParser::MONTHNAME:
          case MySqlParser::MPOINTFROMTEXT:
          case MySqlParser::MPOINTFROMWKB:
          case MySqlParser::MPOLYFROMTEXT:
          case MySqlParser::MPOLYFROMWKB:
          case MySqlParser::MULTILINESTRINGFROMTEXT:
          case MySqlParser::MULTILINESTRINGFROMWKB:
          case MySqlParser::MULTIPOINTFROMTEXT:
          case MySqlParser::MULTIPOINTFROMWKB:
          case MySqlParser::MULTIPOLYGONFROMTEXT:
          case MySqlParser::MULTIPOLYGONFROMWKB:
          case MySqlParser::NAME_CONST:
          case MySqlParser::NULLIF:
          case MySqlParser::NUMGEOMETRIES:
          case MySqlParser::NUMINTERIORRINGS:
          case MySqlParser::NUMPOINTS:
          case MySqlParser::OCT:
          case MySqlParser::OCTET_LENGTH:
          case MySqlParser::ORD:
          case MySqlParser::OVERLAPS:
          case MySqlParser::PERIOD_ADD:
          case MySqlParser::PERIOD_DIFF:
          case MySqlParser::PI:
          case MySqlParser::POINTFROMTEXT:
          case MySqlParser::POINTFROMWKB:
          case MySqlParser::POINTN:
          case MySqlParser::POLYFROMTEXT:
          case MySqlParser::POLYFROMWKB:
          case MySqlParser::POLYGONFROMTEXT:
          case MySqlParser::POLYGONFROMWKB:
          case MySqlParser::POW:
          case MySqlParser::POWER:
          case MySqlParser::QUOTE:
          case MySqlParser::RADIANS:
          case MySqlParser::RAND:
          case MySqlParser::RANDOM_BYTES:
          case MySqlParser::RELEASE_LOCK:
          case MySqlParser::REVERSE:
          case MySqlParser::ROUND:
          case MySqlParser::ROW_COUNT:
          case MySqlParser::RPAD:
          case MySqlParser::RTRIM:
          case MySqlParser::SEC_TO_TIME:
          case MySqlParser::SESSION_USER:
          case MySqlParser::SHA:
          case MySqlParser::SHA1:
          case MySqlParser::SHA2:
          case MySqlParser::SCHEMA_NAME:
          case MySqlParser::SIGN:
          case MySqlParser::SIN:
          case MySqlParser::SLEEP:
          case MySqlParser::SOUNDEX:
          case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
          case MySqlParser::SQRT:
          case MySqlParser::SRID:
          case MySqlParser::STARTPOINT:
          case MySqlParser::STRCMP:
          case MySqlParser::STR_TO_DATE:
          case MySqlParser::ST_AREA:
          case MySqlParser::ST_ASBINARY:
          case MySqlParser::ST_ASTEXT:
          case MySqlParser::ST_ASWKB:
          case MySqlParser::ST_ASWKT:
          case MySqlParser::ST_BUFFER:
          case MySqlParser::ST_CENTROID:
          case MySqlParser::ST_CONTAINS:
          case MySqlParser::ST_CROSSES:
          case MySqlParser::ST_DIFFERENCE:
          case MySqlParser::ST_DIMENSION:
          case MySqlParser::ST_DISJOINT:
          case MySqlParser::ST_DISTANCE:
          case MySqlParser::ST_ENDPOINT:
          case MySqlParser::ST_ENVELOPE:
          case MySqlParser::ST_EQUALS:
          case MySqlParser::ST_EXTERIORRING:
          case MySqlParser::ST_GEOMCOLLFROMTEXT:
          case MySqlParser::ST_GEOMCOLLFROMTXT:
          case MySqlParser::ST_GEOMCOLLFROMWKB:
          case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
          case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
          case MySqlParser::ST_GEOMETRYFROMTEXT:
          case MySqlParser::ST_GEOMETRYFROMWKB:
          case MySqlParser::ST_GEOMETRYN:
          case MySqlParser::ST_GEOMETRYTYPE:
          case MySqlParser::ST_GEOMFROMTEXT:
          case MySqlParser::ST_GEOMFROMWKB:
          case MySqlParser::ST_INTERIORRINGN:
          case MySqlParser::ST_INTERSECTION:
          case MySqlParser::ST_INTERSECTS:
          case MySqlParser::ST_ISCLOSED:
          case MySqlParser::ST_ISEMPTY:
          case MySqlParser::ST_ISSIMPLE:
          case MySqlParser::ST_LINEFROMTEXT:
          case MySqlParser::ST_LINEFROMWKB:
          case MySqlParser::ST_LINESTRINGFROMTEXT:
          case MySqlParser::ST_LINESTRINGFROMWKB:
          case MySqlParser::ST_NUMGEOMETRIES:
          case MySqlParser::ST_NUMINTERIORRING:
          case MySqlParser::ST_NUMINTERIORRINGS:
          case MySqlParser::ST_NUMPOINTS:
          case MySqlParser::ST_OVERLAPS:
          case MySqlParser::ST_POINTFROMTEXT:
          case MySqlParser::ST_POINTFROMWKB:
          case MySqlParser::ST_POINTN:
          case MySqlParser::ST_POLYFROMTEXT:
          case MySqlParser::ST_POLYFROMWKB:
          case MySqlParser::ST_POLYGONFROMTEXT:
          case MySqlParser::ST_POLYGONFROMWKB:
          case MySqlParser::ST_SRID:
          case MySqlParser::ST_STARTPOINT:
          case MySqlParser::ST_SYMDIFFERENCE:
          case MySqlParser::ST_TOUCHES:
          case MySqlParser::ST_UNION:
          case MySqlParser::ST_WITHIN:
          case MySqlParser::ST_X:
          case MySqlParser::ST_Y:
          case MySqlParser::SUBDATE:
          case MySqlParser::SUBSTRING_INDEX:
          case MySqlParser::SUBTIME:
          case MySqlParser::SYSTEM_USER:
          case MySqlParser::TAN:
          case MySqlParser::TIMEDIFF:
          case MySqlParser::TIMESTAMPADD:
          case MySqlParser::TIMESTAMPDIFF:
          case MySqlParser::TIME_FORMAT:
          case MySqlParser::TIME_TO_SEC:
          case MySqlParser::TOUCHES:
          case MySqlParser::TO_BASE64:
          case MySqlParser::TO_DAYS:
          case MySqlParser::TO_SECONDS:
          case MySqlParser::UCASE:
          case MySqlParser::UNCOMPRESS:
          case MySqlParser::UNCOMPRESSED_LENGTH:
          case MySqlParser::UNHEX:
          case MySqlParser::UNIX_TIMESTAMP:
          case MySqlParser::UPDATEXML:
          case MySqlParser::UPPER:
          case MySqlParser::UUID:
          case MySqlParser::UUID_SHORT:
          case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
          case MySqlParser::VERSION:
          case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
          case MySqlParser::WEEKDAY:
          case MySqlParser::WEEKOFYEAR:
          case MySqlParser::WEIGHT_STRING:
          case MySqlParser::WITHIN:
          case MySqlParser::YEARWEEK:
          case MySqlParser::Y_FUNCTION:
          case MySqlParser::X_FUNCTION:
          case MySqlParser::MOD:
          case MySqlParser::AT_SIGN:
          case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
          case MySqlParser::STRING_LITERAL:
          case MySqlParser::ID:
          case MySqlParser::REVERSE_QUOTE_ID:
          case MySqlParser::LOCAL_ID:
          case MySqlParser::GLOBAL_ID: {
            setState(5421);
            variableClause();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5424);
        variableClause();
        setState(5425);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(5426);
        diagnosticsConditionInformationName();
        setState(5434);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(5427);
          match(MySqlParser::COMMA);
          setState(5428);
          variableClause();
          setState(5429);
          match(MySqlParser::EQUAL_SYMBOL);
          setState(5430);
          diagnosticsConditionInformationName();
          setState(5436);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiagnosticsConditionInformationNameContext ------------------------------------------------------------------

MySqlParser::DiagnosticsConditionInformationNameContext::DiagnosticsConditionInformationNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::CLASS_ORIGIN() {
  return getToken(MySqlParser::CLASS_ORIGIN, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::SUBCLASS_ORIGIN() {
  return getToken(MySqlParser::SUBCLASS_ORIGIN, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::RETURNED_SQLSTATE() {
  return getToken(MySqlParser::RETURNED_SQLSTATE, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::MESSAGE_TEXT() {
  return getToken(MySqlParser::MESSAGE_TEXT, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::MYSQL_ERRNO() {
  return getToken(MySqlParser::MYSQL_ERRNO, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::CONSTRAINT_CATALOG() {
  return getToken(MySqlParser::CONSTRAINT_CATALOG, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::CONSTRAINT_SCHEMA() {
  return getToken(MySqlParser::CONSTRAINT_SCHEMA, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::CONSTRAINT_NAME() {
  return getToken(MySqlParser::CONSTRAINT_NAME, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::CATALOG_NAME() {
  return getToken(MySqlParser::CATALOG_NAME, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::SCHEMA_NAME() {
  return getToken(MySqlParser::SCHEMA_NAME, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::TABLE_NAME() {
  return getToken(MySqlParser::TABLE_NAME, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::COLUMN_NAME() {
  return getToken(MySqlParser::COLUMN_NAME, 0);
}

tree::TerminalNode* MySqlParser::DiagnosticsConditionInformationNameContext::CURSOR_NAME() {
  return getToken(MySqlParser::CURSOR_NAME, 0);
}


size_t MySqlParser::DiagnosticsConditionInformationNameContext::getRuleIndex() const {
  return MySqlParser::RuleDiagnosticsConditionInformationName;
}


MySqlParser::DiagnosticsConditionInformationNameContext* MySqlParser::diagnosticsConditionInformationName() {
  DiagnosticsConditionInformationNameContext *_localctx = _tracker.createInstance<DiagnosticsConditionInformationNameContext>(_ctx, getState());
  enterRule(_localctx, 496, MySqlParser::RuleDiagnosticsConditionInformationName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5439);
    _la = _input->LA(1);
    if (!(((((_la - 297) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 297)) & ((1ULL << (MySqlParser::CLASS_ORIGIN - 297))
      | (1ULL << (MySqlParser::COLUMN_NAME - 297))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 297))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 297))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 297))
      | (1ULL << (MySqlParser::CURSOR_NAME - 297)))) != 0) || _la == MySqlParser::MESSAGE_TEXT

    || _la == MySqlParser::MYSQL_ERRNO || ((((_la - 507) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 507)) & ((1ULL << (MySqlParser::RETURNED_SQLSTATE - 507))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 507))
      | (1ULL << (MySqlParser::TABLE_NAME - 507)))) != 0) || _la == MySqlParser::CATALOG_NAME || _la == MySqlParser::SCHEMA_NAME)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeObjectClauseContext ------------------------------------------------------------------

MySqlParser::DescribeObjectClauseContext::DescribeObjectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::DescribeObjectClauseContext::getRuleIndex() const {
  return MySqlParser::RuleDescribeObjectClause;
}

void MySqlParser::DescribeObjectClauseContext::copyFrom(DescribeObjectClauseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DescribeStatementsContext ------------------------------------------------------------------

MySqlParser::SelectStatementContext* MySqlParser::DescribeStatementsContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

MySqlParser::DeleteStatementContext* MySqlParser::DescribeStatementsContext::deleteStatement() {
  return getRuleContext<MySqlParser::DeleteStatementContext>(0);
}

MySqlParser::InsertStatementContext* MySqlParser::DescribeStatementsContext::insertStatement() {
  return getRuleContext<MySqlParser::InsertStatementContext>(0);
}

MySqlParser::ReplaceStatementContext* MySqlParser::DescribeStatementsContext::replaceStatement() {
  return getRuleContext<MySqlParser::ReplaceStatementContext>(0);
}

MySqlParser::UpdateStatementContext* MySqlParser::DescribeStatementsContext::updateStatement() {
  return getRuleContext<MySqlParser::UpdateStatementContext>(0);
}

MySqlParser::DescribeStatementsContext::DescribeStatementsContext(DescribeObjectClauseContext *ctx) { copyFrom(ctx); }


//----------------- DescribeConnectionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DescribeConnectionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::DescribeConnectionContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

MySqlParser::UidContext* MySqlParser::DescribeConnectionContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

MySqlParser::DescribeConnectionContext::DescribeConnectionContext(DescribeObjectClauseContext *ctx) { copyFrom(ctx); }


MySqlParser::DescribeObjectClauseContext* MySqlParser::describeObjectClause() {
  DescribeObjectClauseContext *_localctx = _tracker.createInstance<DescribeObjectClauseContext>(_ctx, getState());
  enterRule(_localctx, 498, MySqlParser::RuleDescribeObjectClause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5451);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DELETE:
      case MySqlParser::INSERT:
      case MySqlParser::REPLACE:
      case MySqlParser::SELECT:
      case MySqlParser::UPDATE:
      case MySqlParser::LR_BRACKET: {
        _localctx = dynamic_cast<DescribeObjectClauseContext *>(_tracker.createInstance<MySqlParser::DescribeStatementsContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(5446);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::SELECT:
          case MySqlParser::LR_BRACKET: {
            setState(5441);
            selectStatement();
            break;
          }

          case MySqlParser::DELETE: {
            setState(5442);
            deleteStatement();
            break;
          }

          case MySqlParser::INSERT: {
            setState(5443);
            insertStatement();
            break;
          }

          case MySqlParser::REPLACE: {
            setState(5444);
            replaceStatement();
            break;
          }

          case MySqlParser::UPDATE: {
            setState(5445);
            updateStatement();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::FOR: {
        _localctx = dynamic_cast<DescribeObjectClauseContext *>(_tracker.createInstance<MySqlParser::DescribeConnectionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(5448);
        match(MySqlParser::FOR);
        setState(5449);
        match(MySqlParser::CONNECTION);
        setState(5450);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullIdContext ------------------------------------------------------------------

MySqlParser::FullIdContext::FullIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::UidContext *> MySqlParser::FullIdContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::FullIdContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

tree::TerminalNode* MySqlParser::FullIdContext::DOT_ID() {
  return getToken(MySqlParser::DOT_ID, 0);
}

tree::TerminalNode* MySqlParser::FullIdContext::DOT() {
  return getToken(MySqlParser::DOT, 0);
}


size_t MySqlParser::FullIdContext::getRuleIndex() const {
  return MySqlParser::RuleFullId;
}


MySqlParser::FullIdContext* MySqlParser::fullId() {
  FullIdContext *_localctx = _tracker.createInstance<FullIdContext>(_ctx, getState());
  enterRule(_localctx, 500, MySqlParser::RuleFullId);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5453);
    uid();
    setState(5457);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 784, _ctx)) {
    case 1: {
      setState(5454);
      match(MySqlParser::DOT_ID);
      break;
    }

    case 2: {
      setState(5455);
      match(MySqlParser::DOT);
      setState(5456);
      uid();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableNameContext ------------------------------------------------------------------

MySqlParser::TableNameContext::TableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::FullIdContext* MySqlParser::TableNameContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}


size_t MySqlParser::TableNameContext::getRuleIndex() const {
  return MySqlParser::RuleTableName;
}


MySqlParser::TableNameContext* MySqlParser::tableName() {
  TableNameContext *_localctx = _tracker.createInstance<TableNameContext>(_ctx, getState());
  enterRule(_localctx, 502, MySqlParser::RuleTableName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5459);
    fullId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullColumnNameContext ------------------------------------------------------------------

MySqlParser::FullColumnNameContext::FullColumnNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::FullColumnNameContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

std::vector<MySqlParser::DottedIdContext *> MySqlParser::FullColumnNameContext::dottedId() {
  return getRuleContexts<MySqlParser::DottedIdContext>();
}

MySqlParser::DottedIdContext* MySqlParser::FullColumnNameContext::dottedId(size_t i) {
  return getRuleContext<MySqlParser::DottedIdContext>(i);
}


size_t MySqlParser::FullColumnNameContext::getRuleIndex() const {
  return MySqlParser::RuleFullColumnName;
}


MySqlParser::FullColumnNameContext* MySqlParser::fullColumnName() {
  FullColumnNameContext *_localctx = _tracker.createInstance<FullColumnNameContext>(_ctx, getState());
  enterRule(_localctx, 504, MySqlParser::RuleFullColumnName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5473);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 788, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5461);
      uid();
      setState(5466);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 786, _ctx)) {
      case 1: {
        setState(5462);
        dottedId();
        setState(5464);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 785, _ctx)) {
        case 1: {
          setState(5463);
          dottedId();
          break;
        }

        }
        break;
      }

      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5468);
      matchWildcard();
      setState(5469);
      dottedId();
      setState(5471);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 787, _ctx)) {
      case 1: {
        setState(5470);
        dottedId();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexColumnNameContext ------------------------------------------------------------------

MySqlParser::IndexColumnNameContext::IndexColumnNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::IndexColumnNameContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::IndexColumnNameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::IndexColumnNameContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::IndexColumnNameContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::IndexColumnNameContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::IndexColumnNameContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::IndexColumnNameContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}


size_t MySqlParser::IndexColumnNameContext::getRuleIndex() const {
  return MySqlParser::RuleIndexColumnName;
}


MySqlParser::IndexColumnNameContext* MySqlParser::indexColumnName() {
  IndexColumnNameContext *_localctx = _tracker.createInstance<IndexColumnNameContext>(_ctx, getState());
  enterRule(_localctx, 506, MySqlParser::RuleIndexColumnName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5477);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 789, _ctx)) {
    case 1: {
      setState(5475);
      uid();
      break;
    }

    case 2: {
      setState(5476);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    }
    setState(5483);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(5479);
      match(MySqlParser::LR_BRACKET);
      setState(5480);
      decimalLiteral();
      setState(5481);
      match(MySqlParser::RR_BRACKET);
    }
    setState(5486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ASC

    || _la == MySqlParser::DESC) {
      setState(5485);
      dynamic_cast<IndexColumnNameContext *>(_localctx)->sortType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC)) {
        dynamic_cast<IndexColumnNameContext *>(_localctx)->sortType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserNameContext ------------------------------------------------------------------

MySqlParser::UserNameContext::UserNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UserNameContext::STRING_USER_NAME() {
  return getToken(MySqlParser::STRING_USER_NAME, 0);
}

tree::TerminalNode* MySqlParser::UserNameContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

tree::TerminalNode* MySqlParser::UserNameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::UserNameContext::getRuleIndex() const {
  return MySqlParser::RuleUserName;
}


MySqlParser::UserNameContext* MySqlParser::userName() {
  UserNameContext *_localctx = _tracker.createInstance<UserNameContext>(_ctx, getState());
  enterRule(_localctx, 508, MySqlParser::RuleUserName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5488);
    _la = _input->LA(1);
    if (!(((((_la - 1043) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1043)) & ((1ULL << (MySqlParser::STRING_LITERAL - 1043))
      | (1ULL << (MySqlParser::ID - 1043))
      | (1ULL << (MySqlParser::STRING_USER_NAME - 1043)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MysqlVariableContext ------------------------------------------------------------------

MySqlParser::MysqlVariableContext::MysqlVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::MysqlVariableContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::MysqlVariableContext::GLOBAL_ID() {
  return getToken(MySqlParser::GLOBAL_ID, 0);
}


size_t MySqlParser::MysqlVariableContext::getRuleIndex() const {
  return MySqlParser::RuleMysqlVariable;
}


MySqlParser::MysqlVariableContext* MySqlParser::mysqlVariable() {
  MysqlVariableContext *_localctx = _tracker.createInstance<MysqlVariableContext>(_ctx, getState());
  enterRule(_localctx, 510, MySqlParser::RuleMysqlVariable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5490);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::LOCAL_ID

    || _la == MySqlParser::GLOBAL_ID)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharsetNameContext ------------------------------------------------------------------

MySqlParser::CharsetNameContext::CharsetNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CharsetNameContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::CharsetNameBaseContext* MySqlParser::CharsetNameContext::charsetNameBase() {
  return getRuleContext<MySqlParser::CharsetNameBaseContext>(0);
}

tree::TerminalNode* MySqlParser::CharsetNameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameContext::CHARSET_REVERSE_QOUTE_STRING() {
  return getToken(MySqlParser::CHARSET_REVERSE_QOUTE_STRING, 0);
}


size_t MySqlParser::CharsetNameContext::getRuleIndex() const {
  return MySqlParser::RuleCharsetName;
}


MySqlParser::CharsetNameContext* MySqlParser::charsetName() {
  CharsetNameContext *_localctx = _tracker.createInstance<CharsetNameContext>(_ctx, getState());
  enterRule(_localctx, 512, MySqlParser::RuleCharsetName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::BINARY: {
        enterOuterAlt(_localctx, 1);
        setState(5492);
        match(MySqlParser::BINARY);
        break;
      }

      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4: {
        enterOuterAlt(_localctx, 2);
        setState(5493);
        charsetNameBase();
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(5494);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(5495);
        match(MySqlParser::CHARSET_REVERSE_QOUTE_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollationNameContext ------------------------------------------------------------------

MySqlParser::CollationNameContext::CollationNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::CollationNameContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::CollationNameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::CollationNameContext::getRuleIndex() const {
  return MySqlParser::RuleCollationName;
}


MySqlParser::CollationNameContext* MySqlParser::collationName() {
  CollationNameContext *_localctx = _tracker.createInstance<CollationNameContext>(_ctx, getState());
  enterRule(_localctx, 514, MySqlParser::RuleCollationName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5500);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 793, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5498);
      uid();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5499);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EngineNameContext ------------------------------------------------------------------

MySqlParser::EngineNameContext::EngineNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::EngineNameContext::ARCHIVE() {
  return getToken(MySqlParser::ARCHIVE, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::BLACKHOLE() {
  return getToken(MySqlParser::BLACKHOLE, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::CSV() {
  return getToken(MySqlParser::CSV, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::FEDERATED() {
  return getToken(MySqlParser::FEDERATED, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::INNODB() {
  return getToken(MySqlParser::INNODB, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::MRG_MYISAM() {
  return getToken(MySqlParser::MRG_MYISAM, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::MYISAM() {
  return getToken(MySqlParser::MYISAM, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::NDB() {
  return getToken(MySqlParser::NDB, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::NDBCLUSTER() {
  return getToken(MySqlParser::NDBCLUSTER, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::PERFORMANCE_SCHEMA() {
  return getToken(MySqlParser::PERFORMANCE_SCHEMA, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::TOKUDB() {
  return getToken(MySqlParser::TOKUDB, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::EngineNameContext::REVERSE_QUOTE_ID() {
  return getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
}


size_t MySqlParser::EngineNameContext::getRuleIndex() const {
  return MySqlParser::RuleEngineName;
}


MySqlParser::EngineNameContext* MySqlParser::engineName() {
  EngineNameContext *_localctx = _tracker.createInstance<EngineNameContext>(_ctx, getState());
  enterRule(_localctx, 516, MySqlParser::RuleEngineName);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5502);
    _la = _input->LA(1);
    if (!(((((_la - 685) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 685)) & ((1ULL << (MySqlParser::ARCHIVE - 685))
      | (1ULL << (MySqlParser::BLACKHOLE - 685))
      | (1ULL << (MySqlParser::CSV - 685))
      | (1ULL << (MySqlParser::FEDERATED - 685))
      | (1ULL << (MySqlParser::INNODB - 685))
      | (1ULL << (MySqlParser::MEMORY - 685))
      | (1ULL << (MySqlParser::MRG_MYISAM - 685))
      | (1ULL << (MySqlParser::MYISAM - 685))
      | (1ULL << (MySqlParser::NDB - 685))
      | (1ULL << (MySqlParser::NDBCLUSTER - 685))
      | (1ULL << (MySqlParser::PERFORMANCE_SCHEMA - 685))
      | (1ULL << (MySqlParser::TOKUDB - 685)))) != 0) || ((((_la - 1043) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1043)) & ((1ULL << (MySqlParser::STRING_LITERAL - 1043))
      | (1ULL << (MySqlParser::ID - 1043))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 1043)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UuidSetContext ------------------------------------------------------------------

MySqlParser::UuidSetContext::UuidSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::UuidSetContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::UuidSetContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::UuidSetContext::MINUS() {
  return getTokens(MySqlParser::MINUS);
}

tree::TerminalNode* MySqlParser::UuidSetContext::MINUS(size_t i) {
  return getToken(MySqlParser::MINUS, i);
}

std::vector<tree::TerminalNode *> MySqlParser::UuidSetContext::COLON_SYMB() {
  return getTokens(MySqlParser::COLON_SYMB);
}

tree::TerminalNode* MySqlParser::UuidSetContext::COLON_SYMB(size_t i) {
  return getToken(MySqlParser::COLON_SYMB, i);
}


size_t MySqlParser::UuidSetContext::getRuleIndex() const {
  return MySqlParser::RuleUuidSet;
}


MySqlParser::UuidSetContext* MySqlParser::uuidSet() {
  UuidSetContext *_localctx = _tracker.createInstance<UuidSetContext>(_ctx, getState());
  enterRule(_localctx, 518, MySqlParser::RuleUuidSet);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5504);
    decimalLiteral();
    setState(5505);
    match(MySqlParser::MINUS);
    setState(5506);
    decimalLiteral();
    setState(5507);
    match(MySqlParser::MINUS);
    setState(5508);
    decimalLiteral();
    setState(5509);
    match(MySqlParser::MINUS);
    setState(5510);
    decimalLiteral();
    setState(5511);
    match(MySqlParser::MINUS);
    setState(5512);
    decimalLiteral();
    setState(5518); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5513);
      match(MySqlParser::COLON_SYMB);
      setState(5514);
      decimalLiteral();
      setState(5515);
      match(MySqlParser::MINUS);
      setState(5516);
      decimalLiteral();
      setState(5520); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySqlParser::COLON_SYMB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XidContext ------------------------------------------------------------------

MySqlParser::XidContext::XidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::XuidStringIdContext *> MySqlParser::XidContext::xuidStringId() {
  return getRuleContexts<MySqlParser::XuidStringIdContext>();
}

MySqlParser::XuidStringIdContext* MySqlParser::XidContext::xuidStringId(size_t i) {
  return getRuleContext<MySqlParser::XuidStringIdContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::XidContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::XidContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::DecimalLiteralContext* MySqlParser::XidContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}


size_t MySqlParser::XidContext::getRuleIndex() const {
  return MySqlParser::RuleXid;
}


MySqlParser::XidContext* MySqlParser::xid() {
  XidContext *_localctx = _tracker.createInstance<XidContext>(_ctx, getState());
  enterRule(_localctx, 520, MySqlParser::RuleXid);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5522);
    dynamic_cast<XidContext *>(_localctx)->globalTableUid = xuidStringId();
    setState(5529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMA) {
      setState(5523);
      match(MySqlParser::COMMA);
      setState(5524);
      dynamic_cast<XidContext *>(_localctx)->qualifier = xuidStringId();
      setState(5527);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COMMA) {
        setState(5525);
        match(MySqlParser::COMMA);
        setState(5526);
        dynamic_cast<XidContext *>(_localctx)->idFormat = decimalLiteral();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XuidStringIdContext ------------------------------------------------------------------

MySqlParser::XuidStringIdContext::XuidStringIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::XuidStringIdContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::XuidStringIdContext::BIT_STRING() {
  return getToken(MySqlParser::BIT_STRING, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::XuidStringIdContext::HEXADECIMAL_LITERAL() {
  return getTokens(MySqlParser::HEXADECIMAL_LITERAL);
}

tree::TerminalNode* MySqlParser::XuidStringIdContext::HEXADECIMAL_LITERAL(size_t i) {
  return getToken(MySqlParser::HEXADECIMAL_LITERAL, i);
}


size_t MySqlParser::XuidStringIdContext::getRuleIndex() const {
  return MySqlParser::RuleXuidStringId;
}


MySqlParser::XuidStringIdContext* MySqlParser::xuidStringId() {
  XuidStringIdContext *_localctx = _tracker.createInstance<XuidStringIdContext>(_ctx, getState());
  enterRule(_localctx, 522, MySqlParser::RuleXuidStringId);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5538);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(5531);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::BIT_STRING: {
        enterOuterAlt(_localctx, 2);
        setState(5532);
        match(MySqlParser::BIT_STRING);
        break;
      }

      case MySqlParser::HEXADECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(5534); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(5533);
          match(MySqlParser::HEXADECIMAL_LITERAL);
          setState(5536); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySqlParser::HEXADECIMAL_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AuthPluginContext ------------------------------------------------------------------

MySqlParser::AuthPluginContext::AuthPluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::UidContext* MySqlParser::AuthPluginContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}

tree::TerminalNode* MySqlParser::AuthPluginContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::AuthPluginContext::getRuleIndex() const {
  return MySqlParser::RuleAuthPlugin;
}


MySqlParser::AuthPluginContext* MySqlParser::authPlugin() {
  AuthPluginContext *_localctx = _tracker.createInstance<AuthPluginContext>(_ctx, getState());
  enterRule(_localctx, 524, MySqlParser::RuleAuthPlugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 799, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5540);
      uid();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5541);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UidContext ------------------------------------------------------------------

MySqlParser::UidContext::UidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::SimpleIdContext* MySqlParser::UidContext::simpleId() {
  return getRuleContext<MySqlParser::SimpleIdContext>(0);
}

tree::TerminalNode* MySqlParser::UidContext::REVERSE_QUOTE_ID() {
  return getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
}

tree::TerminalNode* MySqlParser::UidContext::CHARSET_REVERSE_QOUTE_STRING() {
  return getToken(MySqlParser::CHARSET_REVERSE_QOUTE_STRING, 0);
}


size_t MySqlParser::UidContext::getRuleIndex() const {
  return MySqlParser::RuleUid;
}


MySqlParser::UidContext* MySqlParser::uid() {
  UidContext *_localctx = _tracker.createInstance<UidContext>(_ctx, getState());
  enterRule(_localctx, 526, MySqlParser::RuleUid);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5547);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 800, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5544);
      simpleId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5545);
      match(MySqlParser::REVERSE_QUOTE_ID);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5546);
      match(MySqlParser::CHARSET_REVERSE_QOUTE_STRING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleIdContext ------------------------------------------------------------------

MySqlParser::SimpleIdContext::SimpleIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::SimpleIdContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

MySqlParser::CharsetNameBaseContext* MySqlParser::SimpleIdContext::charsetNameBase() {
  return getRuleContext<MySqlParser::CharsetNameBaseContext>(0);
}

MySqlParser::TransactionLevelBaseContext* MySqlParser::SimpleIdContext::transactionLevelBase() {
  return getRuleContext<MySqlParser::TransactionLevelBaseContext>(0);
}

MySqlParser::EngineNameContext* MySqlParser::SimpleIdContext::engineName() {
  return getRuleContext<MySqlParser::EngineNameContext>(0);
}

MySqlParser::PrivilegesBaseContext* MySqlParser::SimpleIdContext::privilegesBase() {
  return getRuleContext<MySqlParser::PrivilegesBaseContext>(0);
}

MySqlParser::IntervalTypeBaseContext* MySqlParser::SimpleIdContext::intervalTypeBase() {
  return getRuleContext<MySqlParser::IntervalTypeBaseContext>(0);
}

MySqlParser::DataTypeBaseContext* MySqlParser::SimpleIdContext::dataTypeBase() {
  return getRuleContext<MySqlParser::DataTypeBaseContext>(0);
}

MySqlParser::KeywordsCanBeIdContext* MySqlParser::SimpleIdContext::keywordsCanBeId() {
  return getRuleContext<MySqlParser::KeywordsCanBeIdContext>(0);
}

MySqlParser::FunctionNameBaseContext* MySqlParser::SimpleIdContext::functionNameBase() {
  return getRuleContext<MySqlParser::FunctionNameBaseContext>(0);
}


size_t MySqlParser::SimpleIdContext::getRuleIndex() const {
  return MySqlParser::RuleSimpleId;
}


MySqlParser::SimpleIdContext* MySqlParser::simpleId() {
  SimpleIdContext *_localctx = _tracker.createInstance<SimpleIdContext>(_ctx, getState());
  enterRule(_localctx, 528, MySqlParser::RuleSimpleId);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5558);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 801, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5549);
      match(MySqlParser::ID);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5550);
      charsetNameBase();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5551);
      transactionLevelBase();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5552);
      engineName();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5553);
      privilegesBase();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5554);
      intervalTypeBase();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5555);
      dataTypeBase();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5556);
      keywordsCanBeId();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5557);
      functionNameBase();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DottedIdContext ------------------------------------------------------------------

MySqlParser::DottedIdContext::DottedIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DottedIdContext::DOT_ID() {
  return getToken(MySqlParser::DOT_ID, 0);
}

tree::TerminalNode* MySqlParser::DottedIdContext::DOT() {
  return getToken(MySqlParser::DOT, 0);
}

MySqlParser::UidContext* MySqlParser::DottedIdContext::uid() {
  return getRuleContext<MySqlParser::UidContext>(0);
}


size_t MySqlParser::DottedIdContext::getRuleIndex() const {
  return MySqlParser::RuleDottedId;
}


MySqlParser::DottedIdContext* MySqlParser::dottedId() {
  DottedIdContext *_localctx = _tracker.createInstance<DottedIdContext>(_ctx, getState());
  enterRule(_localctx, 530, MySqlParser::RuleDottedId);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5563);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DOT_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5560);
        match(MySqlParser::DOT_ID);
        break;
      }

      case MySqlParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(5561);
        match(MySqlParser::DOT);
        setState(5562);
        uid();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalLiteralContext ------------------------------------------------------------------

MySqlParser::DecimalLiteralContext::DecimalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DecimalLiteralContext::DECIMAL_LITERAL() {
  return getToken(MySqlParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::DecimalLiteralContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::DecimalLiteralContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::DecimalLiteralContext::TWO_DECIMAL() {
  return getToken(MySqlParser::TWO_DECIMAL, 0);
}


size_t MySqlParser::DecimalLiteralContext::getRuleIndex() const {
  return MySqlParser::RuleDecimalLiteral;
}


MySqlParser::DecimalLiteralContext* MySqlParser::decimalLiteral() {
  DecimalLiteralContext *_localctx = _tracker.createInstance<DecimalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 532, MySqlParser::RuleDecimalLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5565);
    _la = _input->LA(1);
    if (!(((((_la - 1033) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1033)) & ((1ULL << (MySqlParser::ZERO_DECIMAL - 1033))
      | (1ULL << (MySqlParser::ONE_DECIMAL - 1033))
      | (1ULL << (MySqlParser::TWO_DECIMAL - 1033))
      | (1ULL << (MySqlParser::DECIMAL_LITERAL - 1033)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileSizeLiteralContext ------------------------------------------------------------------

MySqlParser::FileSizeLiteralContext::FileSizeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::FileSizeLiteralContext::FILESIZE_LITERAL() {
  return getToken(MySqlParser::FILESIZE_LITERAL, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::FileSizeLiteralContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}


size_t MySqlParser::FileSizeLiteralContext::getRuleIndex() const {
  return MySqlParser::RuleFileSizeLiteral;
}


MySqlParser::FileSizeLiteralContext* MySqlParser::fileSizeLiteral() {
  FileSizeLiteralContext *_localctx = _tracker.createInstance<FileSizeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 534, MySqlParser::RuleFileSizeLiteral);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5569);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::FILESIZE_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(5567);
        match(MySqlParser::FILESIZE_LITERAL);
        break;
      }

      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(5568);
        decimalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

MySqlParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::StringLiteralContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::StringLiteralContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::StringLiteralContext::START_NATIONAL_STRING_LITERAL() {
  return getToken(MySqlParser::START_NATIONAL_STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::StringLiteralContext::STRING_CHARSET_NAME() {
  return getToken(MySqlParser::STRING_CHARSET_NAME, 0);
}

tree::TerminalNode* MySqlParser::StringLiteralContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::StringLiteralContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}


size_t MySqlParser::StringLiteralContext::getRuleIndex() const {
  return MySqlParser::RuleStringLiteral;
}


MySqlParser::StringLiteralContext* MySqlParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 536, MySqlParser::RuleStringLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(5594);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 810, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5576);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::STRING_CHARSET_NAME: {
          setState(5572);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::STRING_CHARSET_NAME) {
            setState(5571);
            match(MySqlParser::STRING_CHARSET_NAME);
          }
          setState(5574);
          match(MySqlParser::STRING_LITERAL);
          break;
        }

        case MySqlParser::START_NATIONAL_STRING_LITERAL: {
          setState(5575);
          match(MySqlParser::START_NATIONAL_STRING_LITERAL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5579); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(5578);
                match(MySqlParser::STRING_LITERAL);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(5581); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 806, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5588);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::STRING_CHARSET_NAME: {
          setState(5584);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::STRING_CHARSET_NAME) {
            setState(5583);
            match(MySqlParser::STRING_CHARSET_NAME);
          }
          setState(5586);
          match(MySqlParser::STRING_LITERAL);
          break;
        }

        case MySqlParser::START_NATIONAL_STRING_LITERAL: {
          setState(5587);
          match(MySqlParser::START_NATIONAL_STRING_LITERAL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5592);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 809, _ctx)) {
      case 1: {
        setState(5590);
        match(MySqlParser::COLLATE);
        setState(5591);
        collationName();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

MySqlParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::BooleanLiteralContext::TRUE() {
  return getToken(MySqlParser::TRUE, 0);
}

tree::TerminalNode* MySqlParser::BooleanLiteralContext::FALSE() {
  return getToken(MySqlParser::FALSE, 0);
}


size_t MySqlParser::BooleanLiteralContext::getRuleIndex() const {
  return MySqlParser::RuleBooleanLiteral;
}


MySqlParser::BooleanLiteralContext* MySqlParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 538, MySqlParser::RuleBooleanLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5596);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::FALSE || _la == MySqlParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HexadecimalLiteralContext ------------------------------------------------------------------

MySqlParser::HexadecimalLiteralContext::HexadecimalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::HexadecimalLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(MySqlParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::HexadecimalLiteralContext::STRING_CHARSET_NAME() {
  return getToken(MySqlParser::STRING_CHARSET_NAME, 0);
}


size_t MySqlParser::HexadecimalLiteralContext::getRuleIndex() const {
  return MySqlParser::RuleHexadecimalLiteral;
}


MySqlParser::HexadecimalLiteralContext* MySqlParser::hexadecimalLiteral() {
  HexadecimalLiteralContext *_localctx = _tracker.createInstance<HexadecimalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 540, MySqlParser::RuleHexadecimalLiteral);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5599);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::STRING_CHARSET_NAME) {
      setState(5598);
      match(MySqlParser::STRING_CHARSET_NAME);
    }
    setState(5601);
    match(MySqlParser::HEXADECIMAL_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullNotnullContext ------------------------------------------------------------------

MySqlParser::NullNotnullContext::NullNotnullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::NullNotnullContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::NullNotnullContext::NULL_SPEC_LITERAL() {
  return getToken(MySqlParser::NULL_SPEC_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::NullNotnullContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::NullNotnullContext::getRuleIndex() const {
  return MySqlParser::RuleNullNotnull;
}


MySqlParser::NullNotnullContext* MySqlParser::nullNotnull() {
  NullNotnullContext *_localctx = _tracker.createInstance<NullNotnullContext>(_ctx, getState());
  enterRule(_localctx, 542, MySqlParser::RuleNullNotnull);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NOT) {
      setState(5603);
      match(MySqlParser::NOT);
    }
    setState(5606);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::NULL_LITERAL || _la == MySqlParser::NULL_SPEC_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

MySqlParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::StringLiteralContext* MySqlParser::ConstantContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::ConstantContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::ConstantContext::MINUS() {
  return getToken(MySqlParser::MINUS, 0);
}

MySqlParser::HexadecimalLiteralContext* MySqlParser::ConstantContext::hexadecimalLiteral() {
  return getRuleContext<MySqlParser::HexadecimalLiteralContext>(0);
}

MySqlParser::BooleanLiteralContext* MySqlParser::ConstantContext::booleanLiteral() {
  return getRuleContext<MySqlParser::BooleanLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::ConstantContext::REAL_LITERAL() {
  return getToken(MySqlParser::REAL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::BIT_STRING() {
  return getToken(MySqlParser::BIT_STRING, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::NULL_SPEC_LITERAL() {
  return getToken(MySqlParser::NULL_SPEC_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::ConstantContext::getRuleIndex() const {
  return MySqlParser::RuleConstant;
}


MySqlParser::ConstantContext* MySqlParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 544, MySqlParser::RuleConstant);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5620);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 814, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5608);
      stringLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5609);
      decimalLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5610);
      match(MySqlParser::MINUS);
      setState(5611);
      decimalLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5612);
      hexadecimalLiteral();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5613);
      booleanLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5614);
      match(MySqlParser::REAL_LITERAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5615);
      match(MySqlParser::BIT_STRING);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5617);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(5616);
        match(MySqlParser::NOT);
      }
      setState(5619);
      dynamic_cast<ConstantContext *>(_localctx)->nullLiteral = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NULL_LITERAL || _la == MySqlParser::NULL_SPEC_LITERAL)) {
        dynamic_cast<ConstantContext *>(_localctx)->nullLiteral = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeContext ------------------------------------------------------------------

MySqlParser::DataTypeContext::DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::DataTypeContext::getRuleIndex() const {
  return MySqlParser::RuleDataType;
}

void MySqlParser::DataTypeContext::copyFrom(DataTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpatialDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::GEOMETRYCOLLECTION() {
  return getToken(MySqlParser::GEOMETRYCOLLECTION, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::GEOMCOLLECTION() {
  return getToken(MySqlParser::GEOMCOLLECTION, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::LINESTRING() {
  return getToken(MySqlParser::LINESTRING, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::MULTILINESTRING() {
  return getToken(MySqlParser::MULTILINESTRING, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::MULTIPOINT() {
  return getToken(MySqlParser::MULTIPOINT, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::MULTIPOLYGON() {
  return getToken(MySqlParser::MULTIPOLYGON, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::POINT() {
  return getToken(MySqlParser::POINT, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::POLYGON() {
  return getToken(MySqlParser::POLYGON, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::JSON() {
  return getToken(MySqlParser::JSON, 0);
}

tree::TerminalNode* MySqlParser::SpatialDataTypeContext::GEOMETRY() {
  return getToken(MySqlParser::GEOMETRY, 0);
}

MySqlParser::SpatialDataTypeContext::SpatialDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- LongVarbinaryDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::LongVarbinaryDataTypeContext::LONG() {
  return getToken(MySqlParser::LONG, 0);
}

tree::TerminalNode* MySqlParser::LongVarbinaryDataTypeContext::VARBINARY() {
  return getToken(MySqlParser::VARBINARY, 0);
}

MySqlParser::LongVarbinaryDataTypeContext::LongVarbinaryDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- CollectionDataTypeContext ------------------------------------------------------------------

MySqlParser::CollectionOptionsContext* MySqlParser::CollectionDataTypeContext::collectionOptions() {
  return getRuleContext<MySqlParser::CollectionOptionsContext>(0);
}

tree::TerminalNode* MySqlParser::CollectionDataTypeContext::ENUM() {
  return getToken(MySqlParser::ENUM, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CollectionDataTypeContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::CollectionDataTypeContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

tree::TerminalNode* MySqlParser::CollectionDataTypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::CollectionDataTypeContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::CollectionDataTypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::CollectionDataTypeContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::CollectionDataTypeContext::CollectionDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- NationalVaryingStringDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::NationalVaryingStringDataTypeContext::NATIONAL() {
  return getToken(MySqlParser::NATIONAL, 0);
}

tree::TerminalNode* MySqlParser::NationalVaryingStringDataTypeContext::VARYING() {
  return getToken(MySqlParser::VARYING, 0);
}

tree::TerminalNode* MySqlParser::NationalVaryingStringDataTypeContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

tree::TerminalNode* MySqlParser::NationalVaryingStringDataTypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

MySqlParser::LengthOneDimensionContext* MySqlParser::NationalVaryingStringDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySqlParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::NationalVaryingStringDataTypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::NationalVaryingStringDataTypeContext::NationalVaryingStringDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- DimensionDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::TINYINT() {
  return getToken(MySqlParser::TINYINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::SMALLINT() {
  return getToken(MySqlParser::SMALLINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::MEDIUMINT() {
  return getToken(MySqlParser::MEDIUMINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INT() {
  return getToken(MySqlParser::INT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INTEGER() {
  return getToken(MySqlParser::INTEGER, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::BIGINT() {
  return getToken(MySqlParser::BIGINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::MIDDLEINT() {
  return getToken(MySqlParser::MIDDLEINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INT1() {
  return getToken(MySqlParser::INT1, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INT2() {
  return getToken(MySqlParser::INT2, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INT3() {
  return getToken(MySqlParser::INT3, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INT4() {
  return getToken(MySqlParser::INT4, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::INT8() {
  return getToken(MySqlParser::INT8, 0);
}

MySqlParser::LengthOneDimensionContext* MySqlParser::DimensionDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySqlParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::ZEROFILL() {
  return getToken(MySqlParser::ZEROFILL, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::SIGNED() {
  return getToken(MySqlParser::SIGNED, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::UNSIGNED() {
  return getToken(MySqlParser::UNSIGNED, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::REAL() {
  return getToken(MySqlParser::REAL, 0);
}

MySqlParser::LengthTwoDimensionContext* MySqlParser::DimensionDataTypeContext::lengthTwoDimension() {
  return getRuleContext<MySqlParser::LengthTwoDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::DOUBLE() {
  return getToken(MySqlParser::DOUBLE, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::PRECISION() {
  return getToken(MySqlParser::PRECISION, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::DECIMAL() {
  return getToken(MySqlParser::DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::DEC() {
  return getToken(MySqlParser::DEC, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::NUMERIC() {
  return getToken(MySqlParser::NUMERIC, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::FLOAT() {
  return getToken(MySqlParser::FLOAT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::FLOAT4() {
  return getToken(MySqlParser::FLOAT4, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::FLOAT8() {
  return getToken(MySqlParser::FLOAT8, 0);
}

MySqlParser::LengthTwoOptionalDimensionContext* MySqlParser::DimensionDataTypeContext::lengthTwoOptionalDimension() {
  return getRuleContext<MySqlParser::LengthTwoOptionalDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::BIT() {
  return getToken(MySqlParser::BIT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::TIMESTAMP() {
  return getToken(MySqlParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::VARBINARY() {
  return getToken(MySqlParser::VARBINARY, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::BLOB() {
  return getToken(MySqlParser::BLOB, 0);
}

tree::TerminalNode* MySqlParser::DimensionDataTypeContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

MySqlParser::DimensionDataTypeContext::DimensionDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- StringDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::StringDataTypeContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::StringDataTypeContext::CHARACTER() {
  return getTokens(MySqlParser::CHARACTER);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::CHARACTER(size_t i) {
  return getToken(MySqlParser::CHARACTER, i);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::VARCHAR() {
  return getToken(MySqlParser::VARCHAR, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::TINYTEXT() {
  return getToken(MySqlParser::TINYTEXT, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::TEXT() {
  return getToken(MySqlParser::TEXT, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::MEDIUMTEXT() {
  return getToken(MySqlParser::MEDIUMTEXT, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::LONGTEXT() {
  return getToken(MySqlParser::LONGTEXT, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::NCHAR() {
  return getToken(MySqlParser::NCHAR, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::NVARCHAR() {
  return getToken(MySqlParser::NVARCHAR, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::LONG() {
  return getToken(MySqlParser::LONG, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::VARYING() {
  return getToken(MySqlParser::VARYING, 0);
}

MySqlParser::LengthOneDimensionContext* MySqlParser::StringDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySqlParser::LengthOneDimensionContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::StringDataTypeContext::BINARY() {
  return getTokens(MySqlParser::BINARY);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::BINARY(size_t i) {
  return getToken(MySqlParser::BINARY, i);
}

MySqlParser::CharsetNameContext* MySqlParser::StringDataTypeContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::StringDataTypeContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::StringDataTypeContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::StringDataTypeContext::StringDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- LongVarcharDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::LONG() {
  return getToken(MySqlParser::LONG, 0);
}

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::VARCHAR() {
  return getToken(MySqlParser::VARCHAR, 0);
}

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::LongVarcharDataTypeContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::LongVarcharDataTypeContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::LongVarcharDataTypeContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::LongVarcharDataTypeContext::LongVarcharDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- NationalStringDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::NationalStringDataTypeContext::NATIONAL() {
  return getToken(MySqlParser::NATIONAL, 0);
}

tree::TerminalNode* MySqlParser::NationalStringDataTypeContext::VARCHAR() {
  return getToken(MySqlParser::VARCHAR, 0);
}

tree::TerminalNode* MySqlParser::NationalStringDataTypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

MySqlParser::LengthOneDimensionContext* MySqlParser::NationalStringDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySqlParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::NationalStringDataTypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::NationalStringDataTypeContext::NCHAR() {
  return getToken(MySqlParser::NCHAR, 0);
}

MySqlParser::NationalStringDataTypeContext::NationalStringDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


//----------------- SimpleDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::TINYBLOB() {
  return getToken(MySqlParser::TINYBLOB, 0);
}

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::MEDIUMBLOB() {
  return getToken(MySqlParser::MEDIUMBLOB, 0);
}

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::LONGBLOB() {
  return getToken(MySqlParser::LONGBLOB, 0);
}

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::BOOL() {
  return getToken(MySqlParser::BOOL, 0);
}

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::BOOLEAN() {
  return getToken(MySqlParser::BOOLEAN, 0);
}

tree::TerminalNode* MySqlParser::SimpleDataTypeContext::SERIAL() {
  return getToken(MySqlParser::SERIAL, 0);
}

MySqlParser::SimpleDataTypeContext::SimpleDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


MySqlParser::DataTypeContext* MySqlParser::dataType() {
  DataTypeContext *_localctx = _tracker.createInstance<DataTypeContext>(_ctx, getState());
  enterRule(_localctx, 546, MySqlParser::RuleDataType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 849, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::StringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5622);
      dynamic_cast<StringDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CHARACTER || ((((_la - 204) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 204)) & ((1ULL << (MySqlParser::CHAR - 204))
        | (1ULL << (MySqlParser::VARCHAR - 204))
        | (1ULL << (MySqlParser::NVARCHAR - 204))
        | (1ULL << (MySqlParser::LONG - 204))
        | (1ULL << (MySqlParser::TINYTEXT - 204))
        | (1ULL << (MySqlParser::TEXT - 204))
        | (1ULL << (MySqlParser::MEDIUMTEXT - 204))
        | (1ULL << (MySqlParser::LONGTEXT - 204)))) != 0) || _la == MySqlParser::NCHAR)) {
        dynamic_cast<StringDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5624);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::VARYING) {
        setState(5623);
        match(MySqlParser::VARYING);
      }
      setState(5627);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 816, _ctx)) {
      case 1: {
        setState(5626);
        lengthOneDimension();
        break;
      }

      }
      setState(5630);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 817, _ctx)) {
      case 1: {
        setState(5629);
        match(MySqlParser::BINARY);
        break;
      }

      }
      setState(5638);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 819, _ctx)) {
      case 1: {
        setState(5635);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::CHARACTER: {
            setState(5632);
            match(MySqlParser::CHARACTER);
            setState(5633);
            match(MySqlParser::SET);
            break;
          }

          case MySqlParser::CHARSET: {
            setState(5634);
            match(MySqlParser::CHARSET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5637);
        charsetName();
        break;
      }

      }
      setState(5643);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 820, _ctx)) {
      case 1: {
        setState(5640);
        match(MySqlParser::COLLATE);
        setState(5641);
        collationName();
        break;
      }

      case 2: {
        setState(5642);
        match(MySqlParser::BINARY);
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::NationalStringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5645);
      match(MySqlParser::NATIONAL);
      setState(5646);
      dynamic_cast<NationalStringDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CHARACTER || _la == MySqlParser::VARCHAR)) {
        dynamic_cast<NationalStringDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5648);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 821, _ctx)) {
      case 1: {
        setState(5647);
        lengthOneDimension();
        break;
      }

      }
      setState(5651);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::BINARY) {
        setState(5650);
        match(MySqlParser::BINARY);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::NationalStringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5653);
      match(MySqlParser::NCHAR);
      setState(5654);
      dynamic_cast<NationalStringDataTypeContext *>(_localctx)->typeName = match(MySqlParser::VARCHAR);
      setState(5656);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 823, _ctx)) {
      case 1: {
        setState(5655);
        lengthOneDimension();
        break;
      }

      }
      setState(5659);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::BINARY) {
        setState(5658);
        match(MySqlParser::BINARY);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::NationalVaryingStringDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5661);
      match(MySqlParser::NATIONAL);
      setState(5662);
      dynamic_cast<NationalVaryingStringDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CHARACTER || _la == MySqlParser::CHAR)) {
        dynamic_cast<NationalVaryingStringDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5663);
      match(MySqlParser::VARYING);
      setState(5665);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 825, _ctx)) {
      case 1: {
        setState(5664);
        lengthOneDimension();
        break;
      }

      }
      setState(5668);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::BINARY) {
        setState(5667);
        match(MySqlParser::BINARY);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5670);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 178) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 178)) & ((1ULL << (MySqlParser::TINYINT - 178))
        | (1ULL << (MySqlParser::SMALLINT - 178))
        | (1ULL << (MySqlParser::MEDIUMINT - 178))
        | (1ULL << (MySqlParser::MIDDLEINT - 178))
        | (1ULL << (MySqlParser::INT - 178))
        | (1ULL << (MySqlParser::INT1 - 178))
        | (1ULL << (MySqlParser::INT2 - 178))
        | (1ULL << (MySqlParser::INT3 - 178))
        | (1ULL << (MySqlParser::INT4 - 178))
        | (1ULL << (MySqlParser::INT8 - 178))
        | (1ULL << (MySqlParser::INTEGER - 178))
        | (1ULL << (MySqlParser::BIGINT - 178)))) != 0))) {
        dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5672);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 827, _ctx)) {
      case 1: {
        setState(5671);
        lengthOneDimension();
        break;
      }

      }
      setState(5675);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 828, _ctx)) {
      case 1: {
        setState(5674);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::UNSIGNED || _la == MySqlParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5678);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ZEROFILL) {
        setState(5677);
        match(MySqlParser::ZEROFILL);
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(5680);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = match(MySqlParser::REAL);
      setState(5682);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 830, _ctx)) {
      case 1: {
        setState(5681);
        lengthTwoDimension();
        break;
      }

      }
      setState(5685);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 831, _ctx)) {
      case 1: {
        setState(5684);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::UNSIGNED || _la == MySqlParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5688);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ZEROFILL) {
        setState(5687);
        match(MySqlParser::ZEROFILL);
      }
      break;
    }

    case 7: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(5690);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = match(MySqlParser::DOUBLE);
      setState(5692);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PRECISION) {
        setState(5691);
        match(MySqlParser::PRECISION);
      }
      setState(5695);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 834, _ctx)) {
      case 1: {
        setState(5694);
        lengthTwoDimension();
        break;
      }

      }
      setState(5698);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 835, _ctx)) {
      case 1: {
        setState(5697);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::UNSIGNED || _la == MySqlParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5701);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ZEROFILL) {
        setState(5700);
        match(MySqlParser::ZEROFILL);
      }
      break;
    }

    case 8: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(5703);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & ((1ULL << (MySqlParser::FLOAT - 193))
        | (1ULL << (MySqlParser::FLOAT4 - 193))
        | (1ULL << (MySqlParser::FLOAT8 - 193))
        | (1ULL << (MySqlParser::DECIMAL - 193))
        | (1ULL << (MySqlParser::DEC - 193))
        | (1ULL << (MySqlParser::NUMERIC - 193)))) != 0) || _la == MySqlParser::FIXED)) {
        dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5705);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 837, _ctx)) {
      case 1: {
        setState(5704);
        lengthTwoOptionalDimension();
        break;
      }

      }
      setState(5708);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 838, _ctx)) {
      case 1: {
        setState(5707);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::UNSIGNED || _la == MySqlParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(5711);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ZEROFILL) {
        setState(5710);
        match(MySqlParser::ZEROFILL);
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::SimpleDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(5713);
      dynamic_cast<SimpleDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TINYBLOB - 199))
        | (1ULL << (MySqlParser::MEDIUMBLOB - 199))
        | (1ULL << (MySqlParser::LONGBLOB - 199))
        | (1ULL << (MySqlParser::SERIAL - 199)))) != 0) || _la == MySqlParser::BOOL

      || _la == MySqlParser::BOOLEAN)) {
        dynamic_cast<SimpleDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 10: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::DimensionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(5714);
      dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 200) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 200)) & ((1ULL << (MySqlParser::TIME - 200))
        | (1ULL << (MySqlParser::TIMESTAMP - 200))
        | (1ULL << (MySqlParser::DATETIME - 200))
        | (1ULL << (MySqlParser::YEAR - 200))
        | (1ULL << (MySqlParser::BINARY - 200))
        | (1ULL << (MySqlParser::VARBINARY - 200))
        | (1ULL << (MySqlParser::BLOB - 200)))) != 0) || _la == MySqlParser::BIT)) {
        dynamic_cast<DimensionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5716);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 840, _ctx)) {
      case 1: {
        setState(5715);
        lengthOneDimension();
        break;
      }

      }
      break;
    }

    case 11: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::CollectionDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(5718);
      dynamic_cast<CollectionDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::SET || _la == MySqlParser::ENUM)) {
        dynamic_cast<CollectionDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5719);
      collectionOptions();
      setState(5721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::BINARY) {
        setState(5720);
        match(MySqlParser::BINARY);
      }
      setState(5729);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 843, _ctx)) {
      case 1: {
        setState(5726);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::CHARACTER: {
            setState(5723);
            match(MySqlParser::CHARACTER);
            setState(5724);
            match(MySqlParser::SET);
            break;
          }

          case MySqlParser::CHARSET: {
            setState(5725);
            match(MySqlParser::CHARSET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5728);
        charsetName();
        break;
      }

      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::SpatialDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(5731);
      dynamic_cast<SpatialDataTypeContext *>(_localctx)->typeName = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::JSON || ((((_la - 701) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 701)) & ((1ULL << (MySqlParser::GEOMETRYCOLLECTION - 701))
        | (1ULL << (MySqlParser::GEOMCOLLECTION - 701))
        | (1ULL << (MySqlParser::GEOMETRY - 701))
        | (1ULL << (MySqlParser::LINESTRING - 701))
        | (1ULL << (MySqlParser::MULTILINESTRING - 701))
        | (1ULL << (MySqlParser::MULTIPOINT - 701))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 701))
        | (1ULL << (MySqlParser::POINT - 701))
        | (1ULL << (MySqlParser::POLYGON - 701)))) != 0))) {
        dynamic_cast<SpatialDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::LongVarcharDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(5732);
      dynamic_cast<LongVarcharDataTypeContext *>(_localctx)->typeName = match(MySqlParser::LONG);
      setState(5734);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::VARCHAR) {
        setState(5733);
        match(MySqlParser::VARCHAR);
      }
      setState(5737);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::BINARY) {
        setState(5736);
        match(MySqlParser::BINARY);
      }
      setState(5745);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 847, _ctx)) {
      case 1: {
        setState(5742);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::CHARACTER: {
            setState(5739);
            match(MySqlParser::CHARACTER);
            setState(5740);
            match(MySqlParser::SET);
            break;
          }

          case MySqlParser::CHARSET: {
            setState(5741);
            match(MySqlParser::CHARSET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5744);
        charsetName();
        break;
      }

      }
      setState(5749);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 848, _ctx)) {
      case 1: {
        setState(5747);
        match(MySqlParser::COLLATE);
        setState(5748);
        collationName();
        break;
      }

      }
      break;
    }

    case 14: {
      _localctx = dynamic_cast<DataTypeContext *>(_tracker.createInstance<MySqlParser::LongVarbinaryDataTypeContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(5751);
      match(MySqlParser::LONG);
      setState(5752);
      match(MySqlParser::VARBINARY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionOptionsContext ------------------------------------------------------------------

MySqlParser::CollectionOptionsContext::CollectionOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CollectionOptionsContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CollectionOptionsContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::CollectionOptionsContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::CollectionOptionsContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CollectionOptionsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::CollectionOptionsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::CollectionOptionsContext::getRuleIndex() const {
  return MySqlParser::RuleCollectionOptions;
}


MySqlParser::CollectionOptionsContext* MySqlParser::collectionOptions() {
  CollectionOptionsContext *_localctx = _tracker.createInstance<CollectionOptionsContext>(_ctx, getState());
  enterRule(_localctx, 548, MySqlParser::RuleCollectionOptions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5755);
    match(MySqlParser::LR_BRACKET);
    setState(5756);
    match(MySqlParser::STRING_LITERAL);
    setState(5761);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5757);
      match(MySqlParser::COMMA);
      setState(5758);
      match(MySqlParser::STRING_LITERAL);
      setState(5763);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5764);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConvertedDataTypeContext ------------------------------------------------------------------

MySqlParser::ConvertedDataTypeContext::ConvertedDataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::NCHAR() {
  return getToken(MySqlParser::NCHAR, 0);
}

MySqlParser::LengthOneDimensionContext* MySqlParser::ConvertedDataTypeContext::lengthOneDimension() {
  return getRuleContext<MySqlParser::LengthOneDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::ConvertedDataTypeContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::JSON() {
  return getToken(MySqlParser::JSON, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::DECIMAL() {
  return getToken(MySqlParser::DECIMAL, 0);
}

MySqlParser::LengthTwoDimensionContext* MySqlParser::ConvertedDataTypeContext::lengthTwoDimension() {
  return getRuleContext<MySqlParser::LengthTwoDimensionContext>(0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::SIGNED() {
  return getToken(MySqlParser::SIGNED, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::UNSIGNED() {
  return getToken(MySqlParser::UNSIGNED, 0);
}

tree::TerminalNode* MySqlParser::ConvertedDataTypeContext::INTEGER() {
  return getToken(MySqlParser::INTEGER, 0);
}


size_t MySqlParser::ConvertedDataTypeContext::getRuleIndex() const {
  return MySqlParser::RuleConvertedDataType;
}


MySqlParser::ConvertedDataTypeContext* MySqlParser::convertedDataType() {
  ConvertedDataTypeContext *_localctx = _tracker.createInstance<ConvertedDataTypeContext>(_ctx, getState());
  enterRule(_localctx, 550, MySqlParser::RuleConvertedDataType);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5791);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::BINARY:
      case MySqlParser::NCHAR: {
        enterOuterAlt(_localctx, 1);
        setState(5766);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::BINARY || _la == MySqlParser::NCHAR)) {
          dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5768);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(5767);
          lengthOneDimension();
        }
        break;
      }

      case MySqlParser::CHAR: {
        enterOuterAlt(_localctx, 2);
        setState(5770);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = match(MySqlParser::CHAR);
        setState(5772);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(5771);
          lengthOneDimension();
        }
        setState(5780);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CHARACTER || _la == MySqlParser::CHARSET) {
          setState(5777);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case MySqlParser::CHARACTER: {
              setState(5774);
              match(MySqlParser::CHARACTER);
              setState(5775);
              match(MySqlParser::SET);
              break;
            }

            case MySqlParser::CHARSET: {
              setState(5776);
              match(MySqlParser::CHARSET);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(5779);
          charsetName();
        }
        break;
      }

      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::DATETIME:
      case MySqlParser::JSON: {
        enterOuterAlt(_localctx, 3);
        setState(5782);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 199) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
          | (1ULL << (MySqlParser::TIME - 199))
          | (1ULL << (MySqlParser::DATETIME - 199)))) != 0) || _la == MySqlParser::JSON)) {
          dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::DECIMAL: {
        enterOuterAlt(_localctx, 4);
        setState(5783);
        dynamic_cast<ConvertedDataTypeContext *>(_localctx)->typeName = match(MySqlParser::DECIMAL);
        setState(5785);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(5784);
          lengthTwoDimension();
        }
        break;
      }

      case MySqlParser::UNSIGNED:
      case MySqlParser::SIGNED: {
        enterOuterAlt(_localctx, 5);
        setState(5787);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::UNSIGNED || _la == MySqlParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5789);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::INTEGER) {
          setState(5788);
          match(MySqlParser::INTEGER);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthOneDimensionContext ------------------------------------------------------------------

MySqlParser::LengthOneDimensionContext::LengthOneDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LengthOneDimensionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::LengthOneDimensionContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::LengthOneDimensionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}


size_t MySqlParser::LengthOneDimensionContext::getRuleIndex() const {
  return MySqlParser::RuleLengthOneDimension;
}


MySqlParser::LengthOneDimensionContext* MySqlParser::lengthOneDimension() {
  LengthOneDimensionContext *_localctx = _tracker.createInstance<LengthOneDimensionContext>(_ctx, getState());
  enterRule(_localctx, 552, MySqlParser::RuleLengthOneDimension);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5793);
    match(MySqlParser::LR_BRACKET);
    setState(5794);
    decimalLiteral();
    setState(5795);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthTwoDimensionContext ------------------------------------------------------------------

MySqlParser::LengthTwoDimensionContext::LengthTwoDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LengthTwoDimensionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::LengthTwoDimensionContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::LengthTwoDimensionContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::LengthTwoDimensionContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

tree::TerminalNode* MySqlParser::LengthTwoDimensionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}


size_t MySqlParser::LengthTwoDimensionContext::getRuleIndex() const {
  return MySqlParser::RuleLengthTwoDimension;
}


MySqlParser::LengthTwoDimensionContext* MySqlParser::lengthTwoDimension() {
  LengthTwoDimensionContext *_localctx = _tracker.createInstance<LengthTwoDimensionContext>(_ctx, getState());
  enterRule(_localctx, 554, MySqlParser::RuleLengthTwoDimension);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5797);
    match(MySqlParser::LR_BRACKET);
    setState(5798);
    decimalLiteral();
    setState(5799);
    match(MySqlParser::COMMA);
    setState(5800);
    decimalLiteral();
    setState(5801);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthTwoOptionalDimensionContext ------------------------------------------------------------------

MySqlParser::LengthTwoOptionalDimensionContext::LengthTwoOptionalDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LengthTwoOptionalDimensionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::LengthTwoOptionalDimensionContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::LengthTwoOptionalDimensionContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::LengthTwoOptionalDimensionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::LengthTwoOptionalDimensionContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}


size_t MySqlParser::LengthTwoOptionalDimensionContext::getRuleIndex() const {
  return MySqlParser::RuleLengthTwoOptionalDimension;
}


MySqlParser::LengthTwoOptionalDimensionContext* MySqlParser::lengthTwoOptionalDimension() {
  LengthTwoOptionalDimensionContext *_localctx = _tracker.createInstance<LengthTwoOptionalDimensionContext>(_ctx, getState());
  enterRule(_localctx, 556, MySqlParser::RuleLengthTwoOptionalDimension);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5803);
    match(MySqlParser::LR_BRACKET);
    setState(5804);
    decimalLiteral();
    setState(5807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMA) {
      setState(5805);
      match(MySqlParser::COMMA);
      setState(5806);
      decimalLiteral();
    }
    setState(5809);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UidListContext ------------------------------------------------------------------

MySqlParser::UidListContext::UidListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::UidContext *> MySqlParser::UidListContext::uid() {
  return getRuleContexts<MySqlParser::UidContext>();
}

MySqlParser::UidContext* MySqlParser::UidListContext::uid(size_t i) {
  return getRuleContext<MySqlParser::UidContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::UidListContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::UidListContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::UidListContext::getRuleIndex() const {
  return MySqlParser::RuleUidList;
}


MySqlParser::UidListContext* MySqlParser::uidList() {
  UidListContext *_localctx = _tracker.createInstance<UidListContext>(_ctx, getState());
  enterRule(_localctx, 558, MySqlParser::RuleUidList);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5811);
    uid();
    setState(5816);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 859, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5812);
        match(MySqlParser::COMMA);
        setState(5813);
        uid(); 
      }
      setState(5818);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 859, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablesContext ------------------------------------------------------------------

MySqlParser::TablesContext::TablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::TableNameContext *> MySqlParser::TablesContext::tableName() {
  return getRuleContexts<MySqlParser::TableNameContext>();
}

MySqlParser::TableNameContext* MySqlParser::TablesContext::tableName(size_t i) {
  return getRuleContext<MySqlParser::TableNameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::TablesContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::TablesContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::TablesContext::getRuleIndex() const {
  return MySqlParser::RuleTables;
}


MySqlParser::TablesContext* MySqlParser::tables() {
  TablesContext *_localctx = _tracker.createInstance<TablesContext>(_ctx, getState());
  enterRule(_localctx, 560, MySqlParser::RuleTables);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5819);
    tableName();
    setState(5824);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 860, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5820);
        match(MySqlParser::COMMA);
        setState(5821);
        tableName(); 
      }
      setState(5826);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 860, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexColumnNamesContext ------------------------------------------------------------------

MySqlParser::IndexColumnNamesContext::IndexColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IndexColumnNamesContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::IndexColumnNameContext *> MySqlParser::IndexColumnNamesContext::indexColumnName() {
  return getRuleContexts<MySqlParser::IndexColumnNameContext>();
}

MySqlParser::IndexColumnNameContext* MySqlParser::IndexColumnNamesContext::indexColumnName(size_t i) {
  return getRuleContext<MySqlParser::IndexColumnNameContext>(i);
}

tree::TerminalNode* MySqlParser::IndexColumnNamesContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::IndexColumnNamesContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::IndexColumnNamesContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::IndexColumnNamesContext::getRuleIndex() const {
  return MySqlParser::RuleIndexColumnNames;
}


MySqlParser::IndexColumnNamesContext* MySqlParser::indexColumnNames() {
  IndexColumnNamesContext *_localctx = _tracker.createInstance<IndexColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 562, MySqlParser::RuleIndexColumnNames);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5827);
    match(MySqlParser::LR_BRACKET);
    setState(5828);
    indexColumnName();
    setState(5833);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5829);
      match(MySqlParser::COMMA);
      setState(5830);
      indexColumnName();
      setState(5835);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5836);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

MySqlParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::ExpressionsContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::ExpressionsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ExpressionsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::ExpressionsContext::getRuleIndex() const {
  return MySqlParser::RuleExpressions;
}


MySqlParser::ExpressionsContext* MySqlParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 564, MySqlParser::RuleExpressions);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5838);
    expression(0);
    setState(5843);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5839);
      match(MySqlParser::COMMA);
      setState(5840);
      expression(0);
      setState(5845);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsWithDefaultsContext ------------------------------------------------------------------

MySqlParser::ExpressionsWithDefaultsContext::ExpressionsWithDefaultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ExpressionOrDefaultContext *> MySqlParser::ExpressionsWithDefaultsContext::expressionOrDefault() {
  return getRuleContexts<MySqlParser::ExpressionOrDefaultContext>();
}

MySqlParser::ExpressionOrDefaultContext* MySqlParser::ExpressionsWithDefaultsContext::expressionOrDefault(size_t i) {
  return getRuleContext<MySqlParser::ExpressionOrDefaultContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::ExpressionsWithDefaultsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ExpressionsWithDefaultsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::ExpressionsWithDefaultsContext::getRuleIndex() const {
  return MySqlParser::RuleExpressionsWithDefaults;
}


MySqlParser::ExpressionsWithDefaultsContext* MySqlParser::expressionsWithDefaults() {
  ExpressionsWithDefaultsContext *_localctx = _tracker.createInstance<ExpressionsWithDefaultsContext>(_ctx, getState());
  enterRule(_localctx, 566, MySqlParser::RuleExpressionsWithDefaults);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5846);
    expressionOrDefault();
    setState(5851);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5847);
      match(MySqlParser::COMMA);
      setState(5848);
      expressionOrDefault();
      setState(5853);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantsContext ------------------------------------------------------------------

MySqlParser::ConstantsContext::ConstantsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ConstantContext *> MySqlParser::ConstantsContext::constant() {
  return getRuleContexts<MySqlParser::ConstantContext>();
}

MySqlParser::ConstantContext* MySqlParser::ConstantsContext::constant(size_t i) {
  return getRuleContext<MySqlParser::ConstantContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::ConstantsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::ConstantsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::ConstantsContext::getRuleIndex() const {
  return MySqlParser::RuleConstants;
}


MySqlParser::ConstantsContext* MySqlParser::constants() {
  ConstantsContext *_localctx = _tracker.createInstance<ConstantsContext>(_ctx, getState());
  enterRule(_localctx, 568, MySqlParser::RuleConstants);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5854);
    constant();
    setState(5859);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5855);
      match(MySqlParser::COMMA);
      setState(5856);
      constant();
      setState(5861);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleStringsContext ------------------------------------------------------------------

MySqlParser::SimpleStringsContext::SimpleStringsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::SimpleStringsContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::SimpleStringsContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SimpleStringsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::SimpleStringsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::SimpleStringsContext::getRuleIndex() const {
  return MySqlParser::RuleSimpleStrings;
}


MySqlParser::SimpleStringsContext* MySqlParser::simpleStrings() {
  SimpleStringsContext *_localctx = _tracker.createInstance<SimpleStringsContext>(_ctx, getState());
  enterRule(_localctx, 570, MySqlParser::RuleSimpleStrings);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5862);
    match(MySqlParser::STRING_LITERAL);
    setState(5867);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5863);
      match(MySqlParser::COMMA);
      setState(5864);
      match(MySqlParser::STRING_LITERAL);
      setState(5869);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserVariablesContext ------------------------------------------------------------------

MySqlParser::UserVariablesContext::UserVariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::UserVariablesContext::LOCAL_ID() {
  return getTokens(MySqlParser::LOCAL_ID);
}

tree::TerminalNode* MySqlParser::UserVariablesContext::LOCAL_ID(size_t i) {
  return getToken(MySqlParser::LOCAL_ID, i);
}

std::vector<tree::TerminalNode *> MySqlParser::UserVariablesContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::UserVariablesContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::UserVariablesContext::getRuleIndex() const {
  return MySqlParser::RuleUserVariables;
}


MySqlParser::UserVariablesContext* MySqlParser::userVariables() {
  UserVariablesContext *_localctx = _tracker.createInstance<UserVariablesContext>(_ctx, getState());
  enterRule(_localctx, 572, MySqlParser::RuleUserVariables);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5870);
    match(MySqlParser::LOCAL_ID);
    setState(5875);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5871);
      match(MySqlParser::COMMA);
      setState(5872);
      match(MySqlParser::LOCAL_ID);
      setState(5877);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

MySqlParser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DefaultValueContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

MySqlParser::ConstantContext* MySqlParser::DefaultValueContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

std::vector<MySqlParser::CurrentTimestampContext *> MySqlParser::DefaultValueContext::currentTimestamp() {
  return getRuleContexts<MySqlParser::CurrentTimestampContext>();
}

MySqlParser::CurrentTimestampContext* MySqlParser::DefaultValueContext::currentTimestamp(size_t i) {
  return getRuleContext<MySqlParser::CurrentTimestampContext>(i);
}

tree::TerminalNode* MySqlParser::DefaultValueContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::DefaultValueContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::DefaultValueContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::DefaultValueContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::DefaultValueContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

MySqlParser::UnaryOperatorContext* MySqlParser::DefaultValueContext::unaryOperator() {
  return getRuleContext<MySqlParser::UnaryOperatorContext>(0);
}


size_t MySqlParser::DefaultValueContext::getRuleIndex() const {
  return MySqlParser::RuleDefaultValue;
}


MySqlParser::DefaultValueContext* MySqlParser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 574, MySqlParser::RuleDefaultValue);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5888);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 868, _ctx)) {
    case 1: {
      setState(5878);
      match(MySqlParser::NULL_LITERAL);
      break;
    }

    case 2: {
      setState(5880);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 867, _ctx)) {
      case 1: {
        setState(5879);
        unaryOperator();
        break;
      }

      }
      setState(5882);
      constant();
      break;
    }

    case 3: {
      setState(5883);
      currentTimestamp();
      break;
    }

    case 4: {
      setState(5884);
      match(MySqlParser::LR_BRACKET);
      setState(5885);
      expression(0);
      setState(5886);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
    setState(5893);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 869, _ctx)) {
    case 1: {
      setState(5890);
      match(MySqlParser::ON);
      setState(5891);
      match(MySqlParser::UPDATE);
      setState(5892);
      currentTimestamp();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CurrentTimestampContext ------------------------------------------------------------------

MySqlParser::CurrentTimestampContext::CurrentTimestampContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CurrentTimestampContext::NOW() {
  return getToken(MySqlParser::NOW, 0);
}

tree::TerminalNode* MySqlParser::CurrentTimestampContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CurrentTimestampContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CurrentTimestampContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::CurrentTimestampContext::LOCALTIME() {
  return getToken(MySqlParser::LOCALTIME, 0);
}

tree::TerminalNode* MySqlParser::CurrentTimestampContext::LOCALTIMESTAMP() {
  return getToken(MySqlParser::LOCALTIMESTAMP, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::CurrentTimestampContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}


size_t MySqlParser::CurrentTimestampContext::getRuleIndex() const {
  return MySqlParser::RuleCurrentTimestamp;
}


MySqlParser::CurrentTimestampContext* MySqlParser::currentTimestamp() {
  CurrentTimestampContext *_localctx = _tracker.createInstance<CurrentTimestampContext>(_ctx, getState());
  enterRule(_localctx, 576, MySqlParser::RuleCurrentTimestamp);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5909);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CURRENT_TIMESTAMP:
      case MySqlParser::LOCALTIME:
      case MySqlParser::LOCALTIMESTAMP: {
        setState(5895);
        _la = _input->LA(1);
        if (!(((((_la - 253) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 253)) & ((1ULL << (MySqlParser::CURRENT_TIMESTAMP - 253))
          | (1ULL << (MySqlParser::LOCALTIME - 253))
          | (1ULL << (MySqlParser::LOCALTIMESTAMP - 253)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5901);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 871, _ctx)) {
        case 1: {
          setState(5896);
          match(MySqlParser::LR_BRACKET);
          setState(5898);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((((_la - 1033) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 1033)) & ((1ULL << (MySqlParser::ZERO_DECIMAL - 1033))
            | (1ULL << (MySqlParser::ONE_DECIMAL - 1033))
            | (1ULL << (MySqlParser::TWO_DECIMAL - 1033))
            | (1ULL << (MySqlParser::DECIMAL_LITERAL - 1033)))) != 0)) {
            setState(5897);
            decimalLiteral();
          }
          setState(5900);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        break;
      }

      case MySqlParser::NOW: {
        setState(5903);
        match(MySqlParser::NOW);
        setState(5904);
        match(MySqlParser::LR_BRACKET);
        setState(5906);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 1033) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 1033)) & ((1ULL << (MySqlParser::ZERO_DECIMAL - 1033))
          | (1ULL << (MySqlParser::ONE_DECIMAL - 1033))
          | (1ULL << (MySqlParser::TWO_DECIMAL - 1033))
          | (1ULL << (MySqlParser::DECIMAL_LITERAL - 1033)))) != 0)) {
          setState(5905);
          decimalLiteral();
        }
        setState(5908);
        match(MySqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionOrDefaultContext ------------------------------------------------------------------

MySqlParser::ExpressionOrDefaultContext::ExpressionOrDefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ExpressionContext* MySqlParser::ExpressionOrDefaultContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::ExpressionOrDefaultContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}


size_t MySqlParser::ExpressionOrDefaultContext::getRuleIndex() const {
  return MySqlParser::RuleExpressionOrDefault;
}


MySqlParser::ExpressionOrDefaultContext* MySqlParser::expressionOrDefault() {
  ExpressionOrDefaultContext *_localctx = _tracker.createInstance<ExpressionOrDefaultContext>(_ctx, getState());
  enterRule(_localctx, 578, MySqlParser::RuleExpressionOrDefault);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 874, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5911);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5912);
      match(MySqlParser::DEFAULT);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfExistsContext ------------------------------------------------------------------

MySqlParser::IfExistsContext::IfExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IfExistsContext::IF() {
  return getToken(MySqlParser::IF, 0);
}

tree::TerminalNode* MySqlParser::IfExistsContext::EXISTS() {
  return getToken(MySqlParser::EXISTS, 0);
}


size_t MySqlParser::IfExistsContext::getRuleIndex() const {
  return MySqlParser::RuleIfExists;
}


MySqlParser::IfExistsContext* MySqlParser::ifExists() {
  IfExistsContext *_localctx = _tracker.createInstance<IfExistsContext>(_ctx, getState());
  enterRule(_localctx, 580, MySqlParser::RuleIfExists);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5915);
    match(MySqlParser::IF);
    setState(5916);
    match(MySqlParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfNotExistsContext ------------------------------------------------------------------

MySqlParser::IfNotExistsContext::IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IfNotExistsContext::IF() {
  return getToken(MySqlParser::IF, 0);
}

tree::TerminalNode* MySqlParser::IfNotExistsContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::IfNotExistsContext::EXISTS() {
  return getToken(MySqlParser::EXISTS, 0);
}


size_t MySqlParser::IfNotExistsContext::getRuleIndex() const {
  return MySqlParser::RuleIfNotExists;
}


MySqlParser::IfNotExistsContext* MySqlParser::ifNotExists() {
  IfNotExistsContext *_localctx = _tracker.createInstance<IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 582, MySqlParser::RuleIfNotExists);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5918);
    match(MySqlParser::IF);
    setState(5919);
    match(MySqlParser::NOT);
    setState(5920);
    match(MySqlParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

MySqlParser::FunctionCallContext::FunctionCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::FunctionCallContext::getRuleIndex() const {
  return MySqlParser::RuleFunctionCall;
}

void MySqlParser::FunctionCallContext::copyFrom(FunctionCallContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpecificFunctionCallContext ------------------------------------------------------------------

MySqlParser::SpecificFunctionContext* MySqlParser::SpecificFunctionCallContext::specificFunction() {
  return getRuleContext<MySqlParser::SpecificFunctionContext>(0);
}

MySqlParser::SpecificFunctionCallContext::SpecificFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }


//----------------- PasswordFunctionCallContext ------------------------------------------------------------------

MySqlParser::PasswordFunctionClauseContext* MySqlParser::PasswordFunctionCallContext::passwordFunctionClause() {
  return getRuleContext<MySqlParser::PasswordFunctionClauseContext>(0);
}

MySqlParser::PasswordFunctionCallContext::PasswordFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }


//----------------- UdfFunctionCallContext ------------------------------------------------------------------

MySqlParser::FullIdContext* MySqlParser::UdfFunctionCallContext::fullId() {
  return getRuleContext<MySqlParser::FullIdContext>(0);
}

tree::TerminalNode* MySqlParser::UdfFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::UdfFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::FunctionArgsContext* MySqlParser::UdfFunctionCallContext::functionArgs() {
  return getRuleContext<MySqlParser::FunctionArgsContext>(0);
}

MySqlParser::UdfFunctionCallContext::UdfFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }


//----------------- AggregateFunctionCallContext ------------------------------------------------------------------

MySqlParser::AggregateWindowedFunctionContext* MySqlParser::AggregateFunctionCallContext::aggregateWindowedFunction() {
  return getRuleContext<MySqlParser::AggregateWindowedFunctionContext>(0);
}

MySqlParser::AggregateFunctionCallContext::AggregateFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }


//----------------- ScalarFunctionCallContext ------------------------------------------------------------------

MySqlParser::ScalarFunctionNameContext* MySqlParser::ScalarFunctionCallContext::scalarFunctionName() {
  return getRuleContext<MySqlParser::ScalarFunctionNameContext>(0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::FunctionArgsContext* MySqlParser::ScalarFunctionCallContext::functionArgs() {
  return getRuleContext<MySqlParser::FunctionArgsContext>(0);
}

MySqlParser::ScalarFunctionCallContext::ScalarFunctionCallContext(FunctionCallContext *ctx) { copyFrom(ctx); }


MySqlParser::FunctionCallContext* MySqlParser::functionCall() {
  FunctionCallContext *_localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
  enterRule(_localctx, 584, MySqlParser::RuleFunctionCall);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5939);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 877, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySqlParser::SpecificFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5922);
      specificFunction();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySqlParser::AggregateFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5923);
      aggregateWindowedFunction();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySqlParser::ScalarFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5924);
      scalarFunctionName();
      setState(5925);
      match(MySqlParser::LR_BRACKET);
      setState(5927);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 875, _ctx)) {
      case 1: {
        setState(5926);
        functionArgs();
        break;
      }

      }
      setState(5929);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySqlParser::UdfFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5931);
      fullId();
      setState(5932);
      match(MySqlParser::LR_BRACKET);
      setState(5934);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 876, _ctx)) {
      case 1: {
        setState(5933);
        functionArgs();
        break;
      }

      }
      setState(5936);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<FunctionCallContext *>(_tracker.createInstance<MySqlParser::PasswordFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5938);
      passwordFunctionClause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecificFunctionContext ------------------------------------------------------------------

MySqlParser::SpecificFunctionContext::SpecificFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::SpecificFunctionContext::getRuleIndex() const {
  return MySqlParser::RuleSpecificFunction;
}

void MySqlParser::SpecificFunctionContext::copyFrom(SpecificFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PositionFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PositionFunctionCallContext::POSITION() {
  return getToken(MySqlParser::POSITION, 0);
}

tree::TerminalNode* MySqlParser::PositionFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::PositionFunctionCallContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::PositionFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<MySqlParser::StringLiteralContext *> MySqlParser::PositionFunctionCallContext::stringLiteral() {
  return getRuleContexts<MySqlParser::StringLiteralContext>();
}

MySqlParser::StringLiteralContext* MySqlParser::PositionFunctionCallContext::stringLiteral(size_t i) {
  return getRuleContext<MySqlParser::StringLiteralContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::PositionFunctionCallContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::PositionFunctionCallContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::PositionFunctionCallContext::PositionFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- TrimFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::TRIM() {
  return getToken(MySqlParser::TRIM, 0);
}

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::BOTH() {
  return getToken(MySqlParser::BOTH, 0);
}

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::LEADING() {
  return getToken(MySqlParser::LEADING, 0);
}

tree::TerminalNode* MySqlParser::TrimFunctionCallContext::TRAILING() {
  return getToken(MySqlParser::TRAILING, 0);
}

std::vector<MySqlParser::StringLiteralContext *> MySqlParser::TrimFunctionCallContext::stringLiteral() {
  return getRuleContexts<MySqlParser::StringLiteralContext>();
}

MySqlParser::StringLiteralContext* MySqlParser::TrimFunctionCallContext::stringLiteral(size_t i) {
  return getRuleContext<MySqlParser::StringLiteralContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::TrimFunctionCallContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::TrimFunctionCallContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::TrimFunctionCallContext::TrimFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- SimpleFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::CURRENT_DATE() {
  return getToken(MySqlParser::CURRENT_DATE, 0);
}

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::CURRENT_TIME() {
  return getToken(MySqlParser::CURRENT_TIME, 0);
}

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::CURRENT_USER() {
  return getToken(MySqlParser::CURRENT_USER, 0);
}

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::LOCALTIME() {
  return getToken(MySqlParser::LOCALTIME, 0);
}

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SimpleFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::SimpleFunctionCallContext::SimpleFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- CharFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CharFunctionCallContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

tree::TerminalNode* MySqlParser::CharFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::FunctionArgsContext* MySqlParser::CharFunctionCallContext::functionArgs() {
  return getRuleContext<MySqlParser::FunctionArgsContext>(0);
}

tree::TerminalNode* MySqlParser::CharFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::CharFunctionCallContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::CharFunctionCallContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

MySqlParser::CharFunctionCallContext::CharFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- WeightFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::WeightFunctionCallContext::WEIGHT_STRING() {
  return getToken(MySqlParser::WEIGHT_STRING, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::WeightFunctionCallContext::LR_BRACKET() {
  return getTokens(MySqlParser::LR_BRACKET);
}

tree::TerminalNode* MySqlParser::WeightFunctionCallContext::LR_BRACKET(size_t i) {
  return getToken(MySqlParser::LR_BRACKET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::WeightFunctionCallContext::RR_BRACKET() {
  return getTokens(MySqlParser::RR_BRACKET);
}

tree::TerminalNode* MySqlParser::WeightFunctionCallContext::RR_BRACKET(size_t i) {
  return getToken(MySqlParser::RR_BRACKET, i);
}

MySqlParser::StringLiteralContext* MySqlParser::WeightFunctionCallContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::WeightFunctionCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::WeightFunctionCallContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::DecimalLiteralContext* MySqlParser::WeightFunctionCallContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

MySqlParser::LevelsInWeightStringContext* MySqlParser::WeightFunctionCallContext::levelsInWeightString() {
  return getRuleContext<MySqlParser::LevelsInWeightStringContext>(0);
}

tree::TerminalNode* MySqlParser::WeightFunctionCallContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

tree::TerminalNode* MySqlParser::WeightFunctionCallContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::WeightFunctionCallContext::WeightFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- GetFormatFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::GET_FORMAT() {
  return getToken(MySqlParser::GET_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::GetFormatFunctionCallContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFunctionCallContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

MySqlParser::GetFormatFunctionCallContext::GetFormatFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- CaseFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CaseFunctionCallContext::CASE() {
  return getToken(MySqlParser::CASE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::CaseFunctionCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::CaseFunctionCallContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::CaseFuncAlternativeContext *> MySqlParser::CaseFunctionCallContext::caseFuncAlternative() {
  return getRuleContexts<MySqlParser::CaseFuncAlternativeContext>();
}

MySqlParser::CaseFuncAlternativeContext* MySqlParser::CaseFunctionCallContext::caseFuncAlternative(size_t i) {
  return getRuleContext<MySqlParser::CaseFuncAlternativeContext>(i);
}

tree::TerminalNode* MySqlParser::CaseFunctionCallContext::ELSE() {
  return getToken(MySqlParser::ELSE, 0);
}

MySqlParser::FunctionArgContext* MySqlParser::CaseFunctionCallContext::functionArg() {
  return getRuleContext<MySqlParser::FunctionArgContext>(0);
}

MySqlParser::CaseFunctionCallContext::CaseFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- ExtractFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ExtractFunctionCallContext::EXTRACT() {
  return getToken(MySqlParser::EXTRACT, 0);
}

tree::TerminalNode* MySqlParser::ExtractFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::IntervalTypeContext* MySqlParser::ExtractFunctionCallContext::intervalType() {
  return getRuleContext<MySqlParser::IntervalTypeContext>(0);
}

tree::TerminalNode* MySqlParser::ExtractFunctionCallContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ExtractFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::ExtractFunctionCallContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::ExtractFunctionCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::ExtractFunctionCallContext::ExtractFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- DataTypeFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::CONVERT() {
  return getToken(MySqlParser::CONVERT, 0);
}

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::ExpressionContext* MySqlParser::DataTypeFunctionCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::ConvertedDataTypeContext* MySqlParser::DataTypeFunctionCallContext::convertedDataType() {
  return getRuleContext<MySqlParser::ConvertedDataTypeContext>(0);
}

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::COMMA() {
  return getToken(MySqlParser::COMMA, 0);
}

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::CharsetNameContext* MySqlParser::DataTypeFunctionCallContext::charsetName() {
  return getRuleContext<MySqlParser::CharsetNameContext>(0);
}

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::CAST() {
  return getToken(MySqlParser::CAST, 0);
}

tree::TerminalNode* MySqlParser::DataTypeFunctionCallContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::DataTypeFunctionCallContext::DataTypeFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- ValuesFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ValuesFunctionCallContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::ValuesFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::FullColumnNameContext* MySqlParser::ValuesFunctionCallContext::fullColumnName() {
  return getRuleContext<MySqlParser::FullColumnNameContext>(0);
}

tree::TerminalNode* MySqlParser::ValuesFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::ValuesFunctionCallContext::ValuesFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


//----------------- SubstrFunctionCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SubstrFunctionCallContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubstrFunctionCallContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::SubstrFunctionCallContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubstrFunctionCallContext::SUBSTR() {
  return getToken(MySqlParser::SUBSTR, 0);
}

tree::TerminalNode* MySqlParser::SubstrFunctionCallContext::SUBSTRING() {
  return getToken(MySqlParser::SUBSTRING, 0);
}

MySqlParser::StringLiteralContext* MySqlParser::SubstrFunctionCallContext::stringLiteral() {
  return getRuleContext<MySqlParser::StringLiteralContext>(0);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::SubstrFunctionCallContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::SubstrFunctionCallContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::SubstrFunctionCallContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::SubstrFunctionCallContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

tree::TerminalNode* MySqlParser::SubstrFunctionCallContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::SubstrFunctionCallContext::SubstrFunctionCallContext(SpecificFunctionContext *ctx) { copyFrom(ctx); }


MySqlParser::SpecificFunctionContext* MySqlParser::specificFunction() {
  SpecificFunctionContext *_localctx = _tracker.createInstance<SpecificFunctionContext>(_ctx, getState());
  enterRule(_localctx, 586, MySqlParser::RuleSpecificFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 898, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::SimpleFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5941);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CURRENT_USER || ((((_la - 251) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 251)) & ((1ULL << (MySqlParser::CURRENT_DATE - 251))
        | (1ULL << (MySqlParser::CURRENT_TIME - 251))
        | (1ULL << (MySqlParser::CURRENT_TIMESTAMP - 251))
        | (1ULL << (MySqlParser::LOCALTIME - 251)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5944);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 878, _ctx)) {
      case 1: {
        setState(5942);
        match(MySqlParser::LR_BRACKET);
        setState(5943);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::DataTypeFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5946);
      match(MySqlParser::CONVERT);
      setState(5947);
      match(MySqlParser::LR_BRACKET);
      setState(5948);
      expression(0);
      setState(5949);
      dynamic_cast<DataTypeFunctionCallContext *>(_localctx)->separator = match(MySqlParser::COMMA);
      setState(5950);
      convertedDataType();
      setState(5951);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::DataTypeFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5953);
      match(MySqlParser::CONVERT);
      setState(5954);
      match(MySqlParser::LR_BRACKET);
      setState(5955);
      expression(0);
      setState(5956);
      match(MySqlParser::USING);
      setState(5957);
      charsetName();
      setState(5958);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::DataTypeFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5960);
      match(MySqlParser::CAST);
      setState(5961);
      match(MySqlParser::LR_BRACKET);
      setState(5962);
      expression(0);
      setState(5963);
      match(MySqlParser::AS);
      setState(5964);
      convertedDataType();
      setState(5965);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::ValuesFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5967);
      match(MySqlParser::VALUES);
      setState(5968);
      match(MySqlParser::LR_BRACKET);
      setState(5969);
      fullColumnName();
      setState(5970);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::CaseFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(5972);
      match(MySqlParser::CASE);
      setState(5973);
      expression(0);
      setState(5975); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5974);
        caseFuncAlternative();
        setState(5977); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::WHEN);
      setState(5981);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ELSE) {
        setState(5979);
        match(MySqlParser::ELSE);
        setState(5980);
        dynamic_cast<CaseFunctionCallContext *>(_localctx)->elseArg = functionArg();
      }
      setState(5983);
      match(MySqlParser::END);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::CaseFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(5985);
      match(MySqlParser::CASE);
      setState(5987); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5986);
        caseFuncAlternative();
        setState(5989); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::WHEN);
      setState(5993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ELSE) {
        setState(5991);
        match(MySqlParser::ELSE);
        setState(5992);
        dynamic_cast<CaseFunctionCallContext *>(_localctx)->elseArg = functionArg();
      }
      setState(5995);
      match(MySqlParser::END);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::CharFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(5997);
      match(MySqlParser::CHAR);
      setState(5998);
      match(MySqlParser::LR_BRACKET);
      setState(5999);
      functionArgs();
      setState(6002);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(6000);
        match(MySqlParser::USING);
        setState(6001);
        charsetName();
      }
      setState(6004);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 9: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::PositionFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(6006);
      match(MySqlParser::POSITION);
      setState(6007);
      match(MySqlParser::LR_BRACKET);
      setState(6010);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 884, _ctx)) {
      case 1: {
        setState(6008);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->positionString = stringLiteral();
        break;
      }

      case 2: {
        setState(6009);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->positionExpression = expression(0);
        break;
      }

      }
      setState(6012);
      match(MySqlParser::IN);
      setState(6015);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 885, _ctx)) {
      case 1: {
        setState(6013);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->inString = stringLiteral();
        break;
      }

      case 2: {
        setState(6014);
        dynamic_cast<PositionFunctionCallContext *>(_localctx)->inExpression = expression(0);
        break;
      }

      }
      setState(6017);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::SubstrFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(6019);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::SUBSTR

      || _la == MySqlParser::SUBSTRING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6020);
      match(MySqlParser::LR_BRACKET);
      setState(6023);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 886, _ctx)) {
      case 1: {
        setState(6021);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(6022);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(6025);
      match(MySqlParser::FROM);
      setState(6028);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 887, _ctx)) {
      case 1: {
        setState(6026);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->fromDecimal = decimalLiteral();
        break;
      }

      case 2: {
        setState(6027);
        dynamic_cast<SubstrFunctionCallContext *>(_localctx)->fromExpression = expression(0);
        break;
      }

      }
      setState(6035);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(6030);
        match(MySqlParser::FOR);
        setState(6033);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 888, _ctx)) {
        case 1: {
          setState(6031);
          dynamic_cast<SubstrFunctionCallContext *>(_localctx)->forDecimal = decimalLiteral();
          break;
        }

        case 2: {
          setState(6032);
          dynamic_cast<SubstrFunctionCallContext *>(_localctx)->forExpression = expression(0);
          break;
        }

        }
      }
      setState(6037);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::TrimFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(6039);
      match(MySqlParser::TRIM);
      setState(6040);
      match(MySqlParser::LR_BRACKET);
      setState(6041);
      dynamic_cast<TrimFunctionCallContext *>(_localctx)->positioinForm = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::BOTH || _la == MySqlParser::LEADING || _la == MySqlParser::TRAILING)) {
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->positioinForm = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6044);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 890, _ctx)) {
      case 1: {
        setState(6042);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(6043);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(6046);
      match(MySqlParser::FROM);
      setState(6049);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 891, _ctx)) {
      case 1: {
        setState(6047);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromString = stringLiteral();
        break;
      }

      case 2: {
        setState(6048);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromExpression = expression(0);
        break;
      }

      }
      setState(6051);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 12: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::TrimFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(6053);
      match(MySqlParser::TRIM);
      setState(6054);
      match(MySqlParser::LR_BRACKET);
      setState(6057);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 892, _ctx)) {
      case 1: {
        setState(6055);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(6056);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(6059);
      match(MySqlParser::FROM);
      setState(6062);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 893, _ctx)) {
      case 1: {
        setState(6060);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromString = stringLiteral();
        break;
      }

      case 2: {
        setState(6061);
        dynamic_cast<TrimFunctionCallContext *>(_localctx)->fromExpression = expression(0);
        break;
      }

      }
      setState(6064);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::WeightFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(6066);
      match(MySqlParser::WEIGHT_STRING);
      setState(6067);
      match(MySqlParser::LR_BRACKET);
      setState(6070);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 894, _ctx)) {
      case 1: {
        setState(6068);
        stringLiteral();
        break;
      }

      case 2: {
        setState(6069);
        expression(0);
        break;
      }

      }
      setState(6078);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(6072);
        match(MySqlParser::AS);
        setState(6073);
        dynamic_cast<WeightFunctionCallContext *>(_localctx)->stringFormat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CHAR

        || _la == MySqlParser::BINARY)) {
          dynamic_cast<WeightFunctionCallContext *>(_localctx)->stringFormat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(6074);
        match(MySqlParser::LR_BRACKET);
        setState(6075);
        decimalLiteral();
        setState(6076);
        match(MySqlParser::RR_BRACKET);
      }
      setState(6081);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEVEL) {
        setState(6080);
        levelsInWeightString();
      }
      setState(6083);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::ExtractFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(6085);
      match(MySqlParser::EXTRACT);
      setState(6086);
      match(MySqlParser::LR_BRACKET);
      setState(6087);
      intervalType();
      setState(6088);
      match(MySqlParser::FROM);
      setState(6091);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 897, _ctx)) {
      case 1: {
        setState(6089);
        dynamic_cast<ExtractFunctionCallContext *>(_localctx)->sourceString = stringLiteral();
        break;
      }

      case 2: {
        setState(6090);
        dynamic_cast<ExtractFunctionCallContext *>(_localctx)->sourceExpression = expression(0);
        break;
      }

      }
      setState(6093);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 15: {
      _localctx = dynamic_cast<SpecificFunctionContext *>(_tracker.createInstance<MySqlParser::GetFormatFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(6095);
      match(MySqlParser::GET_FORMAT);
      setState(6096);
      match(MySqlParser::LR_BRACKET);
      setState(6097);
      dynamic_cast<GetFormatFunctionCallContext *>(_localctx)->datetimeFormat = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 199) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
        | (1ULL << (MySqlParser::TIME - 199))
        | (1ULL << (MySqlParser::DATETIME - 199)))) != 0))) {
        dynamic_cast<GetFormatFunctionCallContext *>(_localctx)->datetimeFormat = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6098);
      match(MySqlParser::COMMA);
      setState(6099);
      stringLiteral();
      setState(6100);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseFuncAlternativeContext ------------------------------------------------------------------

MySqlParser::CaseFuncAlternativeContext::CaseFuncAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CaseFuncAlternativeContext::WHEN() {
  return getToken(MySqlParser::WHEN, 0);
}

tree::TerminalNode* MySqlParser::CaseFuncAlternativeContext::THEN() {
  return getToken(MySqlParser::THEN, 0);
}

std::vector<MySqlParser::FunctionArgContext *> MySqlParser::CaseFuncAlternativeContext::functionArg() {
  return getRuleContexts<MySqlParser::FunctionArgContext>();
}

MySqlParser::FunctionArgContext* MySqlParser::CaseFuncAlternativeContext::functionArg(size_t i) {
  return getRuleContext<MySqlParser::FunctionArgContext>(i);
}


size_t MySqlParser::CaseFuncAlternativeContext::getRuleIndex() const {
  return MySqlParser::RuleCaseFuncAlternative;
}


MySqlParser::CaseFuncAlternativeContext* MySqlParser::caseFuncAlternative() {
  CaseFuncAlternativeContext *_localctx = _tracker.createInstance<CaseFuncAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 588, MySqlParser::RuleCaseFuncAlternative);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6104);
    match(MySqlParser::WHEN);
    setState(6105);
    dynamic_cast<CaseFuncAlternativeContext *>(_localctx)->condition = functionArg();
    setState(6106);
    match(MySqlParser::THEN);
    setState(6107);
    dynamic_cast<CaseFuncAlternativeContext *>(_localctx)->consequent = functionArg();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LevelsInWeightStringContext ------------------------------------------------------------------

MySqlParser::LevelsInWeightStringContext::LevelsInWeightStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::LevelsInWeightStringContext::getRuleIndex() const {
  return MySqlParser::RuleLevelsInWeightString;
}

void MySqlParser::LevelsInWeightStringContext::copyFrom(LevelsInWeightStringContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LevelWeightRangeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::LevelWeightRangeContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

tree::TerminalNode* MySqlParser::LevelWeightRangeContext::MINUS() {
  return getToken(MySqlParser::MINUS, 0);
}

std::vector<MySqlParser::DecimalLiteralContext *> MySqlParser::LevelWeightRangeContext::decimalLiteral() {
  return getRuleContexts<MySqlParser::DecimalLiteralContext>();
}

MySqlParser::DecimalLiteralContext* MySqlParser::LevelWeightRangeContext::decimalLiteral(size_t i) {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(i);
}

MySqlParser::LevelWeightRangeContext::LevelWeightRangeContext(LevelsInWeightStringContext *ctx) { copyFrom(ctx); }


//----------------- LevelWeightListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::LevelWeightListContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

std::vector<MySqlParser::LevelInWeightListElementContext *> MySqlParser::LevelWeightListContext::levelInWeightListElement() {
  return getRuleContexts<MySqlParser::LevelInWeightListElementContext>();
}

MySqlParser::LevelInWeightListElementContext* MySqlParser::LevelWeightListContext::levelInWeightListElement(size_t i) {
  return getRuleContext<MySqlParser::LevelInWeightListElementContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::LevelWeightListContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::LevelWeightListContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::LevelWeightListContext::LevelWeightListContext(LevelsInWeightStringContext *ctx) { copyFrom(ctx); }


MySqlParser::LevelsInWeightStringContext* MySqlParser::levelsInWeightString() {
  LevelsInWeightStringContext *_localctx = _tracker.createInstance<LevelsInWeightStringContext>(_ctx, getState());
  enterRule(_localctx, 590, MySqlParser::RuleLevelsInWeightString);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6123);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 900, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<LevelsInWeightStringContext *>(_tracker.createInstance<MySqlParser::LevelWeightListContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(6109);
      match(MySqlParser::LEVEL);
      setState(6110);
      levelInWeightListElement();
      setState(6115);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(6111);
        match(MySqlParser::COMMA);
        setState(6112);
        levelInWeightListElement();
        setState(6117);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<LevelsInWeightStringContext *>(_tracker.createInstance<MySqlParser::LevelWeightRangeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(6118);
      match(MySqlParser::LEVEL);
      setState(6119);
      dynamic_cast<LevelWeightRangeContext *>(_localctx)->firstLevel = decimalLiteral();
      setState(6120);
      match(MySqlParser::MINUS);
      setState(6121);
      dynamic_cast<LevelWeightRangeContext *>(_localctx)->lastLevel = decimalLiteral();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LevelInWeightListElementContext ------------------------------------------------------------------

MySqlParser::LevelInWeightListElementContext::LevelInWeightListElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::DecimalLiteralContext* MySqlParser::LevelInWeightListElementContext::decimalLiteral() {
  return getRuleContext<MySqlParser::DecimalLiteralContext>(0);
}

tree::TerminalNode* MySqlParser::LevelInWeightListElementContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::LevelInWeightListElementContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}

tree::TerminalNode* MySqlParser::LevelInWeightListElementContext::REVERSE() {
  return getToken(MySqlParser::REVERSE, 0);
}


size_t MySqlParser::LevelInWeightListElementContext::getRuleIndex() const {
  return MySqlParser::RuleLevelInWeightListElement;
}


MySqlParser::LevelInWeightListElementContext* MySqlParser::levelInWeightListElement() {
  LevelInWeightListElementContext *_localctx = _tracker.createInstance<LevelInWeightListElementContext>(_ctx, getState());
  enterRule(_localctx, 592, MySqlParser::RuleLevelInWeightListElement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6125);
    decimalLiteral();
    setState(6127);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ASC

    || _la == MySqlParser::DESC || _la == MySqlParser::REVERSE) {
      setState(6126);
      dynamic_cast<LevelInWeightListElementContext *>(_localctx)->orderType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC || _la == MySqlParser::REVERSE)) {
        dynamic_cast<LevelInWeightListElementContext *>(_localctx)->orderType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateWindowedFunctionContext ------------------------------------------------------------------

MySqlParser::AggregateWindowedFunctionContext::AggregateWindowedFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::FunctionArgContext* MySqlParser::AggregateWindowedFunctionContext::functionArg() {
  return getRuleContext<MySqlParser::FunctionArgContext>(0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::AVG() {
  return getToken(MySqlParser::AVG, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::MAX() {
  return getToken(MySqlParser::MAX, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::MIN() {
  return getToken(MySqlParser::MIN, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::SUM() {
  return getToken(MySqlParser::SUM, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

MySqlParser::FunctionArgsContext* MySqlParser::AggregateWindowedFunctionContext::functionArgs() {
  return getRuleContext<MySqlParser::FunctionArgsContext>(0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::BIT_AND() {
  return getToken(MySqlParser::BIT_AND, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::BIT_OR() {
  return getToken(MySqlParser::BIT_OR, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::BIT_XOR() {
  return getToken(MySqlParser::BIT_XOR, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::STD() {
  return getToken(MySqlParser::STD, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::STDDEV() {
  return getToken(MySqlParser::STDDEV, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::STDDEV_POP() {
  return getToken(MySqlParser::STDDEV_POP, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::STDDEV_SAMP() {
  return getToken(MySqlParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::VAR_POP() {
  return getToken(MySqlParser::VAR_POP, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::VAR_SAMP() {
  return getToken(MySqlParser::VAR_SAMP, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::VARIANCE() {
  return getToken(MySqlParser::VARIANCE, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::GROUP_CONCAT() {
  return getToken(MySqlParser::GROUP_CONCAT, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<MySqlParser::OrderByExpressionContext *> MySqlParser::AggregateWindowedFunctionContext::orderByExpression() {
  return getRuleContexts<MySqlParser::OrderByExpressionContext>();
}

MySqlParser::OrderByExpressionContext* MySqlParser::AggregateWindowedFunctionContext::orderByExpression(size_t i) {
  return getRuleContext<MySqlParser::OrderByExpressionContext>(i);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::SEPARATOR() {
  return getToken(MySqlParser::SEPARATOR, 0);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::AggregateWindowedFunctionContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::AggregateWindowedFunctionContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::AggregateWindowedFunctionContext::getRuleIndex() const {
  return MySqlParser::RuleAggregateWindowedFunction;
}


MySqlParser::AggregateWindowedFunctionContext* MySqlParser::aggregateWindowedFunction() {
  AggregateWindowedFunctionContext *_localctx = _tracker.createInstance<AggregateWindowedFunctionContext>(_ctx, getState());
  enterRule(_localctx, 594, MySqlParser::RuleAggregateWindowedFunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6185);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 910, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6129);
      _la = _input->LA(1);
      if (!(((((_la - 235) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 235)) & ((1ULL << (MySqlParser::AVG - 235))
        | (1ULL << (MySqlParser::MAX - 235))
        | (1ULL << (MySqlParser::MIN - 235))
        | (1ULL << (MySqlParser::SUM - 235)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6130);
      match(MySqlParser::LR_BRACKET);
      setState(6132);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 902, _ctx)) {
      case 1: {
        setState(6131);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ALL

        || _la == MySqlParser::DISTINCT)) {
          dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(6134);
      functionArg();
      setState(6135);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6137);
      match(MySqlParser::COUNT);
      setState(6138);
      match(MySqlParser::LR_BRACKET);
      setState(6144);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 904, _ctx)) {
      case 1: {
        setState(6139);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->starArg = match(MySqlParser::STAR);
        break;
      }

      case 2: {
        setState(6141);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 903, _ctx)) {
        case 1: {
          setState(6140);
          dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySqlParser::ALL);
          break;
        }

        }
        setState(6143);
        functionArg();
        break;
      }

      }
      setState(6146);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6147);
      match(MySqlParser::COUNT);
      setState(6148);
      match(MySqlParser::LR_BRACKET);
      setState(6149);
      dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySqlParser::DISTINCT);
      setState(6150);
      functionArgs();
      setState(6151);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6153);
      _la = _input->LA(1);
      if (!(((((_la - 236) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 236)) & ((1ULL << (MySqlParser::BIT_AND - 236))
        | (1ULL << (MySqlParser::BIT_OR - 236))
        | (1ULL << (MySqlParser::BIT_XOR - 236))
        | (1ULL << (MySqlParser::STD - 236))
        | (1ULL << (MySqlParser::STDDEV - 236))
        | (1ULL << (MySqlParser::STDDEV_POP - 236))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 236))
        | (1ULL << (MySqlParser::VAR_POP - 236))
        | (1ULL << (MySqlParser::VAR_SAMP - 236))
        | (1ULL << (MySqlParser::VARIANCE - 236)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6154);
      match(MySqlParser::LR_BRACKET);
      setState(6156);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 905, _ctx)) {
      case 1: {
        setState(6155);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySqlParser::ALL);
        break;
      }

      }
      setState(6158);
      functionArg();
      setState(6159);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6161);
      match(MySqlParser::GROUP_CONCAT);
      setState(6162);
      match(MySqlParser::LR_BRACKET);
      setState(6164);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 906, _ctx)) {
      case 1: {
        setState(6163);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->aggregator = match(MySqlParser::DISTINCT);
        break;
      }

      }
      setState(6166);
      functionArgs();
      setState(6177);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ORDER) {
        setState(6167);
        match(MySqlParser::ORDER);
        setState(6168);
        match(MySqlParser::BY);
        setState(6169);
        orderByExpression();
        setState(6174);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(6170);
          match(MySqlParser::COMMA);
          setState(6171);
          orderByExpression();
          setState(6176);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(6181);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::SEPARATOR) {
        setState(6179);
        match(MySqlParser::SEPARATOR);
        setState(6180);
        dynamic_cast<AggregateWindowedFunctionContext *>(_localctx)->separator = match(MySqlParser::STRING_LITERAL);
      }
      setState(6183);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScalarFunctionNameContext ------------------------------------------------------------------

MySqlParser::ScalarFunctionNameContext::ScalarFunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::FunctionNameBaseContext* MySqlParser::ScalarFunctionNameContext::functionNameBase() {
  return getRuleContext<MySqlParser::FunctionNameBaseContext>(0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::ASCII() {
  return getToken(MySqlParser::ASCII, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::CURDATE() {
  return getToken(MySqlParser::CURDATE, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::CURRENT_DATE() {
  return getToken(MySqlParser::CURRENT_DATE, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::CURRENT_TIME() {
  return getToken(MySqlParser::CURRENT_TIME, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::CURTIME() {
  return getToken(MySqlParser::CURTIME, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::DATE_ADD() {
  return getToken(MySqlParser::DATE_ADD, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::DATE_SUB() {
  return getToken(MySqlParser::DATE_SUB, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::IF() {
  return getToken(MySqlParser::IF, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::LOCALTIME() {
  return getToken(MySqlParser::LOCALTIME, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::LOCALTIMESTAMP() {
  return getToken(MySqlParser::LOCALTIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::MID() {
  return getToken(MySqlParser::MID, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::NOW() {
  return getToken(MySqlParser::NOW, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::SUBSTR() {
  return getToken(MySqlParser::SUBSTR, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::SUBSTRING() {
  return getToken(MySqlParser::SUBSTRING, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::SYSDATE() {
  return getToken(MySqlParser::SYSDATE, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::TRIM() {
  return getToken(MySqlParser::TRIM, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::UTC_DATE() {
  return getToken(MySqlParser::UTC_DATE, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::UTC_TIME() {
  return getToken(MySqlParser::UTC_TIME, 0);
}

tree::TerminalNode* MySqlParser::ScalarFunctionNameContext::UTC_TIMESTAMP() {
  return getToken(MySqlParser::UTC_TIMESTAMP, 0);
}


size_t MySqlParser::ScalarFunctionNameContext::getRuleIndex() const {
  return MySqlParser::RuleScalarFunctionName;
}


MySqlParser::ScalarFunctionNameContext* MySqlParser::scalarFunctionName() {
  ScalarFunctionNameContext *_localctx = _tracker.createInstance<ScalarFunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 596, MySqlParser::RuleScalarFunctionName);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6210);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DATABASE:
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::SCHEMA:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::YEAR:
      case MySqlParser::JSON_VALID:
      case MySqlParser::JSON_SCHEMA_VALID:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::INVISIBLE:
      case MySqlParser::VISIBLE:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::SESSION_VARIABLES_ADMIN:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::MOD: {
        enterOuterAlt(_localctx, 1);
        setState(6187);
        functionNameBase();
        break;
      }

      case MySqlParser::ASCII: {
        enterOuterAlt(_localctx, 2);
        setState(6188);
        match(MySqlParser::ASCII);
        break;
      }

      case MySqlParser::CURDATE: {
        enterOuterAlt(_localctx, 3);
        setState(6189);
        match(MySqlParser::CURDATE);
        break;
      }

      case MySqlParser::CURRENT_DATE: {
        enterOuterAlt(_localctx, 4);
        setState(6190);
        match(MySqlParser::CURRENT_DATE);
        break;
      }

      case MySqlParser::CURRENT_TIME: {
        enterOuterAlt(_localctx, 5);
        setState(6191);
        match(MySqlParser::CURRENT_TIME);
        break;
      }

      case MySqlParser::CURRENT_TIMESTAMP: {
        enterOuterAlt(_localctx, 6);
        setState(6192);
        match(MySqlParser::CURRENT_TIMESTAMP);
        break;
      }

      case MySqlParser::CURTIME: {
        enterOuterAlt(_localctx, 7);
        setState(6193);
        match(MySqlParser::CURTIME);
        break;
      }

      case MySqlParser::DATE_ADD: {
        enterOuterAlt(_localctx, 8);
        setState(6194);
        match(MySqlParser::DATE_ADD);
        break;
      }

      case MySqlParser::DATE_SUB: {
        enterOuterAlt(_localctx, 9);
        setState(6195);
        match(MySqlParser::DATE_SUB);
        break;
      }

      case MySqlParser::IF: {
        enterOuterAlt(_localctx, 10);
        setState(6196);
        match(MySqlParser::IF);
        break;
      }

      case MySqlParser::INSERT: {
        enterOuterAlt(_localctx, 11);
        setState(6197);
        match(MySqlParser::INSERT);
        break;
      }

      case MySqlParser::LOCALTIME: {
        enterOuterAlt(_localctx, 12);
        setState(6198);
        match(MySqlParser::LOCALTIME);
        break;
      }

      case MySqlParser::LOCALTIMESTAMP: {
        enterOuterAlt(_localctx, 13);
        setState(6199);
        match(MySqlParser::LOCALTIMESTAMP);
        break;
      }

      case MySqlParser::MID: {
        enterOuterAlt(_localctx, 14);
        setState(6200);
        match(MySqlParser::MID);
        break;
      }

      case MySqlParser::NOW: {
        enterOuterAlt(_localctx, 15);
        setState(6201);
        match(MySqlParser::NOW);
        break;
      }

      case MySqlParser::REPLACE: {
        enterOuterAlt(_localctx, 16);
        setState(6202);
        match(MySqlParser::REPLACE);
        break;
      }

      case MySqlParser::SUBSTR: {
        enterOuterAlt(_localctx, 17);
        setState(6203);
        match(MySqlParser::SUBSTR);
        break;
      }

      case MySqlParser::SUBSTRING: {
        enterOuterAlt(_localctx, 18);
        setState(6204);
        match(MySqlParser::SUBSTRING);
        break;
      }

      case MySqlParser::SYSDATE: {
        enterOuterAlt(_localctx, 19);
        setState(6205);
        match(MySqlParser::SYSDATE);
        break;
      }

      case MySqlParser::TRIM: {
        enterOuterAlt(_localctx, 20);
        setState(6206);
        match(MySqlParser::TRIM);
        break;
      }

      case MySqlParser::UTC_DATE: {
        enterOuterAlt(_localctx, 21);
        setState(6207);
        match(MySqlParser::UTC_DATE);
        break;
      }

      case MySqlParser::UTC_TIME: {
        enterOuterAlt(_localctx, 22);
        setState(6208);
        match(MySqlParser::UTC_TIME);
        break;
      }

      case MySqlParser::UTC_TIMESTAMP: {
        enterOuterAlt(_localctx, 23);
        setState(6209);
        match(MySqlParser::UTC_TIMESTAMP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PasswordFunctionClauseContext ------------------------------------------------------------------

MySqlParser::PasswordFunctionClauseContext::PasswordFunctionClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PasswordFunctionClauseContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::FunctionArgContext* MySqlParser::PasswordFunctionClauseContext::functionArg() {
  return getRuleContext<MySqlParser::FunctionArgContext>(0);
}

tree::TerminalNode* MySqlParser::PasswordFunctionClauseContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::PasswordFunctionClauseContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::PasswordFunctionClauseContext::OLD_PASSWORD() {
  return getToken(MySqlParser::OLD_PASSWORD, 0);
}


size_t MySqlParser::PasswordFunctionClauseContext::getRuleIndex() const {
  return MySqlParser::RulePasswordFunctionClause;
}


MySqlParser::PasswordFunctionClauseContext* MySqlParser::passwordFunctionClause() {
  PasswordFunctionClauseContext *_localctx = _tracker.createInstance<PasswordFunctionClauseContext>(_ctx, getState());
  enterRule(_localctx, 598, MySqlParser::RulePasswordFunctionClause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6212);
    dynamic_cast<PasswordFunctionClauseContext *>(_localctx)->functionName = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::OLD_PASSWORD

    || _la == MySqlParser::PASSWORD)) {
      dynamic_cast<PasswordFunctionClauseContext *>(_localctx)->functionName = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6213);
    match(MySqlParser::LR_BRACKET);
    setState(6214);
    functionArg();
    setState(6215);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionArgsContext ------------------------------------------------------------------

MySqlParser::FunctionArgsContext::FunctionArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ConstantContext *> MySqlParser::FunctionArgsContext::constant() {
  return getRuleContexts<MySqlParser::ConstantContext>();
}

MySqlParser::ConstantContext* MySqlParser::FunctionArgsContext::constant(size_t i) {
  return getRuleContext<MySqlParser::ConstantContext>(i);
}

std::vector<MySqlParser::FullColumnNameContext *> MySqlParser::FunctionArgsContext::fullColumnName() {
  return getRuleContexts<MySqlParser::FullColumnNameContext>();
}

MySqlParser::FullColumnNameContext* MySqlParser::FunctionArgsContext::fullColumnName(size_t i) {
  return getRuleContext<MySqlParser::FullColumnNameContext>(i);
}

std::vector<MySqlParser::FunctionCallContext *> MySqlParser::FunctionArgsContext::functionCall() {
  return getRuleContexts<MySqlParser::FunctionCallContext>();
}

MySqlParser::FunctionCallContext* MySqlParser::FunctionArgsContext::functionCall(size_t i) {
  return getRuleContext<MySqlParser::FunctionCallContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::FunctionArgsContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::FunctionArgsContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::FunctionArgsContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::FunctionArgsContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}


size_t MySqlParser::FunctionArgsContext::getRuleIndex() const {
  return MySqlParser::RuleFunctionArgs;
}


MySqlParser::FunctionArgsContext* MySqlParser::functionArgs() {
  FunctionArgsContext *_localctx = _tracker.createInstance<FunctionArgsContext>(_ctx, getState());
  enterRule(_localctx, 600, MySqlParser::RuleFunctionArgs);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6221);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 912, _ctx)) {
    case 1: {
      setState(6217);
      constant();
      break;
    }

    case 2: {
      setState(6218);
      fullColumnName();
      break;
    }

    case 3: {
      setState(6219);
      functionCall();
      break;
    }

    case 4: {
      setState(6220);
      expression(0);
      break;
    }

    }
    setState(6232);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(6223);
      match(MySqlParser::COMMA);
      setState(6228);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 913, _ctx)) {
      case 1: {
        setState(6224);
        constant();
        break;
      }

      case 2: {
        setState(6225);
        fullColumnName();
        break;
      }

      case 3: {
        setState(6226);
        functionCall();
        break;
      }

      case 4: {
        setState(6227);
        expression(0);
        break;
      }

      }
      setState(6234);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionArgContext ------------------------------------------------------------------

MySqlParser::FunctionArgContext::FunctionArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ConstantContext* MySqlParser::FunctionArgContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

MySqlParser::FullColumnNameContext* MySqlParser::FunctionArgContext::fullColumnName() {
  return getRuleContext<MySqlParser::FullColumnNameContext>(0);
}

MySqlParser::FunctionCallContext* MySqlParser::FunctionArgContext::functionCall() {
  return getRuleContext<MySqlParser::FunctionCallContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::FunctionArgContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::FunctionArgContext::getRuleIndex() const {
  return MySqlParser::RuleFunctionArg;
}


MySqlParser::FunctionArgContext* MySqlParser::functionArg() {
  FunctionArgContext *_localctx = _tracker.createInstance<FunctionArgContext>(_ctx, getState());
  enterRule(_localctx, 602, MySqlParser::RuleFunctionArg);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6239);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 915, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6235);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6236);
      fullColumnName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6237);
      functionCall();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6238);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

MySqlParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ExpressionContext::getRuleIndex() const {
  return MySqlParser::RuleExpression;
}

void MySqlParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- IsExpressionContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::IsExpressionContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::IS() {
  return getToken(MySqlParser::IS, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::TRUE() {
  return getToken(MySqlParser::TRUE, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::FALSE() {
  return getToken(MySqlParser::FALSE, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::UNKNOWN() {
  return getToken(MySqlParser::UNKNOWN, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::IsExpressionContext::IsExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


//----------------- NotExpressionContext ------------------------------------------------------------------

MySqlParser::ExpressionContext* MySqlParser::NotExpressionContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::NotExpressionContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::NotExpressionContext::EXCLAMATION_SYMBOL() {
  return getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
}

MySqlParser::NotExpressionContext::NotExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


//----------------- LogicalExpressionContext ------------------------------------------------------------------

std::vector<MySqlParser::ExpressionContext *> MySqlParser::LogicalExpressionContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::LogicalExpressionContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::LogicalOperatorContext* MySqlParser::LogicalExpressionContext::logicalOperator() {
  return getRuleContext<MySqlParser::LogicalOperatorContext>(0);
}

MySqlParser::LogicalExpressionContext::LogicalExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


//----------------- PredicateExpressionContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::PredicateExpressionContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

MySqlParser::PredicateExpressionContext::PredicateExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }



MySqlParser::ExpressionContext* MySqlParser::expression() {
   return expression(0);
}

MySqlParser::ExpressionContext* MySqlParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySqlParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  MySqlParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 604;
  enterRecursionRule(_localctx, 604, MySqlParser::RuleExpression, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6252);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 917, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NotExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(6242);
      dynamic_cast<NotExpressionContext *>(_localctx)->notOperator = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NOT || _la == MySqlParser::EXCLAMATION_SYMBOL)) {
        dynamic_cast<NotExpressionContext *>(_localctx)->notOperator = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(6243);
      expression(4);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<IsExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6244);
      predicate(0);
      setState(6245);
      match(MySqlParser::IS);
      setState(6247);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(6246);
        match(MySqlParser::NOT);
      }
      setState(6249);
      dynamic_cast<IsExpressionContext *>(_localctx)->testValue = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FALSE || _la == MySqlParser::TRUE || _la == MySqlParser::UNKNOWN)) {
        dynamic_cast<IsExpressionContext *>(_localctx)->testValue = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PredicateExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6251);
      predicate(0);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6260);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 918, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<LogicalExpressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleExpression);
        setState(6254);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(6255);
        logicalOperator();
        setState(6256);
        expression(4); 
      }
      setState(6262);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 918, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::PredicateContext::getRuleIndex() const {
  return MySqlParser::RulePredicate;
}

void MySqlParser::PredicateContext::copyFrom(PredicateContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SoundsLikePredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::SoundsLikePredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::SoundsLikePredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::SoundsLikePredicateContext::SOUNDS() {
  return getToken(MySqlParser::SOUNDS, 0);
}

tree::TerminalNode* MySqlParser::SoundsLikePredicateContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

MySqlParser::SoundsLikePredicateContext::SoundsLikePredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- ExpressionAtomPredicateContext ------------------------------------------------------------------

MySqlParser::ExpressionAtomContext* MySqlParser::ExpressionAtomPredicateContext::expressionAtom() {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* MySqlParser::ExpressionAtomPredicateContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::ExpressionAtomPredicateContext::VAR_ASSIGN() {
  return getToken(MySqlParser::VAR_ASSIGN, 0);
}

MySqlParser::ExpressionAtomPredicateContext::ExpressionAtomPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- JsonMemberOfPredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::JsonMemberOfPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::JsonMemberOfPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::JsonMemberOfPredicateContext::MEMBER() {
  return getToken(MySqlParser::MEMBER, 0);
}

tree::TerminalNode* MySqlParser::JsonMemberOfPredicateContext::OF() {
  return getToken(MySqlParser::OF, 0);
}

tree::TerminalNode* MySqlParser::JsonMemberOfPredicateContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::JsonMemberOfPredicateContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::JsonMemberOfPredicateContext::JsonMemberOfPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- InPredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::InPredicateContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

tree::TerminalNode* MySqlParser::InPredicateContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::InPredicateContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::InPredicateContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::InPredicateContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

MySqlParser::ExpressionsContext* MySqlParser::InPredicateContext::expressions() {
  return getRuleContext<MySqlParser::ExpressionsContext>(0);
}

tree::TerminalNode* MySqlParser::InPredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::InPredicateContext::InPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- SubqueryComparasionPredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::SubqueryComparasionPredicateContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

MySqlParser::ComparisonOperatorContext* MySqlParser::SubqueryComparasionPredicateContext::comparisonOperator() {
  return getRuleContext<MySqlParser::ComparisonOperatorContext>(0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::SubqueryComparasionPredicateContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::ANY() {
  return getToken(MySqlParser::ANY, 0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::SOME() {
  return getToken(MySqlParser::SOME, 0);
}

MySqlParser::SubqueryComparasionPredicateContext::SubqueryComparasionPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- BetweenPredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::BetweenPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::BetweenPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::BetweenPredicateContext::BETWEEN() {
  return getToken(MySqlParser::BETWEEN, 0);
}

tree::TerminalNode* MySqlParser::BetweenPredicateContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::BetweenPredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::BetweenPredicateContext::BetweenPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- BinaryComparasionPredicateContext ------------------------------------------------------------------

MySqlParser::ComparisonOperatorContext* MySqlParser::BinaryComparasionPredicateContext::comparisonOperator() {
  return getRuleContext<MySqlParser::ComparisonOperatorContext>(0);
}

std::vector<MySqlParser::PredicateContext *> MySqlParser::BinaryComparasionPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::BinaryComparasionPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

MySqlParser::BinaryComparasionPredicateContext::BinaryComparasionPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- IsNullPredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::IsNullPredicateContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

tree::TerminalNode* MySqlParser::IsNullPredicateContext::IS() {
  return getToken(MySqlParser::IS, 0);
}

MySqlParser::NullNotnullContext* MySqlParser::IsNullPredicateContext::nullNotnull() {
  return getRuleContext<MySqlParser::NullNotnullContext>(0);
}

MySqlParser::IsNullPredicateContext::IsNullPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- LikePredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::LikePredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::LikePredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::ESCAPE() {
  return getToken(MySqlParser::ESCAPE, 0);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::LikePredicateContext::LikePredicateContext(PredicateContext *ctx) { copyFrom(ctx); }


//----------------- RegexpPredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::RegexpPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::RegexpPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::RegexpPredicateContext::REGEXP() {
  return getToken(MySqlParser::REGEXP, 0);
}

tree::TerminalNode* MySqlParser::RegexpPredicateContext::RLIKE() {
  return getToken(MySqlParser::RLIKE, 0);
}

tree::TerminalNode* MySqlParser::RegexpPredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::RegexpPredicateContext::RegexpPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }



MySqlParser::PredicateContext* MySqlParser::predicate() {
   return predicate(0);
}

MySqlParser::PredicateContext* MySqlParser::predicate(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySqlParser::PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, parentState);
  MySqlParser::PredicateContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 606;
  enterRecursionRule(_localctx, 606, MySqlParser::RulePredicate, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ExpressionAtomPredicateContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(6266);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 919, _ctx)) {
    case 1: {
      setState(6264);
      match(MySqlParser::LOCAL_ID);
      setState(6265);
      match(MySqlParser::VAR_ASSIGN);
      break;
    }

    }
    setState(6268);
    expressionAtom(0);
    _ctx->stop = _input->LT(-1);
    setState(6334);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 927, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6332);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 926, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<BinaryComparasionPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6270);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(6271);
          comparisonOperator();
          setState(6272);
          dynamic_cast<BinaryComparasionPredicateContext *>(_localctx)->right = predicate(9);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<BetweenPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6274);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(6276);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(6275);
            match(MySqlParser::NOT);
          }
          setState(6278);
          match(MySqlParser::BETWEEN);
          setState(6279);
          predicate(0);
          setState(6280);
          match(MySqlParser::AND);
          setState(6281);
          predicate(7);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<SoundsLikePredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6283);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(6284);
          match(MySqlParser::SOUNDS);
          setState(6285);
          match(MySqlParser::LIKE);
          setState(6286);
          predicate(6);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<RegexpPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6287);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(6289);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(6288);
            match(MySqlParser::NOT);
          }
          setState(6291);
          dynamic_cast<RegexpPredicateContext *>(_localctx)->regex = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::REGEXP

          || _la == MySqlParser::RLIKE)) {
            dynamic_cast<RegexpPredicateContext *>(_localctx)->regex = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6292);
          predicate(4);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<InPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6293);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(6295);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(6294);
            match(MySqlParser::NOT);
          }
          setState(6297);
          match(MySqlParser::IN);
          setState(6298);
          match(MySqlParser::LR_BRACKET);
          setState(6301);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 923, _ctx)) {
          case 1: {
            setState(6299);
            selectStatement();
            break;
          }

          case 2: {
            setState(6300);
            expressions();
            break;
          }

          }
          setState(6303);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<IsNullPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6305);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(6306);
          match(MySqlParser::IS);
          setState(6307);
          nullNotnull();
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<SubqueryComparasionPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6308);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(6309);
          comparisonOperator();
          setState(6310);
          dynamic_cast<SubqueryComparasionPredicateContext *>(_localctx)->quantifier = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ALL || _la == MySqlParser::ANY || _la == MySqlParser::SOME)) {
            dynamic_cast<SubqueryComparasionPredicateContext *>(_localctx)->quantifier = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(6311);
          match(MySqlParser::LR_BRACKET);
          setState(6312);
          selectStatement();
          setState(6313);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<LikePredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6315);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(6317);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(6316);
            match(MySqlParser::NOT);
          }
          setState(6319);
          match(MySqlParser::LIKE);
          setState(6320);
          predicate(0);
          setState(6323);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 925, _ctx)) {
          case 1: {
            setState(6321);
            match(MySqlParser::ESCAPE);
            setState(6322);
            match(MySqlParser::STRING_LITERAL);
            break;
          }

          }
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<JsonMemberOfPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(6325);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(6326);
          match(MySqlParser::MEMBER);
          setState(6327);
          match(MySqlParser::OF);
          setState(6328);
          match(MySqlParser::LR_BRACKET);
          setState(6329);
          predicate(0);
          setState(6330);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        } 
      }
      setState(6336);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 927, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionAtomContext ------------------------------------------------------------------

MySqlParser::ExpressionAtomContext::ExpressionAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ExpressionAtomContext::getRuleIndex() const {
  return MySqlParser::RuleExpressionAtom;
}

void MySqlParser::ExpressionAtomContext::copyFrom(ExpressionAtomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnaryExpressionAtomContext ------------------------------------------------------------------

MySqlParser::UnaryOperatorContext* MySqlParser::UnaryExpressionAtomContext::unaryOperator() {
  return getRuleContext<MySqlParser::UnaryOperatorContext>(0);
}

MySqlParser::ExpressionAtomContext* MySqlParser::UnaryExpressionAtomContext::expressionAtom() {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(0);
}

MySqlParser::UnaryExpressionAtomContext::UnaryExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- CollateExpressionAtomContext ------------------------------------------------------------------

MySqlParser::ExpressionAtomContext* MySqlParser::CollateExpressionAtomContext::expressionAtom() {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* MySqlParser::CollateExpressionAtomContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::CollationNameContext* MySqlParser::CollateExpressionAtomContext::collationName() {
  return getRuleContext<MySqlParser::CollationNameContext>(0);
}

MySqlParser::CollateExpressionAtomContext::CollateExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- MysqlVariableExpressionAtomContext ------------------------------------------------------------------

MySqlParser::MysqlVariableContext* MySqlParser::MysqlVariableExpressionAtomContext::mysqlVariable() {
  return getRuleContext<MySqlParser::MysqlVariableContext>(0);
}

MySqlParser::MysqlVariableExpressionAtomContext::MysqlVariableExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- NestedExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::NestedExpressionAtomContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::NestedExpressionAtomContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::NestedExpressionAtomContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

tree::TerminalNode* MySqlParser::NestedExpressionAtomContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::NestedExpressionAtomContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::NestedExpressionAtomContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::NestedExpressionAtomContext::NestedExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- NestedRowExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::NestedRowExpressionAtomContext::ROW() {
  return getToken(MySqlParser::ROW, 0);
}

tree::TerminalNode* MySqlParser::NestedRowExpressionAtomContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::NestedRowExpressionAtomContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::NestedRowExpressionAtomContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

tree::TerminalNode* MySqlParser::NestedRowExpressionAtomContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::NestedRowExpressionAtomContext::COMMA() {
  return getTokens(MySqlParser::COMMA);
}

tree::TerminalNode* MySqlParser::NestedRowExpressionAtomContext::COMMA(size_t i) {
  return getToken(MySqlParser::COMMA, i);
}

MySqlParser::NestedRowExpressionAtomContext::NestedRowExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- MathExpressionAtomContext ------------------------------------------------------------------

MySqlParser::MathOperatorContext* MySqlParser::MathExpressionAtomContext::mathOperator() {
  return getRuleContext<MySqlParser::MathOperatorContext>(0);
}

std::vector<MySqlParser::ExpressionAtomContext *> MySqlParser::MathExpressionAtomContext::expressionAtom() {
  return getRuleContexts<MySqlParser::ExpressionAtomContext>();
}

MySqlParser::ExpressionAtomContext* MySqlParser::MathExpressionAtomContext::expressionAtom(size_t i) {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(i);
}

MySqlParser::MathExpressionAtomContext::MathExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- ExistsExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ExistsExpressionAtomContext::EXISTS() {
  return getToken(MySqlParser::EXISTS, 0);
}

tree::TerminalNode* MySqlParser::ExistsExpressionAtomContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::ExistsExpressionAtomContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::ExistsExpressionAtomContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::ExistsExpressionAtomContext::ExistsExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- IntervalExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::IntervalExpressionAtomContext::INTERVAL() {
  return getToken(MySqlParser::INTERVAL, 0);
}

MySqlParser::ExpressionContext* MySqlParser::IntervalExpressionAtomContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::IntervalTypeContext* MySqlParser::IntervalExpressionAtomContext::intervalType() {
  return getRuleContext<MySqlParser::IntervalTypeContext>(0);
}

MySqlParser::IntervalExpressionAtomContext::IntervalExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- JsonExpressionAtomContext ------------------------------------------------------------------

MySqlParser::JsonOperatorContext* MySqlParser::JsonExpressionAtomContext::jsonOperator() {
  return getRuleContext<MySqlParser::JsonOperatorContext>(0);
}

std::vector<MySqlParser::ExpressionAtomContext *> MySqlParser::JsonExpressionAtomContext::expressionAtom() {
  return getRuleContexts<MySqlParser::ExpressionAtomContext>();
}

MySqlParser::ExpressionAtomContext* MySqlParser::JsonExpressionAtomContext::expressionAtom(size_t i) {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(i);
}

MySqlParser::JsonExpressionAtomContext::JsonExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- SubqueryExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SubqueryExpressionAtomContext::LR_BRACKET() {
  return getToken(MySqlParser::LR_BRACKET, 0);
}

MySqlParser::SelectStatementContext* MySqlParser::SubqueryExpressionAtomContext::selectStatement() {
  return getRuleContext<MySqlParser::SelectStatementContext>(0);
}

tree::TerminalNode* MySqlParser::SubqueryExpressionAtomContext::RR_BRACKET() {
  return getToken(MySqlParser::RR_BRACKET, 0);
}

MySqlParser::SubqueryExpressionAtomContext::SubqueryExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- ConstantExpressionAtomContext ------------------------------------------------------------------

MySqlParser::ConstantContext* MySqlParser::ConstantExpressionAtomContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

MySqlParser::ConstantExpressionAtomContext::ConstantExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- FunctionCallExpressionAtomContext ------------------------------------------------------------------

MySqlParser::FunctionCallContext* MySqlParser::FunctionCallExpressionAtomContext::functionCall() {
  return getRuleContext<MySqlParser::FunctionCallContext>(0);
}

MySqlParser::FunctionCallExpressionAtomContext::FunctionCallExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- BinaryExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::BinaryExpressionAtomContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::ExpressionAtomContext* MySqlParser::BinaryExpressionAtomContext::expressionAtom() {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(0);
}

MySqlParser::BinaryExpressionAtomContext::BinaryExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- FullColumnNameExpressionAtomContext ------------------------------------------------------------------

MySqlParser::FullColumnNameContext* MySqlParser::FullColumnNameExpressionAtomContext::fullColumnName() {
  return getRuleContext<MySqlParser::FullColumnNameContext>(0);
}

MySqlParser::FullColumnNameExpressionAtomContext::FullColumnNameExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


//----------------- BitExpressionAtomContext ------------------------------------------------------------------

MySqlParser::BitOperatorContext* MySqlParser::BitExpressionAtomContext::bitOperator() {
  return getRuleContext<MySqlParser::BitOperatorContext>(0);
}

std::vector<MySqlParser::ExpressionAtomContext *> MySqlParser::BitExpressionAtomContext::expressionAtom() {
  return getRuleContexts<MySqlParser::ExpressionAtomContext>();
}

MySqlParser::ExpressionAtomContext* MySqlParser::BitExpressionAtomContext::expressionAtom(size_t i) {
  return getRuleContext<MySqlParser::ExpressionAtomContext>(i);
}

MySqlParser::BitExpressionAtomContext::BitExpressionAtomContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }



MySqlParser::ExpressionAtomContext* MySqlParser::expressionAtom() {
   return expressionAtom(0);
}

MySqlParser::ExpressionAtomContext* MySqlParser::expressionAtom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySqlParser::ExpressionAtomContext *_localctx = _tracker.createInstance<ExpressionAtomContext>(_ctx, parentState);
  MySqlParser::ExpressionAtomContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 608;
  enterRecursionRule(_localctx, 608, MySqlParser::RuleExpressionAtom, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6382);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 930, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ConstantExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(6338);
      constant();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<FullColumnNameExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6339);
      fullColumnName();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<FunctionCallExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6340);
      functionCall();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<MysqlVariableExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6341);
      mysqlVariable();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<UnaryExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6342);
      unaryOperator();
      setState(6343);
      expressionAtom(10);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<BinaryExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6345);
      match(MySqlParser::BINARY);
      setState(6346);
      expressionAtom(9);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<NestedExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6347);
      match(MySqlParser::LR_BRACKET);
      setState(6348);
      expression(0);
      setState(6353);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(6349);
        match(MySqlParser::COMMA);
        setState(6350);
        expression(0);
        setState(6355);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(6356);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<NestedRowExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6358);
      match(MySqlParser::ROW);
      setState(6359);
      match(MySqlParser::LR_BRACKET);
      setState(6360);
      expression(0);
      setState(6363); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(6361);
        match(MySqlParser::COMMA);
        setState(6362);
        expression(0);
        setState(6365); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::COMMA);
      setState(6367);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ExistsExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6369);
      match(MySqlParser::EXISTS);
      setState(6370);
      match(MySqlParser::LR_BRACKET);
      setState(6371);
      selectStatement();
      setState(6372);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<SubqueryExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6374);
      match(MySqlParser::LR_BRACKET);
      setState(6375);
      selectStatement();
      setState(6376);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<IntervalExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(6378);
      match(MySqlParser::INTERVAL);
      setState(6379);
      expression(0);
      setState(6380);
      intervalType();
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(6401);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 932, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(6399);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 931, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<BitExpressionAtomContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(6384);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(6385);
          bitOperator();
          setState(6386);
          dynamic_cast<BitExpressionAtomContext *>(_localctx)->right = expressionAtom(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<MathExpressionAtomContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(6388);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(6389);
          mathOperator();
          setState(6390);
          dynamic_cast<MathExpressionAtomContext *>(_localctx)->right = expressionAtom(3);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<JsonExpressionAtomContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(6392);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(6393);
          jsonOperator();
          setState(6394);
          dynamic_cast<JsonExpressionAtomContext *>(_localctx)->right = expressionAtom(2);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<CollateExpressionAtomContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(6396);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(6397);
          match(MySqlParser::COLLATE);
          setState(6398);
          collationName();
          break;
        }

        } 
      }
      setState(6403);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 932, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

MySqlParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::UnaryOperatorContext::EXCLAMATION_SYMBOL() {
  return getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::UnaryOperatorContext::BIT_NOT_OP() {
  return getToken(MySqlParser::BIT_NOT_OP, 0);
}

tree::TerminalNode* MySqlParser::UnaryOperatorContext::PLUS() {
  return getToken(MySqlParser::PLUS, 0);
}

tree::TerminalNode* MySqlParser::UnaryOperatorContext::MINUS() {
  return getToken(MySqlParser::MINUS, 0);
}

tree::TerminalNode* MySqlParser::UnaryOperatorContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::UnaryOperatorContext::getRuleIndex() const {
  return MySqlParser::RuleUnaryOperator;
}


MySqlParser::UnaryOperatorContext* MySqlParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 610, MySqlParser::RuleUnaryOperator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6404);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::NOT || ((((_la - 1014) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1014)) & ((1ULL << (MySqlParser::PLUS - 1014))
      | (1ULL << (MySqlParser::MINUS - 1014))
      | (1ULL << (MySqlParser::EXCLAMATION_SYMBOL - 1014))
      | (1ULL << (MySqlParser::BIT_NOT_OP - 1014)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

MySqlParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::ComparisonOperatorContext::EQUAL_SYMBOL() {
  return getToken(MySqlParser::EQUAL_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::ComparisonOperatorContext::GREATER_SYMBOL() {
  return getToken(MySqlParser::GREATER_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::ComparisonOperatorContext::LESS_SYMBOL() {
  return getToken(MySqlParser::LESS_SYMBOL, 0);
}

tree::TerminalNode* MySqlParser::ComparisonOperatorContext::EXCLAMATION_SYMBOL() {
  return getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
}


size_t MySqlParser::ComparisonOperatorContext::getRuleIndex() const {
  return MySqlParser::RuleComparisonOperator;
}


MySqlParser::ComparisonOperatorContext* MySqlParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 612, MySqlParser::RuleComparisonOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6420);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 933, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6406);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6407);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6408);
      match(MySqlParser::LESS_SYMBOL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6409);
      match(MySqlParser::LESS_SYMBOL);
      setState(6410);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6411);
      match(MySqlParser::GREATER_SYMBOL);
      setState(6412);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6413);
      match(MySqlParser::LESS_SYMBOL);
      setState(6414);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(6415);
      match(MySqlParser::EXCLAMATION_SYMBOL);
      setState(6416);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(6417);
      match(MySqlParser::LESS_SYMBOL);
      setState(6418);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(6419);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOperatorContext ------------------------------------------------------------------

MySqlParser::LogicalOperatorContext::LogicalOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::LogicalOperatorContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LogicalOperatorContext::BIT_AND_OP() {
  return getTokens(MySqlParser::BIT_AND_OP);
}

tree::TerminalNode* MySqlParser::LogicalOperatorContext::BIT_AND_OP(size_t i) {
  return getToken(MySqlParser::BIT_AND_OP, i);
}

tree::TerminalNode* MySqlParser::LogicalOperatorContext::XOR() {
  return getToken(MySqlParser::XOR, 0);
}

tree::TerminalNode* MySqlParser::LogicalOperatorContext::OR() {
  return getToken(MySqlParser::OR, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::LogicalOperatorContext::BIT_OR_OP() {
  return getTokens(MySqlParser::BIT_OR_OP);
}

tree::TerminalNode* MySqlParser::LogicalOperatorContext::BIT_OR_OP(size_t i) {
  return getToken(MySqlParser::BIT_OR_OP, i);
}


size_t MySqlParser::LogicalOperatorContext::getRuleIndex() const {
  return MySqlParser::RuleLogicalOperator;
}


MySqlParser::LogicalOperatorContext* MySqlParser::logicalOperator() {
  LogicalOperatorContext *_localctx = _tracker.createInstance<LogicalOperatorContext>(_ctx, getState());
  enterRule(_localctx, 614, MySqlParser::RuleLogicalOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6429);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::AND: {
        enterOuterAlt(_localctx, 1);
        setState(6422);
        match(MySqlParser::AND);
        break;
      }

      case MySqlParser::BIT_AND_OP: {
        enterOuterAlt(_localctx, 2);
        setState(6423);
        match(MySqlParser::BIT_AND_OP);
        setState(6424);
        match(MySqlParser::BIT_AND_OP);
        break;
      }

      case MySqlParser::XOR: {
        enterOuterAlt(_localctx, 3);
        setState(6425);
        match(MySqlParser::XOR);
        break;
      }

      case MySqlParser::OR: {
        enterOuterAlt(_localctx, 4);
        setState(6426);
        match(MySqlParser::OR);
        break;
      }

      case MySqlParser::BIT_OR_OP: {
        enterOuterAlt(_localctx, 5);
        setState(6427);
        match(MySqlParser::BIT_OR_OP);
        setState(6428);
        match(MySqlParser::BIT_OR_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitOperatorContext ------------------------------------------------------------------

MySqlParser::BitOperatorContext::BitOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::BitOperatorContext::LESS_SYMBOL() {
  return getTokens(MySqlParser::LESS_SYMBOL);
}

tree::TerminalNode* MySqlParser::BitOperatorContext::LESS_SYMBOL(size_t i) {
  return getToken(MySqlParser::LESS_SYMBOL, i);
}

std::vector<tree::TerminalNode *> MySqlParser::BitOperatorContext::GREATER_SYMBOL() {
  return getTokens(MySqlParser::GREATER_SYMBOL);
}

tree::TerminalNode* MySqlParser::BitOperatorContext::GREATER_SYMBOL(size_t i) {
  return getToken(MySqlParser::GREATER_SYMBOL, i);
}

tree::TerminalNode* MySqlParser::BitOperatorContext::BIT_AND_OP() {
  return getToken(MySqlParser::BIT_AND_OP, 0);
}

tree::TerminalNode* MySqlParser::BitOperatorContext::BIT_XOR_OP() {
  return getToken(MySqlParser::BIT_XOR_OP, 0);
}

tree::TerminalNode* MySqlParser::BitOperatorContext::BIT_OR_OP() {
  return getToken(MySqlParser::BIT_OR_OP, 0);
}


size_t MySqlParser::BitOperatorContext::getRuleIndex() const {
  return MySqlParser::RuleBitOperator;
}


MySqlParser::BitOperatorContext* MySqlParser::bitOperator() {
  BitOperatorContext *_localctx = _tracker.createInstance<BitOperatorContext>(_ctx, getState());
  enterRule(_localctx, 616, MySqlParser::RuleBitOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6438);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LESS_SYMBOL: {
        enterOuterAlt(_localctx, 1);
        setState(6431);
        match(MySqlParser::LESS_SYMBOL);
        setState(6432);
        match(MySqlParser::LESS_SYMBOL);
        break;
      }

      case MySqlParser::GREATER_SYMBOL: {
        enterOuterAlt(_localctx, 2);
        setState(6433);
        match(MySqlParser::GREATER_SYMBOL);
        setState(6434);
        match(MySqlParser::GREATER_SYMBOL);
        break;
      }

      case MySqlParser::BIT_AND_OP: {
        enterOuterAlt(_localctx, 3);
        setState(6435);
        match(MySqlParser::BIT_AND_OP);
        break;
      }

      case MySqlParser::BIT_XOR_OP: {
        enterOuterAlt(_localctx, 4);
        setState(6436);
        match(MySqlParser::BIT_XOR_OP);
        break;
      }

      case MySqlParser::BIT_OR_OP: {
        enterOuterAlt(_localctx, 5);
        setState(6437);
        match(MySqlParser::BIT_OR_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MathOperatorContext ------------------------------------------------------------------

MySqlParser::MathOperatorContext::MathOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::MathOperatorContext::STAR() {
  return getToken(MySqlParser::STAR, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::DIVIDE() {
  return getToken(MySqlParser::DIVIDE, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::MODULE() {
  return getToken(MySqlParser::MODULE, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::DIV() {
  return getToken(MySqlParser::DIV, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::MOD() {
  return getToken(MySqlParser::MOD, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::PLUS() {
  return getToken(MySqlParser::PLUS, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::MINUS() {
  return getToken(MySqlParser::MINUS, 0);
}

tree::TerminalNode* MySqlParser::MathOperatorContext::MINUSMINUS() {
  return getToken(MySqlParser::MINUSMINUS, 0);
}


size_t MySqlParser::MathOperatorContext::getRuleIndex() const {
  return MySqlParser::RuleMathOperator;
}


MySqlParser::MathOperatorContext* MySqlParser::mathOperator() {
  MathOperatorContext *_localctx = _tracker.createInstance<MathOperatorContext>(_ctx, getState());
  enterRule(_localctx, 618, MySqlParser::RuleMathOperator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6440);
    _la = _input->LA(1);
    if (!(((((_la - 1011) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1011)) & ((1ULL << (MySqlParser::STAR - 1011))
      | (1ULL << (MySqlParser::DIVIDE - 1011))
      | (1ULL << (MySqlParser::MODULE - 1011))
      | (1ULL << (MySqlParser::PLUS - 1011))
      | (1ULL << (MySqlParser::MINUSMINUS - 1011))
      | (1ULL << (MySqlParser::MINUS - 1011))
      | (1ULL << (MySqlParser::DIV - 1011))
      | (1ULL << (MySqlParser::MOD - 1011)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JsonOperatorContext ------------------------------------------------------------------

MySqlParser::JsonOperatorContext::JsonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::JsonOperatorContext::MINUS() {
  return getToken(MySqlParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::JsonOperatorContext::GREATER_SYMBOL() {
  return getTokens(MySqlParser::GREATER_SYMBOL);
}

tree::TerminalNode* MySqlParser::JsonOperatorContext::GREATER_SYMBOL(size_t i) {
  return getToken(MySqlParser::GREATER_SYMBOL, i);
}


size_t MySqlParser::JsonOperatorContext::getRuleIndex() const {
  return MySqlParser::RuleJsonOperator;
}


MySqlParser::JsonOperatorContext* MySqlParser::jsonOperator() {
  JsonOperatorContext *_localctx = _tracker.createInstance<JsonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 620, MySqlParser::RuleJsonOperator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(6447);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 936, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6442);
      match(MySqlParser::MINUS);
      setState(6443);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6444);
      match(MySqlParser::MINUS);
      setState(6445);
      match(MySqlParser::GREATER_SYMBOL);
      setState(6446);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharsetNameBaseContext ------------------------------------------------------------------

MySqlParser::CharsetNameBaseContext::CharsetNameBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::ARMSCII8() {
  return getToken(MySqlParser::ARMSCII8, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::ASCII() {
  return getToken(MySqlParser::ASCII, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::BIG5() {
  return getToken(MySqlParser::BIG5, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP1250() {
  return getToken(MySqlParser::CP1250, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP1251() {
  return getToken(MySqlParser::CP1251, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP1256() {
  return getToken(MySqlParser::CP1256, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP1257() {
  return getToken(MySqlParser::CP1257, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP850() {
  return getToken(MySqlParser::CP850, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP852() {
  return getToken(MySqlParser::CP852, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP866() {
  return getToken(MySqlParser::CP866, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::CP932() {
  return getToken(MySqlParser::CP932, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::DEC8() {
  return getToken(MySqlParser::DEC8, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::EUCJPMS() {
  return getToken(MySqlParser::EUCJPMS, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::EUCKR() {
  return getToken(MySqlParser::EUCKR, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::GB2312() {
  return getToken(MySqlParser::GB2312, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::GBK() {
  return getToken(MySqlParser::GBK, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::GEOSTD8() {
  return getToken(MySqlParser::GEOSTD8, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::GREEK() {
  return getToken(MySqlParser::GREEK, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::HEBREW() {
  return getToken(MySqlParser::HEBREW, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::HP8() {
  return getToken(MySqlParser::HP8, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::KEYBCS2() {
  return getToken(MySqlParser::KEYBCS2, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::KOI8R() {
  return getToken(MySqlParser::KOI8R, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::KOI8U() {
  return getToken(MySqlParser::KOI8U, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::LATIN1() {
  return getToken(MySqlParser::LATIN1, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::LATIN2() {
  return getToken(MySqlParser::LATIN2, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::LATIN5() {
  return getToken(MySqlParser::LATIN5, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::LATIN7() {
  return getToken(MySqlParser::LATIN7, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::MACCE() {
  return getToken(MySqlParser::MACCE, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::MACROMAN() {
  return getToken(MySqlParser::MACROMAN, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::SJIS() {
  return getToken(MySqlParser::SJIS, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::SWE7() {
  return getToken(MySqlParser::SWE7, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::TIS620() {
  return getToken(MySqlParser::TIS620, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UCS2() {
  return getToken(MySqlParser::UCS2, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UJIS() {
  return getToken(MySqlParser::UJIS, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UTF16() {
  return getToken(MySqlParser::UTF16, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UTF16LE() {
  return getToken(MySqlParser::UTF16LE, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UTF32() {
  return getToken(MySqlParser::UTF32, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UTF8() {
  return getToken(MySqlParser::UTF8, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UTF8MB3() {
  return getToken(MySqlParser::UTF8MB3, 0);
}

tree::TerminalNode* MySqlParser::CharsetNameBaseContext::UTF8MB4() {
  return getToken(MySqlParser::UTF8MB4, 0);
}


size_t MySqlParser::CharsetNameBaseContext::getRuleIndex() const {
  return MySqlParser::RuleCharsetNameBase;
}


MySqlParser::CharsetNameBaseContext* MySqlParser::charsetNameBase() {
  CharsetNameBaseContext *_localctx = _tracker.createInstance<CharsetNameBaseContext>(_ctx, getState());
  enterRule(_localctx, 622, MySqlParser::RuleCharsetNameBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6449);
    _la = _input->LA(1);
    if (!(((((_la - 645) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 645)) & ((1ULL << (MySqlParser::ARMSCII8 - 645))
      | (1ULL << (MySqlParser::ASCII - 645))
      | (1ULL << (MySqlParser::BIG5 - 645))
      | (1ULL << (MySqlParser::CP1250 - 645))
      | (1ULL << (MySqlParser::CP1251 - 645))
      | (1ULL << (MySqlParser::CP1256 - 645))
      | (1ULL << (MySqlParser::CP1257 - 645))
      | (1ULL << (MySqlParser::CP850 - 645))
      | (1ULL << (MySqlParser::CP852 - 645))
      | (1ULL << (MySqlParser::CP866 - 645))
      | (1ULL << (MySqlParser::CP932 - 645))
      | (1ULL << (MySqlParser::DEC8 - 645))
      | (1ULL << (MySqlParser::EUCJPMS - 645))
      | (1ULL << (MySqlParser::EUCKR - 645))
      | (1ULL << (MySqlParser::GB2312 - 645))
      | (1ULL << (MySqlParser::GBK - 645))
      | (1ULL << (MySqlParser::GEOSTD8 - 645))
      | (1ULL << (MySqlParser::GREEK - 645))
      | (1ULL << (MySqlParser::HEBREW - 645))
      | (1ULL << (MySqlParser::HP8 - 645))
      | (1ULL << (MySqlParser::KEYBCS2 - 645))
      | (1ULL << (MySqlParser::KOI8R - 645))
      | (1ULL << (MySqlParser::KOI8U - 645))
      | (1ULL << (MySqlParser::LATIN1 - 645))
      | (1ULL << (MySqlParser::LATIN2 - 645))
      | (1ULL << (MySqlParser::LATIN5 - 645))
      | (1ULL << (MySqlParser::LATIN7 - 645))
      | (1ULL << (MySqlParser::MACCE - 645))
      | (1ULL << (MySqlParser::MACROMAN - 645))
      | (1ULL << (MySqlParser::SJIS - 645))
      | (1ULL << (MySqlParser::SWE7 - 645))
      | (1ULL << (MySqlParser::TIS620 - 645))
      | (1ULL << (MySqlParser::UCS2 - 645))
      | (1ULL << (MySqlParser::UJIS - 645))
      | (1ULL << (MySqlParser::UTF16 - 645))
      | (1ULL << (MySqlParser::UTF16LE - 645))
      | (1ULL << (MySqlParser::UTF32 - 645))
      | (1ULL << (MySqlParser::UTF8 - 645))
      | (1ULL << (MySqlParser::UTF8MB3 - 645))
      | (1ULL << (MySqlParser::UTF8MB4 - 645)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionLevelBaseContext ------------------------------------------------------------------

MySqlParser::TransactionLevelBaseContext::TransactionLevelBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::TransactionLevelBaseContext::REPEATABLE() {
  return getToken(MySqlParser::REPEATABLE, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelBaseContext::COMMITTED() {
  return getToken(MySqlParser::COMMITTED, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelBaseContext::UNCOMMITTED() {
  return getToken(MySqlParser::UNCOMMITTED, 0);
}

tree::TerminalNode* MySqlParser::TransactionLevelBaseContext::SERIALIZABLE() {
  return getToken(MySqlParser::SERIALIZABLE, 0);
}


size_t MySqlParser::TransactionLevelBaseContext::getRuleIndex() const {
  return MySqlParser::RuleTransactionLevelBase;
}


MySqlParser::TransactionLevelBaseContext* MySqlParser::transactionLevelBase() {
  TransactionLevelBaseContext *_localctx = _tracker.createInstance<TransactionLevelBaseContext>(_ctx, getState());
  enterRule(_localctx, 624, MySqlParser::RuleTransactionLevelBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6451);
    _la = _input->LA(1);
    if (!(((((_la - 697) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 697)) & ((1ULL << (MySqlParser::REPEATABLE - 697))
      | (1ULL << (MySqlParser::COMMITTED - 697))
      | (1ULL << (MySqlParser::UNCOMMITTED - 697))
      | (1ULL << (MySqlParser::SERIALIZABLE - 697)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegesBaseContext ------------------------------------------------------------------

MySqlParser::PrivilegesBaseContext::PrivilegesBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::ROUTINE() {
  return getToken(MySqlParser::ROUTINE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::EXECUTE() {
  return getToken(MySqlParser::EXECUTE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::FILE() {
  return getToken(MySqlParser::FILE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::PROCESS() {
  return getToken(MySqlParser::PROCESS, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::RELOAD() {
  return getToken(MySqlParser::RELOAD, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::SHUTDOWN() {
  return getToken(MySqlParser::SHUTDOWN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::SUPER() {
  return getToken(MySqlParser::SUPER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegesBaseContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}


size_t MySqlParser::PrivilegesBaseContext::getRuleIndex() const {
  return MySqlParser::RulePrivilegesBase;
}


MySqlParser::PrivilegesBaseContext* MySqlParser::privilegesBase() {
  PrivilegesBaseContext *_localctx = _tracker.createInstance<PrivilegesBaseContext>(_ctx, getState());
  enterRule(_localctx, 626, MySqlParser::RulePrivilegesBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6453);
    _la = _input->LA(1);
    if (!(((((_la - 604) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 604)) & ((1ULL << (MySqlParser::TABLES - 604))
      | (1ULL << (MySqlParser::ROUTINE - 604))
      | (1ULL << (MySqlParser::EXECUTE - 604))
      | (1ULL << (MySqlParser::FILE - 604))
      | (1ULL << (MySqlParser::PROCESS - 604))
      | (1ULL << (MySqlParser::RELOAD - 604))
      | (1ULL << (MySqlParser::SHUTDOWN - 604))
      | (1ULL << (MySqlParser::SUPER - 604))
      | (1ULL << (MySqlParser::PRIVILEGES - 604)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalTypeBaseContext ------------------------------------------------------------------

MySqlParser::IntervalTypeBaseContext::IntervalTypeBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::QUARTER() {
  return getToken(MySqlParser::QUARTER, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::MONTH() {
  return getToken(MySqlParser::MONTH, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::DAY() {
  return getToken(MySqlParser::DAY, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::HOUR() {
  return getToken(MySqlParser::HOUR, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::MINUTE() {
  return getToken(MySqlParser::MINUTE, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::WEEK() {
  return getToken(MySqlParser::WEEK, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::SECOND() {
  return getToken(MySqlParser::SECOND, 0);
}

tree::TerminalNode* MySqlParser::IntervalTypeBaseContext::MICROSECOND() {
  return getToken(MySqlParser::MICROSECOND, 0);
}


size_t MySqlParser::IntervalTypeBaseContext::getRuleIndex() const {
  return MySqlParser::RuleIntervalTypeBase;
}


MySqlParser::IntervalTypeBaseContext* MySqlParser::intervalTypeBase() {
  IntervalTypeBaseContext *_localctx = _tracker.createInstance<IntervalTypeBaseContext>(_ctx, getState());
  enterRule(_localctx, 628, MySqlParser::RuleIntervalTypeBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6455);
    _la = _input->LA(1);
    if (!(((((_la - 596) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 596)) & ((1ULL << (MySqlParser::QUARTER - 596))
      | (1ULL << (MySqlParser::MONTH - 596))
      | (1ULL << (MySqlParser::DAY - 596))
      | (1ULL << (MySqlParser::HOUR - 596))
      | (1ULL << (MySqlParser::MINUTE - 596))
      | (1ULL << (MySqlParser::WEEK - 596))
      | (1ULL << (MySqlParser::SECOND - 596))
      | (1ULL << (MySqlParser::MICROSECOND - 596)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeBaseContext ------------------------------------------------------------------

MySqlParser::DataTypeBaseContext::DataTypeBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::TIMESTAMP() {
  return getToken(MySqlParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::ENUM() {
  return getToken(MySqlParser::ENUM, 0);
}

tree::TerminalNode* MySqlParser::DataTypeBaseContext::TEXT() {
  return getToken(MySqlParser::TEXT, 0);
}


size_t MySqlParser::DataTypeBaseContext::getRuleIndex() const {
  return MySqlParser::RuleDataTypeBase;
}


MySqlParser::DataTypeBaseContext* MySqlParser::dataTypeBase() {
  DataTypeBaseContext *_localctx = _tracker.createInstance<DataTypeBaseContext>(_ctx, getState());
  enterRule(_localctx, 630, MySqlParser::RuleDataTypeBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6457);
    _la = _input->LA(1);
    if (!(((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::DATETIME - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::TEXT - 199))
      | (1ULL << (MySqlParser::ENUM - 199)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordsCanBeIdContext ------------------------------------------------------------------

MySqlParser::KeywordsCanBeIdContext::KeywordsCanBeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ACCOUNT() {
  return getToken(MySqlParser::ACCOUNT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ACTION() {
  return getToken(MySqlParser::ACTION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AGGREGATE() {
  return getToken(MySqlParser::AGGREGATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ANY() {
  return getToken(MySqlParser::ANY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AT() {
  return getToken(MySqlParser::AT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AUDIT_ADMIN() {
  return getToken(MySqlParser::AUDIT_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AUTHORS() {
  return getToken(MySqlParser::AUTHORS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AUTOCOMMIT() {
  return getToken(MySqlParser::AUTOCOMMIT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AUTOEXTEND_SIZE() {
  return getToken(MySqlParser::AUTOEXTEND_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AUTO_INCREMENT() {
  return getToken(MySqlParser::AUTO_INCREMENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AVG() {
  return getToken(MySqlParser::AVG, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::AVG_ROW_LENGTH() {
  return getToken(MySqlParser::AVG_ROW_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BACKUP_ADMIN() {
  return getToken(MySqlParser::BACKUP_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BINLOG() {
  return getToken(MySqlParser::BINLOG, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BINLOG_ADMIN() {
  return getToken(MySqlParser::BINLOG_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BINLOG_ENCRYPTION_ADMIN() {
  return getToken(MySqlParser::BINLOG_ENCRYPTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BIT() {
  return getToken(MySqlParser::BIT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BIT_AND() {
  return getToken(MySqlParser::BIT_AND, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BIT_OR() {
  return getToken(MySqlParser::BIT_OR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BIT_XOR() {
  return getToken(MySqlParser::BIT_XOR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BLOCK() {
  return getToken(MySqlParser::BLOCK, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BOOL() {
  return getToken(MySqlParser::BOOL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BOOLEAN() {
  return getToken(MySqlParser::BOOLEAN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::BTREE() {
  return getToken(MySqlParser::BTREE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CASCADED() {
  return getToken(MySqlParser::CASCADED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CHAIN() {
  return getToken(MySqlParser::CHAIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CHANGED() {
  return getToken(MySqlParser::CHANGED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CHANNEL() {
  return getToken(MySqlParser::CHANNEL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CHECKSUM() {
  return getToken(MySqlParser::CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PAGE_CHECKSUM() {
  return getToken(MySqlParser::PAGE_CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CATALOG_NAME() {
  return getToken(MySqlParser::CATALOG_NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CIPHER() {
  return getToken(MySqlParser::CIPHER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CLASS_ORIGIN() {
  return getToken(MySqlParser::CLASS_ORIGIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CLIENT() {
  return getToken(MySqlParser::CLIENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CLONE_ADMIN() {
  return getToken(MySqlParser::CLONE_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CLOSE() {
  return getToken(MySqlParser::CLOSE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COALESCE() {
  return getToken(MySqlParser::COALESCE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CODE() {
  return getToken(MySqlParser::CODE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COLUMN_FORMAT() {
  return getToken(MySqlParser::COLUMN_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COLUMN_NAME() {
  return getToken(MySqlParser::COLUMN_NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COMMIT() {
  return getToken(MySqlParser::COMMIT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COMPACT() {
  return getToken(MySqlParser::COMPACT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COMPLETION() {
  return getToken(MySqlParser::COMPLETION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COMPRESSED() {
  return getToken(MySqlParser::COMPRESSED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COMPRESSION() {
  return getToken(MySqlParser::COMPRESSION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONCURRENT() {
  return getToken(MySqlParser::CONCURRENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONNECTION_ADMIN() {
  return getToken(MySqlParser::CONNECTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONSISTENT() {
  return getToken(MySqlParser::CONSISTENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONSTRAINT_CATALOG() {
  return getToken(MySqlParser::CONSTRAINT_CATALOG, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONSTRAINT_NAME() {
  return getToken(MySqlParser::CONSTRAINT_NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONSTRAINT_SCHEMA() {
  return getToken(MySqlParser::CONSTRAINT_SCHEMA, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONTAINS() {
  return getToken(MySqlParser::CONTAINS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONTEXT() {
  return getToken(MySqlParser::CONTEXT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CONTRIBUTORS() {
  return getToken(MySqlParser::CONTRIBUTORS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COPY() {
  return getToken(MySqlParser::COPY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CPU() {
  return getToken(MySqlParser::CPU, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CURRENT() {
  return getToken(MySqlParser::CURRENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::CURSOR_NAME() {
  return getToken(MySqlParser::CURSOR_NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DEALLOCATE() {
  return getToken(MySqlParser::DEALLOCATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DEFAULT_AUTH() {
  return getToken(MySqlParser::DEFAULT_AUTH, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DELAY_KEY_WRITE() {
  return getToken(MySqlParser::DELAY_KEY_WRITE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DES_KEY_FILE() {
  return getToken(MySqlParser::DES_KEY_FILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DIAGNOSTICS() {
  return getToken(MySqlParser::DIAGNOSTICS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DISCARD() {
  return getToken(MySqlParser::DISCARD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DISK() {
  return getToken(MySqlParser::DISK, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DUMPFILE() {
  return getToken(MySqlParser::DUMPFILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DUPLICATE() {
  return getToken(MySqlParser::DUPLICATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::DYNAMIC() {
  return getToken(MySqlParser::DYNAMIC, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ENCRYPTION() {
  return getToken(MySqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ENCRYPTION_KEY_ADMIN() {
  return getToken(MySqlParser::ENCRYPTION_KEY_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::END() {
  return getToken(MySqlParser::END, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ENDS() {
  return getToken(MySqlParser::ENDS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ENGINES() {
  return getToken(MySqlParser::ENGINES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ERROR() {
  return getToken(MySqlParser::ERROR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ERRORS() {
  return getToken(MySqlParser::ERRORS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ESCAPE() {
  return getToken(MySqlParser::ESCAPE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EVEN() {
  return getToken(MySqlParser::EVEN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EVENTS() {
  return getToken(MySqlParser::EVENTS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EVERY() {
  return getToken(MySqlParser::EVERY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EXCHANGE() {
  return getToken(MySqlParser::EXCHANGE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EXCLUSIVE() {
  return getToken(MySqlParser::EXCLUSIVE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EXPIRE() {
  return getToken(MySqlParser::EXPIRE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EXPORT() {
  return getToken(MySqlParser::EXPORT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::EXTENT_SIZE() {
  return getToken(MySqlParser::EXTENT_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FAST() {
  return getToken(MySqlParser::FAST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FAULTS() {
  return getToken(MySqlParser::FAULTS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FILE_BLOCK_SIZE() {
  return getToken(MySqlParser::FILE_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FILTER() {
  return getToken(MySqlParser::FILTER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FIREWALL_ADMIN() {
  return getToken(MySqlParser::FIREWALL_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FIREWALL_USER() {
  return getToken(MySqlParser::FIREWALL_USER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FLUSH() {
  return getToken(MySqlParser::FLUSH, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FOLLOWS() {
  return getToken(MySqlParser::FOLLOWS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FOUND() {
  return getToken(MySqlParser::FOUND, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GENERAL() {
  return getToken(MySqlParser::GENERAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GRANTS() {
  return getToken(MySqlParser::GRANTS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GROUP_CONCAT() {
  return getToken(MySqlParser::GROUP_CONCAT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GROUP_REPLICATION() {
  return getToken(MySqlParser::GROUP_REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::GROUP_REPLICATION_ADMIN() {
  return getToken(MySqlParser::GROUP_REPLICATION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::HELP() {
  return getToken(MySqlParser::HELP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::HOST() {
  return getToken(MySqlParser::HOST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::HOSTS() {
  return getToken(MySqlParser::HOSTS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::IGNORE_SERVER_IDS() {
  return getToken(MySqlParser::IGNORE_SERVER_IDS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::IMPORT() {
  return getToken(MySqlParser::IMPORT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INDEXES() {
  return getToken(MySqlParser::INDEXES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INNODB_REDO_LOG_ARCHIVE() {
  return getToken(MySqlParser::INNODB_REDO_LOG_ARCHIVE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INPLACE() {
  return getToken(MySqlParser::INPLACE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INSERT_METHOD() {
  return getToken(MySqlParser::INSERT_METHOD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INSTALL() {
  return getToken(MySqlParser::INSTALL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INSTANCE() {
  return getToken(MySqlParser::INSTANCE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INTERNAL() {
  return getToken(MySqlParser::INTERNAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::IO() {
  return getToken(MySqlParser::IO, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::IO_THREAD() {
  return getToken(MySqlParser::IO_THREAD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::IPC() {
  return getToken(MySqlParser::IPC, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ISOLATION() {
  return getToken(MySqlParser::ISOLATION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ISSUER() {
  return getToken(MySqlParser::ISSUER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::JSON() {
  return getToken(MySqlParser::JSON, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::KEY_BLOCK_SIZE() {
  return getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LANGUAGE() {
  return getToken(MySqlParser::LANGUAGE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LAST() {
  return getToken(MySqlParser::LAST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LEAVES() {
  return getToken(MySqlParser::LEAVES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LESS() {
  return getToken(MySqlParser::LESS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LIST() {
  return getToken(MySqlParser::LIST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_AUTO_POSITION() {
  return getToken(MySqlParser::MASTER_AUTO_POSITION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_CONNECT_RETRY() {
  return getToken(MySqlParser::MASTER_CONNECT_RETRY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_DELAY() {
  return getToken(MySqlParser::MASTER_DELAY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_HEARTBEAT_PERIOD() {
  return getToken(MySqlParser::MASTER_HEARTBEAT_PERIOD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_HOST() {
  return getToken(MySqlParser::MASTER_HOST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_LOG_FILE() {
  return getToken(MySqlParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_LOG_POS() {
  return getToken(MySqlParser::MASTER_LOG_POS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_PASSWORD() {
  return getToken(MySqlParser::MASTER_PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_PORT() {
  return getToken(MySqlParser::MASTER_PORT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_RETRY_COUNT() {
  return getToken(MySqlParser::MASTER_RETRY_COUNT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL() {
  return getToken(MySqlParser::MASTER_SSL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_CA() {
  return getToken(MySqlParser::MASTER_SSL_CA, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_CAPATH() {
  return getToken(MySqlParser::MASTER_SSL_CAPATH, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_CERT() {
  return getToken(MySqlParser::MASTER_SSL_CERT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_CIPHER() {
  return getToken(MySqlParser::MASTER_SSL_CIPHER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_CRL() {
  return getToken(MySqlParser::MASTER_SSL_CRL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_CRLPATH() {
  return getToken(MySqlParser::MASTER_SSL_CRLPATH, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_SSL_KEY() {
  return getToken(MySqlParser::MASTER_SSL_KEY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_TLS_VERSION() {
  return getToken(MySqlParser::MASTER_TLS_VERSION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MASTER_USER() {
  return getToken(MySqlParser::MASTER_USER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX_CONNECTIONS_PER_HOUR() {
  return getToken(MySqlParser::MAX_CONNECTIONS_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX_QUERIES_PER_HOUR() {
  return getToken(MySqlParser::MAX_QUERIES_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX() {
  return getToken(MySqlParser::MAX, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX_SIZE() {
  return getToken(MySqlParser::MAX_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX_UPDATES_PER_HOUR() {
  return getToken(MySqlParser::MAX_UPDATES_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MAX_USER_CONNECTIONS() {
  return getToken(MySqlParser::MAX_USER_CONNECTIONS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MEDIUM() {
  return getToken(MySqlParser::MEDIUM, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MEMBER() {
  return getToken(MySqlParser::MEMBER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MERGE() {
  return getToken(MySqlParser::MERGE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MESSAGE_TEXT() {
  return getToken(MySqlParser::MESSAGE_TEXT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MID() {
  return getToken(MySqlParser::MID, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MIGRATE() {
  return getToken(MySqlParser::MIGRATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MIN() {
  return getToken(MySqlParser::MIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MODE() {
  return getToken(MySqlParser::MODE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MODIFY() {
  return getToken(MySqlParser::MODIFY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MUTEX() {
  return getToken(MySqlParser::MUTEX, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MYSQL() {
  return getToken(MySqlParser::MYSQL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::MYSQL_ERRNO() {
  return getToken(MySqlParser::MYSQL_ERRNO, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NAME() {
  return getToken(MySqlParser::NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NAMES() {
  return getToken(MySqlParser::NAMES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NCHAR() {
  return getToken(MySqlParser::NCHAR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NDB_STORED_USER() {
  return getToken(MySqlParser::NDB_STORED_USER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NEVER() {
  return getToken(MySqlParser::NEVER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::NUMBER() {
  return getToken(MySqlParser::NUMBER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OFFSET() {
  return getToken(MySqlParser::OFFSET, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OF() {
  return getToken(MySqlParser::OF, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OJ() {
  return getToken(MySqlParser::OJ, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OLD_PASSWORD() {
  return getToken(MySqlParser::OLD_PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ONE() {
  return getToken(MySqlParser::ONE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ONLY() {
  return getToken(MySqlParser::ONLY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OPTIMIZER_COSTS() {
  return getToken(MySqlParser::OPTIMIZER_COSTS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OPTIONS() {
  return getToken(MySqlParser::OPTIONS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::OWNER() {
  return getToken(MySqlParser::OWNER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PACK_KEYS() {
  return getToken(MySqlParser::PACK_KEYS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PAGE() {
  return getToken(MySqlParser::PAGE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PARSER() {
  return getToken(MySqlParser::PARSER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PARTIAL() {
  return getToken(MySqlParser::PARTIAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PARTITIONING() {
  return getToken(MySqlParser::PARTITIONING, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PARTITIONS() {
  return getToken(MySqlParser::PARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PERSIST_RO_VARIABLES_ADMIN() {
  return getToken(MySqlParser::PERSIST_RO_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PHASE() {
  return getToken(MySqlParser::PHASE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PLUGINS() {
  return getToken(MySqlParser::PLUGINS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PLUGIN_DIR() {
  return getToken(MySqlParser::PLUGIN_DIR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PLUGIN() {
  return getToken(MySqlParser::PLUGIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PORT() {
  return getToken(MySqlParser::PORT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PRECEDES() {
  return getToken(MySqlParser::PRECEDES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PRESERVE() {
  return getToken(MySqlParser::PRESERVE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PREV() {
  return getToken(MySqlParser::PREV, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PROCESSLIST() {
  return getToken(MySqlParser::PROCESSLIST, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PROFILE() {
  return getToken(MySqlParser::PROFILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PROFILES() {
  return getToken(MySqlParser::PROFILES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REBUILD() {
  return getToken(MySqlParser::REBUILD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RECOVER() {
  return getToken(MySqlParser::RECOVER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REDO_BUFFER_SIZE() {
  return getToken(MySqlParser::REDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REDUNDANT() {
  return getToken(MySqlParser::REDUNDANT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RELAY() {
  return getToken(MySqlParser::RELAY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RELAYLOG() {
  return getToken(MySqlParser::RELAYLOG, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RELAY_LOG_FILE() {
  return getToken(MySqlParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RELAY_LOG_POS() {
  return getToken(MySqlParser::RELAY_LOG_POS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REMOVE() {
  return getToken(MySqlParser::REMOVE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REORGANIZE() {
  return getToken(MySqlParser::REORGANIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPAIR() {
  return getToken(MySqlParser::REPAIR, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_DO_DB() {
  return getToken(MySqlParser::REPLICATE_DO_DB, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_DO_TABLE() {
  return getToken(MySqlParser::REPLICATE_DO_TABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_IGNORE_DB() {
  return getToken(MySqlParser::REPLICATE_IGNORE_DB, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_IGNORE_TABLE() {
  return getToken(MySqlParser::REPLICATE_IGNORE_TABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_REWRITE_DB() {
  return getToken(MySqlParser::REPLICATE_REWRITE_DB, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_WILD_DO_TABLE() {
  return getToken(MySqlParser::REPLICATE_WILD_DO_TABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATE_WILD_IGNORE_TABLE() {
  return getToken(MySqlParser::REPLICATE_WILD_IGNORE_TABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATION() {
  return getToken(MySqlParser::REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATION_APPLIER() {
  return getToken(MySqlParser::REPLICATION_APPLIER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::REPLICATION_SLAVE_ADMIN() {
  return getToken(MySqlParser::REPLICATION_SLAVE_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RESOURCE_GROUP_ADMIN() {
  return getToken(MySqlParser::RESOURCE_GROUP_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RESOURCE_GROUP_USER() {
  return getToken(MySqlParser::RESOURCE_GROUP_USER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RESUME() {
  return getToken(MySqlParser::RESUME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RETURNED_SQLSTATE() {
  return getToken(MySqlParser::RETURNED_SQLSTATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::RETURNS() {
  return getToken(MySqlParser::RETURNS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROLE() {
  return getToken(MySqlParser::ROLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROLE_ADMIN() {
  return getToken(MySqlParser::ROLE_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROLLUP() {
  return getToken(MySqlParser::ROLLUP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROTATE() {
  return getToken(MySqlParser::ROTATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROW() {
  return getToken(MySqlParser::ROW, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROWS() {
  return getToken(MySqlParser::ROWS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::ROW_FORMAT() {
  return getToken(MySqlParser::ROW_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SCHEDULE() {
  return getToken(MySqlParser::SCHEDULE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SCHEMA_NAME() {
  return getToken(MySqlParser::SCHEMA_NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SERIAL() {
  return getToken(MySqlParser::SERIAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SESSION_VARIABLES_ADMIN() {
  return getToken(MySqlParser::SESSION_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SET_USER_ID() {
  return getToken(MySqlParser::SET_USER_ID, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SHARED() {
  return getToken(MySqlParser::SHARED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SHOW_ROUTINE() {
  return getToken(MySqlParser::SHOW_ROUTINE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SIGNED() {
  return getToken(MySqlParser::SIGNED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SIMPLE() {
  return getToken(MySqlParser::SIMPLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SLOW() {
  return getToken(MySqlParser::SLOW, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SNAPSHOT() {
  return getToken(MySqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SOCKET() {
  return getToken(MySqlParser::SOCKET, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SOME() {
  return getToken(MySqlParser::SOME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SONAME() {
  return getToken(MySqlParser::SONAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SOUNDS() {
  return getToken(MySqlParser::SOUNDS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SOURCE() {
  return getToken(MySqlParser::SOURCE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_AFTER_GTIDS() {
  return getToken(MySqlParser::SQL_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_AFTER_MTS_GAPS() {
  return getToken(MySqlParser::SQL_AFTER_MTS_GAPS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_BEFORE_GTIDS() {
  return getToken(MySqlParser::SQL_BEFORE_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_BUFFER_RESULT() {
  return getToken(MySqlParser::SQL_BUFFER_RESULT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_CACHE() {
  return getToken(MySqlParser::SQL_CACHE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_NO_CACHE() {
  return getToken(MySqlParser::SQL_NO_CACHE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SQL_THREAD() {
  return getToken(MySqlParser::SQL_THREAD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STACKED() {
  return getToken(MySqlParser::STACKED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STARTS() {
  return getToken(MySqlParser::STARTS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STATS_AUTO_RECALC() {
  return getToken(MySqlParser::STATS_AUTO_RECALC, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STATS_PERSISTENT() {
  return getToken(MySqlParser::STATS_PERSISTENT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STATS_SAMPLE_PAGES() {
  return getToken(MySqlParser::STATS_SAMPLE_PAGES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STD() {
  return getToken(MySqlParser::STD, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STDDEV() {
  return getToken(MySqlParser::STDDEV, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STDDEV_POP() {
  return getToken(MySqlParser::STDDEV_POP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STDDEV_SAMP() {
  return getToken(MySqlParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STOP() {
  return getToken(MySqlParser::STOP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::STRING() {
  return getToken(MySqlParser::STRING, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SUBCLASS_ORIGIN() {
  return getToken(MySqlParser::SUBCLASS_ORIGIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SUBJECT() {
  return getToken(MySqlParser::SUBJECT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SUBPARTITION() {
  return getToken(MySqlParser::SUBPARTITION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SUBPARTITIONS() {
  return getToken(MySqlParser::SUBPARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SUM() {
  return getToken(MySqlParser::SUM, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SUSPEND() {
  return getToken(MySqlParser::SUSPEND, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SWAPS() {
  return getToken(MySqlParser::SWAPS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SWITCHES() {
  return getToken(MySqlParser::SWITCHES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::SYSTEM_VARIABLES_ADMIN() {
  return getToken(MySqlParser::SYSTEM_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TABLE_NAME() {
  return getToken(MySqlParser::TABLE_NAME, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TABLE_ENCRYPTION_ADMIN() {
  return getToken(MySqlParser::TABLE_ENCRYPTION_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TEMPTABLE() {
  return getToken(MySqlParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::THAN() {
  return getToken(MySqlParser::THAN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TRADITIONAL() {
  return getToken(MySqlParser::TRADITIONAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TRANSACTION() {
  return getToken(MySqlParser::TRANSACTION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TRANSACTIONAL() {
  return getToken(MySqlParser::TRANSACTIONAL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TRIGGERS() {
  return getToken(MySqlParser::TRIGGERS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::TRUNCATE() {
  return getToken(MySqlParser::TRUNCATE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UNDEFINED() {
  return getToken(MySqlParser::UNDEFINED, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UNDOFILE() {
  return getToken(MySqlParser::UNDOFILE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UNDO_BUFFER_SIZE() {
  return getToken(MySqlParser::UNDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UNINSTALL() {
  return getToken(MySqlParser::UNINSTALL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UNKNOWN() {
  return getToken(MySqlParser::UNKNOWN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UNTIL() {
  return getToken(MySqlParser::UNTIL, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::USE_FRM() {
  return getToken(MySqlParser::USE_FRM, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::USER_RESOURCES() {
  return getToken(MySqlParser::USER_RESOURCES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VALIDATION() {
  return getToken(MySqlParser::VALIDATION, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VAR_POP() {
  return getToken(MySqlParser::VAR_POP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VAR_SAMP() {
  return getToken(MySqlParser::VAR_SAMP, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VARIABLES() {
  return getToken(MySqlParser::VARIABLES, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VARIANCE() {
  return getToken(MySqlParser::VARIANCE, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VERSION_TOKEN_ADMIN() {
  return getToken(MySqlParser::VERSION_TOKEN_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::WARNINGS() {
  return getToken(MySqlParser::WARNINGS, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::WITHOUT() {
  return getToken(MySqlParser::WITHOUT, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::WRAPPER() {
  return getToken(MySqlParser::WRAPPER, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::X509() {
  return getToken(MySqlParser::X509, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::XA_RECOVER_ADMIN() {
  return getToken(MySqlParser::XA_RECOVER_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::KeywordsCanBeIdContext::XML() {
  return getToken(MySqlParser::XML, 0);
}


size_t MySqlParser::KeywordsCanBeIdContext::getRuleIndex() const {
  return MySqlParser::RuleKeywordsCanBeId;
}


MySqlParser::KeywordsCanBeIdContext* MySqlParser::keywordsCanBeId() {
  KeywordsCanBeIdContext *_localctx = _tracker.createInstance<KeywordsCanBeIdContext>(_ctx, getState());
  enterRule(_localctx, 632, MySqlParser::RuleKeywordsCanBeId);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6459);
    _la = _input->LA(1);
    if (!(((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & ((1ULL << (MySqlParser::CURRENT - 32))
      | (1ULL << (MySqlParser::DIAGNOSTICS - 32))
      | (1ULL << (MySqlParser::GROUP - 32)))) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (MySqlParser::NUMBER - 105))
      | (1ULL << (MySqlParser::ORDER - 105))
      | (1ULL << (MySqlParser::STACKED - 105)))) != 0) || ((((_la - 221) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 221)) & ((1ULL << (MySqlParser::SERIAL - 221))
      | (1ULL << (MySqlParser::AVG - 221))
      | (1ULL << (MySqlParser::BIT_AND - 221))
      | (1ULL << (MySqlParser::BIT_OR - 221))
      | (1ULL << (MySqlParser::BIT_XOR - 221))
      | (1ULL << (MySqlParser::COUNT - 221))
      | (1ULL << (MySqlParser::GROUP_CONCAT - 221))
      | (1ULL << (MySqlParser::MAX - 221))
      | (1ULL << (MySqlParser::MIN - 221))
      | (1ULL << (MySqlParser::STD - 221))
      | (1ULL << (MySqlParser::STDDEV - 221))
      | (1ULL << (MySqlParser::STDDEV_POP - 221))
      | (1ULL << (MySqlParser::STDDEV_SAMP - 221))
      | (1ULL << (MySqlParser::SUM - 221))
      | (1ULL << (MySqlParser::VAR_POP - 221))
      | (1ULL << (MySqlParser::VAR_SAMP - 221))
      | (1ULL << (MySqlParser::VARIANCE - 221))
      | (1ULL << (MySqlParser::ACCOUNT - 221))
      | (1ULL << (MySqlParser::ACTION - 221))
      | (1ULL << (MySqlParser::AFTER - 221))
      | (1ULL << (MySqlParser::AGGREGATE - 221))
      | (1ULL << (MySqlParser::ALGORITHM - 221))
      | (1ULL << (MySqlParser::ANY - 221))
      | (1ULL << (MySqlParser::AT - 221))
      | (1ULL << (MySqlParser::AUTHORS - 221))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 221))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 221))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 221))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 221))
      | (1ULL << (MySqlParser::BEGIN - 221))
      | (1ULL << (MySqlParser::BINLOG - 221))
      | (1ULL << (MySqlParser::BIT - 221)))) != 0) || ((((_la - 285) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 285)) & ((1ULL << (MySqlParser::BLOCK - 285))
      | (1ULL << (MySqlParser::BOOL - 285))
      | (1ULL << (MySqlParser::BOOLEAN - 285))
      | (1ULL << (MySqlParser::BTREE - 285))
      | (1ULL << (MySqlParser::CACHE - 285))
      | (1ULL << (MySqlParser::CASCADED - 285))
      | (1ULL << (MySqlParser::CHAIN - 285))
      | (1ULL << (MySqlParser::CHANGED - 285))
      | (1ULL << (MySqlParser::CHANNEL - 285))
      | (1ULL << (MySqlParser::CHECKSUM - 285))
      | (1ULL << (MySqlParser::PAGE_CHECKSUM - 285))
      | (1ULL << (MySqlParser::CIPHER - 285))
      | (1ULL << (MySqlParser::CLASS_ORIGIN - 285))
      | (1ULL << (MySqlParser::CLIENT - 285))
      | (1ULL << (MySqlParser::CLOSE - 285))
      | (1ULL << (MySqlParser::COALESCE - 285))
      | (1ULL << (MySqlParser::CODE - 285))
      | (1ULL << (MySqlParser::COLUMNS - 285))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 285))
      | (1ULL << (MySqlParser::COLUMN_NAME - 285))
      | (1ULL << (MySqlParser::COMMENT - 285))
      | (1ULL << (MySqlParser::COMMIT - 285))
      | (1ULL << (MySqlParser::COMPACT - 285))
      | (1ULL << (MySqlParser::COMPLETION - 285))
      | (1ULL << (MySqlParser::COMPRESSED - 285))
      | (1ULL << (MySqlParser::COMPRESSION - 285))
      | (1ULL << (MySqlParser::CONCURRENT - 285))
      | (1ULL << (MySqlParser::CONNECTION - 285))
      | (1ULL << (MySqlParser::CONSISTENT - 285))
      | (1ULL << (MySqlParser::CONSTRAINT_CATALOG - 285))
      | (1ULL << (MySqlParser::CONSTRAINT_SCHEMA - 285))
      | (1ULL << (MySqlParser::CONSTRAINT_NAME - 285))
      | (1ULL << (MySqlParser::CONTAINS - 285))
      | (1ULL << (MySqlParser::CONTEXT - 285))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 285))
      | (1ULL << (MySqlParser::COPY - 285))
      | (1ULL << (MySqlParser::CPU - 285))
      | (1ULL << (MySqlParser::CURSOR_NAME - 285))
      | (1ULL << (MySqlParser::DATA - 285))
      | (1ULL << (MySqlParser::DATAFILE - 285))
      | (1ULL << (MySqlParser::DEALLOCATE - 285))
      | (1ULL << (MySqlParser::DEFAULT_AUTH - 285))
      | (1ULL << (MySqlParser::DEFINER - 285))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 285))
      | (1ULL << (MySqlParser::DES_KEY_FILE - 285))
      | (1ULL << (MySqlParser::DIRECTORY - 285))
      | (1ULL << (MySqlParser::DISABLE - 285))
      | (1ULL << (MySqlParser::DISCARD - 285))
      | (1ULL << (MySqlParser::DISK - 285))
      | (1ULL << (MySqlParser::DO - 285))
      | (1ULL << (MySqlParser::DUMPFILE - 285))
      | (1ULL << (MySqlParser::DUPLICATE - 285))
      | (1ULL << (MySqlParser::DYNAMIC - 285))
      | (1ULL << (MySqlParser::ENABLE - 285))
      | (1ULL << (MySqlParser::ENCRYPTION - 285))
      | (1ULL << (MySqlParser::END - 285))
      | (1ULL << (MySqlParser::ENDS - 285))
      | (1ULL << (MySqlParser::ENGINE - 285))
      | (1ULL << (MySqlParser::ENGINES - 285))
      | (1ULL << (MySqlParser::ERROR - 285))
      | (1ULL << (MySqlParser::ERRORS - 285))
      | (1ULL << (MySqlParser::ESCAPE - 285))
      | (1ULL << (MySqlParser::EVEN - 285))
      | (1ULL << (MySqlParser::EVENT - 285)))) != 0) || ((((_la - 349) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 349)) & ((1ULL << (MySqlParser::EVENTS - 349))
      | (1ULL << (MySqlParser::EVERY - 349))
      | (1ULL << (MySqlParser::EXCHANGE - 349))
      | (1ULL << (MySqlParser::EXCLUSIVE - 349))
      | (1ULL << (MySqlParser::EXPIRE - 349))
      | (1ULL << (MySqlParser::EXPORT - 349))
      | (1ULL << (MySqlParser::EXTENDED - 349))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 349))
      | (1ULL << (MySqlParser::FAST - 349))
      | (1ULL << (MySqlParser::FAULTS - 349))
      | (1ULL << (MySqlParser::FIELDS - 349))
      | (1ULL << (MySqlParser::FILE_BLOCK_SIZE - 349))
      | (1ULL << (MySqlParser::FILTER - 349))
      | (1ULL << (MySqlParser::FIRST - 349))
      | (1ULL << (MySqlParser::FIXED - 349))
      | (1ULL << (MySqlParser::FLUSH - 349))
      | (1ULL << (MySqlParser::FOLLOWS - 349))
      | (1ULL << (MySqlParser::FOUND - 349))
      | (1ULL << (MySqlParser::FULL - 349))
      | (1ULL << (MySqlParser::FUNCTION - 349))
      | (1ULL << (MySqlParser::GENERAL - 349))
      | (1ULL << (MySqlParser::GLOBAL - 349))
      | (1ULL << (MySqlParser::GRANTS - 349))
      | (1ULL << (MySqlParser::GROUP_REPLICATION - 349))
      | (1ULL << (MySqlParser::HANDLER - 349))
      | (1ULL << (MySqlParser::HASH - 349))
      | (1ULL << (MySqlParser::HELP - 349))
      | (1ULL << (MySqlParser::HOST - 349))
      | (1ULL << (MySqlParser::HOSTS - 349))
      | (1ULL << (MySqlParser::IDENTIFIED - 349))
      | (1ULL << (MySqlParser::IGNORE_SERVER_IDS - 349))
      | (1ULL << (MySqlParser::IMPORT - 349))
      | (1ULL << (MySqlParser::INDEXES - 349))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 349))
      | (1ULL << (MySqlParser::INPLACE - 349))
      | (1ULL << (MySqlParser::INSERT_METHOD - 349))
      | (1ULL << (MySqlParser::INSTALL - 349))
      | (1ULL << (MySqlParser::INSTANCE - 349))
      | (1ULL << (MySqlParser::INVOKER - 349))
      | (1ULL << (MySqlParser::IO - 349))
      | (1ULL << (MySqlParser::IO_THREAD - 349))
      | (1ULL << (MySqlParser::IPC - 349))
      | (1ULL << (MySqlParser::ISOLATION - 349))
      | (1ULL << (MySqlParser::ISSUER - 349))
      | (1ULL << (MySqlParser::JSON - 349))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 349))
      | (1ULL << (MySqlParser::LANGUAGE - 349))
      | (1ULL << (MySqlParser::LAST - 349))
      | (1ULL << (MySqlParser::LEAVES - 349))
      | (1ULL << (MySqlParser::LESS - 349))
      | (1ULL << (MySqlParser::LEVEL - 349))
      | (1ULL << (MySqlParser::LIST - 349))
      | (1ULL << (MySqlParser::LOCAL - 349))
      | (1ULL << (MySqlParser::LOGFILE - 349))
      | (1ULL << (MySqlParser::LOGS - 349))
      | (1ULL << (MySqlParser::MASTER - 349))
      | (1ULL << (MySqlParser::MASTER_AUTO_POSITION - 349))
      | (1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 349))
      | (1ULL << (MySqlParser::MASTER_DELAY - 349))
      | (1ULL << (MySqlParser::MASTER_HEARTBEAT_PERIOD - 349))
      | (1ULL << (MySqlParser::MASTER_HOST - 349))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 349))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 349)))) != 0) || ((((_la - 413) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 413)) & ((1ULL << (MySqlParser::MASTER_PASSWORD - 413))
      | (1ULL << (MySqlParser::MASTER_PORT - 413))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 413))
      | (1ULL << (MySqlParser::MASTER_SSL - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 413))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 413))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 413))
      | (1ULL << (MySqlParser::MASTER_USER - 413))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 413))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 413))
      | (1ULL << (MySqlParser::MAX_ROWS - 413))
      | (1ULL << (MySqlParser::MAX_SIZE - 413))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 413))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 413))
      | (1ULL << (MySqlParser::MEDIUM - 413))
      | (1ULL << (MySqlParser::MEMBER - 413))
      | (1ULL << (MySqlParser::MERGE - 413))
      | (1ULL << (MySqlParser::MESSAGE_TEXT - 413))
      | (1ULL << (MySqlParser::MID - 413))
      | (1ULL << (MySqlParser::MIGRATE - 413))
      | (1ULL << (MySqlParser::MIN_ROWS - 413))
      | (1ULL << (MySqlParser::MODE - 413))
      | (1ULL << (MySqlParser::MODIFY - 413))
      | (1ULL << (MySqlParser::MUTEX - 413))
      | (1ULL << (MySqlParser::MYSQL - 413))
      | (1ULL << (MySqlParser::MYSQL_ERRNO - 413))
      | (1ULL << (MySqlParser::NAME - 413))
      | (1ULL << (MySqlParser::NAMES - 413))
      | (1ULL << (MySqlParser::NCHAR - 413))
      | (1ULL << (MySqlParser::NEVER - 413))
      | (1ULL << (MySqlParser::NEXT - 413))
      | (1ULL << (MySqlParser::NO - 413))
      | (1ULL << (MySqlParser::NODEGROUP - 413))
      | (1ULL << (MySqlParser::NONE - 413))
      | (1ULL << (MySqlParser::OFFLINE - 413))
      | (1ULL << (MySqlParser::OFFSET - 413))
      | (1ULL << (MySqlParser::OF - 413))
      | (1ULL << (MySqlParser::OJ - 413))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 413))
      | (1ULL << (MySqlParser::ONE - 413))
      | (1ULL << (MySqlParser::ONLINE - 413))
      | (1ULL << (MySqlParser::ONLY - 413))
      | (1ULL << (MySqlParser::OPEN - 413))
      | (1ULL << (MySqlParser::OPTIMIZER_COSTS - 413))
      | (1ULL << (MySqlParser::OPTIONS - 413))
      | (1ULL << (MySqlParser::OWNER - 413))
      | (1ULL << (MySqlParser::PACK_KEYS - 413))
      | (1ULL << (MySqlParser::PAGE - 413))
      | (1ULL << (MySqlParser::PARSER - 413))
      | (1ULL << (MySqlParser::PARTIAL - 413))
      | (1ULL << (MySqlParser::PARTITIONING - 413))
      | (1ULL << (MySqlParser::PARTITIONS - 413))
      | (1ULL << (MySqlParser::PASSWORD - 413))
      | (1ULL << (MySqlParser::PHASE - 413))
      | (1ULL << (MySqlParser::PLUGIN - 413))
      | (1ULL << (MySqlParser::PLUGIN_DIR - 413))
      | (1ULL << (MySqlParser::PLUGINS - 413))
      | (1ULL << (MySqlParser::PORT - 413))
      | (1ULL << (MySqlParser::PRECEDES - 413)))) != 0) || ((((_la - 477) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 477)) & ((1ULL << (MySqlParser::PREPARE - 477))
      | (1ULL << (MySqlParser::PRESERVE - 477))
      | (1ULL << (MySqlParser::PREV - 477))
      | (1ULL << (MySqlParser::PROCESSLIST - 477))
      | (1ULL << (MySqlParser::PROFILE - 477))
      | (1ULL << (MySqlParser::PROFILES - 477))
      | (1ULL << (MySqlParser::PROXY - 477))
      | (1ULL << (MySqlParser::QUERY - 477))
      | (1ULL << (MySqlParser::QUICK - 477))
      | (1ULL << (MySqlParser::REBUILD - 477))
      | (1ULL << (MySqlParser::RECOVER - 477))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 477))
      | (1ULL << (MySqlParser::REDUNDANT - 477))
      | (1ULL << (MySqlParser::RELAY - 477))
      | (1ULL << (MySqlParser::RELAY_LOG_FILE - 477))
      | (1ULL << (MySqlParser::RELAY_LOG_POS - 477))
      | (1ULL << (MySqlParser::RELAYLOG - 477))
      | (1ULL << (MySqlParser::REMOVE - 477))
      | (1ULL << (MySqlParser::REORGANIZE - 477))
      | (1ULL << (MySqlParser::REPAIR - 477))
      | (1ULL << (MySqlParser::REPLICATE_DO_DB - 477))
      | (1ULL << (MySqlParser::REPLICATE_DO_TABLE - 477))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_DB - 477))
      | (1ULL << (MySqlParser::REPLICATE_IGNORE_TABLE - 477))
      | (1ULL << (MySqlParser::REPLICATE_REWRITE_DB - 477))
      | (1ULL << (MySqlParser::REPLICATE_WILD_DO_TABLE - 477))
      | (1ULL << (MySqlParser::REPLICATE_WILD_IGNORE_TABLE - 477))
      | (1ULL << (MySqlParser::REPLICATION - 477))
      | (1ULL << (MySqlParser::RESET - 477))
      | (1ULL << (MySqlParser::RESUME - 477))
      | (1ULL << (MySqlParser::RETURNED_SQLSTATE - 477))
      | (1ULL << (MySqlParser::RETURNS - 477))
      | (1ULL << (MySqlParser::ROLE - 477))
      | (1ULL << (MySqlParser::ROLLBACK - 477))
      | (1ULL << (MySqlParser::ROLLUP - 477))
      | (1ULL << (MySqlParser::ROTATE - 477))
      | (1ULL << (MySqlParser::ROW - 477))
      | (1ULL << (MySqlParser::ROWS - 477))
      | (1ULL << (MySqlParser::ROW_FORMAT - 477))
      | (1ULL << (MySqlParser::SAVEPOINT - 477))
      | (1ULL << (MySqlParser::SCHEDULE - 477))
      | (1ULL << (MySqlParser::SECURITY - 477))
      | (1ULL << (MySqlParser::SERVER - 477))
      | (1ULL << (MySqlParser::SESSION - 477))
      | (1ULL << (MySqlParser::SHARE - 477))
      | (1ULL << (MySqlParser::SHARED - 477))
      | (1ULL << (MySqlParser::SIGNED - 477))
      | (1ULL << (MySqlParser::SIMPLE - 477))
      | (1ULL << (MySqlParser::SLAVE - 477))
      | (1ULL << (MySqlParser::SLOW - 477))
      | (1ULL << (MySqlParser::SNAPSHOT - 477))
      | (1ULL << (MySqlParser::SOCKET - 477))
      | (1ULL << (MySqlParser::SOME - 477))
      | (1ULL << (MySqlParser::SONAME - 477))
      | (1ULL << (MySqlParser::SOUNDS - 477))
      | (1ULL << (MySqlParser::SOURCE - 477))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 477))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 477))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 477))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 477))
      | (1ULL << (MySqlParser::SQL_CACHE - 477))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 477))
      | (1ULL << (MySqlParser::SQL_THREAD - 477))
      | (1ULL << (MySqlParser::START - 477)))) != 0) || ((((_la - 541) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 541)) & ((1ULL << (MySqlParser::STARTS - 541))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 541))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 541))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 541))
      | (1ULL << (MySqlParser::STATUS - 541))
      | (1ULL << (MySqlParser::STOP - 541))
      | (1ULL << (MySqlParser::STORAGE - 541))
      | (1ULL << (MySqlParser::STRING - 541))
      | (1ULL << (MySqlParser::SUBCLASS_ORIGIN - 541))
      | (1ULL << (MySqlParser::SUBJECT - 541))
      | (1ULL << (MySqlParser::SUBPARTITION - 541))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 541))
      | (1ULL << (MySqlParser::SUSPEND - 541))
      | (1ULL << (MySqlParser::SWAPS - 541))
      | (1ULL << (MySqlParser::SWITCHES - 541))
      | (1ULL << (MySqlParser::TABLE_NAME - 541))
      | (1ULL << (MySqlParser::TABLESPACE - 541))
      | (1ULL << (MySqlParser::TEMPORARY - 541))
      | (1ULL << (MySqlParser::TEMPTABLE - 541))
      | (1ULL << (MySqlParser::THAN - 541))
      | (1ULL << (MySqlParser::TRADITIONAL - 541))
      | (1ULL << (MySqlParser::TRANSACTION - 541))
      | (1ULL << (MySqlParser::TRANSACTIONAL - 541))
      | (1ULL << (MySqlParser::TRIGGERS - 541))
      | (1ULL << (MySqlParser::TRUNCATE - 541))
      | (1ULL << (MySqlParser::UNDEFINED - 541))
      | (1ULL << (MySqlParser::UNDOFILE - 541))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 541))
      | (1ULL << (MySqlParser::UNINSTALL - 541))
      | (1ULL << (MySqlParser::UNKNOWN - 541))
      | (1ULL << (MySqlParser::UNTIL - 541))
      | (1ULL << (MySqlParser::UPGRADE - 541))
      | (1ULL << (MySqlParser::USER - 541))
      | (1ULL << (MySqlParser::USE_FRM - 541))
      | (1ULL << (MySqlParser::USER_RESOURCES - 541))
      | (1ULL << (MySqlParser::VALIDATION - 541))
      | (1ULL << (MySqlParser::VALUE - 541))
      | (1ULL << (MySqlParser::VARIABLES - 541))
      | (1ULL << (MySqlParser::VIEW - 541))
      | (1ULL << (MySqlParser::WAIT - 541))
      | (1ULL << (MySqlParser::WARNINGS - 541))
      | (1ULL << (MySqlParser::WITHOUT - 541))
      | (1ULL << (MySqlParser::WORK - 541))
      | (1ULL << (MySqlParser::WRAPPER - 541))
      | (1ULL << (MySqlParser::X509 - 541))
      | (1ULL << (MySqlParser::XA - 541))
      | (1ULL << (MySqlParser::XML - 541))
      | (1ULL << (MySqlParser::INTERNAL - 541)))) != 0) || ((((_la - 614) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 614)) & ((1ULL << (MySqlParser::AUDIT_ADMIN - 614))
      | (1ULL << (MySqlParser::BACKUP_ADMIN - 614))
      | (1ULL << (MySqlParser::BINLOG_ADMIN - 614))
      | (1ULL << (MySqlParser::BINLOG_ENCRYPTION_ADMIN - 614))
      | (1ULL << (MySqlParser::CLONE_ADMIN - 614))
      | (1ULL << (MySqlParser::CONNECTION_ADMIN - 614))
      | (1ULL << (MySqlParser::ENCRYPTION_KEY_ADMIN - 614))
      | (1ULL << (MySqlParser::FIREWALL_ADMIN - 614))
      | (1ULL << (MySqlParser::FIREWALL_USER - 614))
      | (1ULL << (MySqlParser::GROUP_REPLICATION_ADMIN - 614))
      | (1ULL << (MySqlParser::INNODB_REDO_LOG_ARCHIVE - 614))
      | (1ULL << (MySqlParser::NDB_STORED_USER - 614))
      | (1ULL << (MySqlParser::PERSIST_RO_VARIABLES_ADMIN - 614))
      | (1ULL << (MySqlParser::REPLICATION_APPLIER - 614))
      | (1ULL << (MySqlParser::REPLICATION_SLAVE_ADMIN - 614))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_ADMIN - 614))
      | (1ULL << (MySqlParser::RESOURCE_GROUP_USER - 614))
      | (1ULL << (MySqlParser::ROLE_ADMIN - 614))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 614))
      | (1ULL << (MySqlParser::SET_USER_ID - 614))
      | (1ULL << (MySqlParser::SHOW_ROUTINE - 614))
      | (1ULL << (MySqlParser::SYSTEM_VARIABLES_ADMIN - 614))
      | (1ULL << (MySqlParser::TABLE_ENCRYPTION_ADMIN - 614))
      | (1ULL << (MySqlParser::VERSION_TOKEN_ADMIN - 614))
      | (1ULL << (MySqlParser::XA_RECOVER_ADMIN - 614)))) != 0) || _la == MySqlParser::MEMORY

    || _la == MySqlParser::CATALOG_NAME || _la == MySqlParser::SCHEMA_NAME)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameBaseContext ------------------------------------------------------------------

MySqlParser::FunctionNameBaseContext::FunctionNameBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ABS() {
  return getToken(MySqlParser::ABS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ACOS() {
  return getToken(MySqlParser::ACOS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ADDDATE() {
  return getToken(MySqlParser::ADDDATE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ADDTIME() {
  return getToken(MySqlParser::ADDTIME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::AES_DECRYPT() {
  return getToken(MySqlParser::AES_DECRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::AES_ENCRYPT() {
  return getToken(MySqlParser::AES_ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::AREA() {
  return getToken(MySqlParser::AREA, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASBINARY() {
  return getToken(MySqlParser::ASBINARY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASIN() {
  return getToken(MySqlParser::ASIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASTEXT() {
  return getToken(MySqlParser::ASTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASWKB() {
  return getToken(MySqlParser::ASWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASWKT() {
  return getToken(MySqlParser::ASWKT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASYMMETRIC_DECRYPT() {
  return getToken(MySqlParser::ASYMMETRIC_DECRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASYMMETRIC_DERIVE() {
  return getToken(MySqlParser::ASYMMETRIC_DERIVE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASYMMETRIC_ENCRYPT() {
  return getToken(MySqlParser::ASYMMETRIC_ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASYMMETRIC_SIGN() {
  return getToken(MySqlParser::ASYMMETRIC_SIGN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ASYMMETRIC_VERIFY() {
  return getToken(MySqlParser::ASYMMETRIC_VERIFY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ATAN() {
  return getToken(MySqlParser::ATAN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ATAN2() {
  return getToken(MySqlParser::ATAN2, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::BENCHMARK() {
  return getToken(MySqlParser::BENCHMARK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::BIN() {
  return getToken(MySqlParser::BIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::BIT_COUNT() {
  return getToken(MySqlParser::BIT_COUNT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::BIT_LENGTH() {
  return getToken(MySqlParser::BIT_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::BUFFER() {
  return getToken(MySqlParser::BUFFER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CEIL() {
  return getToken(MySqlParser::CEIL, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CEILING() {
  return getToken(MySqlParser::CEILING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CENTROID() {
  return getToken(MySqlParser::CENTROID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CHARACTER_LENGTH() {
  return getToken(MySqlParser::CHARACTER_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CHAR_LENGTH() {
  return getToken(MySqlParser::CHAR_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::COERCIBILITY() {
  return getToken(MySqlParser::COERCIBILITY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::COLLATION() {
  return getToken(MySqlParser::COLLATION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::COMPRESS() {
  return getToken(MySqlParser::COMPRESS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CONCAT() {
  return getToken(MySqlParser::CONCAT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CONCAT_WS() {
  return getToken(MySqlParser::CONCAT_WS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CONNECTION_ID() {
  return getToken(MySqlParser::CONNECTION_ID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CONV() {
  return getToken(MySqlParser::CONV, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CONVERT_TZ() {
  return getToken(MySqlParser::CONVERT_TZ, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::COS() {
  return getToken(MySqlParser::COS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::COT() {
  return getToken(MySqlParser::COT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CRC32() {
  return getToken(MySqlParser::CRC32, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CREATE_ASYMMETRIC_PRIV_KEY() {
  return getToken(MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CREATE_ASYMMETRIC_PUB_KEY() {
  return getToken(MySqlParser::CREATE_ASYMMETRIC_PUB_KEY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CREATE_DH_PARAMETERS() {
  return getToken(MySqlParser::CREATE_DH_PARAMETERS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CREATE_DIGEST() {
  return getToken(MySqlParser::CREATE_DIGEST, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::CROSSES() {
  return getToken(MySqlParser::CROSSES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DATEDIFF() {
  return getToken(MySqlParser::DATEDIFF, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DATE_FORMAT() {
  return getToken(MySqlParser::DATE_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DAY() {
  return getToken(MySqlParser::DAY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DAYNAME() {
  return getToken(MySqlParser::DAYNAME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DAYOFMONTH() {
  return getToken(MySqlParser::DAYOFMONTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DAYOFWEEK() {
  return getToken(MySqlParser::DAYOFWEEK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DAYOFYEAR() {
  return getToken(MySqlParser::DAYOFYEAR, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DECODE() {
  return getToken(MySqlParser::DECODE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DEGREES() {
  return getToken(MySqlParser::DEGREES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DES_DECRYPT() {
  return getToken(MySqlParser::DES_DECRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DES_ENCRYPT() {
  return getToken(MySqlParser::DES_ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DIMENSION() {
  return getToken(MySqlParser::DIMENSION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::DISJOINT() {
  return getToken(MySqlParser::DISJOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ELT() {
  return getToken(MySqlParser::ELT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ENCODE() {
  return getToken(MySqlParser::ENCODE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ENCRYPT() {
  return getToken(MySqlParser::ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ENDPOINT() {
  return getToken(MySqlParser::ENDPOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ENVELOPE() {
  return getToken(MySqlParser::ENVELOPE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::EQUALS() {
  return getToken(MySqlParser::EQUALS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::EXP() {
  return getToken(MySqlParser::EXP, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::EXPORT_SET() {
  return getToken(MySqlParser::EXPORT_SET, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::EXTERIORRING() {
  return getToken(MySqlParser::EXTERIORRING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::EXTRACTVALUE() {
  return getToken(MySqlParser::EXTRACTVALUE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FIELD() {
  return getToken(MySqlParser::FIELD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FIND_IN_SET() {
  return getToken(MySqlParser::FIND_IN_SET, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FLOOR() {
  return getToken(MySqlParser::FLOOR, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FORMAT() {
  return getToken(MySqlParser::FORMAT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FOUND_ROWS() {
  return getToken(MySqlParser::FOUND_ROWS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FROM_BASE64() {
  return getToken(MySqlParser::FROM_BASE64, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FROM_DAYS() {
  return getToken(MySqlParser::FROM_DAYS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::FROM_UNIXTIME() {
  return getToken(MySqlParser::FROM_UNIXTIME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMCOLLFROMTEXT() {
  return getToken(MySqlParser::GEOMCOLLFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMCOLLFROMWKB() {
  return getToken(MySqlParser::GEOMCOLLFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYCOLLECTION() {
  return getToken(MySqlParser::GEOMETRYCOLLECTION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYCOLLECTIONFROMTEXT() {
  return getToken(MySqlParser::GEOMETRYCOLLECTIONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYCOLLECTIONFROMWKB() {
  return getToken(MySqlParser::GEOMETRYCOLLECTIONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYFROMTEXT() {
  return getToken(MySqlParser::GEOMETRYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYFROMWKB() {
  return getToken(MySqlParser::GEOMETRYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYN() {
  return getToken(MySqlParser::GEOMETRYN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMETRYTYPE() {
  return getToken(MySqlParser::GEOMETRYTYPE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMFROMTEXT() {
  return getToken(MySqlParser::GEOMFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GEOMFROMWKB() {
  return getToken(MySqlParser::GEOMFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GET_FORMAT() {
  return getToken(MySqlParser::GET_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GET_LOCK() {
  return getToken(MySqlParser::GET_LOCK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GLENGTH() {
  return getToken(MySqlParser::GLENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GREATEST() {
  return getToken(MySqlParser::GREATEST, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GTID_SUBSET() {
  return getToken(MySqlParser::GTID_SUBSET, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::GTID_SUBTRACT() {
  return getToken(MySqlParser::GTID_SUBTRACT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::HEX() {
  return getToken(MySqlParser::HEX, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::HOUR() {
  return getToken(MySqlParser::HOUR, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IFNULL() {
  return getToken(MySqlParser::IFNULL, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INET6_ATON() {
  return getToken(MySqlParser::INET6_ATON, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INET6_NTOA() {
  return getToken(MySqlParser::INET6_NTOA, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INET_ATON() {
  return getToken(MySqlParser::INET_ATON, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INET_NTOA() {
  return getToken(MySqlParser::INET_NTOA, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INSTR() {
  return getToken(MySqlParser::INSTR, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INTERIORRINGN() {
  return getToken(MySqlParser::INTERIORRINGN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INTERSECTS() {
  return getToken(MySqlParser::INTERSECTS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::INVISIBLE() {
  return getToken(MySqlParser::INVISIBLE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ISCLOSED() {
  return getToken(MySqlParser::ISCLOSED, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ISEMPTY() {
  return getToken(MySqlParser::ISEMPTY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ISNULL() {
  return getToken(MySqlParser::ISNULL, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ISSIMPLE() {
  return getToken(MySqlParser::ISSIMPLE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IS_FREE_LOCK() {
  return getToken(MySqlParser::IS_FREE_LOCK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IS_IPV4() {
  return getToken(MySqlParser::IS_IPV4, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IS_IPV4_COMPAT() {
  return getToken(MySqlParser::IS_IPV4_COMPAT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IS_IPV4_MAPPED() {
  return getToken(MySqlParser::IS_IPV4_MAPPED, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IS_IPV6() {
  return getToken(MySqlParser::IS_IPV6, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::IS_USED_LOCK() {
  return getToken(MySqlParser::IS_USED_LOCK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LAST_INSERT_ID() {
  return getToken(MySqlParser::LAST_INSERT_ID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LCASE() {
  return getToken(MySqlParser::LCASE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LEAST() {
  return getToken(MySqlParser::LEAST, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LEFT() {
  return getToken(MySqlParser::LEFT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LENGTH() {
  return getToken(MySqlParser::LENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LINEFROMTEXT() {
  return getToken(MySqlParser::LINEFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LINEFROMWKB() {
  return getToken(MySqlParser::LINEFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LINESTRING() {
  return getToken(MySqlParser::LINESTRING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LINESTRINGFROMTEXT() {
  return getToken(MySqlParser::LINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LINESTRINGFROMWKB() {
  return getToken(MySqlParser::LINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LN() {
  return getToken(MySqlParser::LN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LOAD_FILE() {
  return getToken(MySqlParser::LOAD_FILE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LOCATE() {
  return getToken(MySqlParser::LOCATE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LOG() {
  return getToken(MySqlParser::LOG, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LOG10() {
  return getToken(MySqlParser::LOG10, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LOG2() {
  return getToken(MySqlParser::LOG2, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LOWER() {
  return getToken(MySqlParser::LOWER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LPAD() {
  return getToken(MySqlParser::LPAD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::LTRIM() {
  return getToken(MySqlParser::LTRIM, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MAKEDATE() {
  return getToken(MySqlParser::MAKEDATE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MAKETIME() {
  return getToken(MySqlParser::MAKETIME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MAKE_SET() {
  return getToken(MySqlParser::MAKE_SET, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MASTER_POS_WAIT() {
  return getToken(MySqlParser::MASTER_POS_WAIT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBRCONTAINS() {
  return getToken(MySqlParser::MBRCONTAINS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBRDISJOINT() {
  return getToken(MySqlParser::MBRDISJOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBREQUAL() {
  return getToken(MySqlParser::MBREQUAL, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBRINTERSECTS() {
  return getToken(MySqlParser::MBRINTERSECTS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBROVERLAPS() {
  return getToken(MySqlParser::MBROVERLAPS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBRTOUCHES() {
  return getToken(MySqlParser::MBRTOUCHES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MBRWITHIN() {
  return getToken(MySqlParser::MBRWITHIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MD5() {
  return getToken(MySqlParser::MD5, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MICROSECOND() {
  return getToken(MySqlParser::MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MINUTE() {
  return getToken(MySqlParser::MINUTE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MLINEFROMTEXT() {
  return getToken(MySqlParser::MLINEFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MLINEFROMWKB() {
  return getToken(MySqlParser::MLINEFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MOD() {
  return getToken(MySqlParser::MOD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MONTH() {
  return getToken(MySqlParser::MONTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MONTHNAME() {
  return getToken(MySqlParser::MONTHNAME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MPOINTFROMTEXT() {
  return getToken(MySqlParser::MPOINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MPOINTFROMWKB() {
  return getToken(MySqlParser::MPOINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MPOLYFROMTEXT() {
  return getToken(MySqlParser::MPOLYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MPOLYFROMWKB() {
  return getToken(MySqlParser::MPOLYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTILINESTRING() {
  return getToken(MySqlParser::MULTILINESTRING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTILINESTRINGFROMTEXT() {
  return getToken(MySqlParser::MULTILINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTILINESTRINGFROMWKB() {
  return getToken(MySqlParser::MULTILINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTIPOINT() {
  return getToken(MySqlParser::MULTIPOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTIPOINTFROMTEXT() {
  return getToken(MySqlParser::MULTIPOINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTIPOINTFROMWKB() {
  return getToken(MySqlParser::MULTIPOINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTIPOLYGON() {
  return getToken(MySqlParser::MULTIPOLYGON, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTIPOLYGONFROMTEXT() {
  return getToken(MySqlParser::MULTIPOLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::MULTIPOLYGONFROMWKB() {
  return getToken(MySqlParser::MULTIPOLYGONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::NAME_CONST() {
  return getToken(MySqlParser::NAME_CONST, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::NULLIF() {
  return getToken(MySqlParser::NULLIF, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::NUMGEOMETRIES() {
  return getToken(MySqlParser::NUMGEOMETRIES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::NUMINTERIORRINGS() {
  return getToken(MySqlParser::NUMINTERIORRINGS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::NUMPOINTS() {
  return getToken(MySqlParser::NUMPOINTS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::OCT() {
  return getToken(MySqlParser::OCT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::OCTET_LENGTH() {
  return getToken(MySqlParser::OCTET_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ORD() {
  return getToken(MySqlParser::ORD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::OVERLAPS() {
  return getToken(MySqlParser::OVERLAPS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::PERIOD_ADD() {
  return getToken(MySqlParser::PERIOD_ADD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::PERIOD_DIFF() {
  return getToken(MySqlParser::PERIOD_DIFF, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::PI() {
  return getToken(MySqlParser::PI, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POINT() {
  return getToken(MySqlParser::POINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POINTFROMTEXT() {
  return getToken(MySqlParser::POINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POINTFROMWKB() {
  return getToken(MySqlParser::POINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POINTN() {
  return getToken(MySqlParser::POINTN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POLYFROMTEXT() {
  return getToken(MySqlParser::POLYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POLYFROMWKB() {
  return getToken(MySqlParser::POLYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POLYGON() {
  return getToken(MySqlParser::POLYGON, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POLYGONFROMTEXT() {
  return getToken(MySqlParser::POLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POLYGONFROMWKB() {
  return getToken(MySqlParser::POLYGONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POSITION() {
  return getToken(MySqlParser::POSITION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POW() {
  return getToken(MySqlParser::POW, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::POWER() {
  return getToken(MySqlParser::POWER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::QUARTER() {
  return getToken(MySqlParser::QUARTER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::QUOTE() {
  return getToken(MySqlParser::QUOTE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RADIANS() {
  return getToken(MySqlParser::RADIANS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RAND() {
  return getToken(MySqlParser::RAND, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RANDOM_BYTES() {
  return getToken(MySqlParser::RANDOM_BYTES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RELEASE_LOCK() {
  return getToken(MySqlParser::RELEASE_LOCK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::REVERSE() {
  return getToken(MySqlParser::REVERSE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RIGHT() {
  return getToken(MySqlParser::RIGHT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ROUND() {
  return getToken(MySqlParser::ROUND, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ROW_COUNT() {
  return getToken(MySqlParser::ROW_COUNT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RPAD() {
  return getToken(MySqlParser::RPAD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::RTRIM() {
  return getToken(MySqlParser::RTRIM, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SECOND() {
  return getToken(MySqlParser::SECOND, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SEC_TO_TIME() {
  return getToken(MySqlParser::SEC_TO_TIME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SESSION_USER() {
  return getToken(MySqlParser::SESSION_USER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SESSION_VARIABLES_ADMIN() {
  return getToken(MySqlParser::SESSION_VARIABLES_ADMIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SHA() {
  return getToken(MySqlParser::SHA, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SHA1() {
  return getToken(MySqlParser::SHA1, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SHA2() {
  return getToken(MySqlParser::SHA2, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SIGN() {
  return getToken(MySqlParser::SIGN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SIN() {
  return getToken(MySqlParser::SIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SLEEP() {
  return getToken(MySqlParser::SLEEP, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SOUNDEX() {
  return getToken(MySqlParser::SOUNDEX, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SQL_THREAD_WAIT_AFTER_GTIDS() {
  return getToken(MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SQRT() {
  return getToken(MySqlParser::SQRT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SRID() {
  return getToken(MySqlParser::SRID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::STARTPOINT() {
  return getToken(MySqlParser::STARTPOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::STRCMP() {
  return getToken(MySqlParser::STRCMP, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::STR_TO_DATE() {
  return getToken(MySqlParser::STR_TO_DATE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_AREA() {
  return getToken(MySqlParser::ST_AREA, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ASBINARY() {
  return getToken(MySqlParser::ST_ASBINARY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ASTEXT() {
  return getToken(MySqlParser::ST_ASTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ASWKB() {
  return getToken(MySqlParser::ST_ASWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ASWKT() {
  return getToken(MySqlParser::ST_ASWKT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_BUFFER() {
  return getToken(MySqlParser::ST_BUFFER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_CENTROID() {
  return getToken(MySqlParser::ST_CENTROID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_CONTAINS() {
  return getToken(MySqlParser::ST_CONTAINS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_CROSSES() {
  return getToken(MySqlParser::ST_CROSSES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_DIFFERENCE() {
  return getToken(MySqlParser::ST_DIFFERENCE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_DIMENSION() {
  return getToken(MySqlParser::ST_DIMENSION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_DISJOINT() {
  return getToken(MySqlParser::ST_DISJOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_DISTANCE() {
  return getToken(MySqlParser::ST_DISTANCE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ENDPOINT() {
  return getToken(MySqlParser::ST_ENDPOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ENVELOPE() {
  return getToken(MySqlParser::ST_ENVELOPE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_EQUALS() {
  return getToken(MySqlParser::ST_EQUALS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_EXTERIORRING() {
  return getToken(MySqlParser::ST_EXTERIORRING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMCOLLFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMCOLLFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMCOLLFROMTXT() {
  return getToken(MySqlParser::ST_GEOMCOLLFROMTXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMCOLLFROMWKB() {
  return getToken(MySqlParser::ST_GEOMCOLLFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMETRYCOLLECTIONFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMETRYCOLLECTIONFROMWKB() {
  return getToken(MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMETRYFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMETRYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMETRYFROMWKB() {
  return getToken(MySqlParser::ST_GEOMETRYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMETRYN() {
  return getToken(MySqlParser::ST_GEOMETRYN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMETRYTYPE() {
  return getToken(MySqlParser::ST_GEOMETRYTYPE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_GEOMFROMWKB() {
  return getToken(MySqlParser::ST_GEOMFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_INTERIORRINGN() {
  return getToken(MySqlParser::ST_INTERIORRINGN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_INTERSECTION() {
  return getToken(MySqlParser::ST_INTERSECTION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_INTERSECTS() {
  return getToken(MySqlParser::ST_INTERSECTS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ISCLOSED() {
  return getToken(MySqlParser::ST_ISCLOSED, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ISEMPTY() {
  return getToken(MySqlParser::ST_ISEMPTY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_ISSIMPLE() {
  return getToken(MySqlParser::ST_ISSIMPLE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_LINEFROMTEXT() {
  return getToken(MySqlParser::ST_LINEFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_LINEFROMWKB() {
  return getToken(MySqlParser::ST_LINEFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_LINESTRINGFROMTEXT() {
  return getToken(MySqlParser::ST_LINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_LINESTRINGFROMWKB() {
  return getToken(MySqlParser::ST_LINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_NUMGEOMETRIES() {
  return getToken(MySqlParser::ST_NUMGEOMETRIES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_NUMINTERIORRING() {
  return getToken(MySqlParser::ST_NUMINTERIORRING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_NUMINTERIORRINGS() {
  return getToken(MySqlParser::ST_NUMINTERIORRINGS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_NUMPOINTS() {
  return getToken(MySqlParser::ST_NUMPOINTS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_OVERLAPS() {
  return getToken(MySqlParser::ST_OVERLAPS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POINTFROMTEXT() {
  return getToken(MySqlParser::ST_POINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POINTFROMWKB() {
  return getToken(MySqlParser::ST_POINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POINTN() {
  return getToken(MySqlParser::ST_POINTN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POLYFROMTEXT() {
  return getToken(MySqlParser::ST_POLYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POLYFROMWKB() {
  return getToken(MySqlParser::ST_POLYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POLYGONFROMTEXT() {
  return getToken(MySqlParser::ST_POLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_POLYGONFROMWKB() {
  return getToken(MySqlParser::ST_POLYGONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_SRID() {
  return getToken(MySqlParser::ST_SRID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_STARTPOINT() {
  return getToken(MySqlParser::ST_STARTPOINT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_SYMDIFFERENCE() {
  return getToken(MySqlParser::ST_SYMDIFFERENCE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_TOUCHES() {
  return getToken(MySqlParser::ST_TOUCHES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_UNION() {
  return getToken(MySqlParser::ST_UNION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_WITHIN() {
  return getToken(MySqlParser::ST_WITHIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_X() {
  return getToken(MySqlParser::ST_X, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::ST_Y() {
  return getToken(MySqlParser::ST_Y, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SUBDATE() {
  return getToken(MySqlParser::SUBDATE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SUBSTRING_INDEX() {
  return getToken(MySqlParser::SUBSTRING_INDEX, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SUBTIME() {
  return getToken(MySqlParser::SUBTIME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::SYSTEM_USER() {
  return getToken(MySqlParser::SYSTEM_USER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TAN() {
  return getToken(MySqlParser::TAN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIMEDIFF() {
  return getToken(MySqlParser::TIMEDIFF, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIMESTAMP() {
  return getToken(MySqlParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIMESTAMPADD() {
  return getToken(MySqlParser::TIMESTAMPADD, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIMESTAMPDIFF() {
  return getToken(MySqlParser::TIMESTAMPDIFF, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIME_FORMAT() {
  return getToken(MySqlParser::TIME_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TIME_TO_SEC() {
  return getToken(MySqlParser::TIME_TO_SEC, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TOUCHES() {
  return getToken(MySqlParser::TOUCHES, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TO_BASE64() {
  return getToken(MySqlParser::TO_BASE64, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TO_DAYS() {
  return getToken(MySqlParser::TO_DAYS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::TO_SECONDS() {
  return getToken(MySqlParser::TO_SECONDS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UCASE() {
  return getToken(MySqlParser::UCASE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UNCOMPRESS() {
  return getToken(MySqlParser::UNCOMPRESS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UNCOMPRESSED_LENGTH() {
  return getToken(MySqlParser::UNCOMPRESSED_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UNHEX() {
  return getToken(MySqlParser::UNHEX, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UNIX_TIMESTAMP() {
  return getToken(MySqlParser::UNIX_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UPDATEXML() {
  return getToken(MySqlParser::UPDATEXML, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UPPER() {
  return getToken(MySqlParser::UPPER, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UUID() {
  return getToken(MySqlParser::UUID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::UUID_SHORT() {
  return getToken(MySqlParser::UUID_SHORT, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::VALIDATE_PASSWORD_STRENGTH() {
  return getToken(MySqlParser::VALIDATE_PASSWORD_STRENGTH, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::VERSION() {
  return getToken(MySqlParser::VERSION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::VISIBLE() {
  return getToken(MySqlParser::VISIBLE, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() {
  return getToken(MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::WEEK() {
  return getToken(MySqlParser::WEEK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::WEEKDAY() {
  return getToken(MySqlParser::WEEKDAY, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::WEEKOFYEAR() {
  return getToken(MySqlParser::WEEKOFYEAR, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::WEIGHT_STRING() {
  return getToken(MySqlParser::WEIGHT_STRING, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::WITHIN() {
  return getToken(MySqlParser::WITHIN, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::YEARWEEK() {
  return getToken(MySqlParser::YEARWEEK, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::Y_FUNCTION() {
  return getToken(MySqlParser::Y_FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::X_FUNCTION() {
  return getToken(MySqlParser::X_FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::JSON_VALID() {
  return getToken(MySqlParser::JSON_VALID, 0);
}

tree::TerminalNode* MySqlParser::FunctionNameBaseContext::JSON_SCHEMA_VALID() {
  return getToken(MySqlParser::JSON_SCHEMA_VALID, 0);
}


size_t MySqlParser::FunctionNameBaseContext::getRuleIndex() const {
  return MySqlParser::RuleFunctionNameBase;
}


MySqlParser::FunctionNameBaseContext* MySqlParser::functionNameBase() {
  FunctionNameBaseContext *_localctx = _tracker.createInstance<FunctionNameBaseContext>(_ctx, getState());
  enterRule(_localctx, 634, MySqlParser::RuleFunctionNameBase);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6461);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DATABASE || ((((_la - 87) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 87)) & ((1ULL << (MySqlParser::LEFT - 87))
      | (1ULL << (MySqlParser::RIGHT - 87))
      | (1ULL << (MySqlParser::SCHEMA - 87)))) != 0) || ((((_la - 199) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 199)) & ((1ULL << (MySqlParser::DATE - 199))
      | (1ULL << (MySqlParser::TIME - 199))
      | (1ULL << (MySqlParser::TIMESTAMP - 199))
      | (1ULL << (MySqlParser::YEAR - 199))
      | (1ULL << (MySqlParser::JSON_VALID - 199))
      | (1ULL << (MySqlParser::JSON_SCHEMA_VALID - 199))
      | (1ULL << (MySqlParser::COUNT - 199))
      | (1ULL << (MySqlParser::POSITION - 199)))) != 0) || _la == MySqlParser::INVISIBLE || ((((_la - 582) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 582)) & ((1ULL << (MySqlParser::VISIBLE - 582))
      | (1ULL << (MySqlParser::QUARTER - 582))
      | (1ULL << (MySqlParser::MONTH - 582))
      | (1ULL << (MySqlParser::DAY - 582))
      | (1ULL << (MySqlParser::HOUR - 582))
      | (1ULL << (MySqlParser::MINUTE - 582))
      | (1ULL << (MySqlParser::WEEK - 582))
      | (1ULL << (MySqlParser::SECOND - 582))
      | (1ULL << (MySqlParser::MICROSECOND - 582))
      | (1ULL << (MySqlParser::SESSION_VARIABLES_ADMIN - 582)))) != 0) || ((((_la - 701) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 701)) & ((1ULL << (MySqlParser::GEOMETRYCOLLECTION - 701))
      | (1ULL << (MySqlParser::LINESTRING - 701))
      | (1ULL << (MySqlParser::MULTILINESTRING - 701))
      | (1ULL << (MySqlParser::MULTIPOINT - 701))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 701))
      | (1ULL << (MySqlParser::POINT - 701))
      | (1ULL << (MySqlParser::POLYGON - 701))
      | (1ULL << (MySqlParser::ABS - 701))
      | (1ULL << (MySqlParser::ACOS - 701))
      | (1ULL << (MySqlParser::ADDDATE - 701))
      | (1ULL << (MySqlParser::ADDTIME - 701))
      | (1ULL << (MySqlParser::AES_DECRYPT - 701))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 701))
      | (1ULL << (MySqlParser::AREA - 701))
      | (1ULL << (MySqlParser::ASBINARY - 701))
      | (1ULL << (MySqlParser::ASIN - 701))
      | (1ULL << (MySqlParser::ASTEXT - 701))
      | (1ULL << (MySqlParser::ASWKB - 701))
      | (1ULL << (MySqlParser::ASWKT - 701))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 701))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 701))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 701))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 701))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 701))
      | (1ULL << (MySqlParser::ATAN - 701))
      | (1ULL << (MySqlParser::ATAN2 - 701))
      | (1ULL << (MySqlParser::BENCHMARK - 701))
      | (1ULL << (MySqlParser::BIN - 701))
      | (1ULL << (MySqlParser::BIT_COUNT - 701))
      | (1ULL << (MySqlParser::BIT_LENGTH - 701))
      | (1ULL << (MySqlParser::BUFFER - 701))
      | (1ULL << (MySqlParser::CEIL - 701))
      | (1ULL << (MySqlParser::CEILING - 701))
      | (1ULL << (MySqlParser::CENTROID - 701))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 701))
      | (1ULL << (MySqlParser::CHARSET - 701))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 701))
      | (1ULL << (MySqlParser::COERCIBILITY - 701))
      | (1ULL << (MySqlParser::COLLATION - 701))
      | (1ULL << (MySqlParser::COMPRESS - 701))
      | (1ULL << (MySqlParser::CONCAT - 701))
      | (1ULL << (MySqlParser::CONCAT_WS - 701))
      | (1ULL << (MySqlParser::CONNECTION_ID - 701))
      | (1ULL << (MySqlParser::CONV - 701))
      | (1ULL << (MySqlParser::CONVERT_TZ - 701))
      | (1ULL << (MySqlParser::COS - 701))
      | (1ULL << (MySqlParser::COT - 701))
      | (1ULL << (MySqlParser::CRC32 - 701))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 701))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 701))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 701))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 701))
      | (1ULL << (MySqlParser::CROSSES - 701))
      | (1ULL << (MySqlParser::DATEDIFF - 701))
      | (1ULL << (MySqlParser::DATE_FORMAT - 701))
      | (1ULL << (MySqlParser::DAYNAME - 701))
      | (1ULL << (MySqlParser::DAYOFMONTH - 701))
      | (1ULL << (MySqlParser::DAYOFWEEK - 701))
      | (1ULL << (MySqlParser::DAYOFYEAR - 701))
      | (1ULL << (MySqlParser::DECODE - 701))
      | (1ULL << (MySqlParser::DEGREES - 701)))) != 0) || ((((_la - 765) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 765)) & ((1ULL << (MySqlParser::DES_DECRYPT - 765))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 765))
      | (1ULL << (MySqlParser::DIMENSION - 765))
      | (1ULL << (MySqlParser::DISJOINT - 765))
      | (1ULL << (MySqlParser::ELT - 765))
      | (1ULL << (MySqlParser::ENCODE - 765))
      | (1ULL << (MySqlParser::ENCRYPT - 765))
      | (1ULL << (MySqlParser::ENDPOINT - 765))
      | (1ULL << (MySqlParser::ENVELOPE - 765))
      | (1ULL << (MySqlParser::EQUALS - 765))
      | (1ULL << (MySqlParser::EXP - 765))
      | (1ULL << (MySqlParser::EXPORT_SET - 765))
      | (1ULL << (MySqlParser::EXTERIORRING - 765))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 765))
      | (1ULL << (MySqlParser::FIELD - 765))
      | (1ULL << (MySqlParser::FIND_IN_SET - 765))
      | (1ULL << (MySqlParser::FLOOR - 765))
      | (1ULL << (MySqlParser::FORMAT - 765))
      | (1ULL << (MySqlParser::FOUND_ROWS - 765))
      | (1ULL << (MySqlParser::FROM_BASE64 - 765))
      | (1ULL << (MySqlParser::FROM_DAYS - 765))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 765))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 765))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 765))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 765))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 765))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 765))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 765))
      | (1ULL << (MySqlParser::GEOMETRYN - 765))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 765))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 765))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 765))
      | (1ULL << (MySqlParser::GET_FORMAT - 765))
      | (1ULL << (MySqlParser::GET_LOCK - 765))
      | (1ULL << (MySqlParser::GLENGTH - 765))
      | (1ULL << (MySqlParser::GREATEST - 765))
      | (1ULL << (MySqlParser::GTID_SUBSET - 765))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 765))
      | (1ULL << (MySqlParser::HEX - 765))
      | (1ULL << (MySqlParser::IFNULL - 765))
      | (1ULL << (MySqlParser::INET6_ATON - 765))
      | (1ULL << (MySqlParser::INET6_NTOA - 765))
      | (1ULL << (MySqlParser::INET_ATON - 765))
      | (1ULL << (MySqlParser::INET_NTOA - 765))
      | (1ULL << (MySqlParser::INSTR - 765))
      | (1ULL << (MySqlParser::INTERIORRINGN - 765))
      | (1ULL << (MySqlParser::INTERSECTS - 765))
      | (1ULL << (MySqlParser::ISCLOSED - 765))
      | (1ULL << (MySqlParser::ISEMPTY - 765))
      | (1ULL << (MySqlParser::ISNULL - 765))
      | (1ULL << (MySqlParser::ISSIMPLE - 765))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 765))
      | (1ULL << (MySqlParser::IS_IPV4 - 765))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 765))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 765))
      | (1ULL << (MySqlParser::IS_IPV6 - 765))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 765))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 765))
      | (1ULL << (MySqlParser::LCASE - 765))
      | (1ULL << (MySqlParser::LEAST - 765))
      | (1ULL << (MySqlParser::LENGTH - 765))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 765))
      | (1ULL << (MySqlParser::LINEFROMWKB - 765))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 765)))) != 0) || ((((_la - 829) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 829)) & ((1ULL << (MySqlParser::LINESTRINGFROMWKB - 829))
      | (1ULL << (MySqlParser::LN - 829))
      | (1ULL << (MySqlParser::LOAD_FILE - 829))
      | (1ULL << (MySqlParser::LOCATE - 829))
      | (1ULL << (MySqlParser::LOG - 829))
      | (1ULL << (MySqlParser::LOG10 - 829))
      | (1ULL << (MySqlParser::LOG2 - 829))
      | (1ULL << (MySqlParser::LOWER - 829))
      | (1ULL << (MySqlParser::LPAD - 829))
      | (1ULL << (MySqlParser::LTRIM - 829))
      | (1ULL << (MySqlParser::MAKEDATE - 829))
      | (1ULL << (MySqlParser::MAKETIME - 829))
      | (1ULL << (MySqlParser::MAKE_SET - 829))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 829))
      | (1ULL << (MySqlParser::MBRCONTAINS - 829))
      | (1ULL << (MySqlParser::MBRDISJOINT - 829))
      | (1ULL << (MySqlParser::MBREQUAL - 829))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 829))
      | (1ULL << (MySqlParser::MBROVERLAPS - 829))
      | (1ULL << (MySqlParser::MBRTOUCHES - 829))
      | (1ULL << (MySqlParser::MBRWITHIN - 829))
      | (1ULL << (MySqlParser::MD5 - 829))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 829))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 829))
      | (1ULL << (MySqlParser::MONTHNAME - 829))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 829))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 829))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 829))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 829))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 829))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 829))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 829))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 829))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 829))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 829))
      | (1ULL << (MySqlParser::NAME_CONST - 829))
      | (1ULL << (MySqlParser::NULLIF - 829))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 829))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 829))
      | (1ULL << (MySqlParser::NUMPOINTS - 829))
      | (1ULL << (MySqlParser::OCT - 829))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 829))
      | (1ULL << (MySqlParser::ORD - 829))
      | (1ULL << (MySqlParser::OVERLAPS - 829))
      | (1ULL << (MySqlParser::PERIOD_ADD - 829))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 829))
      | (1ULL << (MySqlParser::PI - 829))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 829))
      | (1ULL << (MySqlParser::POINTFROMWKB - 829))
      | (1ULL << (MySqlParser::POINTN - 829))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 829))
      | (1ULL << (MySqlParser::POLYFROMWKB - 829))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 829))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 829))
      | (1ULL << (MySqlParser::POW - 829))
      | (1ULL << (MySqlParser::POWER - 829))
      | (1ULL << (MySqlParser::QUOTE - 829))
      | (1ULL << (MySqlParser::RADIANS - 829))
      | (1ULL << (MySqlParser::RAND - 829))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 829))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 829))
      | (1ULL << (MySqlParser::REVERSE - 829))
      | (1ULL << (MySqlParser::ROUND - 829))
      | (1ULL << (MySqlParser::ROW_COUNT - 829)))) != 0) || ((((_la - 893) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 893)) & ((1ULL << (MySqlParser::RPAD - 893))
      | (1ULL << (MySqlParser::RTRIM - 893))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 893))
      | (1ULL << (MySqlParser::SESSION_USER - 893))
      | (1ULL << (MySqlParser::SHA - 893))
      | (1ULL << (MySqlParser::SHA1 - 893))
      | (1ULL << (MySqlParser::SHA2 - 893))
      | (1ULL << (MySqlParser::SIGN - 893))
      | (1ULL << (MySqlParser::SIN - 893))
      | (1ULL << (MySqlParser::SLEEP - 893))
      | (1ULL << (MySqlParser::SOUNDEX - 893))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 893))
      | (1ULL << (MySqlParser::SQRT - 893))
      | (1ULL << (MySqlParser::SRID - 893))
      | (1ULL << (MySqlParser::STARTPOINT - 893))
      | (1ULL << (MySqlParser::STRCMP - 893))
      | (1ULL << (MySqlParser::STR_TO_DATE - 893))
      | (1ULL << (MySqlParser::ST_AREA - 893))
      | (1ULL << (MySqlParser::ST_ASBINARY - 893))
      | (1ULL << (MySqlParser::ST_ASTEXT - 893))
      | (1ULL << (MySqlParser::ST_ASWKB - 893))
      | (1ULL << (MySqlParser::ST_ASWKT - 893))
      | (1ULL << (MySqlParser::ST_BUFFER - 893))
      | (1ULL << (MySqlParser::ST_CENTROID - 893))
      | (1ULL << (MySqlParser::ST_CONTAINS - 893))
      | (1ULL << (MySqlParser::ST_CROSSES - 893))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 893))
      | (1ULL << (MySqlParser::ST_DIMENSION - 893))
      | (1ULL << (MySqlParser::ST_DISJOINT - 893))
      | (1ULL << (MySqlParser::ST_DISTANCE - 893))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 893))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 893))
      | (1ULL << (MySqlParser::ST_EQUALS - 893))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 893))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 893))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 893))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 893))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 893))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 893))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 893))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 893))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 893))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 893))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 893))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 893))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 893))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 893))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 893))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 893))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 893))
      | (1ULL << (MySqlParser::ST_POINTN - 893)))) != 0) || ((((_la - 957) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 957)) & ((1ULL << (MySqlParser::ST_POLYFROMTEXT - 957))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 957))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 957))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 957))
      | (1ULL << (MySqlParser::ST_SRID - 957))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 957))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 957))
      | (1ULL << (MySqlParser::ST_TOUCHES - 957))
      | (1ULL << (MySqlParser::ST_UNION - 957))
      | (1ULL << (MySqlParser::ST_WITHIN - 957))
      | (1ULL << (MySqlParser::ST_X - 957))
      | (1ULL << (MySqlParser::ST_Y - 957))
      | (1ULL << (MySqlParser::SUBDATE - 957))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 957))
      | (1ULL << (MySqlParser::SUBTIME - 957))
      | (1ULL << (MySqlParser::SYSTEM_USER - 957))
      | (1ULL << (MySqlParser::TAN - 957))
      | (1ULL << (MySqlParser::TIMEDIFF - 957))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 957))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 957))
      | (1ULL << (MySqlParser::TIME_FORMAT - 957))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 957))
      | (1ULL << (MySqlParser::TOUCHES - 957))
      | (1ULL << (MySqlParser::TO_BASE64 - 957))
      | (1ULL << (MySqlParser::TO_DAYS - 957))
      | (1ULL << (MySqlParser::TO_SECONDS - 957))
      | (1ULL << (MySqlParser::UCASE - 957))
      | (1ULL << (MySqlParser::UNCOMPRESS - 957))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 957))
      | (1ULL << (MySqlParser::UNHEX - 957))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 957))
      | (1ULL << (MySqlParser::UPDATEXML - 957))
      | (1ULL << (MySqlParser::UPPER - 957))
      | (1ULL << (MySqlParser::UUID - 957))
      | (1ULL << (MySqlParser::UUID_SHORT - 957))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 957))
      | (1ULL << (MySqlParser::VERSION - 957))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 957))
      | (1ULL << (MySqlParser::WEEKDAY - 957))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 957))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 957))
      | (1ULL << (MySqlParser::WITHIN - 957))
      | (1ULL << (MySqlParser::YEARWEEK - 957))
      | (1ULL << (MySqlParser::Y_FUNCTION - 957))
      | (1ULL << (MySqlParser::X_FUNCTION - 957))
      | (1ULL << (MySqlParser::MOD - 957)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MySqlParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 302: return expressionSempred(dynamic_cast<ExpressionContext *>(context), predicateIndex);
    case 303: return predicateSempred(dynamic_cast<PredicateContext *>(context), predicateIndex);
    case 304: return expressionAtomSempred(dynamic_cast<ExpressionAtomContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MySqlParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool MySqlParser::predicateSempred(PredicateContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 8);
    case 2: return precpred(_ctx, 6);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 10);
    case 6: return precpred(_ctx, 9);
    case 7: return precpred(_ctx, 7);
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MySqlParser::expressionAtomSempred(ExpressionAtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 3);
    case 11: return precpred(_ctx, 2);
    case 12: return precpred(_ctx, 1);
    case 13: return precpred(_ctx, 12);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> MySqlParser::_decisionToDFA;
atn::PredictionContextCache MySqlParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN MySqlParser::_atn;
std::vector<uint16_t> MySqlParser::_serializedATN;

std::vector<std::string> MySqlParser::_ruleNames = {
  "root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
  "dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
  "compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
  "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
  "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
  "createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
  "ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
  "intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
  "functionParameter", "routineOption", "serverOption", "createDefinitions", 
  "createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
  "referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
  "tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
  "subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
  "partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
  "alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
  "alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
  "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
  "dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
  "dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
  "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
  "insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
  "selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
  "assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
  "handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
  "handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
  "orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
  "indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
  "querySpecification", "querySpecificationNointo", "unionParenthesis", 
  "unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
  "selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
  "havingClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", 
  "beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
  "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
  "setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
  "transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
  "purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
  "startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
  "decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
  "tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
  "xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
  "xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
  "deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
  "ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
  "repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
  "declareVariable", "declareCondition", "declareCursor", "declareHandler", 
  "handlerConditionValue", "procedureSqlStatement", "caseAlternative", "elifAlternative", 
  "alterUser", "createUser", "dropUser", "grantStatement", "grantProxy", 
  "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
  "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
  "userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
  "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
  "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
  "installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
  "showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
  "showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
  "killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
  "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
  "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
  "signalStatement", "resignalStatement", "signalConditionInformation", 
  "diagnosticsStatement", "diagnosticsConditionInformationName", "describeObjectClause", 
  "fullId", "tableName", "fullColumnName", "indexColumnName", "userName", 
  "mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
  "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
  "fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
  "nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
  "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
  "uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
  "constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
  "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
  "caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
  "aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
  "functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
  "unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
  "mathOperator", "jsonOperator", "charsetNameBase", "transactionLevelBase", 
  "privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
  "functionNameBase"
};

std::vector<std::string> MySqlParser::_literalNames = {
  "", "", "", "", "", "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", 
  "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
  "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
  "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
  "'CONVERT'", "", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
  "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
  "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
  "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
  "'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
  "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
  "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", 
  "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", 
  "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
  "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
  "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
  "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MODIFIES'", 
  "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", 
  "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
  "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
  "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
  "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
  "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
  "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
  "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
  "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
  "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", 
  "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
  "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", 
  "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
  "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", 
  "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
  "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
  "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
  "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
  "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
  "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
  "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
  "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
  "'DAY_MICROSECOND'", "'JSON_VALID'", "'JSON_SCHEMA_VALID'", "'AVG'", "'BIT_AND'", 
  "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", "'MIN'", 
  "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", 
  "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
  "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", 
  "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", 
  "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
  "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", 
  "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
  "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
  "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
  "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", 
  "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
  "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
  "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", 
  "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
  "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", 
  "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
  "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", 
  "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
  "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
  "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
  "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
  "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
  "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
  "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", 
  "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", 
  "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", 
  "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
  "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", 
  "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
  "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
  "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
  "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
  "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
  "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
  "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
  "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
  "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", 
  "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
  "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", 
  "'NONE'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", 
  "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", 
  "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
  "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", 
  "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
  "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
  "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", 
  "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
  "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
  "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
  "'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNS'", 
  "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
  "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
  "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
  "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
  "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", 
  "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
  "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
  "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", 
  "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", 
  "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
  "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", 
  "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", 
  "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
  "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
  "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
  "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", 
  "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
  "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
  "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
  "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
  "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
  "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
  "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
  "'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
  "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
  "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
  "", "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
  "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
  "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
  "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
  "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
  "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
  "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
  "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
  "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
  "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
  "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
  "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
  "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
  "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
  "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
  "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
  "'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
  "'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
  "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
  "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
  "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
  "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
  "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
  "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
  "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
  "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
  "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
  "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
  "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
  "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
  "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
  "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
  "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
  "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
  "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
  "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
  "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
  "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
  "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
  "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
  "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
  "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
  "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
  "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
  "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
  "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
  "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
  "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
  "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
  "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
  "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
  "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
  "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", 
  "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
  "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
  "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'", 
  "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
  "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
  "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", 
  "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", 
  "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
  "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
  "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
  "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
  "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
  "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
  "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
  "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
  "'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
  "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
  "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
  "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
  "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
  "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
  "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
  "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", 
  "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", 
  "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
  "'''", "'\"'", "'`'", "':'"
};

std::vector<std::string> MySqlParser::_symbolicNames = {
  "", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD", 
  "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
  "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
  "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
  "CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
  "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
  "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
  "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
  "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", 
  "GROUP", "HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE", 
  "INNER", "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", 
  "KEY", "KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
  "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
  "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
  "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", 
  "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", 
  "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
  "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", 
  "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
  "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", 
  "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", 
  "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", 
  "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", 
  "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
  "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", 
  "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", 
  "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", 
  "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", 
  "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", 
  "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
  "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
  "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
  "HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_VALID", "JSON_SCHEMA_VALID", 
  "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", 
  "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
  "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
  "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
  "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", 
  "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
  "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
  "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
  "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", 
  "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", 
  "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
  "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
  "CONCURRENT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
  "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
  "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", 
  "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", 
  "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", 
  "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", 
  "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", 
  "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
  "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
  "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", 
  "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", 
  "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
  "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", 
  "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", 
  "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
  "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
  "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
  "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
  "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
  "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
  "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", 
  "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
  "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", 
  "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
  "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
  "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", 
  "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
  "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
  "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
  "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
  "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
  "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
  "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLE", 
  "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
  "SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
  "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
  "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
  "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
  "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
  "STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
  "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
  "TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
  "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
  "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
  "VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
  "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", 
  "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", 
  "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
  "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
  "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
  "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
  "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
  "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
  "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
  "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
  "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
  "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
  "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
  "CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
  "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", 
  "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", 
  "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
  "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
  "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", 
  "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
  "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
  "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
  "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
  "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
  "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
  "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
  "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
  "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
  "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
  "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
  "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
  "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
  "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
  "ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
  "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
  "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
  "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
  "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
  "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
  "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
  "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
  "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
  "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
  "LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
  "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
  "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
  "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
  "MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
  "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
  "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
  "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
  "NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
  "PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
  "POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
  "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
  "RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
  "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
  "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
  "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
  "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
  "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
  "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
  "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
  "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
  "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
  "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
  "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
  "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
  "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
  "ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
  "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
  "SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
  "TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
  "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
  "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
  "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
  "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
  "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
  "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
  "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
  "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
  "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
  "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
  "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
  "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
  "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
  "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
  "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
};

dfa::Vocabulary MySqlParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> MySqlParser::_tokenNames;

MySqlParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x423, 0x1942, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
       0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 
       0x9, 0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 
       0xa, 0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 
       0x4, 0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 
       0x11, 0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 
       0x14, 0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 
       0x17, 0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 
       0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 
       0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 
       0x20, 0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 
       0x23, 0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 
       0x26, 0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 
       0x29, 0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 
       0x2c, 0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 
       0x2f, 0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 
       0x32, 0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 
       0x35, 0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 
       0x38, 0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 
       0x3b, 0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 
       0x3e, 0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 
       0x41, 0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 
       0x44, 0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 
       0x47, 0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 
       0x4a, 0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 
       0x4d, 0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 
       0x50, 0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 
       0x53, 0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 
       0x56, 0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 
       0x59, 0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 
       0x5c, 0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 
       0x5f, 0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 
       0x62, 0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 
       0x65, 0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 
       0x68, 0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 
       0x6b, 0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 
       0x6e, 0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 
       0x71, 0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 
       0x74, 0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 
       0x77, 0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 
       0x7a, 0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 
       0x7d, 0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 
       0x80, 0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 
       0x83, 0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 
       0x86, 0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 
       0x89, 0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 
       0x8c, 0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 
       0x8f, 0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 
       0x92, 0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 
       0x95, 0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 
       0x98, 0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 
       0x9b, 0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 
       0x9e, 0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 
       0xa1, 0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 
       0xa4, 0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 
       0xa7, 0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 
       0xaa, 0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 
       0xad, 0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 
       0xb0, 0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 
       0xb3, 0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 
       0xb6, 0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 
       0xb9, 0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 
       0xbc, 0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 
       0xbf, 0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 
       0xc2, 0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 
       0xc5, 0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 
       0xc8, 0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 
       0xcb, 0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 
       0xce, 0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 
       0xd1, 0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 
       0xd4, 0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 
       0xd7, 0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 
       0xda, 0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 
       0xdd, 0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 
       0xe0, 0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 
       0xe3, 0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 
       0xe6, 0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 
       0xe9, 0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 
       0xec, 0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 
       0xef, 0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 
       0xf2, 0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 
       0xf5, 0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 
       0xf8, 0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 
       0xfb, 0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 
       0xfe, 0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 
       0x101, 0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 
       0x4, 0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 
       0x106, 0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 
       0x9, 0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 
       0x10c, 0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 
       0x4, 0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 
       0x111, 0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 
       0x9, 0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 
       0x117, 0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 
       0x4, 0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x4, 0x11c, 0x9, 
       0x11c, 0x4, 0x11d, 0x9, 0x11d, 0x4, 0x11e, 0x9, 0x11e, 0x4, 0x11f, 
       0x9, 0x11f, 0x4, 0x120, 0x9, 0x120, 0x4, 0x121, 0x9, 0x121, 0x4, 
       0x122, 0x9, 0x122, 0x4, 0x123, 0x9, 0x123, 0x4, 0x124, 0x9, 0x124, 
       0x4, 0x125, 0x9, 0x125, 0x4, 0x126, 0x9, 0x126, 0x4, 0x127, 0x9, 
       0x127, 0x4, 0x128, 0x9, 0x128, 0x4, 0x129, 0x9, 0x129, 0x4, 0x12a, 
       0x9, 0x12a, 0x4, 0x12b, 0x9, 0x12b, 0x4, 0x12c, 0x9, 0x12c, 0x4, 
       0x12d, 0x9, 0x12d, 0x4, 0x12e, 0x9, 0x12e, 0x4, 0x12f, 0x9, 0x12f, 
       0x4, 0x130, 0x9, 0x130, 0x4, 0x131, 0x9, 0x131, 0x4, 0x132, 0x9, 
       0x132, 0x4, 0x133, 0x9, 0x133, 0x4, 0x134, 0x9, 0x134, 0x4, 0x135, 
       0x9, 0x135, 0x4, 0x136, 0x9, 0x136, 0x4, 0x137, 0x9, 0x137, 0x4, 
       0x138, 0x9, 0x138, 0x4, 0x139, 0x9, 0x139, 0x4, 0x13a, 0x9, 0x13a, 
       0x4, 0x13b, 0x9, 0x13b, 0x4, 0x13c, 0x9, 0x13c, 0x4, 0x13d, 0x9, 
       0x13d, 0x4, 0x13e, 0x9, 0x13e, 0x4, 0x13f, 0x9, 0x13f, 0x3, 0x2, 
       0x5, 0x2, 0x280, 0xa, 0x2, 0x3, 0x2, 0x5, 0x2, 0x283, 0xa, 0x2, 0x3, 
       0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x289, 0xa, 0x3, 0x3, 
       0x3, 0x5, 0x3, 0x28c, 0xa, 0x3, 0x3, 0x3, 0x7, 0x3, 0x28f, 0xa, 0x3, 
       0xc, 0x3, 0xe, 0x3, 0x292, 0xb, 0x3, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 
       0x296, 0xa, 0x3, 0x3, 0x3, 0x5, 0x3, 0x299, 0xa, 0x3, 0x3, 0x3, 0x5, 
       0x3, 0x29c, 0xa, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 
       0x4, 0x3, 0x4, 0x3, 0x4, 0x5, 0x4, 0x2a5, 0xa, 0x4, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x5, 0x6, 0x2cc, 0xa, 0x6, 0x3, 0x7, 
       0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 
       0x7, 0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x2d8, 0xa, 0x7, 0x3, 0x8, 0x3, 
       0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 
       0x3, 0x8, 0x5, 0x8, 0x2e3, 0xa, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 
       0x2f4, 0xa, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 0x2f9, 0xa, 
       0xa, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 
       0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x5, 0xb, 0x305, 0xa, 0xb, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 
       0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 
       0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x5, 0xc, 
       0x320, 0xa, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 
       0x3, 0xd, 0x3, 0xd, 0x5, 0xd, 0x329, 0xa, 0xd, 0x3, 0xe, 0x3, 0xe, 
       0x3, 0xe, 0x5, 0xe, 0x32e, 0xa, 0xe, 0x3, 0xe, 0x3, 0xe, 0x7, 0xe, 
       0x332, 0xa, 0xe, 0xc, 0xe, 0xe, 0xe, 0x335, 0xb, 0xe, 0x3, 0xf, 0x3, 
       0xf, 0x5, 0xf, 0x339, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x33d, 
       0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x5, 0xf, 0x346, 0xa, 0xf, 0x3, 0xf, 0x5, 0xf, 0x349, 
       0xa, 0xf, 0x3, 0xf, 0x5, 0xf, 0x34c, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 
       0x5, 0xf, 0x350, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0x10, 
       0x3, 0x10, 0x5, 0x10, 0x357, 0xa, 0x10, 0x3, 0x10, 0x5, 0x10, 0x35a, 
       0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x35f, 0xa, 
       0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x7, 0x10, 0x365, 
       0xa, 0x10, 0xc, 0x10, 0xe, 0x10, 0x368, 0xb, 0x10, 0x3, 0x10, 0x3, 
       0x10, 0x5, 0x10, 0x36c, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 
       0x5, 0x10, 0x371, 0xa, 0x10, 0x3, 0x10, 0x7, 0x10, 0x374, 0xa, 0x10, 
       0xc, 0x10, 0xe, 0x10, 0x377, 0xb, 0x10, 0x3, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x5, 0x11, 0x382, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x385, 0xa, 
       0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x389, 0xa, 0x11, 0x3, 0x11, 
       0x5, 0x11, 0x38c, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x390, 
       0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x393, 0xa, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x5, 0x11, 0x397, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x39a, 0xa, 
       0x11, 0x3, 0x11, 0x5, 0x11, 0x39d, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 
       0x5, 0x11, 0x3a1, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x3a4, 0xa, 0x11, 
       0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x3a8, 0xa, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x3ae, 0xa, 0x12, 0x3, 0x12, 
       0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x5, 0x12, 0x3b4, 0xa, 0x12, 0x3, 
       0x12, 0x3, 0x12, 0x7, 0x12, 0x3b8, 0xa, 0x12, 0xc, 0x12, 0xe, 0x12, 
       0x3bb, 0xb, 0x12, 0x3, 0x12, 0x3, 0x12, 0x7, 0x12, 0x3bf, 0xa, 0x12, 
       0xc, 0x12, 0xe, 0x12, 0x3c2, 0xb, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 
       0x13, 0x3, 0x13, 0x5, 0x13, 0x3c8, 0xa, 0x13, 0x3, 0x13, 0x3, 0x13, 
       0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x3ce, 0xa, 0x13, 0x3, 0x13, 0x3, 
       0x13, 0x7, 0x13, 0x3d2, 0xa, 0x13, 0xc, 0x13, 0xe, 0x13, 0x3d5, 0xb, 
       0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x7, 0x13, 0x3db, 
       0xa, 0x13, 0xc, 0x13, 0xe, 0x13, 0x3de, 0xb, 0x13, 0x3, 0x13, 0x3, 
       0x13, 0x5, 0x13, 0x3e2, 0xa, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x7, 0x14, 0x3f0, 0xa, 0x14, 0xc, 
       0x14, 0xe, 0x14, 0x3f3, 0xb, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x3f9, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x3fd, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x407, 0xa, 
       0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x40b, 0xa, 0x15, 0x3, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x40f, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x413, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x417, 0xa, 
       0x15, 0x3, 0x15, 0x7, 0x15, 0x41a, 0xa, 0x15, 0xc, 0x15, 0xe, 0x15, 
       0x41d, 0xb, 0x15, 0x5, 0x15, 0x41f, 0xa, 0x15, 0x3, 0x15, 0x5, 0x15, 
       0x422, 0xa, 0x15, 0x3, 0x15, 0x5, 0x15, 0x425, 0xa, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x428, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 
       0x15, 0x5, 0x15, 0x42e, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 
       0x432, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x438, 0xa, 0x15, 0x3, 0x15, 0x7, 0x15, 0x43b, 0xa, 0x15, 0xc, 
       0x15, 0xe, 0x15, 0x43e, 0xb, 0x15, 0x5, 0x15, 0x440, 0xa, 0x15, 0x3, 
       0x15, 0x5, 0x15, 0x443, 0xa, 0x15, 0x5, 0x15, 0x445, 0xa, 0x15, 0x3, 
       0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 
       0x16, 0x3, 0x16, 0x3, 0x16, 0x5, 0x16, 0x450, 0xa, 0x16, 0x3, 0x16, 
       0x3, 0x16, 0x5, 0x16, 0x454, 0xa, 0x16, 0x3, 0x16, 0x5, 0x16, 0x457, 
       0xa, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x5, 0x17, 0x465, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x468, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x46c, 0xa, 0x17, 0x3, 
       0x17, 0x5, 0x17, 0x46f, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 
       0x473, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x476, 0xa, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x5, 0x17, 0x47a, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x47d, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x481, 0xa, 0x17, 0x3, 
       0x17, 0x5, 0x17, 0x484, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x487, 0xa, 
       0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x48b, 0xa, 0x17, 0x3, 0x17, 
       0x5, 0x17, 0x48e, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x492, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 
       0x498, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x5, 0x18, 0x4a5, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 
       0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x4ac, 0xa, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x4b1, 0xa, 0x19, 0x3, 0x19, 0x5, 0x19, 
       0x4b4, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x4b9, 
       0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 
       0x3, 0x19, 0x5, 0x19, 0x4c1, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x4c7, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 
       0x5, 0x19, 0x4cb, 0xa, 0x19, 0x3, 0x1a, 0x5, 0x1a, 0x4ce, 0xa, 0x1a, 
       0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x4d3, 0xa, 0x1a, 0x3, 
       0x1a, 0x5, 0x1a, 0x4d6, 0xa, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 
       0x4da, 0xa, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x4dd, 0xa, 0x1a, 0x3, 0x1a, 
       0x3, 0x1a, 0x5, 0x1a, 0x4e1, 0xa, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x4e4, 
       0xa, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 
       0x3, 0x1b, 0x5, 0x1b, 0x4ec, 0xa, 0x1b, 0x5, 0x1b, 0x4ee, 0xa, 0x1b, 
       0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x7, 0x1c, 0x4f3, 0xa, 0x1c, 0xc, 
       0x1c, 0xe, 0x1c, 0x4f6, 0xb, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x5, 0x1c, 0x4fb, 0xa, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 
       0x1c, 0x7, 0x1c, 0x501, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x504, 0xb, 
       0x1c, 0x5, 0x1c, 0x506, 0xa, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x7, 0x1c, 0x50b, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x50e, 0xb, 0x1c, 
       0x5, 0x1c, 0x510, 0xa, 0x1c, 0x5, 0x1c, 0x512, 0xa, 0x1c, 0x3, 0x1d, 
       0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x518, 0xa, 0x1d, 0x3, 
       0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x51e, 0xa, 0x1e, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 
       0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 
       0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x5, 0x1f, 0x52f, 0xa, 0x1f, 0x3, 
       0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 0x20, 0x536, 
       0xa, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x22, 0x3, 0x22, 
       0x5, 0x22, 0x53d, 0xa, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 
       0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x5, 
       0x22, 0x548, 0xa, 0x22, 0x3, 0x23, 0x5, 0x23, 0x54b, 0xa, 0x23, 0x3, 
       0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 
       0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x5, 0x25, 0x558, 
       0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 
       0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 
       0x5, 0x25, 0x565, 0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x5, 
       0x25, 0x56a, 0xa, 0x25, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x57a, 0xa, 
       0x26, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x7, 0x27, 0x580, 
       0xa, 0x27, 0xc, 0x27, 0xe, 0x27, 0x583, 0xb, 0x27, 0x3, 0x27, 0x3, 
       0x27, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 0x5, 
       0x28, 0x58c, 0xa, 0x28, 0x3, 0x29, 0x3, 0x29, 0x7, 0x29, 0x590, 0xa, 
       0x29, 0xc, 0x29, 0xe, 0x29, 0x593, 0xb, 0x29, 0x3, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x59c, 0xa, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x59f, 0xa, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x5a4, 0xa, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x5b1, 0xa, 0x2a, 
       0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x5b8, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x5, 0x2a, 0x5bf, 0xa, 0x2a, 0x5, 0x2a, 0x5c1, 0xa, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x5c8, 
       0xa, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5cc, 0xa, 0x2b, 0x5, 
       0x2b, 0x5ce, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 
       0x5d3, 0xa, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5d6, 0xa, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x7, 0x2b, 0x5da, 0xa, 0x2b, 0xc, 0x2b, 0xe, 0x2b, 0x5dd, 
       0xb, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5e1, 0xa, 0x2b, 0x5, 
       0x2b, 0x5e3, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5e7, 0xa, 
       0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5ea, 0xa, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 
       0x5ed, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x7, 0x2b, 0x5f1, 0xa, 0x2b, 
       0xc, 0x2b, 0xe, 0x2b, 0x5f4, 0xb, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 
       0x2b, 0x5f8, 0xa, 0x2b, 0x5, 0x2b, 0x5fa, 0xa, 0x2b, 0x3, 0x2b, 0x3, 
       0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5ff, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x606, 0xa, 0x2b, 0x5, 
       0x2b, 0x608, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 
       0x3, 0x2b, 0x5, 0x2b, 0x60f, 0xa, 0x2b, 0x3, 0x2c, 0x3, 0x2c, 0x3, 
       0x2c, 0x5, 0x2c, 0x614, 0xa, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 0x5, 0x2c, 
       0x618, 0xa, 0x2c, 0x3, 0x2c, 0x5, 0x2c, 0x61b, 0xa, 0x2c, 0x3, 0x2d, 
       0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x5, 0x2d, 
       0x623, 0xa, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 
       0x2d, 0x3, 0x2d, 0x5, 0x2d, 0x62b, 0xa, 0x2d, 0x5, 0x2d, 0x62d, 0xa, 
       0x2d, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x5, 0x2e, 0x635, 0xa, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 
       0x639, 0xa, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x63c, 0xa, 0x2f, 0x3, 0x2f, 
       0x3, 0x2f, 0x7, 0x2f, 0x640, 0xa, 0x2f, 0xc, 0x2f, 0xe, 0x2f, 0x643, 
       0xb, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x647, 0xa, 0x2f, 0x3, 
       0x2f, 0x5, 0x2f, 0x64a, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x7, 0x2f, 
       0x64e, 0xa, 0x2f, 0xc, 0x2f, 0xe, 0x2f, 0x651, 0xb, 0x2f, 0x5, 0x2f, 
       0x653, 0xa, 0x2f, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x657, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x65c, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x661, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x665, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x5, 0x30, 0x66a, 0xa, 0x30, 0x3, 0x30, 0x5, 0x30, 0x66d, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x671, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x675, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 
       0x30, 0x679, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x67d, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x682, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x687, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x68c, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x692, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x697, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x69c, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6a2, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6a7, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x5, 0x30, 0x6ac, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x6b1, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x5, 0x30, 0x6b6, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x5, 0x30, 0x6bb, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 
       0x30, 0x6c0, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 
       0x6c5, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6ca, 
       0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6cf, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6d4, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6da, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6df, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x6e5, 0xa, 
       0x30, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x32, 0x3, 0x32, 0x3, 
       0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x6ef, 0xa, 0x32, 0x3, 0x32, 
       0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x6f6, 0xa, 
       0x32, 0x5, 0x32, 0x6f8, 0xa, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 
       0x3, 0x32, 0x7, 0x32, 0x6fe, 0xa, 0x32, 0xc, 0x32, 0xe, 0x32, 0x701, 
       0xb, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x705, 0xa, 0x32, 0x3, 
       0x33, 0x5, 0x33, 0x708, 0xa, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x710, 0xa, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x716, 0xa, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x726, 0xa, 0x33, 0x3, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x732, 0xa, 0x33, 0x5, 0x33, 
       0x734, 0xa, 0x33, 0x3, 0x34, 0x5, 0x34, 0x737, 0xa, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 
       0x73f, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 
       0x34, 0x745, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x5, 0x34, 0x74b, 0xa, 0x34, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x756, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x759, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x7, 0x35, 0x75d, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 
       0x760, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x766, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x769, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x5, 0x35, 0x76d, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 
       0x776, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x779, 0xb, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x77f, 0xa, 0x35, 0xc, 
       0x35, 0xe, 0x35, 0x782, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 
       0x786, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x790, 0xa, 0x35, 
       0xc, 0x35, 0xe, 0x35, 0x793, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x797, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x79a, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x7a0, 0xa, 0x35, 
       0xc, 0x35, 0xe, 0x35, 0x7a3, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 
       0x35, 0x7a7, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x7b1, 0xa, 
       0x35, 0xc, 0x35, 0xe, 0x35, 0x7b4, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x7, 0x35, 0x7b8, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x7bb, 0xb, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x7c1, 0xa, 
       0x35, 0xc, 0x35, 0xe, 0x35, 0x7c4, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x5, 0x35, 0x7c8, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 
       0x35, 0x7cd, 0xa, 0x35, 0xc, 0x35, 0xe, 0x35, 0x7d0, 0xb, 0x35, 0x3, 
       0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x7d6, 0xa, 0x35, 
       0xc, 0x35, 0xe, 0x35, 0x7d9, 0xb, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 
       0x35, 0x7dd, 0xa, 0x35, 0x5, 0x35, 0x7df, 0xa, 0x35, 0x3, 0x36, 0x3, 
       0x36, 0x3, 0x36, 0x5, 0x36, 0x7e4, 0xa, 0x36, 0x3, 0x37, 0x3, 0x37, 
       0x3, 0x37, 0x3, 0x37, 0x6, 0x37, 0x7ea, 0xa, 0x37, 0xd, 0x37, 0xe, 
       0x37, 0x7eb, 0x3, 0x37, 0x3, 0x37, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 
       0x7, 0x38, 0x7f3, 0xa, 0x38, 0xc, 0x38, 0xe, 0x38, 0x7f6, 0xb, 0x38, 
       0x3, 0x39, 0x5, 0x39, 0x7f9, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 
       0x39, 0x7fd, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 
       0x802, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 
       0x39, 0x808, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 
       0x5, 0x39, 0x80e, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 
       0x39, 0x813, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 
       0x818, 0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x81d, 
       0xa, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x822, 0xa, 
       0x39, 0x3, 0x39, 0x5, 0x39, 0x825, 0xa, 0x39, 0x3, 0x3a, 0x3, 0x3a, 
       0x3, 0x3a, 0x5, 0x3a, 0x82a, 0xa, 0x3a, 0x3, 0x3a, 0x6, 0x3a, 0x82d, 
       0xa, 0x3a, 0xd, 0x3a, 0xe, 0x3a, 0x82e, 0x3, 0x3a, 0x3, 0x3a, 0x3, 
       0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 
       0x3a, 0x839, 0xa, 0x3a, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x83d, 0xa, 
       0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 
       0x3b, 0x844, 0xa, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 
       0x849, 0xa, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x84c, 0xa, 0x3b, 0x3, 0x3b, 
       0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x851, 0xa, 0x3b, 0x3, 0x3b, 0x5, 
       0x3b, 0x854, 0xa, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x858, 0xa, 
       0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x85c, 0xa, 0x3b, 0x3, 0x3c, 
       0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x7, 0x3c, 0x862, 0xa, 0x3c, 0xc, 
       0x3c, 0xe, 0x3c, 0x865, 0xb, 0x3c, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 
       0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3e, 0x3, 0x3e, 
       0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 
       0x3, 0x3e, 0x5, 0x3e, 0x877, 0xa, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x87a, 
       0xa, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x87d, 0xa, 0x3e, 0x3, 0x3e, 0x3, 
       0x3e, 0x5, 0x3e, 0x881, 0xa, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 
       0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x7, 0x3f, 0x889, 0xa, 0x3f, 0xc, 
       0x3f, 0xe, 0x3f, 0x88c, 0xb, 0x3f, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 
       0x896, 0xa, 0x40, 0xc, 0x40, 0xe, 0x40, 0x899, 0xb, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x41, 0x3, 0x41, 0x5, 0x41, 0x89f, 0xa, 0x41, 0x3, 
       0x41, 0x5, 0x41, 0x8a2, 0xa, 0x41, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 
       0x3, 0x41, 0x3, 0x41, 0x7, 0x41, 0x8a9, 0xa, 0x41, 0xc, 0x41, 0xe, 
       0x41, 0x8ac, 0xb, 0x41, 0x5, 0x41, 0x8ae, 0xa, 0x41, 0x3, 0x41, 0x5, 
       0x41, 0x8b1, 0xa, 0x41, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 
       0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 
       0x8bc, 0xa, 0x42, 0x3, 0x42, 0x5, 0x42, 0x8bf, 0xa, 0x42, 0x3, 0x42, 
       0x3, 0x42, 0x5, 0x42, 0x8c3, 0xa, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 
       0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x8cb, 0xa, 0x43, 
       0x3, 0x43, 0x5, 0x43, 0x8ce, 0xa, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 
       0x43, 0x5, 0x43, 0x8d3, 0xa, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 
       0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x8db, 0xa, 0x43, 0x3, 
       0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x8e1, 0xa, 0x43, 
       0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x8e5, 0xa, 0x43, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x8e9, 0xa, 0x44, 0x3, 0x44, 0x7, 0x44, 0x8ec, 0xa, 
       0x44, 0xc, 0x44, 0xe, 0x44, 0x8ef, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x8f3, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x5, 0x44, 0x8fa, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x8fe, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x907, 0xa, 0x44, 
       0xc, 0x44, 0xe, 0x44, 0x90a, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x911, 0xa, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x914, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x918, 
       0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x91b, 0xb, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x5, 0x44, 0x920, 0xa, 0x44, 0x5, 0x44, 0x922, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x927, 0xa, 0x44, 
       0x3, 0x44, 0x5, 0x44, 0x92a, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 
       0x44, 0x92e, 0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0x931, 0xb, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x936, 0xa, 0x44, 0x5, 0x44, 
       0x938, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x93c, 0xa, 0x44, 
       0x3, 0x44, 0x5, 0x44, 0x93f, 0xa, 0x44, 0x3, 0x44, 0x5, 0x44, 0x942, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x946, 0xa, 0x44, 0xc, 
       0x44, 0xe, 0x44, 0x949, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x94e, 0xa, 0x44, 0x3, 0x44, 0x5, 0x44, 0x951, 0xa, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x955, 0xa, 0x44, 0xc, 0x44, 0xe, 
       0x44, 0x958, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 
       0x95d, 0xa, 0x44, 0x5, 0x44, 0x95f, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x5, 0x44, 0x964, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x96c, 0xa, 0x44, 
       0x5, 0x44, 0x96e, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x977, 0xa, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x97c, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x984, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x988, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x5, 0x44, 0x990, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 
       0x99a, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x99f, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x9a6, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9aa, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9ae, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x9ce, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9d2, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9de, 
       0xa, 0x44, 0x3, 0x44, 0x5, 0x44, 0x9e1, 0xa, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0x9ea, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0x9f9, 0xa, 0x44, 0xc, 
       0x44, 0xe, 0x44, 0x9fc, 0xb, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0xa07, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x5, 0x44, 0xa0e, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa15, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x7, 0x44, 0xa22, 
       0xa, 0x44, 0xc, 0x44, 0xe, 0x44, 0xa25, 0xb, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa31, 0xa, 0x44, 0x3, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa37, 0xa, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa3d, 0xa, 0x44, 
       0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa43, 0xa, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 0xa49, 
       0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 0x44, 
       0xa4f, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x5, 
       0x44, 0xa55, 0xa, 0x44, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 
       0xa5a, 0xa, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 0x46, 0x3, 0x46, 0x3, 
       0x46, 0x5, 0x46, 0xa61, 0xa, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x47, 
       0x3, 0x47, 0x3, 0x47, 0x5, 0x47, 0xa68, 0xa, 0x47, 0x3, 0x47, 0x3, 
       0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x5, 0x47, 0xa6f, 0xa, 0x47, 
       0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x5, 0x47, 0xa74, 0xa, 0x47, 0x3, 
       0x47, 0x7, 0x47, 0xa77, 0xa, 0x47, 0xc, 0x47, 0xe, 0x47, 0xa7a, 0xb, 
       0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 
       0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x5, 
       0x49, 0xa87, 0xa, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x4a, 0x3, 0x4a, 
       0x3, 0x4a, 0x5, 0x4a, 0xa8e, 0xa, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 
       0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x5, 0x4b, 0xa95, 0xa, 0x4b, 0x3, 0x4b, 
       0x3, 0x4b, 0x3, 0x4c, 0x3, 0x4c, 0x5, 0x4c, 0xa9b, 0xa, 0x4c, 0x3, 
       0x4c, 0x3, 0x4c, 0x5, 0x4c, 0xa9f, 0xa, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 
       0x5, 0x4c, 0xaa3, 0xa, 0x4c, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 
       0x4d, 0x3, 0x4d, 0x5, 0x4d, 0xaaa, 0xa, 0x4d, 0x3, 0x4d, 0x5, 0x4d, 
       0xaad, 0xa, 0x4d, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0xab2, 
       0xa, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 
       0x5, 0x4f, 0xab9, 0xa, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x7, 
       0x4f, 0xabe, 0xa, 0x4f, 0xc, 0x4f, 0xe, 0x4f, 0xac1, 0xb, 0x4f, 0x3, 
       0x4f, 0x5, 0x4f, 0xac4, 0xa, 0x4f, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 
       0x3, 0x50, 0x3, 0x50, 0x7, 0x50, 0xacb, 0xa, 0x50, 0xc, 0x50, 0xe, 
       0x50, 0xace, 0xb, 0x50, 0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 
       0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0xad6, 0xa, 0x52, 0x3, 0x52, 0x3, 
       0x52, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 
       0x53, 0xadf, 0xa, 0x53, 0x3, 0x53, 0x5, 0x53, 0xae2, 0xa, 0x53, 0x3, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0xae6, 0xa, 0x54, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 
       0xaef, 0xa, 0x56, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0xaf3, 0xa, 0x57, 
       0x3, 0x57, 0x5, 0x57, 0xaf6, 0xa, 0x57, 0x3, 0x57, 0x5, 0x57, 0xaf9, 
       0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 
       0xaff, 0xa, 0x57, 0x3, 0x57, 0x5, 0x57, 0xb02, 0xa, 0x57, 0x3, 0x57, 
       0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0xb08, 0xa, 0x57, 0x3, 
       0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x7, 0x57, 0xb0f, 
       0xa, 0x57, 0xc, 0x57, 0xe, 0x57, 0xb12, 0xb, 0x57, 0x5, 0x57, 0xb14, 
       0xa, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 
       0x3, 0x57, 0x3, 0x57, 0x7, 0x57, 0xb1d, 0xa, 0x57, 0xc, 0x57, 0xe, 
       0x57, 0xb20, 0xb, 0x57, 0x5, 0x57, 0xb22, 0xa, 0x57, 0x3, 0x58, 0x3, 
       0x58, 0x3, 0x58, 0x5, 0x58, 0xb27, 0xa, 0x58, 0x3, 0x58, 0x5, 0x58, 
       0xb2a, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xb2f, 
       0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xb39, 0xa, 0x58, 0x3, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xb3e, 0xa, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x6, 0x58, 0xb42, 0xa, 0x58, 0xd, 0x58, 0xe, 0x58, 0xb43, 
       0x5, 0x58, 0xb46, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x6, 0x58, 0xb4a, 
       0xa, 0x58, 0xd, 0x58, 0xe, 0x58, 0xb4b, 0x5, 0x58, 0xb4e, 0xa, 0x58, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0xb54, 0xa, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x7, 0x58, 0xb5a, 
       0xa, 0x58, 0xc, 0x58, 0xe, 0x58, 0xb5d, 0xb, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x5, 0x58, 0xb61, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x7, 0x58, 0xb67, 0xa, 0x58, 0xc, 0x58, 0xe, 0x58, 0xb6a, 
       0xb, 0x58, 0x5, 0x58, 0xb6c, 0xa, 0x58, 0x3, 0x59, 0x3, 0x59, 0x3, 
       0x59, 0x5, 0x59, 0xb71, 0xa, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb74, 0xa, 
       0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb79, 0xa, 0x59, 
       0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 
       0x5, 0x59, 0xb81, 0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 
       0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb89, 0xa, 0x59, 0x3, 0x59, 
       0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0xb8f, 0xa, 0x59, 0x3, 
       0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x7, 0x59, 0xb95, 0xa, 0x59, 
       0xc, 0x59, 0xe, 0x59, 0xb98, 0xb, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 
       0x59, 0xb9c, 0xa, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 
       0x7, 0x59, 0xba2, 0xa, 0x59, 0xc, 0x59, 0xe, 0x59, 0xba5, 0xb, 0x59, 
       0x5, 0x59, 0xba7, 0xa, 0x59, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0xbab, 
       0xa, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0xbae, 0xa, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0xbb6, 
       0xa, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 
       0xbbc, 0xa, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 
       0x5a, 0x7, 0x5a, 0xbc3, 0xa, 0x5a, 0xc, 0x5a, 0xe, 0x5a, 0xbc6, 0xb, 
       0x5a, 0x5, 0x5a, 0xbc8, 0xa, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 
       0xbcc, 0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbd0, 0xa, 0x5b, 
       0x3, 0x5b, 0x3, 0x5b, 0x6, 0x5b, 0xbd4, 0xa, 0x5b, 0xd, 0x5b, 0xe, 
       0x5b, 0xbd5, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbda, 0xa, 0x5b, 0x3, 
       0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbde, 0xa, 0x5b, 0x5, 0x5b, 0xbe0, 0xa, 
       0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbe3, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 
       0xbe6, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbe9, 0xa, 0x5b, 0x3, 0x5b, 
       0x3, 0x5b, 0x6, 0x5b, 0xbed, 0xa, 0x5b, 0xd, 0x5b, 0xe, 0x5b, 0xbee, 
       0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbf3, 0xa, 0x5b, 0x3, 0x5b, 0x5, 
       0x5b, 0xbf6, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbf9, 0xa, 0x5b, 0x3, 
       0x5b, 0x5, 0x5b, 0xbfc, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xbff, 0xa, 
       0x5b, 0x5, 0x5b, 0xc01, 0xa, 0x5b, 0x3, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 
       0xc05, 0xa, 0x5c, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 
       0x5d, 0xc0b, 0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 
       0x5, 0x5d, 0xc11, 0xa, 0x5d, 0x3, 0x5d, 0x7, 0x5d, 0xc14, 0xa, 0x5d, 
       0xc, 0x5d, 0xe, 0x5d, 0xc17, 0xb, 0x5d, 0x5, 0x5d, 0xc19, 0xa, 0x5d, 
       0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0xc1f, 0xa, 
       0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x5, 0x5f, 0xc23, 0xa, 0x5f, 0x3, 0x60, 
       0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x5, 0x60, 
       0xc2b, 0xa, 0x60, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc2f, 0xa, 0x61, 
       0x3, 0x61, 0x5, 0x61, 0xc32, 0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc35, 
       0xa, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 
       0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc3e, 0xa, 0x61, 0x3, 0x61, 0x3, 
       0x61, 0x5, 0x61, 0xc42, 0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc45, 0xa, 
       0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xc49, 0xa, 0x61, 0x3, 0x62, 
       0x3, 0x62, 0x5, 0x62, 0xc4d, 0xa, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc50, 
       0xa, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc53, 0xa, 0x62, 0x3, 0x62, 0x3, 
       0x62, 0x3, 0x62, 0x5, 0x62, 0xc58, 0xa, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc5e, 0xa, 0x62, 0x7, 0x62, 0xc60, 
       0xa, 0x62, 0xc, 0x62, 0xe, 0x62, 0xc63, 0xb, 0x62, 0x3, 0x62, 0x3, 
       0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x5, 
       0x62, 0xc6c, 0xa, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x5, 0x62, 0xc72, 0xa, 0x62, 0x7, 0x62, 0xc74, 0xa, 0x62, 0xc, 0x62, 
       0xe, 0x62, 0xc77, 0xb, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x5, 
       0x62, 0xc7c, 0xa, 0x62, 0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0xc80, 0xa, 
       0x62, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x5, 0x63, 0xc86, 
       0xa, 0x63, 0x3, 0x63, 0x5, 0x63, 0xc89, 0xa, 0x63, 0x3, 0x64, 0x3, 
       0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 
       0x64, 0x3, 0x64, 0x3, 0x64, 0x5, 0x64, 0xc95, 0xa, 0x64, 0x3, 0x64, 
       0x3, 0x64, 0x5, 0x64, 0xc99, 0xa, 0x64, 0x3, 0x64, 0x3, 0x64, 0x5, 
       0x64, 0xc9d, 0xa, 0x64, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 
       0x3, 0x65, 0x3, 0x65, 0x5, 0x65, 0xca5, 0xa, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x5, 0x65, 0xca9, 0xa, 0x65, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 
       0x3, 0x66, 0x3, 0x67, 0x3, 0x67, 0x5, 0x67, 0xcb1, 0xa, 0x67, 0x3, 
       0x67, 0x5, 0x67, 0xcb4, 0xa, 0x67, 0x3, 0x67, 0x3, 0x67, 0x5, 0x67, 
       0xcb8, 0xa, 0x67, 0x3, 0x67, 0x5, 0x67, 0xcbb, 0xa, 0x67, 0x3, 0x67, 
       0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x7, 0x67, 0xcc1, 0xa, 0x67, 0xc, 
       0x67, 0xe, 0x67, 0xcc4, 0xb, 0x67, 0x3, 0x67, 0x3, 0x67, 0x5, 0x67, 
       0xcc8, 0xa, 0x67, 0x3, 0x67, 0x5, 0x67, 0xccb, 0xa, 0x67, 0x3, 0x67, 
       0x5, 0x67, 0xcce, 0xa, 0x67, 0x3, 0x68, 0x3, 0x68, 0x5, 0x68, 0xcd2, 
       0xa, 0x68, 0x3, 0x68, 0x5, 0x68, 0xcd5, 0xa, 0x68, 0x3, 0x68, 0x3, 
       0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x7, 0x68, 0xcdc, 0xa, 0x68, 
       0xc, 0x68, 0xe, 0x68, 0xcdf, 0xb, 0x68, 0x3, 0x68, 0x3, 0x68, 0x5, 
       0x68, 0xce3, 0xa, 0x68, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 
       0x3, 0x69, 0x7, 0x69, 0xcea, 0xa, 0x69, 0xc, 0x69, 0xe, 0x69, 0xced, 
       0xb, 0x69, 0x3, 0x6a, 0x3, 0x6a, 0x5, 0x6a, 0xcf1, 0xa, 0x6a, 0x3, 
       0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x7, 0x6b, 0xcf6, 0xa, 0x6b, 0xc, 0x6b, 
       0xe, 0x6b, 0xcf9, 0xb, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x7, 0x6c, 0xcfd, 
       0xa, 0x6c, 0xc, 0x6c, 0xe, 0x6c, 0xd00, 0xb, 0x6c, 0x3, 0x6c, 0x3, 
       0x6c, 0x3, 0x6c, 0x7, 0x6c, 0xd05, 0xa, 0x6c, 0xc, 0x6c, 0xe, 0x6c, 
       0xd08, 0xb, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x5, 0x6c, 0xd0c, 0xa, 0x6c, 
       0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x5, 0x6d, 0xd14, 0xa, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0xd17, 0xa, 0x6d, 
       0x3, 0x6d, 0x5, 0x6d, 0xd1a, 0xa, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 
       0x6d, 0x7, 0x6d, 0xd1f, 0xa, 0x6d, 0xc, 0x6d, 0xe, 0x6d, 0xd22, 0xb, 
       0x6d, 0x5, 0x6d, 0xd24, 0xa, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0xd2b, 0xa, 0x6d, 0x3, 0x6d, 0x5, 
       0x6d, 0xd2e, 0xa, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0xd36, 0xa, 0x6d, 0x3, 0x6e, 0x3, 
       0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xd3c, 0xa, 0x6e, 0x3, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 
       0x3, 0x6f, 0x3, 0x6f, 0x5, 0x6f, 0xd47, 0xa, 0x6f, 0x3, 0x70, 0x5, 
       0x70, 0xd4a, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 
       0xd55, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 
       0x70, 0xd5b, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0xd5f, 0xa, 
       0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 
       0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0xd6a, 0xa, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0xd6f, 0xa, 0x70, 0x5, 
       0x70, 0xd71, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0xd75, 0xa, 
       0x70, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 
       0x71, 0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0xd7f, 0xa, 0x71, 0x3, 0x72, 
       0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x5, 0x72, 0xd89, 0xa, 0x72, 0x3, 0x73, 0x3, 0x73, 0x7, 
       0x73, 0xd8d, 0xa, 0x73, 0xc, 0x73, 0xe, 0x73, 0xd90, 0xb, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x5, 0x73, 0xd94, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 
       0xd97, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0xd9a, 0xa, 0x73, 0x3, 0x73, 
       0x5, 0x73, 0xd9d, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0xda0, 0xa, 0x73, 
       0x3, 0x73, 0x5, 0x73, 0xda3, 0xa, 0x73, 0x3, 0x73, 0x3, 0x73, 0x7, 
       0x73, 0xda7, 0xa, 0x73, 0xc, 0x73, 0xe, 0x73, 0xdaa, 0xb, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x5, 0x73, 0xdae, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 
       0xdb1, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0xdb4, 0xa, 0x73, 0x3, 0x73, 
       0x5, 0x73, 0xdb7, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0xdba, 0xa, 0x73, 
       0x3, 0x73, 0x5, 0x73, 0xdbd, 0xa, 0x73, 0x5, 0x73, 0xdbf, 0xa, 0x73, 
       0x3, 0x74, 0x3, 0x74, 0x7, 0x74, 0xdc3, 0xa, 0x74, 0xc, 0x74, 0xe, 
       0x74, 0xdc6, 0xb, 0x74, 0x3, 0x74, 0x3, 0x74, 0x5, 0x74, 0xdca, 0xa, 
       0x74, 0x3, 0x74, 0x5, 0x74, 0xdcd, 0xa, 0x74, 0x3, 0x74, 0x5, 0x74, 
       0xdd0, 0xa, 0x74, 0x3, 0x74, 0x5, 0x74, 0xdd3, 0xa, 0x74, 0x3, 0x74, 
       0x5, 0x74, 0xdd6, 0xa, 0x74, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0xdda, 
       0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 
       0xde0, 0xa, 0x76, 0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0xde4, 0xa, 0x76, 
       0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 
       0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0xdee, 0xa, 0x77, 0x3, 0x78, 0x3, 
       0x78, 0x5, 0x78, 0xdf2, 0xa, 0x78, 0x3, 0x78, 0x3, 0x78, 0x7, 0x78, 
       0xdf6, 0xa, 0x78, 0xc, 0x78, 0xe, 0x78, 0xdf9, 0xb, 0x78, 0x3, 0x79, 
       0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x5, 0x79, 
       0xe01, 0xa, 0x79, 0x3, 0x79, 0x5, 0x79, 0xe04, 0xa, 0x79, 0x3, 0x79, 
       0x3, 0x79, 0x5, 0x79, 0xe08, 0xa, 0x79, 0x3, 0x79, 0x5, 0x79, 0xe0b, 
       0xa, 0x79, 0x3, 0x79, 0x3, 0x79, 0x5, 0x79, 0xe0f, 0xa, 0x79, 0x3, 
       0x79, 0x3, 0x79, 0x5, 0x79, 0xe13, 0xa, 0x79, 0x3, 0x79, 0x5, 0x79, 
       0xe16, 0xa, 0x79, 0x5, 0x79, 0xe18, 0xa, 0x79, 0x3, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x3, 0x7a, 0x7, 0x7a, 0xe1e, 0xa, 0x7a, 0xc, 0x7a, 0xe, 
       0x7a, 0xe21, 0xb, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 
       0xe2c, 0xa, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x6, 0x7a, 0xe30, 0xa, 0x7a, 
       0xd, 0x7a, 0xe, 0x7a, 0xe31, 0x5, 0x7a, 0xe34, 0xa, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x6, 0x7a, 0xe38, 0xa, 0x7a, 0xd, 0x7a, 0xe, 0x7a, 0xe39, 
       0x5, 0x7a, 0xe3c, 0xa, 0x7a, 0x5, 0x7a, 0xe3e, 0xa, 0x7a, 0x3, 0x7b, 
       0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0xe44, 0xa, 0x7b, 0x3, 
       0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x5, 
       0x7b, 0xe4c, 0xa, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 
       0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0xe54, 0xa, 0x7c, 0x3, 0x7d, 0x3, 
       0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x5, 0x7d, 0xe5a, 0xa, 0x7d, 0x3, 0x7e, 
       0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x7, 0x7e, 0xe61, 0xa, 
       0x7e, 0xc, 0x7e, 0xe, 0x7e, 0xe64, 0xb, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 
       0x5, 0x7e, 0xe68, 0xa, 0x7e, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 
       0x80, 0x3, 0x80, 0x5, 0x80, 0xe6f, 0xa, 0x80, 0x3, 0x81, 0x3, 0x81, 
       0x3, 0x81, 0x3, 0x81, 0x5, 0x81, 0xe75, 0xa, 0x81, 0x3, 0x81, 0x3, 
       0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x5, 0x81, 0xe7c, 0xa, 0x81, 
       0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x5, 0x82, 0xe81, 0xa, 0x82, 0x3, 
       0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x7, 0x83, 0xe88, 
       0xa, 0x83, 0xc, 0x83, 0xe, 0x83, 0xe8b, 0xb, 0x83, 0x5, 0x83, 0xe8d, 
       0xa, 0x83, 0x3, 0x84, 0x3, 0x84, 0x5, 0x84, 0xe91, 0xa, 0x84, 0x3, 
       0x85, 0x3, 0x85, 0x5, 0x85, 0xe95, 0xa, 0x85, 0x3, 0x85, 0x3, 0x85, 
       0x5, 0x85, 0xe99, 0xa, 0x85, 0x3, 0x85, 0x5, 0x85, 0xe9c, 0xa, 0x85, 
       0x3, 0x85, 0x5, 0x85, 0xe9f, 0xa, 0x85, 0x3, 0x85, 0x5, 0x85, 0xea2, 
       0xa, 0x85, 0x3, 0x86, 0x3, 0x86, 0x5, 0x86, 0xea6, 0xa, 0x86, 0x3, 
       0x86, 0x3, 0x86, 0x5, 0x86, 0xeaa, 0xa, 0x86, 0x3, 0x86, 0x5, 0x86, 
       0xead, 0xa, 0x86, 0x3, 0x86, 0x5, 0x86, 0xeb0, 0xa, 0x86, 0x3, 0x86, 
       0x5, 0x86, 0xeb3, 0xa, 0x86, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 
       0x88, 0x3, 0x88, 0x5, 0x88, 0xeba, 0xa, 0x88, 0x3, 0x88, 0x3, 0x88, 
       0x5, 0x88, 0xebe, 0xa, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x89, 0x3, 
       0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 
       0x8a, 0x3, 0x8a, 0x7, 0x8a, 0xecb, 0xa, 0x8a, 0xc, 0x8a, 0xe, 0x8a, 
       0xece, 0xb, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x5, 
       0x8d, 0xeda, 0xa, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 
       0x7, 0x8d, 0xee0, 0xa, 0x8d, 0xc, 0x8d, 0xe, 0x8d, 0xee3, 0xb, 0x8d, 
       0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 
       0x3, 0x8e, 0x5, 0x8e, 0xeec, 0xa, 0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x5, 
       0x8f, 0xef0, 0xa, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0xef3, 0xa, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x3, 0x90, 0x3, 0x90, 0x5, 0x90, 0xef9, 0xa, 0x90, 
       0x3, 0x90, 0x5, 0x90, 0xefc, 0xa, 0x90, 0x3, 0x90, 0x5, 0x90, 0xeff, 
       0xa, 0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 
       0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0xf08, 0xa, 0x91, 0x3, 0x92, 0x3, 
       0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x5, 
       0x92, 0xf11, 0xa, 0x92, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 
       0x3, 0x93, 0x3, 0x93, 0x7, 0x93, 0xf19, 0xa, 0x93, 0xc, 0x93, 0xe, 
       0x93, 0xf1c, 0xb, 0x93, 0x3, 0x93, 0x5, 0x93, 0xf1f, 0xa, 0x93, 0x3, 
       0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x7, 
       0x94, 0xf27, 0xa, 0x94, 0xc, 0x94, 0xe, 0x94, 0xf2a, 0xb, 0x94, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x5, 0x95, 0xf33, 0xa, 0x95, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x5, 0x97, 0xf3b, 0xa, 0x97, 0x3, 
       0x97, 0x5, 0x97, 0xf3e, 0xa, 0x97, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 
       0x3, 0x98, 0x3, 0x98, 0x7, 0x98, 0xf45, 0xa, 0x98, 0xc, 0x98, 0xe, 
       0x98, 0xf48, 0xb, 0x98, 0x5, 0x98, 0xf4a, 0xa, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x5, 0x98, 0xf4e, 0xa, 0x98, 0x3, 0x98, 0x7, 0x98, 0xf51, 0xa, 
       0x98, 0xc, 0x98, 0xe, 0x98, 0xf54, 0xb, 0x98, 0x3, 0x98, 0x5, 0x98, 
       0xf57, 0xa, 0x98, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 
       0x99, 0x7, 0x99, 0xf5e, 0xa, 0x99, 0xc, 0x99, 0xe, 0x99, 0xf61, 0xb, 
       0x99, 0x5, 0x99, 0xf63, 0xa, 0x99, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 
       0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x7, 0x9c, 0xf80, 0xa, 0x9c, 0xc, 0x9c, 0xe, 0x9c, 0xf83, 0xb, 0x9c, 
       0x5, 0x9c, 0xf85, 0xa, 0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xf88, 0xa, 0x9c, 
       0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9f, 0x3, 0x9f, 
       0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x7, 0xa1, 0xfbe, 0xa, 
       0xa1, 0xc, 0xa1, 0xe, 0xa1, 0xfc1, 0xb, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x5, 0xa1, 0xfc5, 0xa, 0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 
       0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa4, 0x3, 
       0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 
       0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 
       0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x5, 0xa4, 0xfe1, 
       0xa, 0xa4, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x5, 0xa5, 0xfef, 0xa, 0xa5, 0x3, 0xa6, 0x3, 0xa6, 0x3, 
       0xa6, 0x7, 0xa6, 0xff4, 0xa, 0xa6, 0xc, 0xa6, 0xe, 0xa6, 0xff7, 0xb, 
       0xa6, 0x3, 0xa6, 0x5, 0xa6, 0xffa, 0xa, 0xa6, 0x3, 0xa7, 0x3, 0xa7, 
       0x3, 0xa7, 0x3, 0xa7, 0x5, 0xa7, 0x1000, 0xa, 0xa7, 0x3, 0xa8, 0x3, 
       0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x5, 0xa8, 0x1008, 
       0xa, 0xa8, 0x5, 0xa8, 0x100a, 0xa, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 0x3, 
       0xa9, 0x3, 0xa9, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x5, 0xaa, 0x1015, 0xa, 0xaa, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 
       0x3, 0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x5, 0xac, 
       0x101f, 0xa, 0xac, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x5, 0xad, 0x1026, 0xa, 0xad, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 
       0x3, 0xae, 0x5, 0xae, 0x102c, 0xa, 0xae, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0x1034, 0xa, 0xb0, 
       0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0x1039, 0xa, 0xb1, 0x3, 
       0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x7, 0xb1, 0x103f, 0xa, 0xb1, 
       0xc, 0xb1, 0xe, 0xb1, 0x1042, 0xb, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 
       0xb1, 0x7, 0xb1, 0x1047, 0xa, 0xb1, 0xc, 0xb1, 0xe, 0xb1, 0x104a, 
       0xb, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x7, 0xb1, 0x104f, 0xa, 
       0xb1, 0xc, 0xb1, 0xe, 0xb1, 0x1052, 0xb, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 
       0x3, 0xb1, 0x7, 0xb1, 0x1057, 0xa, 0xb1, 0xc, 0xb1, 0xe, 0xb1, 0x105a, 
       0xb, 0xb1, 0x3, 0xb1, 0x7, 0xb1, 0x105d, 0xa, 0xb1, 0xc, 0xb1, 0xe, 
       0xb1, 0x1060, 0xb, 0xb1, 0x5, 0xb1, 0x1062, 0xa, 0xb1, 0x3, 0xb1, 
       0x3, 0xb1, 0x5, 0xb1, 0x1066, 0xa, 0xb1, 0x3, 0xb2, 0x3, 0xb2, 0x3, 
       0xb2, 0x5, 0xb2, 0x106b, 0xa, 0xb2, 0x3, 0xb2, 0x6, 0xb2, 0x106e, 
       0xa, 0xb2, 0xd, 0xb2, 0xe, 0xb2, 0x106f, 0x3, 0xb2, 0x3, 0xb2, 0x6, 
       0xb2, 0x1074, 0xa, 0xb2, 0xd, 0xb2, 0xe, 0xb2, 0x1075, 0x5, 0xb2, 
       0x1078, 0xa, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb3, 0x3, 
       0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x6, 0xb3, 0x1081, 0xa, 0xb3, 0xd, 0xb3, 
       0xe, 0xb3, 0x1082, 0x3, 0xb3, 0x7, 0xb3, 0x1086, 0xa, 0xb3, 0xc, 
       0xb3, 0xe, 0xb3, 0x1089, 0xb, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x6, 0xb3, 
       0x108d, 0xa, 0xb3, 0xd, 0xb3, 0xe, 0xb3, 0x108e, 0x5, 0xb3, 0x1091, 
       0xa, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb4, 0x3, 0xb4, 
       0x3, 0xb4, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb6, 0x3, 0xb6, 
       0x3, 0xb6, 0x5, 0xb6, 0x109f, 0xa, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x6, 
       0xb6, 0x10a3, 0xa, 0xb6, 0xd, 0xb6, 0xe, 0xb6, 0x10a4, 0x3, 0xb6, 
       0x3, 0xb6, 0x3, 0xb6, 0x5, 0xb6, 0x10aa, 0xa, 0xb6, 0x3, 0xb7, 0x3, 
       0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x10af, 0xa, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 
       0x6, 0xb7, 0x10b3, 0xa, 0xb7, 0xd, 0xb7, 0xe, 0xb7, 0x10b4, 0x3, 
       0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x10bc, 
       0xa, 0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb9, 0x3, 0xb9, 
       0x3, 0xb9, 0x5, 0xb9, 0x10c4, 0xa, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 
       0xb9, 0x3, 0xb9, 0x6, 0xb9, 0x10ca, 0xa, 0xb9, 0xd, 0xb9, 0xe, 0xb9, 
       0x10cb, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x5, 0xb9, 0x10d1, 0xa, 
       0xb9, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x5, 0xba, 0x10d7, 
       0xa, 0xba, 0x3, 0xba, 0x5, 0xba, 0x10da, 0xa, 0xba, 0x3, 0xba, 0x3, 
       0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x5, 0xba, 0x10e2, 
       0xa, 0xba, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x5, 0xbb, 0x10e9, 0xa, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 
       0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 0x10f2, 0xa, 0xbc, 
       0x3, 0xbc, 0x5, 0xbc, 0x10f5, 0xa, 0xbc, 0x3, 0xbd, 0x3, 0xbd, 0x3, 
       0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x3, 
       0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x7, 0xbe, 0x1104, 
       0xa, 0xbe, 0xc, 0xbe, 0xe, 0xbe, 0x1107, 0xb, 0xbe, 0x3, 0xbe, 0x3, 
       0xbe, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x5, 0xbf, 0x110e, 0xa, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x5, 0xbf, 0x1116, 0xa, 0xbf, 0x3, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 0x111a, 
       0xa, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x5, 0xc1, 0x1121, 0xa, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x6, 0xc1, 0x1125, 
       0xa, 0xc1, 0xd, 0xc1, 0xe, 0xc1, 0x1126, 0x3, 0xc2, 0x3, 0xc2, 0x3, 
       0xc2, 0x3, 0xc2, 0x6, 0xc2, 0x112d, 0xa, 0xc2, 0xd, 0xc2, 0xe, 0xc2, 
       0x112e, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x7, 
       0xc3, 0x1136, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x1139, 0xb, 0xc3, 
       0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x113e, 0xa, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x1143, 0xa, 0xc3, 0xc, 0xc3, 
       0xe, 0xc3, 0x1146, 0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0x114c, 0xa, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x114f, 
       0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x1152, 0xb, 0xc3, 0x5, 0xc3, 0x1154, 
       0xa, 0xc3, 0x5, 0xc3, 0x1156, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x6, 
       0xc3, 0x115a, 0xa, 0xc3, 0xd, 0xc3, 0xe, 0xc3, 0x115b, 0x5, 0xc3, 
       0x115e, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x1162, 0xa, 
       0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x1165, 0xb, 0xc3, 0x5, 0xc3, 0x1167, 
       0xa, 0xc3, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 
       0x7, 0xc4, 0x116e, 0xa, 0xc4, 0xc, 0xc4, 0xe, 0xc4, 0x1171, 0xb, 
       0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0x1176, 0xa, 0xc4, 
       0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x7, 0xc4, 0x117b, 0xa, 0xc4, 0xc, 
       0xc4, 0xe, 0xc4, 0x117e, 0xb, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 
       0x3, 0xc4, 0x5, 0xc4, 0x1184, 0xa, 0xc4, 0x3, 0xc4, 0x7, 0xc4, 0x1187, 
       0xa, 0xc4, 0xc, 0xc4, 0xe, 0xc4, 0x118a, 0xb, 0xc4, 0x5, 0xc4, 0x118c, 
       0xa, 0xc4, 0x5, 0xc4, 0x118e, 0xa, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x6, 
       0xc4, 0x1192, 0xa, 0xc4, 0xd, 0xc4, 0xe, 0xc4, 0x1193, 0x5, 0xc4, 
       0x1196, 0xa, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x7, 0xc4, 0x119a, 0xa, 
       0xc4, 0xc, 0xc4, 0xe, 0xc4, 0x119d, 0xb, 0xc4, 0x5, 0xc4, 0x119f, 
       0xa, 0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x11a4, 0xa, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 0x11a9, 0xa, 0xc5, 
       0xc, 0xc5, 0xe, 0xc5, 0x11ac, 0xb, 0xc5, 0x3, 0xc6, 0x3, 0xc6, 0x3, 
       0xc6, 0x3, 0xc6, 0x7, 0xc6, 0x11b2, 0xa, 0xc6, 0xc, 0xc6, 0xe, 0xc6, 
       0x11b5, 0xb, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0x11b9, 0xa, 
       0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x7, 
       0xc6, 0x11c0, 0xa, 0xc6, 0xc, 0xc6, 0xe, 0xc6, 0x11c3, 0xb, 0xc6, 
       0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0x11c9, 0xa, 
       0xc6, 0x3, 0xc6, 0x7, 0xc6, 0x11cc, 0xa, 0xc6, 0xc, 0xc6, 0xe, 0xc6, 
       0x11cf, 0xb, 0xc6, 0x5, 0xc6, 0x11d1, 0xa, 0xc6, 0x5, 0xc6, 0x11d3, 
       0xa, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x7, 0xc6, 
       0x11d9, 0xa, 0xc6, 0xc, 0xc6, 0xe, 0xc6, 0x11dc, 0xb, 0xc6, 0x5, 
       0xc6, 0x11de, 0xa, 0xc6, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 
       0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x7, 0xc7, 0x11e8, 0xa, 
       0xc7, 0xc, 0xc7, 0xe, 0xc7, 0x11eb, 0xb, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 
       0x3, 0xc7, 0x5, 0xc7, 0x11f0, 0xa, 0xc7, 0x3, 0xc8, 0x3, 0xc8, 0x3, 
       0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x7, 0xc8, 0x11f7, 0xa, 0xc8, 0xc, 0xc8, 
       0xe, 0xc8, 0x11fa, 0xb, 0xc8, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 
       0xc9, 0x7, 0xc9, 0x1200, 0xa, 0xc9, 0xc, 0xc9, 0xe, 0xc9, 0x1203, 
       0xb, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 0x1207, 0xa, 0xc9, 0x3, 
       0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x7, 0xc9, 0x120e, 
       0xa, 0xc9, 0xc, 0xc9, 0xe, 0xc9, 0x1211, 0xb, 0xc9, 0x3, 0xc9, 0x3, 
       0xc9, 0x3, 0xc9, 0x5, 0xc9, 0x1216, 0xa, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 
       0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x7, 0xc9, 
       0x121f, 0xa, 0xc9, 0xc, 0xc9, 0xe, 0xc9, 0x1222, 0xb, 0xc9, 0x5, 
       0xc9, 0x1224, 0xa, 0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 
       0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x7, 0xca, 0x122e, 0xa, 
       0xca, 0xc, 0xca, 0xe, 0xca, 0x1231, 0xb, 0xca, 0x3, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x3, 0xcb, 0x5, 0xcb, 0x1237, 0xa, 0xcb, 0x3, 0xcb, 0x3, 
       0xcb, 0x3, 0xcb, 0x5, 0xcb, 0x123c, 0xa, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 
       0x3, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 
       0x124b, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x1256, 
       0xa, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x1259, 0xa, 0xcd, 0x3, 0xce, 0x3, 
       0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 
       0xce, 0x5, 0xce, 0x1263, 0xa, 0xce, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 
       0x126d, 0xa, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1277, 0xa, 0xd0, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 
       0x3, 0xd2, 0x3, 0xd2, 0x5, 0xd2, 0x1281, 0xa, 0xd2, 0x3, 0xd3, 0x3, 
       0xd3, 0x5, 0xd3, 0x1285, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 
       0x1289, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0x1293, 0xa, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0x1298, 0xa, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x5, 0xd3, 0x12d2, 0xa, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0x12e4, 0xa, 0xd4, 0x3, 0xd5, 0x3, 
       0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd6, 0x3, 0xd6, 0x5, 0xd6, 0x12ec, 
       0xa, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x3, 0xd7, 0x7, 0xd7, 0x12f5, 0xa, 0xd7, 0xc, 0xd7, 0xe, 
       0xd7, 0x12f8, 0xb, 0xd7, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 
       0x5, 0xd8, 0x12fe, 0xa, 0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x5, 0xd9, 0x1302, 
       0xa, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xda, 0x3, 0xda, 
       0x5, 0xda, 0x1309, 0xa, 0xda, 0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 
       0xda, 0x130e, 0xa, 0xda, 0x3, 0xda, 0x5, 0xda, 0x1311, 0xa, 0xda, 
       0x3, 0xda, 0x5, 0xda, 0x1314, 0xa, 0xda, 0x3, 0xdb, 0x3, 0xdb, 0x3, 
       0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x5, 0xdb, 0x131d, 
       0xa, 0xdb, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0x1321, 0xa, 0xdc, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 
       0xdc, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 
       0xdd, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x7, 0xdf, 0x133d, 0xa, 0xdf, 0xc, 0xdf, 0xe, 0xdf, 
       0x1340, 0xb, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x5, 
       0xdf, 0x1346, 0xa, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x5, 0xdf, 0x134a, 
       0xa, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 
       0x5, 0xdf, 0x1351, 0xa, 0xdf, 0x3, 0xdf, 0x5, 0xdf, 0x1354, 0xa, 
       0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x3, 
       0xdf, 0x7, 0xdf, 0x1362, 0xa, 0xdf, 0xc, 0xdf, 0xe, 0xdf, 0x1365, 
       0xb, 0xdf, 0x5, 0xdf, 0x1367, 0xa, 0xdf, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 
       0xe0, 0x1371, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x1375, 
       0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 
       0x137b, 0xa, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x137e, 0xa, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x1383, 0xa, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x5, 0xe0, 0x1387, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x138e, 0xa, 0xe0, 0x3, 0xe0, 
       0x5, 0xe0, 0x1391, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x5, 0xe0, 0x1397, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x5, 0xe0, 0x13af, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x13bc, 0xa, 0xe0, 0x3, 0xe0, 
       0x5, 0xe0, 0x13bf, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x13c9, 
       0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x5, 0xe0, 0x13d1, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 
       0xe0, 0x13d5, 0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x5, 0xe0, 0x13dc, 0xa, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x13df, 
       0xa, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 
       0x7, 0xe0, 0x13e6, 0xa, 0xe0, 0xc, 0xe0, 0xe, 0xe0, 0x13e9, 0xb, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x13ee, 0xa, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x13f4, 0xa, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 
       0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x5, 0xe0, 0x13fe, 0xa, 0xe0, 0x5, 0xe0, 
       0x1400, 0xa, 0xe0, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x3, 0xe1, 0x5, 
       0xe1, 0x1406, 0xa, 0xe1, 0x3, 0xe1, 0x5, 0xe1, 0x1409, 0xa, 0xe1, 
       0x3, 0xe1, 0x5, 0xe1, 0x140c, 0xa, 0xe1, 0x3, 0xe2, 0x3, 0xe2, 0x3, 
       0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 
       0xe2, 0x3, 0xe2, 0x5, 0xe2, 0x1418, 0xa, 0xe2, 0x3, 0xe2, 0x5, 0xe2, 
       0x141b, 0xa, 0xe2, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x5, 
       0xe3, 0x1421, 0xa, 0xe3, 0x3, 0xe4, 0x5, 0xe4, 0x1424, 0xa, 0xe4, 
       0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x5, 0xe4, 0x142c, 0xa, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe4, 0x3, 0xe4, 0x5, 0xe4, 0x1434, 0xa, 0xe4, 0x3, 0xe5, 
       0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe5, 0x5, 0xe5, 0x143a, 0xa, 0xe5, 0x3, 
       0xe5, 0x3, 0xe5, 0x5, 0xe5, 0x143e, 0xa, 0xe5, 0x3, 0xe6, 0x3, 0xe6, 
       0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 
       0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x5, 0xe6, 0x144c, 0xa, 
       0xe6, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe8, 0x3, 0xe8, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x7, 0xe8, 0x1456, 0xa, 0xe8, 0xc, 0xe8, 
       0xe, 0xe8, 0x1459, 0xb, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 
       0xe8, 0x5, 0xe8, 0x145f, 0xa, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0x1462, 
       0xa, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe9, 0x3, 0xe9, 
       0x5, 0xe9, 0x1469, 0xa, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x7, 
       0xe9, 0x146e, 0xa, 0xe9, 0xc, 0xe9, 0xe, 0xe9, 0x1471, 0xb, 0xe9, 
       0x3, 0xea, 0x3, 0xea, 0x5, 0xea, 0x1475, 0xa, 0xea, 0x3, 0xea, 0x6, 
       0xea, 0x1478, 0xa, 0xea, 0xd, 0xea, 0xe, 0xea, 0x1479, 0x3, 0xeb, 
       0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 
       0x7, 0xeb, 0x1483, 0xa, 0xeb, 0xc, 0xeb, 0xe, 0xeb, 0x1486, 0xb, 
       0xeb, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xed, 0x3, 
       0xed, 0x3, 0xee, 0x3, 0xee, 0x5, 0xee, 0x1490, 0xa, 0xee, 0x3, 0xee, 
       0x3, 0xee, 0x3, 0xee, 0x3, 0xee, 0x5, 0xee, 0x1496, 0xa, 0xee, 0x3, 
       0xef, 0x3, 0xef, 0x3, 0xef, 0x5, 0xef, 0x149b, 0xa, 0xef, 0x3, 0xef, 
       0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 
       0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x5, 0xef, 0x14a8, 0xa, 
       0xef, 0x5, 0xef, 0x14aa, 0xa, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 
       0x5, 0xef, 0x14af, 0xa, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x5, 
       0xef, 0x14b4, 0xa, 0xef, 0x5, 0xef, 0x14b6, 0xa, 0xef, 0x3, 0xf0, 
       0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x5, 0xf0, 0x14bd, 0xa, 
       0xf0, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x5, 
       0xf1, 0x14c4, 0xa, 0xf1, 0x3, 0xf1, 0x5, 0xf1, 0x14c7, 0xa, 0xf1, 
       0x3, 0xf1, 0x5, 0xf1, 0x14ca, 0xa, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 
       0xf1, 0x3, 0xf1, 0x5, 0xf1, 0x14d0, 0xa, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 
       0x5, 0xf1, 0x14d4, 0xa, 0xf1, 0x3, 0xf2, 0x3, 0xf2, 0x3, 0xf2, 0x3, 
       0xf2, 0x5, 0xf2, 0x14da, 0xa, 0xf2, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 
       0x3, 0xf3, 0x5, 0xf3, 0x14e0, 0xa, 0xf3, 0x3, 0xf3, 0x3, 0xf3, 0x3, 
       0xf4, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 
       0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x5, 0xf6, 0x14ed, 0xa, 0xf6, 0x3, 0xf6, 
       0x3, 0xf6, 0x3, 0xf6, 0x5, 0xf6, 0x14f2, 0xa, 0xf6, 0x3, 0xf6, 0x3, 
       0xf6, 0x3, 0xf6, 0x3, 0xf6, 0x7, 0xf6, 0x14f8, 0xa, 0xf6, 0xc, 0xf6, 
       0xe, 0xf6, 0x14fb, 0xb, 0xf6, 0x5, 0xf6, 0x14fd, 0xa, 0xf6, 0x3, 
       0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x5, 0xf7, 0x1502, 0xa, 0xf7, 0x3, 0xf7, 
       0x3, 0xf7, 0x3, 0xf7, 0x5, 0xf7, 0x1507, 0xa, 0xf7, 0x3, 0xf7, 0x3, 
       0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x7, 0xf7, 0x150d, 0xa, 0xf7, 0xc, 0xf7, 
       0xe, 0xf7, 0x1510, 0xb, 0xf7, 0x5, 0xf7, 0x1512, 0xa, 0xf7, 0x3, 
       0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x5, 
       0xf8, 0x151a, 0xa, 0xf8, 0x3, 0xf9, 0x3, 0xf9, 0x5, 0xf9, 0x151e, 
       0xa, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x7, 0xf9, 0x1529, 0xa, 
       0xf9, 0xc, 0xf9, 0xe, 0xf9, 0x152c, 0xb, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x5, 0xf9, 0x1531, 0xa, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 
       0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x7, 
       0xf9, 0x153b, 0xa, 0xf9, 0xc, 0xf9, 0xe, 0xf9, 0x153e, 0xb, 0xf9, 
       0x5, 0xf9, 0x1540, 0xa, 0xf9, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfb, 0x3, 
       0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 0x1549, 0xa, 0xfb, 
       0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 0x154e, 0xa, 0xfb, 0x3, 
       0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x5, 0xfc, 0x1554, 0xa, 0xfc, 
       0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x5, 0xfe, 
       0x155b, 0xa, 0xfe, 0x5, 0xfe, 0x155d, 0xa, 0xfe, 0x3, 0xfe, 0x3, 
       0xfe, 0x3, 0xfe, 0x5, 0xfe, 0x1562, 0xa, 0xfe, 0x5, 0xfe, 0x1564, 
       0xa, 0xfe, 0x3, 0xff, 0x3, 0xff, 0x5, 0xff, 0x1568, 0xa, 0xff, 0x3, 
       0xff, 0x3, 0xff, 0x3, 0xff, 0x3, 0xff, 0x5, 0xff, 0x156e, 0xa, 0xff, 
       0x3, 0xff, 0x5, 0xff, 0x1571, 0xa, 0xff, 0x3, 0x100, 0x3, 0x100, 
       0x3, 0x101, 0x3, 0x101, 0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 
       0x102, 0x5, 0x102, 0x157b, 0xa, 0x102, 0x3, 0x103, 0x3, 0x103, 0x5, 
       0x103, 0x157f, 0xa, 0x103, 0x3, 0x104, 0x3, 0x104, 0x3, 0x105, 0x3, 
       0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 
       0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 
       0x105, 0x3, 0x105, 0x6, 0x105, 0x1591, 0xa, 0x105, 0xd, 0x105, 0xe, 
       0x105, 0x1592, 0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x3, 
       0x106, 0x5, 0x106, 0x159a, 0xa, 0x106, 0x5, 0x106, 0x159c, 0xa, 0x106, 
       0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 0x6, 0x107, 0x15a1, 0xa, 0x107, 
       0xd, 0x107, 0xe, 0x107, 0x15a2, 0x5, 0x107, 0x15a5, 0xa, 0x107, 0x3, 
       0x108, 0x3, 0x108, 0x5, 0x108, 0x15a9, 0xa, 0x108, 0x3, 0x109, 0x3, 
       0x109, 0x3, 0x109, 0x5, 0x109, 0x15ae, 0xa, 0x109, 0x3, 0x10a, 0x3, 
       0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 
       0x3, 0x10a, 0x3, 0x10a, 0x5, 0x10a, 0x15b9, 0xa, 0x10a, 0x3, 0x10b, 
       0x3, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 0x15be, 0xa, 0x10b, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10d, 0x3, 0x10d, 0x5, 0x10d, 0x15c4, 0xa, 0x10d, 
       0x3, 0x10e, 0x5, 0x10e, 0x15c7, 0xa, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 
       0x5, 0x10e, 0x15cb, 0xa, 0x10e, 0x3, 0x10e, 0x6, 0x10e, 0x15ce, 0xa, 
       0x10e, 0xd, 0x10e, 0xe, 0x10e, 0x15cf, 0x3, 0x10e, 0x5, 0x10e, 0x15d3, 
       0xa, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0x15d7, 0xa, 0x10e, 
       0x3, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0x15db, 0xa, 0x10e, 0x5, 0x10e, 
       0x15dd, 0xa, 0x10e, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x110, 0x5, 0x110, 
       0x15e2, 0xa, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x111, 0x5, 0x111, 
       0x15e7, 0xa, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x112, 0x3, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 
       0x112, 0x3, 0x112, 0x5, 0x112, 0x15f4, 0xa, 0x112, 0x3, 0x112, 0x5, 
       0x112, 0x15f7, 0xa, 0x112, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x15fb, 
       0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x15fe, 0xa, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0x1601, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0x1606, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1609, 0xa, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x160e, 0xa, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1613, 0xa, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0x1616, 0xa, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0x161b, 0xa, 0x113, 0x3, 0x113, 0x5, 
       0x113, 0x161e, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x5, 0x113, 0x1624, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1627, 
       0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x162b, 0xa, 0x113, 
       0x3, 0x113, 0x5, 0x113, 0x162e, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 
       0x1631, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1635, 0xa, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0x1638, 0xa, 0x113, 0x3, 0x113, 0x5, 
       0x113, 0x163b, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x163f, 
       0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1642, 0xa, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0x1645, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1648, 0xa, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x164c, 0xa, 0x113, 0x3, 
       0x113, 0x5, 0x113, 0x164f, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1652, 
       0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1657, 
       0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x165c, 
       0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1661, 
       0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1664, 0xa, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1669, 0xa, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0x166c, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x5, 0x113, 0x1671, 0xa, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1674, 0xa, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1678, 0xa, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0x167c, 0xa, 0x113, 0x3, 0x114, 0x3, 
       0x114, 0x3, 0x114, 0x3, 0x114, 0x7, 0x114, 0x1682, 0xa, 0x114, 0xc, 
       0x114, 0xe, 0x114, 0x1685, 0xb, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 
       0x115, 0x3, 0x115, 0x5, 0x115, 0x168b, 0xa, 0x115, 0x3, 0x115, 0x3, 
       0x115, 0x5, 0x115, 0x168f, 0xa, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 
       0x115, 0x5, 0x115, 0x1694, 0xa, 0x115, 0x3, 0x115, 0x5, 0x115, 0x1697, 
       0xa, 0x115, 0x3, 0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 0x115, 0x169c, 
       0xa, 0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 0x115, 0x16a0, 0xa, 0x115, 
       0x5, 0x115, 0x16a2, 0xa, 0x115, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 
       0x3, 0x116, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 
       0x117, 0x3, 0x117, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 
       0x5, 0x118, 0x16b2, 0xa, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x119, 
       0x3, 0x119, 0x3, 0x119, 0x7, 0x119, 0x16b9, 0xa, 0x119, 0xc, 0x119, 
       0xe, 0x119, 0x16bc, 0xb, 0x119, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 
       0x7, 0x11a, 0x16c1, 0xa, 0x11a, 0xc, 0x11a, 0xe, 0x11a, 0x16c4, 0xb, 
       0x11a, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x7, 0x11b, 
       0x16ca, 0xa, 0x11b, 0xc, 0x11b, 0xe, 0x11b, 0x16cd, 0xb, 0x11b, 0x3, 
       0x11b, 0x3, 0x11b, 0x3, 0x11c, 0x3, 0x11c, 0x3, 0x11c, 0x7, 0x11c, 
       0x16d4, 0xa, 0x11c, 0xc, 0x11c, 0xe, 0x11c, 0x16d7, 0xb, 0x11c, 0x3, 
       0x11d, 0x3, 0x11d, 0x3, 0x11d, 0x7, 0x11d, 0x16dc, 0xa, 0x11d, 0xc, 
       0x11d, 0xe, 0x11d, 0x16df, 0xb, 0x11d, 0x3, 0x11e, 0x3, 0x11e, 0x3, 
       0x11e, 0x7, 0x11e, 0x16e4, 0xa, 0x11e, 0xc, 0x11e, 0xe, 0x11e, 0x16e7, 
       0xb, 0x11e, 0x3, 0x11f, 0x3, 0x11f, 0x3, 0x11f, 0x7, 0x11f, 0x16ec, 
       0xa, 0x11f, 0xc, 0x11f, 0xe, 0x11f, 0x16ef, 0xb, 0x11f, 0x3, 0x120, 
       0x3, 0x120, 0x3, 0x120, 0x7, 0x120, 0x16f4, 0xa, 0x120, 0xc, 0x120, 
       0xe, 0x120, 0x16f7, 0xb, 0x120, 0x3, 0x121, 0x3, 0x121, 0x5, 0x121, 
       0x16fb, 0xa, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 0x3, 0x121, 
       0x3, 0x121, 0x3, 0x121, 0x5, 0x121, 0x1703, 0xa, 0x121, 0x3, 0x121, 
       0x3, 0x121, 0x3, 0x121, 0x5, 0x121, 0x1708, 0xa, 0x121, 0x3, 0x122, 
       0x3, 0x122, 0x3, 0x122, 0x5, 0x122, 0x170d, 0xa, 0x122, 0x3, 0x122, 
       0x5, 0x122, 0x1710, 0xa, 0x122, 0x3, 0x122, 0x3, 0x122, 0x3, 0x122, 
       0x5, 0x122, 0x1715, 0xa, 0x122, 0x3, 0x122, 0x5, 0x122, 0x1718, 0xa, 
       0x122, 0x3, 0x123, 0x3, 0x123, 0x5, 0x123, 0x171c, 0xa, 0x123, 0x3, 
       0x124, 0x3, 0x124, 0x3, 0x124, 0x3, 0x125, 0x3, 0x125, 0x3, 0x125, 
       0x3, 0x125, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 
       0x126, 0x5, 0x126, 0x172a, 0xa, 0x126, 0x3, 0x126, 0x3, 0x126, 0x3, 
       0x126, 0x3, 0x126, 0x3, 0x126, 0x5, 0x126, 0x1731, 0xa, 0x126, 0x3, 
       0x126, 0x3, 0x126, 0x3, 0x126, 0x5, 0x126, 0x1736, 0xa, 0x126, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x173b, 0xa, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x6, 0x127, 0x175a, 0xa, 0x127, 0xd, 0x127, 0xe, 0x127, 
       0x175b, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x1760, 0xa, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x6, 0x127, 0x1766, 0xa, 
       0x127, 0xd, 0x127, 0xe, 0x127, 0x1767, 0x3, 0x127, 0x3, 0x127, 0x5, 
       0x127, 0x176c, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x1775, 0xa, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x5, 0x127, 0x177d, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x5, 0x127, 0x1782, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x178a, 
       0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x178f, 
       0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x1794, 
       0xa, 0x127, 0x5, 0x127, 0x1796, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 
       0x127, 0x179f, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 
       0x127, 0x17a4, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x17ac, 0xa, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x17b1, 0xa, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x5, 0x127, 0x17b9, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x5, 0x127, 0x17c1, 0xa, 0x127, 
       0x3, 0x127, 0x5, 0x127, 0x17c4, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x5, 0x127, 0x17ce, 0xa, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 
       0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 0x3, 0x127, 
       0x3, 0x127, 0x5, 0x127, 0x17d9, 0xa, 0x127, 0x3, 0x128, 0x3, 0x128, 
       0x3, 0x128, 0x3, 0x128, 0x3, 0x128, 0x3, 0x129, 0x3, 0x129, 0x3, 
       0x129, 0x3, 0x129, 0x7, 0x129, 0x17e4, 0xa, 0x129, 0xc, 0x129, 0xe, 
       0x129, 0x17e7, 0xb, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 0x129, 0x3, 
       0x129, 0x3, 0x129, 0x5, 0x129, 0x17ee, 0xa, 0x129, 0x3, 0x12a, 0x3, 
       0x12a, 0x5, 0x12a, 0x17f2, 0xa, 0x12a, 0x3, 0x12b, 0x3, 0x12b, 0x3, 
       0x12b, 0x5, 0x12b, 0x17f7, 0xa, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 
       0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x5, 0x12b, 
       0x1800, 0xa, 0x12b, 0x3, 0x12b, 0x5, 0x12b, 0x1803, 0xa, 0x12b, 0x3, 
       0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 
       0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x5, 0x12b, 0x180f, 
       0xa, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 
       0x12b, 0x3, 0x12b, 0x5, 0x12b, 0x1817, 0xa, 0x12b, 0x3, 0x12b, 0x3, 
       0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x7, 0x12b, 
       0x181f, 0xa, 0x12b, 0xc, 0x12b, 0xe, 0x12b, 0x1822, 0xb, 0x12b, 0x5, 
       0x12b, 0x1824, 0xa, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x5, 0x12b, 0x1828, 
       0xa, 0x12b, 0x3, 0x12b, 0x3, 0x12b, 0x5, 0x12b, 0x182c, 0xa, 0x12b, 
       0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 
       0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 
       0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 
       0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 0x3, 0x12c, 
       0x3, 0x12c, 0x5, 0x12c, 0x1845, 0xa, 0x12c, 0x3, 0x12d, 0x3, 0x12d, 
       0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12d, 0x3, 0x12e, 0x3, 0x12e, 0x3, 
       0x12e, 0x3, 0x12e, 0x5, 0x12e, 0x1850, 0xa, 0x12e, 0x3, 0x12e, 0x3, 
       0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x3, 0x12e, 0x5, 0x12e, 0x1857, 0xa, 
       0x12e, 0x7, 0x12e, 0x1859, 0xa, 0x12e, 0xc, 0x12e, 0xe, 0x12e, 0x185c, 
       0xb, 0x12e, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x3, 0x12f, 0x5, 
       0x12f, 0x1862, 0xa, 0x12f, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x5, 0x130, 0x186a, 0xa, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x5, 0x130, 0x186f, 0xa, 0x130, 0x3, 
       0x130, 0x3, 0x130, 0x3, 0x130, 0x3, 0x130, 0x7, 0x130, 0x1875, 0xa, 
       0x130, 0xc, 0x130, 0xe, 0x130, 0x1878, 0xb, 0x130, 0x3, 0x131, 0x3, 
       0x131, 0x3, 0x131, 0x5, 0x131, 0x187d, 0xa, 0x131, 0x3, 0x131, 0x3, 
       0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x3, 0x131, 0x5, 0x131, 0x1887, 0xa, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 
       0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x5, 0x131, 0x1894, 0xa, 
       0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x5, 0x131, 
       0x189a, 0xa, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x5, 0x131, 0x18a0, 0xa, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 
       0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x5, 0x131, 0x18b0, 0xa, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x3, 0x131, 0x5, 0x131, 0x18b6, 0xa, 0x131, 0x3, 0x131, 0x3, 0x131, 
       0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x3, 0x131, 0x7, 
       0x131, 0x18bf, 0xa, 0x131, 0xc, 0x131, 0xe, 0x131, 0x18c2, 0xb, 0x131, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 
       0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x7, 0x132, 0x18d2, 0xa, 0x132, 
       0xc, 0x132, 0xe, 0x132, 0x18d5, 0xb, 0x132, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x6, 
       0x132, 0x18de, 0xa, 0x132, 0xd, 0x132, 0xe, 0x132, 0x18df, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 
       0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x5, 0x132, 0x18f1, 0xa, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 
       0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 
       0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x3, 0x132, 0x7, 0x132, 0x1902, 
       0xa, 0x132, 0xc, 0x132, 0xe, 0x132, 0x1905, 0xb, 0x132, 0x3, 0x133, 
       0x3, 0x133, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 
       0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 
       0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x3, 0x134, 0x5, 0x134, 0x1917, 
       0xa, 0x134, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 0x135, 0x3, 
       0x135, 0x3, 0x135, 0x3, 0x135, 0x5, 0x135, 0x1920, 0xa, 0x135, 0x3, 
       0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 0x3, 0x136, 
       0x3, 0x136, 0x5, 0x136, 0x1929, 0xa, 0x136, 0x3, 0x137, 0x3, 0x137, 
       0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x3, 0x138, 0x5, 
       0x138, 0x1932, 0xa, 0x138, 0x3, 0x139, 0x3, 0x139, 0x3, 0x13a, 0x3, 
       0x13a, 0x3, 0x13b, 0x3, 0x13b, 0x3, 0x13c, 0x3, 0x13c, 0x3, 0x13d, 
       0x3, 0x13d, 0x3, 0x13e, 0x3, 0x13e, 0x3, 0x13f, 0x3, 0x13f, 0x3, 
       0x13f, 0x2, 0x5, 0x25e, 0x260, 0x262, 0x140, 0x2, 0x4, 0x6, 0x8, 
       0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 
       0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 
       0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 
       0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 
       0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 
       0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 
       0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 
       0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 
       0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 
       0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 
       0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 
       0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 0x110, 
       0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 0x124, 
       0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 0x132, 0x134, 0x136, 0x138, 
       0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14a, 0x14c, 
       0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 0x160, 
       0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 0x174, 
       0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 0x182, 0x184, 0x186, 0x188, 
       0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 0x196, 0x198, 0x19a, 0x19c, 
       0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 0x1aa, 0x1ac, 0x1ae, 0x1b0, 
       0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 0x1be, 0x1c0, 0x1c2, 0x1c4, 
       0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 0x1d8, 
       0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 0x1e6, 0x1e8, 0x1ea, 0x1ec, 
       0x1ee, 0x1f0, 0x1f2, 0x1f4, 0x1f6, 0x1f8, 0x1fa, 0x1fc, 0x1fe, 0x200, 
       0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c, 0x20e, 0x210, 0x212, 0x214, 
       0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x220, 0x222, 0x224, 0x226, 0x228, 
       0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x234, 0x236, 0x238, 0x23a, 0x23c, 
       0x23e, 0x240, 0x242, 0x244, 0x246, 0x248, 0x24a, 0x24c, 0x24e, 0x250, 
       0x252, 0x254, 0x256, 0x258, 0x25a, 0x25c, 0x25e, 0x260, 0x262, 0x264, 
       0x266, 0x268, 0x26a, 0x26c, 0x26e, 0x270, 0x272, 0x274, 0x276, 0x278, 
       0x27a, 0x27c, 0x2, 0x82, 0x4, 0x2, 0x25, 0x25, 0x89, 0x89, 0x4, 0x2, 
       0x1c6, 0x1c6, 0x1cc, 0x1cc, 0x5, 0x2, 0x40, 0x40, 0x90, 0x90, 0xa5, 
       0xa5, 0x5, 0x2, 0x28, 0x28, 0x142, 0x142, 0x181, 0x181, 0x6, 0x2, 
       0x28, 0x28, 0x162, 0x162, 0x1c5, 0x1c5, 0x20c, 0x20c, 0x4, 0x2, 0x1bc, 
       0x1bc, 0x415, 0x415, 0x4, 0x2, 0x48, 0x48, 0x81, 0x81, 0x4, 0x2, 
       0xf, 0xf, 0x112, 0x112, 0x5, 0x2, 0x2a, 0x2a, 0x4e, 0x4e, 0xa8, 0xa8, 
       0x4, 0x2, 0x16f, 0x16f, 0x1de, 0x1de, 0x5, 0x2, 0x1b4, 0x1b4, 0x232, 
       0x232, 0x239, 0x239, 0x4, 0x2, 0x149, 0x149, 0x186, 0x186, 0x4, 0x2, 
       0x124, 0x124, 0x194, 0x194, 0x4, 0x2, 0x122, 0x122, 0x178, 0x178, 
       0x5, 0x2, 0x49, 0x49, 0x4d, 0x4d, 0x72, 0x72, 0x5, 0x2, 0x28, 0x28, 
       0x153, 0x153, 0x16d, 0x16d, 0x5, 0x2, 0x28, 0x28, 0x14f, 0x14f, 0x2b4, 
       0x2b4, 0x4, 0x2, 0x226, 0x226, 0x247, 0x247, 0x4, 0x2, 0x4a, 0x4a, 
       0x54, 0x54, 0x5, 0x2, 0x171, 0x171, 0x1d5, 0x1d5, 0x20e, 0x20e, 0x4, 
       0x2, 0x40, 0x40, 0x90, 0x90, 0x3, 0x2, 0x128, 0x129, 0x3, 0x2, 0x40b, 
       0x40c, 0x4, 0x2, 0x415, 0x415, 0x41d, 0x41d, 0x5, 0x2, 0x16c, 0x16c, 
       0x18f, 0x18f, 0x1c3, 0x1c3, 0x4, 0x2, 0x28, 0x28, 0x40b, 0x40c, 0x9, 
       0x2, 0x28, 0x28, 0x135, 0x135, 0x137, 0x137, 0x153, 0x153, 0x16d, 
       0x16d, 0x1eb, 0x1eb, 0x41d, 0x41d, 0x3, 0x2, 0x40c, 0x40d, 0x4, 0x2, 
       0x7, 0x7, 0x31, 0x31, 0x4, 0x2, 0x19, 0x19, 0x1d, 0x1d, 0x4, 0x2, 
       0x185, 0x185, 0x248, 0x248, 0x4, 0x2, 0xd, 0xd, 0x9f, 0x9f, 0x4, 
       0x2, 0xb0, 0xb0, 0x24b, 0x24b, 0x4, 0x2, 0x14, 0x14, 0x84, 0x84, 
       0x5, 0x2, 0x29, 0x29, 0x46, 0x46, 0x61, 0x61, 0x4, 0x2, 0x61, 0x61, 
       0x139, 0x139, 0x4, 0x2, 0x130, 0x130, 0x169, 0x169, 0x4, 0x2, 0x5d, 
       0x5d, 0x204, 0x204, 0x4, 0x2, 0x29, 0x29, 0x61, 0x61, 0x4, 0x2, 0x8, 
       0x8, 0x2f, 0x2f, 0x4, 0x2, 0xac, 0xac, 0x244, 0x244, 0x6, 0x2, 0x16c, 
       0x16c, 0x18f, 0x18f, 0x1c2, 0x1c2, 0x1e1, 0x1e1, 0x4, 0x2, 0x16c, 
       0x16c, 0x1c2, 0x1c2, 0x4, 0x2, 0xe, 0xe, 0x2b, 0x2b, 0x5, 0x2, 0x3d, 
       0x3d, 0x48, 0x48, 0xaa, 0xaa, 0x4, 0x2, 0x21, 0x21, 0x4c, 0x4c, 0x4, 
       0x2, 0x59, 0x59, 0x87, 0x87, 0x4, 0x2, 0x8, 0x8, 0x2f, 0x30, 0x3, 
       0x2, 0x21b, 0x21c, 0x4, 0x2, 0x174, 0x174, 0x20a, 0x20a, 0x4, 0x2, 
       0xd2, 0xd2, 0x197, 0x197, 0x7, 0x2, 0x62, 0x62, 0x19c, 0x19d, 0x19f, 
       0x19f, 0x1a3, 0x1ab, 0x1ed, 0x1ed, 0x6, 0x2, 0x199, 0x19a, 0x19e, 
       0x19e, 0x1a0, 0x1a1, 0x1ee, 0x1ee, 0x5, 0x2, 0x63, 0x63, 0x198, 0x198, 
       0x1a2, 0x1a2, 0x4, 0x2, 0x188, 0x188, 0x21d, 0x21d, 0x4, 0x2, 0x217, 
       0x217, 0x219, 0x219, 0x4, 0x2, 0x11c, 0x11c, 0x21e, 0x21e, 0x4, 0x2, 
       0x53, 0x53, 0x1fc, 0x1fc, 0x4, 0x2, 0x31, 0x31, 0x147, 0x147, 0x5, 
       0x2, 0x1e, 0x1e, 0x38, 0x38, 0xa3, 0xa3, 0x5, 0x2, 0x77, 0x77, 0x9c, 
       0x9c, 0x172, 0x172, 0x4, 0x2, 0x5f, 0x5f, 0xa6, 0xa6, 0x4, 0x2, 0x12c, 
       0x12c, 0x20f, 0x20f, 0x4, 0x2, 0x26, 0x26, 0x246, 0x246, 0x4, 0x2, 
       0x69, 0x69, 0x194, 0x194, 0x4, 0x2, 0x165, 0x165, 0x1e7, 0x1e7, 0x4, 
       0x2, 0x9c, 0x9c, 0x25e, 0x25e, 0x6, 0x2, 0xbe, 0xbe, 0xc0, 0xc0, 
       0xc6, 0xc6, 0x227, 0x227, 0x4, 0x2, 0x3ec, 0x3ec, 0x3fd, 0x3fd, 0x4, 
       0x2, 0x11d, 0x11d, 0x1ef, 0x1ef, 0x4, 0x2, 0x3f, 0x3f, 0x49, 0x49, 
       0x8, 0x2, 0x77, 0x77, 0x9c, 0x9c, 0xa1, 0xa1, 0x15e, 0x15e, 0x172, 
       0x172, 0x246, 0x246, 0x4, 0x2, 0x1bb, 0x1bb, 0x223, 0x223, 0x4, 0x2, 
       0x15b, 0x15b, 0x24a, 0x24a, 0x4, 0x2, 0x77, 0x77, 0x172, 0x172, 0x5, 
       0x2, 0x4a, 0x4a, 0x55, 0x55, 0x17f, 0x17f, 0x5, 0x2, 0x174, 0x174, 
       0x194, 0x194, 0x20a, 0x20a, 0x4, 0x2, 0x223, 0x223, 0x245, 0x245, 
       0x4, 0x2, 0x13a, 0x13a, 0x1e6, 0x1e6, 0x8, 0x2, 0xd2, 0xd2, 0x158, 
       0x158, 0x15a, 0x15a, 0x173, 0x173, 0x1ec, 0x1ec, 0x210, 0x210, 0x4, 
       0x2, 0x2b, 0x2c, 0x39, 0x39, 0x5, 0x2, 0x165, 0x165, 0x1d7, 0x1d7, 
       0x310, 0x310, 0x4, 0x2, 0x18c, 0x18c, 0x234, 0x234, 0xc, 0x2, 0x12b, 
       0x12b, 0x132, 0x132, 0x13c, 0x13e, 0x144, 0x144, 0x1b5, 0x1b5, 0x1bd, 
       0x1bd, 0x228, 0x228, 0x22f, 0x22f, 0x2e0, 0x2e0, 0x386, 0x386, 0x4, 
       0x2, 0x22, 0x22, 0x99, 0x99, 0x4, 0x2, 0x6b, 0x6b, 0x37e, 0x37e, 
       0xd, 0x2, 0x12b, 0x12b, 0x132, 0x132, 0x13c, 0x13e, 0x144, 0x144, 
       0x1b5, 0x1b5, 0x1bd, 0x1bd, 0x1fd, 0x1fd, 0x228, 0x228, 0x22f, 0x22f, 
       0x2e0, 0x2e0, 0x386, 0x386, 0x5, 0x2, 0x415, 0x415, 0x41d, 0x41d, 
       0x41f, 0x41f, 0x3, 0x2, 0x421, 0x422, 0x5, 0x2, 0x2af, 0x2ba, 0x415, 
       0x415, 0x41d, 0x41e, 0x4, 0x2, 0x40b, 0x40d, 0x416, 0x416, 0x4, 0x2, 
       0x3a, 0x3a, 0xa2, 0xa2, 0x4, 0x2, 0x6a, 0x6a, 0x419, 0x419, 0x7, 
       0x2, 0x18, 0x18, 0xce, 0xd0, 0xd7, 0xd7, 0xd9, 0xdc, 0x1c0, 0x1c0, 
       0x4, 0x2, 0x18, 0x18, 0xcf, 0xcf, 0x4, 0x2, 0x18, 0x18, 0xce, 0xce, 
       0x3, 0x2, 0xb4, 0xbf, 0x4, 0x2, 0xa7, 0xa7, 0x20d, 0x20d, 0x4, 0x2, 
       0xc3, 0xc8, 0x16d, 0x16d, 0x8, 0x2, 0xc9, 0xc9, 0xd4, 0xd4, 0xd6, 
       0xd6, 0xd8, 0xd8, 0xdf, 0xdf, 0x120, 0x121, 0x6, 0x2, 0xca, 0xcd, 
       0xd2, 0xd3, 0xd5, 0xd5, 0x11e, 0x11e, 0x4, 0x2, 0x8c, 0x8c, 0xdd, 
       0xdd, 0x4, 0x2, 0x18c, 0x18c, 0x2bf, 0x2c7, 0x4, 0x2, 0xd2, 0xd2, 
       0x1c0, 0x1c0, 0x5, 0x2, 0xc9, 0xca, 0xcc, 0xcc, 0x18c, 0x18c, 0x4, 
       0x2, 0xff, 0x100, 0x106, 0x106, 0x4, 0x2, 0x23, 0x23, 0xfd, 0x100, 
       0x3, 0x2, 0x109, 0x10a, 0x5, 0x2, 0x11, 0x11, 0x57, 0x57, 0xa0, 0xa0, 
       0x4, 0x2, 0xce, 0xce, 0xd2, 0xd2, 0x4, 0x2, 0xc9, 0xca, 0xcc, 0xcc, 
       0x5, 0x2, 0xe, 0xe, 0x2b, 0x2b, 0x37c, 0x37c, 0x5, 0x2, 0xed, 0xed, 
       0xf3, 0xf4, 0xf9, 0xf9, 0x5, 0x2, 0xee, 0xf0, 0xf5, 0xf8, 0xfa, 0xfc, 
       0x4, 0x2, 0x1ca, 0x1ca, 0x1d8, 0x1d8, 0x4, 0x2, 0x68, 0x68, 0x400, 
       0x400, 0x5, 0x2, 0x3a, 0x3a, 0xa2, 0xa2, 0x23d, 0x23d, 0x4, 0x2, 
       0x7d, 0x7d, 0x88, 0x88, 0x5, 0x2, 0x8, 0x8, 0x115, 0x115, 0x213, 
       0x213, 0x6, 0x2, 0x68, 0x68, 0x3f8, 0x3f8, 0x3fa, 0x3fa, 0x400, 0x401, 
       0x3, 0x2, 0x3f5, 0x3fc, 0x3, 0x2, 0x287, 0x2ae, 0x3, 0x2, 0x2bb, 
       0x2be, 0x3, 0x2, 0x25e, 0x266, 0x3, 0x2, 0x256, 0x25d, 0x5, 0x2, 
       0xc9, 0xcd, 0xda, 0xda, 0xdd, 0xdd, 0x16, 0x2, 0x22, 0x22, 0x2e, 
       0x2e, 0x44, 0x44, 0x6b, 0x6b, 0x71, 0x71, 0x99, 0x99, 0xdf, 0xdf, 
       0xed, 0xfc, 0x110, 0x184, 0x186, 0x225, 0x227, 0x246, 0x249, 0x250, 
       0x255, 0x255, 0x268, 0x270, 0x275, 0x276, 0x278, 0x27e, 0x280, 0x286, 
       0x2b4, 0x2b4, 0x2e0, 0x2e0, 0x386, 0x386, 0x14, 0x2, 0x25, 0x25, 
       0x59, 0x59, 0x87, 0x87, 0x89, 0x89, 0xc9, 0xcb, 0xcd, 0xcd, 0xeb, 
       0xec, 0xf1, 0xf1, 0x108, 0x108, 0x185, 0x185, 0x248, 0x248, 0x256, 
       0x25d, 0x280, 0x280, 0x2bf, 0x2bf, 0x2c2, 0x2df, 0x2e1, 0x385, 0x387, 
       0x3eb, 0x3fc, 0x3fc, 0x2, 0x1dba, 0x2, 0x27f, 0x3, 0x2, 0x2, 0x2, 
       0x4, 0x290, 0x3, 0x2, 0x2, 0x2, 0x6, 0x2a4, 0x3, 0x2, 0x2, 0x2, 0x8, 
       0x2a6, 0x3, 0x2, 0x2, 0x2, 0xa, 0x2cb, 0x3, 0x2, 0x2, 0x2, 0xc, 0x2d7, 
       0x3, 0x2, 0x2, 0x2, 0xe, 0x2e2, 0x3, 0x2, 0x2, 0x2, 0x10, 0x2f3, 
       0x3, 0x2, 0x2, 0x2, 0x12, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x14, 0x304, 
       0x3, 0x2, 0x2, 0x2, 0x16, 0x31f, 0x3, 0x2, 0x2, 0x2, 0x18, 0x328, 
       0x3, 0x2, 0x2, 0x2, 0x1a, 0x32a, 0x3, 0x2, 0x2, 0x2, 0x1c, 0x336, 
       0x3, 0x2, 0x2, 0x2, 0x1e, 0x354, 0x3, 0x2, 0x2, 0x2, 0x20, 0x378, 
       0x3, 0x2, 0x2, 0x2, 0x22, 0x3ab, 0x3, 0x2, 0x2, 0x2, 0x24, 0x3c5, 
       0x3, 0x2, 0x2, 0x2, 0x26, 0x3e3, 0x3, 0x2, 0x2, 0x2, 0x28, 0x444, 
       0x3, 0x2, 0x2, 0x2, 0x2a, 0x446, 0x3, 0x2, 0x2, 0x2, 0x2c, 0x458, 
       0x3, 0x2, 0x2, 0x2, 0x2e, 0x495, 0x3, 0x2, 0x2, 0x2, 0x30, 0x4a8, 
       0x3, 0x2, 0x2, 0x2, 0x32, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x34, 0x4e5, 
       0x3, 0x2, 0x2, 0x2, 0x36, 0x511, 0x3, 0x2, 0x2, 0x2, 0x38, 0x517, 
       0x3, 0x2, 0x2, 0x2, 0x3a, 0x519, 0x3, 0x2, 0x2, 0x2, 0x3c, 0x52e, 
       0x3, 0x2, 0x2, 0x2, 0x3e, 0x535, 0x3, 0x2, 0x2, 0x2, 0x40, 0x537, 
       0x3, 0x2, 0x2, 0x2, 0x42, 0x547, 0x3, 0x2, 0x2, 0x2, 0x44, 0x54a, 
       0x3, 0x2, 0x2, 0x2, 0x46, 0x54f, 0x3, 0x2, 0x2, 0x2, 0x48, 0x569, 
       0x3, 0x2, 0x2, 0x2, 0x4a, 0x579, 0x3, 0x2, 0x2, 0x2, 0x4c, 0x57b, 
       0x3, 0x2, 0x2, 0x2, 0x4e, 0x58b, 0x3, 0x2, 0x2, 0x2, 0x50, 0x58d, 
       0x3, 0x2, 0x2, 0x2, 0x52, 0x5c7, 0x3, 0x2, 0x2, 0x2, 0x54, 0x60e, 
       0x3, 0x2, 0x2, 0x2, 0x56, 0x610, 0x3, 0x2, 0x2, 0x2, 0x58, 0x62c, 
       0x3, 0x2, 0x2, 0x2, 0x5a, 0x634, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x652, 
       0x3, 0x2, 0x2, 0x2, 0x5e, 0x6e4, 0x3, 0x2, 0x2, 0x2, 0x60, 0x6e6, 
       0x3, 0x2, 0x2, 0x2, 0x62, 0x6e9, 0x3, 0x2, 0x2, 0x2, 0x64, 0x733, 
       0x3, 0x2, 0x2, 0x2, 0x66, 0x74a, 0x3, 0x2, 0x2, 0x2, 0x68, 0x7de, 
       0x3, 0x2, 0x2, 0x2, 0x6a, 0x7e3, 0x3, 0x2, 0x2, 0x2, 0x6c, 0x7e5, 
       0x3, 0x2, 0x2, 0x2, 0x6e, 0x7ef, 0x3, 0x2, 0x2, 0x2, 0x70, 0x824, 
       0x3, 0x2, 0x2, 0x2, 0x72, 0x838, 0x3, 0x2, 0x2, 0x2, 0x74, 0x83a, 
       0x3, 0x2, 0x2, 0x2, 0x76, 0x85d, 0x3, 0x2, 0x2, 0x2, 0x78, 0x866, 
       0x3, 0x2, 0x2, 0x2, 0x7a, 0x86d, 0x3, 0x2, 0x2, 0x2, 0x7c, 0x884, 
       0x3, 0x2, 0x2, 0x2, 0x7e, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x80, 0x89c, 
       0x3, 0x2, 0x2, 0x2, 0x82, 0x8b2, 0x3, 0x2, 0x2, 0x2, 0x84, 0x8c6, 
       0x3, 0x2, 0x2, 0x2, 0x86, 0xa54, 0x3, 0x2, 0x2, 0x2, 0x88, 0xa56, 
       0x3, 0x2, 0x2, 0x2, 0x8a, 0xa5d, 0x3, 0x2, 0x2, 0x2, 0x8c, 0xa64, 
       0x3, 0x2, 0x2, 0x2, 0x8e, 0xa7b, 0x3, 0x2, 0x2, 0x2, 0x90, 0xa83, 
       0x3, 0x2, 0x2, 0x2, 0x92, 0xa8a, 0x3, 0x2, 0x2, 0x2, 0x94, 0xa91, 
       0x3, 0x2, 0x2, 0x2, 0x96, 0xa98, 0x3, 0x2, 0x2, 0x2, 0x98, 0xaa4, 
       0x3, 0x2, 0x2, 0x2, 0x9a, 0xaae, 0x3, 0x2, 0x2, 0x2, 0x9c, 0xab5, 
       0x3, 0x2, 0x2, 0x2, 0x9e, 0xac5, 0x3, 0x2, 0x2, 0x2, 0xa0, 0xacf, 
       0x3, 0x2, 0x2, 0x2, 0xa2, 0xad3, 0x3, 0x2, 0x2, 0x2, 0xa4, 0xad9, 
       0x3, 0x2, 0x2, 0x2, 0xa6, 0xae5, 0x3, 0x2, 0x2, 0x2, 0xa8, 0xae7, 
       0x3, 0x2, 0x2, 0x2, 0xaa, 0xaee, 0x3, 0x2, 0x2, 0x2, 0xac, 0xaf0, 
       0x3, 0x2, 0x2, 0x2, 0xae, 0xb23, 0x3, 0x2, 0x2, 0x2, 0xb0, 0xb6d, 
       0x3, 0x2, 0x2, 0x2, 0xb2, 0xba8, 0x3, 0x2, 0x2, 0x2, 0xb4, 0xc00, 
       0x3, 0x2, 0x2, 0x2, 0xb6, 0xc04, 0x3, 0x2, 0x2, 0x2, 0xb8, 0xc18, 
       0x3, 0x2, 0x2, 0x2, 0xba, 0xc1a, 0x3, 0x2, 0x2, 0x2, 0xbc, 0xc22, 
       0x3, 0x2, 0x2, 0x2, 0xbe, 0xc2a, 0x3, 0x2, 0x2, 0x2, 0xc0, 0xc2c, 
       0x3, 0x2, 0x2, 0x2, 0xc2, 0xc4a, 0x3, 0x2, 0x2, 0x2, 0xc4, 0xc81, 
       0x3, 0x2, 0x2, 0x2, 0xc6, 0xc8a, 0x3, 0x2, 0x2, 0x2, 0xc8, 0xc9e, 
       0x3, 0x2, 0x2, 0x2, 0xca, 0xcaa, 0x3, 0x2, 0x2, 0x2, 0xcc, 0xcae, 
       0x3, 0x2, 0x2, 0x2, 0xce, 0xccf, 0x3, 0x2, 0x2, 0x2, 0xd0, 0xce4, 
       0x3, 0x2, 0x2, 0x2, 0xd2, 0xcee, 0x3, 0x2, 0x2, 0x2, 0xd4, 0xcf2, 
       0x3, 0x2, 0x2, 0x2, 0xd6, 0xd0b, 0x3, 0x2, 0x2, 0x2, 0xd8, 0xd35, 
       0x3, 0x2, 0x2, 0x2, 0xda, 0xd37, 0x3, 0x2, 0x2, 0x2, 0xdc, 0xd46, 
       0x3, 0x2, 0x2, 0x2, 0xde, 0xd74, 0x3, 0x2, 0x2, 0x2, 0xe0, 0xd7e, 
       0x3, 0x2, 0x2, 0x2, 0xe2, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xe4, 0xdbe, 
       0x3, 0x2, 0x2, 0x2, 0xe6, 0xdc0, 0x3, 0x2, 0x2, 0x2, 0xe8, 0xdd7, 
       0x3, 0x2, 0x2, 0x2, 0xea, 0xddd, 0x3, 0x2, 0x2, 0x2, 0xec, 0xded, 
       0x3, 0x2, 0x2, 0x2, 0xee, 0xdf1, 0x3, 0x2, 0x2, 0x2, 0xf0, 0xe17, 
       0x3, 0x2, 0x2, 0x2, 0xf2, 0xe3d, 0x3, 0x2, 0x2, 0x2, 0xf4, 0xe4b, 
       0x3, 0x2, 0x2, 0x2, 0xf6, 0xe53, 0x3, 0x2, 0x2, 0x2, 0xf8, 0xe55, 
       0x3, 0x2, 0x2, 0x2, 0xfa, 0xe5b, 0x3, 0x2, 0x2, 0x2, 0xfc, 0xe69, 
       0x3, 0x2, 0x2, 0x2, 0xfe, 0xe6c, 0x3, 0x2, 0x2, 0x2, 0x100, 0xe70, 
       0x3, 0x2, 0x2, 0x2, 0x102, 0xe80, 0x3, 0x2, 0x2, 0x2, 0x104, 0xe82, 
       0x3, 0x2, 0x2, 0x2, 0x106, 0xe8e, 0x3, 0x2, 0x2, 0x2, 0x108, 0xe92, 
       0x3, 0x2, 0x2, 0x2, 0x10a, 0xea3, 0x3, 0x2, 0x2, 0x2, 0x10c, 0xeb4, 
       0x3, 0x2, 0x2, 0x2, 0x10e, 0xeb7, 0x3, 0x2, 0x2, 0x2, 0x110, 0xec1, 
       0x3, 0x2, 0x2, 0x2, 0x112, 0xec5, 0x3, 0x2, 0x2, 0x2, 0x114, 0xecf, 
       0x3, 0x2, 0x2, 0x2, 0x116, 0xed2, 0x3, 0x2, 0x2, 0x2, 0x118, 0xed7, 
       0x3, 0x2, 0x2, 0x2, 0x11a, 0xeeb, 0x3, 0x2, 0x2, 0x2, 0x11c, 0xeed, 
       0x3, 0x2, 0x2, 0x2, 0x11e, 0xefe, 0x3, 0x2, 0x2, 0x2, 0x120, 0xf07, 
       0x3, 0x2, 0x2, 0x2, 0x122, 0xf10, 0x3, 0x2, 0x2, 0x2, 0x124, 0xf12, 
       0x3, 0x2, 0x2, 0x2, 0x126, 0xf20, 0x3, 0x2, 0x2, 0x2, 0x128, 0xf2b, 
       0x3, 0x2, 0x2, 0x2, 0x12a, 0xf34, 0x3, 0x2, 0x2, 0x2, 0x12c, 0xf37, 
       0x3, 0x2, 0x2, 0x2, 0x12e, 0xf3f, 0x3, 0x2, 0x2, 0x2, 0x130, 0xf58, 
       0x3, 0x2, 0x2, 0x2, 0x132, 0xf64, 0x3, 0x2, 0x2, 0x2, 0x134, 0xf67, 
       0x3, 0x2, 0x2, 0x2, 0x136, 0xf87, 0x3, 0x2, 0x2, 0x2, 0x138, 0xf89, 
       0x3, 0x2, 0x2, 0x2, 0x13a, 0xf8b, 0x3, 0x2, 0x2, 0x2, 0x13c, 0xf8d, 
       0x3, 0x2, 0x2, 0x2, 0x13e, 0xf8f, 0x3, 0x2, 0x2, 0x2, 0x140, 0xfc4, 
       0x3, 0x2, 0x2, 0x2, 0x142, 0xfc6, 0x3, 0x2, 0x2, 0x2, 0x144, 0xfcc, 
       0x3, 0x2, 0x2, 0x2, 0x146, 0xfe0, 0x3, 0x2, 0x2, 0x2, 0x148, 0xfee, 
       0x3, 0x2, 0x2, 0x2, 0x14a, 0xff9, 0x3, 0x2, 0x2, 0x2, 0x14c, 0xffb, 
       0x3, 0x2, 0x2, 0x2, 0x14e, 0x1001, 0x3, 0x2, 0x2, 0x2, 0x150, 0x100b, 
       0x3, 0x2, 0x2, 0x2, 0x152, 0x100f, 0x3, 0x2, 0x2, 0x2, 0x154, 0x1016, 
       0x3, 0x2, 0x2, 0x2, 0x156, 0x101a, 0x3, 0x2, 0x2, 0x2, 0x158, 0x1020, 
       0x3, 0x2, 0x2, 0x2, 0x15a, 0x1027, 0x3, 0x2, 0x2, 0x2, 0x15c, 0x102d, 
       0x3, 0x2, 0x2, 0x2, 0x15e, 0x1033, 0x3, 0x2, 0x2, 0x2, 0x160, 0x1038, 
       0x3, 0x2, 0x2, 0x2, 0x162, 0x1067, 0x3, 0x2, 0x2, 0x2, 0x164, 0x107c, 
       0x3, 0x2, 0x2, 0x2, 0x166, 0x1095, 0x3, 0x2, 0x2, 0x2, 0x168, 0x1098, 
       0x3, 0x2, 0x2, 0x2, 0x16a, 0x109e, 0x3, 0x2, 0x2, 0x2, 0x16c, 0x10ae, 
       0x3, 0x2, 0x2, 0x2, 0x16e, 0x10bd, 0x3, 0x2, 0x2, 0x2, 0x170, 0x10c3, 
       0x3, 0x2, 0x2, 0x2, 0x172, 0x10e1, 0x3, 0x2, 0x2, 0x2, 0x174, 0x10e3, 
       0x3, 0x2, 0x2, 0x2, 0x176, 0x10ea, 0x3, 0x2, 0x2, 0x2, 0x178, 0x10f6, 
       0x3, 0x2, 0x2, 0x2, 0x17a, 0x10fc, 0x3, 0x2, 0x2, 0x2, 0x17c, 0x1115, 
       0x3, 0x2, 0x2, 0x2, 0x17e, 0x1119, 0x3, 0x2, 0x2, 0x2, 0x180, 0x111d, 
       0x3, 0x2, 0x2, 0x2, 0x182, 0x1128, 0x3, 0x2, 0x2, 0x2, 0x184, 0x1166, 
       0x3, 0x2, 0x2, 0x2, 0x186, 0x119e, 0x3, 0x2, 0x2, 0x2, 0x188, 0x11a0, 
       0x3, 0x2, 0x2, 0x2, 0x18a, 0x11ad, 0x3, 0x2, 0x2, 0x2, 0x18c, 0x11df, 
       0x3, 0x2, 0x2, 0x2, 0x18e, 0x11f1, 0x3, 0x2, 0x2, 0x2, 0x190, 0x1223, 
       0x3, 0x2, 0x2, 0x2, 0x192, 0x1225, 0x3, 0x2, 0x2, 0x2, 0x194, 0x1232, 
       0x3, 0x2, 0x2, 0x2, 0x196, 0x123d, 0x3, 0x2, 0x2, 0x2, 0x198, 0x1258, 
       0x3, 0x2, 0x2, 0x2, 0x19a, 0x1262, 0x3, 0x2, 0x2, 0x2, 0x19c, 0x126c, 
       0x3, 0x2, 0x2, 0x2, 0x19e, 0x126e, 0x3, 0x2, 0x2, 0x2, 0x1a0, 0x1278, 
       0x3, 0x2, 0x2, 0x2, 0x1a2, 0x127b, 0x3, 0x2, 0x2, 0x2, 0x1a4, 0x12d1, 
       0x3, 0x2, 0x2, 0x2, 0x1a6, 0x12e3, 0x3, 0x2, 0x2, 0x2, 0x1a8, 0x12e5, 
       0x3, 0x2, 0x2, 0x2, 0x1aa, 0x12e9, 0x3, 0x2, 0x2, 0x2, 0x1ac, 0x12f0, 
       0x3, 0x2, 0x2, 0x2, 0x1ae, 0x12f9, 0x3, 0x2, 0x2, 0x2, 0x1b0, 0x12ff, 
       0x3, 0x2, 0x2, 0x2, 0x1b2, 0x1306, 0x3, 0x2, 0x2, 0x2, 0x1b4, 0x131c, 
       0x3, 0x2, 0x2, 0x2, 0x1b6, 0x131e, 0x3, 0x2, 0x2, 0x2, 0x1b8, 0x1329, 
       0x3, 0x2, 0x2, 0x2, 0x1ba, 0x132f, 0x3, 0x2, 0x2, 0x2, 0x1bc, 0x1366, 
       0x3, 0x2, 0x2, 0x2, 0x1be, 0x13ff, 0x3, 0x2, 0x2, 0x2, 0x1c0, 0x140b, 
       0x3, 0x2, 0x2, 0x2, 0x1c2, 0x141a, 0x3, 0x2, 0x2, 0x2, 0x1c4, 0x1420, 
       0x3, 0x2, 0x2, 0x2, 0x1c6, 0x1433, 0x3, 0x2, 0x2, 0x2, 0x1c8, 0x143d, 
       0x3, 0x2, 0x2, 0x2, 0x1ca, 0x144b, 0x3, 0x2, 0x2, 0x2, 0x1cc, 0x144d, 
       0x3, 0x2, 0x2, 0x2, 0x1ce, 0x1450, 0x3, 0x2, 0x2, 0x2, 0x1d0, 0x1466, 
       0x3, 0x2, 0x2, 0x2, 0x1d2, 0x1472, 0x3, 0x2, 0x2, 0x2, 0x1d4, 0x147b, 
       0x3, 0x2, 0x2, 0x2, 0x1d6, 0x1487, 0x3, 0x2, 0x2, 0x2, 0x1d8, 0x148b, 
       0x3, 0x2, 0x2, 0x2, 0x1da, 0x148d, 0x3, 0x2, 0x2, 0x2, 0x1dc, 0x14b5, 
       0x3, 0x2, 0x2, 0x2, 0x1de, 0x14bc, 0x3, 0x2, 0x2, 0x2, 0x1e0, 0x14be, 
       0x3, 0x2, 0x2, 0x2, 0x1e2, 0x14d5, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0x14db, 
       0x3, 0x2, 0x2, 0x2, 0x1e6, 0x14e3, 0x3, 0x2, 0x2, 0x2, 0x1e8, 0x14e6, 
       0x3, 0x2, 0x2, 0x2, 0x1ea, 0x14e9, 0x3, 0x2, 0x2, 0x2, 0x1ec, 0x14fe, 
       0x3, 0x2, 0x2, 0x2, 0x1ee, 0x1513, 0x3, 0x2, 0x2, 0x2, 0x1f0, 0x151b, 
       0x3, 0x2, 0x2, 0x2, 0x1f2, 0x1541, 0x3, 0x2, 0x2, 0x2, 0x1f4, 0x154d, 
       0x3, 0x2, 0x2, 0x2, 0x1f6, 0x154f, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0x1555, 
       0x3, 0x2, 0x2, 0x2, 0x1fa, 0x1563, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0x1567, 
       0x3, 0x2, 0x2, 0x2, 0x1fe, 0x1572, 0x3, 0x2, 0x2, 0x2, 0x200, 0x1574, 
       0x3, 0x2, 0x2, 0x2, 0x202, 0x157a, 0x3, 0x2, 0x2, 0x2, 0x204, 0x157e, 
       0x3, 0x2, 0x2, 0x2, 0x206, 0x1580, 0x3, 0x2, 0x2, 0x2, 0x208, 0x1582, 
       0x3, 0x2, 0x2, 0x2, 0x20a, 0x1594, 0x3, 0x2, 0x2, 0x2, 0x20c, 0x15a4, 
       0x3, 0x2, 0x2, 0x2, 0x20e, 0x15a8, 0x3, 0x2, 0x2, 0x2, 0x210, 0x15ad, 
       0x3, 0x2, 0x2, 0x2, 0x212, 0x15b8, 0x3, 0x2, 0x2, 0x2, 0x214, 0x15bd, 
       0x3, 0x2, 0x2, 0x2, 0x216, 0x15bf, 0x3, 0x2, 0x2, 0x2, 0x218, 0x15c3, 
       0x3, 0x2, 0x2, 0x2, 0x21a, 0x15dc, 0x3, 0x2, 0x2, 0x2, 0x21c, 0x15de, 
       0x3, 0x2, 0x2, 0x2, 0x21e, 0x15e1, 0x3, 0x2, 0x2, 0x2, 0x220, 0x15e6, 
       0x3, 0x2, 0x2, 0x2, 0x222, 0x15f6, 0x3, 0x2, 0x2, 0x2, 0x224, 0x167b, 
       0x3, 0x2, 0x2, 0x2, 0x226, 0x167d, 0x3, 0x2, 0x2, 0x2, 0x228, 0x16a1, 
       0x3, 0x2, 0x2, 0x2, 0x22a, 0x16a3, 0x3, 0x2, 0x2, 0x2, 0x22c, 0x16a7, 
       0x3, 0x2, 0x2, 0x2, 0x22e, 0x16ad, 0x3, 0x2, 0x2, 0x2, 0x230, 0x16b5, 
       0x3, 0x2, 0x2, 0x2, 0x232, 0x16bd, 0x3, 0x2, 0x2, 0x2, 0x234, 0x16c5, 
       0x3, 0x2, 0x2, 0x2, 0x236, 0x16d0, 0x3, 0x2, 0x2, 0x2, 0x238, 0x16d8, 
       0x3, 0x2, 0x2, 0x2, 0x23a, 0x16e0, 0x3, 0x2, 0x2, 0x2, 0x23c, 0x16e8, 
       0x3, 0x2, 0x2, 0x2, 0x23e, 0x16f0, 0x3, 0x2, 0x2, 0x2, 0x240, 0x1702, 
       0x3, 0x2, 0x2, 0x2, 0x242, 0x1717, 0x3, 0x2, 0x2, 0x2, 0x244, 0x171b, 
       0x3, 0x2, 0x2, 0x2, 0x246, 0x171d, 0x3, 0x2, 0x2, 0x2, 0x248, 0x1720, 
       0x3, 0x2, 0x2, 0x2, 0x24a, 0x1735, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x17d8, 
       0x3, 0x2, 0x2, 0x2, 0x24e, 0x17da, 0x3, 0x2, 0x2, 0x2, 0x250, 0x17ed, 
       0x3, 0x2, 0x2, 0x2, 0x252, 0x17ef, 0x3, 0x2, 0x2, 0x2, 0x254, 0x182b, 
       0x3, 0x2, 0x2, 0x2, 0x256, 0x1844, 0x3, 0x2, 0x2, 0x2, 0x258, 0x1846, 
       0x3, 0x2, 0x2, 0x2, 0x25a, 0x184f, 0x3, 0x2, 0x2, 0x2, 0x25c, 0x1861, 
       0x3, 0x2, 0x2, 0x2, 0x25e, 0x186e, 0x3, 0x2, 0x2, 0x2, 0x260, 0x1879, 
       0x3, 0x2, 0x2, 0x2, 0x262, 0x18f0, 0x3, 0x2, 0x2, 0x2, 0x264, 0x1906, 
       0x3, 0x2, 0x2, 0x2, 0x266, 0x1916, 0x3, 0x2, 0x2, 0x2, 0x268, 0x191f, 
       0x3, 0x2, 0x2, 0x2, 0x26a, 0x1928, 0x3, 0x2, 0x2, 0x2, 0x26c, 0x192a, 
       0x3, 0x2, 0x2, 0x2, 0x26e, 0x1931, 0x3, 0x2, 0x2, 0x2, 0x270, 0x1933, 
       0x3, 0x2, 0x2, 0x2, 0x272, 0x1935, 0x3, 0x2, 0x2, 0x2, 0x274, 0x1937, 
       0x3, 0x2, 0x2, 0x2, 0x276, 0x1939, 0x3, 0x2, 0x2, 0x2, 0x278, 0x193b, 
       0x3, 0x2, 0x2, 0x2, 0x27a, 0x193d, 0x3, 0x2, 0x2, 0x2, 0x27c, 0x193f, 
       0x3, 0x2, 0x2, 0x2, 0x27e, 0x280, 0x5, 0x4, 0x3, 0x2, 0x27f, 0x27e, 
       0x3, 0x2, 0x2, 0x2, 0x27f, 0x280, 0x3, 0x2, 0x2, 0x2, 0x280, 0x282, 
       0x3, 0x2, 0x2, 0x2, 0x281, 0x283, 0x7, 0x3f9, 0x2, 0x2, 0x282, 0x281, 
       0x3, 0x2, 0x2, 0x2, 0x282, 0x283, 0x3, 0x2, 0x2, 0x2, 0x283, 0x284, 
       0x3, 0x2, 0x2, 0x2, 0x284, 0x285, 0x7, 0x2, 0x2, 0x3, 0x285, 0x3, 
       0x3, 0x2, 0x2, 0x2, 0x286, 0x288, 0x5, 0x6, 0x4, 0x2, 0x287, 0x289, 
       0x7, 0x3f9, 0x2, 0x2, 0x288, 0x287, 0x3, 0x2, 0x2, 0x2, 0x288, 0x289, 
       0x3, 0x2, 0x2, 0x2, 0x289, 0x28b, 0x3, 0x2, 0x2, 0x2, 0x28a, 0x28c, 
       0x7, 0x409, 0x2, 0x2, 0x28b, 0x28a, 0x3, 0x2, 0x2, 0x2, 0x28b, 0x28c, 
       0x3, 0x2, 0x2, 0x2, 0x28c, 0x28f, 0x3, 0x2, 0x2, 0x2, 0x28d, 0x28f, 
       0x5, 0x8, 0x5, 0x2, 0x28e, 0x286, 0x3, 0x2, 0x2, 0x2, 0x28e, 0x28d, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x292, 0x3, 0x2, 0x2, 0x2, 0x290, 0x28e, 
       0x3, 0x2, 0x2, 0x2, 0x290, 0x291, 0x3, 0x2, 0x2, 0x2, 0x291, 0x29b, 
       0x3, 0x2, 0x2, 0x2, 0x292, 0x290, 0x3, 0x2, 0x2, 0x2, 0x293, 0x298, 
       0x5, 0x6, 0x4, 0x2, 0x294, 0x296, 0x7, 0x3f9, 0x2, 0x2, 0x295, 0x294, 
       0x3, 0x2, 0x2, 0x2, 0x295, 0x296, 0x3, 0x2, 0x2, 0x2, 0x296, 0x297, 
       0x3, 0x2, 0x2, 0x2, 0x297, 0x299, 0x7, 0x409, 0x2, 0x2, 0x298, 0x295, 
       0x3, 0x2, 0x2, 0x2, 0x298, 0x299, 0x3, 0x2, 0x2, 0x2, 0x299, 0x29c, 
       0x3, 0x2, 0x2, 0x2, 0x29a, 0x29c, 0x5, 0x8, 0x5, 0x2, 0x29b, 0x293, 
       0x3, 0x2, 0x2, 0x2, 0x29b, 0x29a, 0x3, 0x2, 0x2, 0x2, 0x29c, 0x5, 
       0x3, 0x2, 0x2, 0x2, 0x29d, 0x2a5, 0x5, 0xa, 0x6, 0x2, 0x29e, 0x2a5, 
       0x5, 0xc, 0x7, 0x2, 0x29f, 0x2a5, 0x5, 0xe, 0x8, 0x2, 0x2a0, 0x2a5, 
       0x5, 0x10, 0x9, 0x2, 0x2a1, 0x2a5, 0x5, 0x12, 0xa, 0x2, 0x2a2, 0x2a5, 
       0x5, 0x16, 0xc, 0x2, 0x2a3, 0x2a5, 0x5, 0x18, 0xd, 0x2, 0x2a4, 0x29d, 
       0x3, 0x2, 0x2, 0x2, 0x2a4, 0x29e, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x29f, 
       0x3, 0x2, 0x2, 0x2, 0x2a4, 0x2a0, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x2a1, 
       0x3, 0x2, 0x2, 0x2, 0x2a4, 0x2a2, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x2a3, 
       0x3, 0x2, 0x2, 0x2, 0x2a5, 0x7, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x2a7, 
       0x7, 0x409, 0x2, 0x2, 0x2a7, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2a8, 0x2cc, 
       0x5, 0x1a, 0xe, 0x2, 0x2a9, 0x2cc, 0x5, 0x1c, 0xf, 0x2, 0x2aa, 0x2cc, 
       0x5, 0x1e, 0x10, 0x2, 0x2ab, 0x2cc, 0x5, 0x20, 0x11, 0x2, 0x2ac, 
       0x2cc, 0x5, 0x22, 0x12, 0x2, 0x2ad, 0x2cc, 0x5, 0x24, 0x13, 0x2, 
       0x2ae, 0x2cc, 0x5, 0x26, 0x14, 0x2, 0x2af, 0x2cc, 0x5, 0x28, 0x15, 
       0x2, 0x2b0, 0x2cc, 0x5, 0x2a, 0x16, 0x2, 0x2b1, 0x2cc, 0x5, 0x2c, 
       0x17, 0x2, 0x2b2, 0x2cc, 0x5, 0x2e, 0x18, 0x2, 0x2b3, 0x2cc, 0x5, 
       0x30, 0x19, 0x2, 0x2b4, 0x2cc, 0x5, 0x72, 0x3a, 0x2, 0x2b5, 0x2cc, 
       0x5, 0x74, 0x3b, 0x2, 0x2b6, 0x2cc, 0x5, 0x76, 0x3c, 0x2, 0x2b7, 
       0x2cc, 0x5, 0x78, 0x3d, 0x2, 0x2b8, 0x2cc, 0x5, 0x7a, 0x3e, 0x2, 
       0x2b9, 0x2cc, 0x5, 0x7c, 0x3f, 0x2, 0x2ba, 0x2cc, 0x5, 0x7e, 0x40, 
       0x2, 0x2bb, 0x2cc, 0x5, 0x80, 0x41, 0x2, 0x2bc, 0x2cc, 0x5, 0x82, 
       0x42, 0x2, 0x2bd, 0x2cc, 0x5, 0x84, 0x43, 0x2, 0x2be, 0x2cc, 0x5, 
       0x88, 0x45, 0x2, 0x2bf, 0x2cc, 0x5, 0x8a, 0x46, 0x2, 0x2c0, 0x2cc, 
       0x5, 0x8c, 0x47, 0x2, 0x2c1, 0x2cc, 0x5, 0x8e, 0x48, 0x2, 0x2c2, 
       0x2cc, 0x5, 0x90, 0x49, 0x2, 0x2c3, 0x2cc, 0x5, 0x92, 0x4a, 0x2, 
       0x2c4, 0x2cc, 0x5, 0x94, 0x4b, 0x2, 0x2c5, 0x2cc, 0x5, 0x96, 0x4c, 
       0x2, 0x2c6, 0x2cc, 0x5, 0x98, 0x4d, 0x2, 0x2c7, 0x2cc, 0x5, 0x9a, 
       0x4e, 0x2, 0x2c8, 0x2cc, 0x5, 0x9c, 0x4f, 0x2, 0x2c9, 0x2cc, 0x5, 
       0x9e, 0x50, 0x2, 0x2ca, 0x2cc, 0x5, 0xa2, 0x52, 0x2, 0x2cb, 0x2a8, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2a9, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2aa, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2ab, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2ac, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2ad, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2ae, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2af, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b0, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b1, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b2, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b3, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b4, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b5, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b6, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b7, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b8, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2b9, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2ba, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2bb, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2bc, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2bd, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2be, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2bf, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c0, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c1, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c2, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c3, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c4, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c5, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c6, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c7, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c8, 
       0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2c9, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2ca, 
       0x3, 0x2, 0x2, 0x2, 0x2cc, 0xb, 0x3, 0x2, 0x2, 0x2, 0x2cd, 0x2d8, 
       0x5, 0xb4, 0x5b, 0x2, 0x2ce, 0x2d8, 0x5, 0xac, 0x57, 0x2, 0x2cf, 
       0x2d8, 0x5, 0xb6, 0x5c, 0x2, 0x2d0, 0x2d8, 0x5, 0xa6, 0x54, 0x2, 
       0x2d1, 0x2d8, 0x5, 0xb2, 0x5a, 0x2, 0x2d2, 0x2d8, 0x5, 0xa4, 0x53, 
       0x2, 0x2d3, 0x2d8, 0x5, 0xae, 0x58, 0x2, 0x2d4, 0x2d8, 0x5, 0xb0, 
       0x59, 0x2, 0x2d5, 0x2d8, 0x5, 0xa8, 0x55, 0x2, 0x2d6, 0x2d8, 0x5, 
       0xaa, 0x56, 0x2, 0x2d7, 0x2cd, 0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2ce, 
       0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2cf, 0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d0, 
       0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d1, 0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d2, 
       0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d3, 0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d4, 
       0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d5, 0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d6, 
       0x3, 0x2, 0x2, 0x2, 0x2d8, 0xd, 0x3, 0x2, 0x2, 0x2, 0x2d9, 0x2e3, 
       0x5, 0x104, 0x83, 0x2, 0x2da, 0x2e3, 0x5, 0x106, 0x84, 0x2, 0x2db, 
       0x2e3, 0x5, 0x108, 0x85, 0x2, 0x2dc, 0x2e3, 0x5, 0x10a, 0x86, 0x2, 
       0x2dd, 0x2e3, 0x5, 0x10c, 0x87, 0x2, 0x2de, 0x2e3, 0x5, 0x10e, 0x88, 
       0x2, 0x2df, 0x2e3, 0x5, 0x110, 0x89, 0x2, 0x2e0, 0x2e3, 0x5, 0x112, 
       0x8a, 0x2, 0x2e1, 0x2e3, 0x5, 0x114, 0x8b, 0x2, 0x2e2, 0x2d9, 0x3, 
       0x2, 0x2, 0x2, 0x2e2, 0x2da, 0x3, 0x2, 0x2, 0x2, 0x2e2, 0x2db, 0x3, 
       0x2, 0x2, 0x2, 0x2e2, 0x2dc, 0x3, 0x2, 0x2, 0x2, 0x2e2, 0x2dd, 0x3, 
       0x2, 0x2, 0x2, 0x2e2, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2e2, 0x2df, 0x3, 
       0x2, 0x2, 0x2, 0x2e2, 0x2e0, 0x3, 0x2, 0x2, 0x2, 0x2e2, 0x2e1, 0x3, 
       0x2, 0x2, 0x2, 0x2e3, 0xf, 0x3, 0x2, 0x2, 0x2, 0x2e4, 0x2f4, 0x5, 
       0x124, 0x93, 0x2, 0x2e5, 0x2f4, 0x5, 0x126, 0x94, 0x2, 0x2e6, 0x2f4, 
       0x5, 0x128, 0x95, 0x2, 0x2e7, 0x2f4, 0x5, 0x12a, 0x96, 0x2, 0x2e8, 
       0x2f4, 0x5, 0x12c, 0x97, 0x2, 0x2e9, 0x2f4, 0x5, 0x12e, 0x98, 0x2, 
       0x2ea, 0x2f4, 0x5, 0x130, 0x99, 0x2, 0x2eb, 0x2f4, 0x5, 0x132, 0x9a, 
       0x2, 0x2ec, 0x2f4, 0x5, 0x134, 0x9b, 0x2, 0x2ed, 0x2f4, 0x5, 0x14c, 
       0xa7, 0x2, 0x2ee, 0x2f4, 0x5, 0x14e, 0xa8, 0x2, 0x2ef, 0x2f4, 0x5, 
       0x150, 0xa9, 0x2, 0x2f0, 0x2f4, 0x5, 0x152, 0xaa, 0x2, 0x2f1, 0x2f4, 
       0x5, 0x154, 0xab, 0x2, 0x2f2, 0x2f4, 0x5, 0x156, 0xac, 0x2, 0x2f3, 
       0x2e4, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2e5, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2e6, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2e7, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2e8, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2e9, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2ea, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2eb, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2ec, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2ed, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2ee, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2ef, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2f0, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2f1, 0x3, 0x2, 0x2, 0x2, 0x2f3, 
       0x2f2, 0x3, 0x2, 0x2, 0x2, 0x2f4, 0x11, 0x3, 0x2, 0x2, 0x2, 0x2f5, 
       0x2f9, 0x5, 0x158, 0xad, 0x2, 0x2f6, 0x2f9, 0x5, 0x15a, 0xae, 0x2, 
       0x2f7, 0x2f9, 0x5, 0x15c, 0xaf, 0x2, 0x2f8, 0x2f5, 0x3, 0x2, 0x2, 
       0x2, 0x2f8, 0x2f6, 0x3, 0x2, 0x2, 0x2, 0x2f8, 0x2f7, 0x3, 0x2, 0x2, 
       0x2, 0x2f9, 0x13, 0x3, 0x2, 0x2, 0x2, 0x2fa, 0x305, 0x5, 0x160, 0xb1, 
       0x2, 0x2fb, 0x305, 0x5, 0x162, 0xb2, 0x2, 0x2fc, 0x305, 0x5, 0x164, 
       0xb3, 0x2, 0x2fd, 0x305, 0x5, 0x168, 0xb5, 0x2, 0x2fe, 0x305, 0x5, 
       0x16a, 0xb6, 0x2, 0x2ff, 0x305, 0x5, 0x16c, 0xb7, 0x2, 0x300, 0x305, 
       0x5, 0x170, 0xb9, 0x2, 0x301, 0x305, 0x5, 0x166, 0xb4, 0x2, 0x302, 
       0x305, 0x5, 0x16e, 0xb8, 0x2, 0x303, 0x305, 0x5, 0x172, 0xba, 0x2, 
       0x304, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x304, 0x2fb, 0x3, 0x2, 0x2, 0x2, 
       0x304, 0x2fc, 0x3, 0x2, 0x2, 0x2, 0x304, 0x2fd, 0x3, 0x2, 0x2, 0x2, 
       0x304, 0x2fe, 0x3, 0x2, 0x2, 0x2, 0x304, 0x2ff, 0x3, 0x2, 0x2, 0x2, 
       0x304, 0x300, 0x3, 0x2, 0x2, 0x2, 0x304, 0x301, 0x3, 0x2, 0x2, 0x2, 
       0x304, 0x302, 0x3, 0x2, 0x2, 0x2, 0x304, 0x303, 0x3, 0x2, 0x2, 0x2, 
       0x305, 0x15, 0x3, 0x2, 0x2, 0x2, 0x306, 0x320, 0x5, 0x184, 0xc3, 
       0x2, 0x307, 0x320, 0x5, 0x186, 0xc4, 0x2, 0x308, 0x320, 0x5, 0x188, 
       0xc5, 0x2, 0x309, 0x320, 0x5, 0x18a, 0xc6, 0x2, 0x30a, 0x320, 0x5, 
       0x18c, 0xc7, 0x2, 0x30b, 0x320, 0x5, 0x18e, 0xc8, 0x2, 0x30c, 0x320, 
       0x5, 0x190, 0xc9, 0x2, 0x30d, 0x320, 0x5, 0x192, 0xca, 0x2, 0x30e, 
       0x320, 0x5, 0x1aa, 0xd6, 0x2, 0x30f, 0x320, 0x5, 0x1ac, 0xd7, 0x2, 
       0x310, 0x320, 0x5, 0x1ae, 0xd8, 0x2, 0x311, 0x320, 0x5, 0x1b0, 0xd9, 
       0x2, 0x312, 0x320, 0x5, 0x1b2, 0xda, 0x2, 0x313, 0x320, 0x5, 0x1b6, 
       0xdc, 0x2, 0x314, 0x320, 0x5, 0x1b8, 0xdd, 0x2, 0x315, 0x320, 0x5, 
       0x1ba, 0xde, 0x2, 0x316, 0x320, 0x5, 0x1bc, 0xdf, 0x2, 0x317, 0x320, 
       0x5, 0x1be, 0xe0, 0x2, 0x318, 0x320, 0x5, 0x1cc, 0xe7, 0x2, 0x319, 
       0x320, 0x5, 0x1ce, 0xe8, 0x2, 0x31a, 0x320, 0x5, 0x1d0, 0xe9, 0x2, 
       0x31b, 0x320, 0x5, 0x1d2, 0xea, 0x2, 0x31c, 0x320, 0x5, 0x1d4, 0xeb, 
       0x2, 0x31d, 0x320, 0x5, 0x1d6, 0xec, 0x2, 0x31e, 0x320, 0x5, 0x1d8, 
       0xed, 0x2, 0x31f, 0x306, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x307, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x308, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x309, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x30b, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x30c, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x30d, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x30e, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x30f, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x310, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x311, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x312, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x313, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x314, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x315, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x316, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x317, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x318, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x319, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x31a, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x31b, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x31c, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x31d, 0x3, 0x2, 
       0x2, 0x2, 0x31f, 0x31e, 0x3, 0x2, 0x2, 0x2, 0x320, 0x17, 0x3, 0x2, 
       0x2, 0x2, 0x321, 0x329, 0x5, 0x1e2, 0xf2, 0x2, 0x322, 0x329, 0x5, 
       0x1e4, 0xf3, 0x2, 0x323, 0x329, 0x5, 0x1e6, 0xf4, 0x2, 0x324, 0x329, 
       0x5, 0x1e8, 0xf5, 0x2, 0x325, 0x329, 0x5, 0x1ea, 0xf6, 0x2, 0x326, 
       0x329, 0x5, 0x1ec, 0xf7, 0x2, 0x327, 0x329, 0x5, 0x1f0, 0xf9, 0x2, 
       0x328, 0x321, 0x3, 0x2, 0x2, 0x2, 0x328, 0x322, 0x3, 0x2, 0x2, 0x2, 
       0x328, 0x323, 0x3, 0x2, 0x2, 0x2, 0x328, 0x324, 0x3, 0x2, 0x2, 0x2, 
       0x328, 0x325, 0x3, 0x2, 0x2, 0x2, 0x328, 0x326, 0x3, 0x2, 0x2, 0x2, 
       0x328, 0x327, 0x3, 0x2, 0x2, 0x2, 0x329, 0x19, 0x3, 0x2, 0x2, 0x2, 
       0x32a, 0x32b, 0x7, 0x20, 0x2, 0x2, 0x32b, 0x32d, 0x9, 0x2, 0x2, 0x2, 
       0x32c, 0x32e, 0x5, 0x248, 0x125, 0x2, 0x32d, 0x32c, 0x3, 0x2, 0x2, 
       0x2, 0x32d, 0x32e, 0x3, 0x2, 0x2, 0x2, 0x32e, 0x32f, 0x3, 0x2, 0x2, 
       0x2, 0x32f, 0x333, 0x5, 0x210, 0x109, 0x2, 0x330, 0x332, 0x5, 0x32, 
       0x1a, 0x2, 0x331, 0x330, 0x3, 0x2, 0x2, 0x2, 0x332, 0x335, 0x3, 0x2, 
       0x2, 0x2, 0x333, 0x331, 0x3, 0x2, 0x2, 0x2, 0x333, 0x334, 0x3, 0x2, 
       0x2, 0x2, 0x334, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x335, 0x333, 0x3, 0x2, 
       0x2, 0x2, 0x336, 0x338, 0x7, 0x20, 0x2, 0x2, 0x337, 0x339, 0x5, 0x34, 
       0x1b, 0x2, 0x338, 0x337, 0x3, 0x2, 0x2, 0x2, 0x338, 0x339, 0x3, 0x2, 
       0x2, 0x2, 0x339, 0x33a, 0x3, 0x2, 0x2, 0x2, 0x33a, 0x33c, 0x7, 0x15e, 
       0x2, 0x2, 0x33b, 0x33d, 0x5, 0x248, 0x125, 0x2, 0x33c, 0x33b, 0x3, 
       0x2, 0x2, 0x2, 0x33c, 0x33d, 0x3, 0x2, 0x2, 0x2, 0x33d, 0x33e, 0x3, 
       0x2, 0x2, 0x2, 0x33e, 0x33f, 0x5, 0x1f6, 0xfc, 0x2, 0x33f, 0x340, 
       0x7, 0x6c, 0x2, 0x2, 0x340, 0x341, 0x7, 0x207, 0x2, 0x2, 0x341, 0x348, 
       0x5, 0x36, 0x1c, 0x2, 0x342, 0x343, 0x7, 0x6c, 0x2, 0x2, 0x343, 0x345, 
       0x7, 0x136, 0x2, 0x2, 0x344, 0x346, 0x7, 0x68, 0x2, 0x2, 0x345, 0x344, 
       0x3, 0x2, 0x2, 0x2, 0x345, 0x346, 0x3, 0x2, 0x2, 0x2, 0x346, 0x347, 
       0x3, 0x2, 0x2, 0x2, 0x347, 0x349, 0x7, 0x1e0, 0x2, 0x2, 0x348, 0x342, 
       0x3, 0x2, 0x2, 0x2, 0x348, 0x349, 0x3, 0x2, 0x2, 0x2, 0x349, 0x34b, 
       0x3, 0x2, 0x2, 0x2, 0x34a, 0x34c, 0x5, 0x3e, 0x20, 0x2, 0x34b, 0x34a, 
       0x3, 0x2, 0x2, 0x2, 0x34b, 0x34c, 0x3, 0x2, 0x2, 0x2, 0x34c, 0x34f, 
       0x3, 0x2, 0x2, 0x2, 0x34d, 0x34e, 0x7, 0x133, 0x2, 0x2, 0x34e, 0x350, 
       0x7, 0x415, 0x2, 0x2, 0x34f, 0x34d, 0x3, 0x2, 0x2, 0x2, 0x34f, 0x350, 
       0x3, 0x2, 0x2, 0x2, 0x350, 0x351, 0x3, 0x2, 0x2, 0x2, 0x351, 0x352, 
       0x7, 0x150, 0x2, 0x2, 0x352, 0x353, 0x5, 0x15e, 0xb0, 0x2, 0x353, 
       0x1d, 0x3, 0x2, 0x2, 0x2, 0x354, 0x356, 0x7, 0x20, 0x2, 0x2, 0x355, 
       0x357, 0x9, 0x3, 0x2, 0x2, 0x356, 0x355, 0x3, 0x2, 0x2, 0x2, 0x356, 
       0x357, 0x3, 0x2, 0x2, 0x2, 0x357, 0x359, 0x3, 0x2, 0x2, 0x2, 0x358, 
       0x35a, 0x9, 0x4, 0x2, 0x2, 0x359, 0x358, 0x3, 0x2, 0x2, 0x2, 0x359, 
       0x35a, 0x3, 0x2, 0x2, 0x2, 0x35a, 0x35b, 0x3, 0x2, 0x2, 0x2, 0x35b, 
       0x35c, 0x7, 0x4a, 0x2, 0x2, 0x35c, 0x35e, 0x5, 0x210, 0x109, 0x2, 
       0x35d, 0x35f, 0x5, 0x40, 0x21, 0x2, 0x35e, 0x35d, 0x3, 0x2, 0x2, 
       0x2, 0x35e, 0x35f, 0x3, 0x2, 0x2, 0x2, 0x35f, 0x360, 0x3, 0x2, 0x2, 
       0x2, 0x360, 0x361, 0x7, 0x6c, 0x2, 0x2, 0x361, 0x362, 0x5, 0x1f8, 
       0xfd, 0x2, 0x362, 0x366, 0x5, 0x234, 0x11b, 0x2, 0x363, 0x365, 0x5, 
       0x42, 0x22, 0x2, 0x364, 0x363, 0x3, 0x2, 0x2, 0x2, 0x365, 0x368, 
       0x3, 0x2, 0x2, 0x2, 0x366, 0x364, 0x3, 0x2, 0x2, 0x2, 0x366, 0x367, 
       0x3, 0x2, 0x2, 0x2, 0x367, 0x375, 0x3, 0x2, 0x2, 0x2, 0x368, 0x366, 
       0x3, 0x2, 0x2, 0x2, 0x369, 0x36b, 0x7, 0x114, 0x2, 0x2, 0x36a, 0x36c, 
       0x7, 0x3fd, 0x2, 0x2, 0x36b, 0x36a, 0x3, 0x2, 0x2, 0x2, 0x36b, 0x36c, 
       0x3, 0x2, 0x2, 0x2, 0x36c, 0x36d, 0x3, 0x2, 0x2, 0x2, 0x36d, 0x374, 
       0x9, 0x5, 0x2, 0x2, 0x36e, 0x370, 0x7, 0x5f, 0x2, 0x2, 0x36f, 0x371, 
       0x7, 0x3fd, 0x2, 0x2, 0x370, 0x36f, 0x3, 0x2, 0x2, 0x2, 0x370, 0x371, 
       0x3, 0x2, 0x2, 0x2, 0x371, 0x372, 0x3, 0x2, 0x2, 0x2, 0x372, 0x374, 
       0x9, 0x6, 0x2, 0x2, 0x373, 0x369, 0x3, 0x2, 0x2, 0x2, 0x373, 0x36e, 
       0x3, 0x2, 0x2, 0x2, 0x374, 0x377, 0x3, 0x2, 0x2, 0x2, 0x375, 0x373, 
       0x3, 0x2, 0x2, 0x2, 0x375, 0x376, 0x3, 0x2, 0x2, 0x2, 0x376, 0x1f, 
       0x3, 0x2, 0x2, 0x2, 0x377, 0x375, 0x3, 0x2, 0x2, 0x2, 0x378, 0x379, 
       0x7, 0x20, 0x2, 0x2, 0x379, 0x37a, 0x7, 0x195, 0x2, 0x2, 0x37a, 0x37b, 
       0x7, 0x44, 0x2, 0x2, 0x37b, 0x37c, 0x5, 0x210, 0x109, 0x2, 0x37c, 
       0x37d, 0x7, 0x7, 0x2, 0x2, 0x37d, 0x37e, 0x7, 0x23a, 0x2, 0x2, 0x37e, 
       0x384, 0x7, 0x415, 0x2, 0x2, 0x37f, 0x381, 0x7, 0x180, 0x2, 0x2, 
       0x380, 0x382, 0x7, 0x3fd, 0x2, 0x2, 0x381, 0x380, 0x3, 0x2, 0x2, 
       0x2, 0x381, 0x382, 0x3, 0x2, 0x2, 0x2, 0x382, 0x383, 0x3, 0x2, 0x2, 
       0x2, 0x383, 0x385, 0x5, 0x218, 0x10d, 0x2, 0x384, 0x37f, 0x3, 0x2, 
       0x2, 0x2, 0x384, 0x385, 0x3, 0x2, 0x2, 0x2, 0x385, 0x38b, 0x3, 0x2, 
       0x2, 0x2, 0x386, 0x388, 0x7, 0x23b, 0x2, 0x2, 0x387, 0x389, 0x7, 
       0x3fd, 0x2, 0x2, 0x388, 0x387, 0x3, 0x2, 0x2, 0x2, 0x388, 0x389, 
       0x3, 0x2, 0x2, 0x2, 0x389, 0x38a, 0x3, 0x2, 0x2, 0x2, 0x38a, 0x38c, 
       0x5, 0x218, 0x10d, 0x2, 0x38b, 0x386, 0x3, 0x2, 0x2, 0x2, 0x38b, 
       0x38c, 0x3, 0x2, 0x2, 0x2, 0x38c, 0x392, 0x3, 0x2, 0x2, 0x2, 0x38d, 
       0x38f, 0x7, 0x1ea, 0x2, 0x2, 0x38e, 0x390, 0x7, 0x3fd, 0x2, 0x2, 
       0x38f, 0x38e, 0x3, 0x2, 0x2, 0x2, 0x38f, 0x390, 0x3, 0x2, 0x2, 0x2, 
       0x390, 0x391, 0x3, 0x2, 0x2, 0x2, 0x391, 0x393, 0x5, 0x218, 0x10d, 
       0x2, 0x392, 0x38d, 0x3, 0x2, 0x2, 0x2, 0x392, 0x393, 0x3, 0x2, 0x2, 
       0x2, 0x393, 0x399, 0x3, 0x2, 0x2, 0x2, 0x394, 0x396, 0x7, 0x1c4, 
       0x2, 0x2, 0x395, 0x397, 0x7, 0x3fd, 0x2, 0x2, 0x396, 0x395, 0x3, 
       0x2, 0x2, 0x2, 0x396, 0x397, 0x3, 0x2, 0x2, 0x2, 0x397, 0x398, 0x3, 
       0x2, 0x2, 0x2, 0x398, 0x39a, 0x5, 0x210, 0x109, 0x2, 0x399, 0x394, 
       0x3, 0x2, 0x2, 0x2, 0x399, 0x39a, 0x3, 0x2, 0x2, 0x2, 0x39a, 0x39c, 
       0x3, 0x2, 0x2, 0x2, 0x39b, 0x39d, 0x7, 0x249, 0x2, 0x2, 0x39c, 0x39b, 
       0x3, 0x2, 0x2, 0x2, 0x39c, 0x39d, 0x3, 0x2, 0x2, 0x2, 0x39d, 0x3a3, 
       0x3, 0x2, 0x2, 0x2, 0x39e, 0x3a0, 0x7, 0x133, 0x2, 0x2, 0x39f, 0x3a1, 
       0x7, 0x3fd, 0x2, 0x2, 0x3a0, 0x39f, 0x3, 0x2, 0x2, 0x2, 0x3a0, 0x3a1, 
       0x3, 0x2, 0x2, 0x2, 0x3a1, 0x3a2, 0x3, 0x2, 0x2, 0x2, 0x3a2, 0x3a4, 
       0x7, 0x415, 0x2, 0x2, 0x3a3, 0x39e, 0x3, 0x2, 0x2, 0x2, 0x3a3, 0x3a4, 
       0x3, 0x2, 0x2, 0x2, 0x3a4, 0x3a5, 0x3, 0x2, 0x2, 0x2, 0x3a5, 0x3a7, 
       0x7, 0x158, 0x2, 0x2, 0x3a6, 0x3a8, 0x7, 0x3fd, 0x2, 0x2, 0x3a7, 
       0x3a6, 0x3, 0x2, 0x2, 0x2, 0x3a7, 0x3a8, 0x3, 0x2, 0x2, 0x2, 0x3a8, 
       0x3a9, 0x3, 0x2, 0x2, 0x2, 0x3a9, 0x3aa, 0x5, 0x206, 0x104, 0x2, 
       0x3aa, 0x21, 0x3, 0x2, 0x2, 0x2, 0x3ab, 0x3ad, 0x7, 0x20, 0x2, 0x2, 
       0x3ac, 0x3ae, 0x5, 0x34, 0x1b, 0x2, 0x3ad, 0x3ac, 0x3, 0x2, 0x2, 
       0x2, 0x3ad, 0x3ae, 0x3, 0x2, 0x2, 0x2, 0x3ae, 0x3af, 0x3, 0x2, 0x2, 
       0x2, 0x3af, 0x3b0, 0x7, 0x77, 0x2, 0x2, 0x3b0, 0x3b1, 0x5, 0x1f6, 
       0xfc, 0x2, 0x3b1, 0x3b3, 0x7, 0x406, 0x2, 0x2, 0x3b2, 0x3b4, 0x5, 
       0x44, 0x23, 0x2, 0x3b3, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x3b3, 0x3b4, 
       0x3, 0x2, 0x2, 0x2, 0x3b4, 0x3b9, 0x3, 0x2, 0x2, 0x2, 0x3b5, 0x3b6, 
       0x7, 0x408, 0x2, 0x2, 0x3b6, 0x3b8, 0x5, 0x44, 0x23, 0x2, 0x3b7, 
       0x3b5, 0x3, 0x2, 0x2, 0x2, 0x3b8, 0x3bb, 0x3, 0x2, 0x2, 0x2, 0x3b9, 
       0x3b7, 0x3, 0x2, 0x2, 0x2, 0x3b9, 0x3ba, 0x3, 0x2, 0x2, 0x2, 0x3ba, 
       0x3bc, 0x3, 0x2, 0x2, 0x2, 0x3bb, 0x3b9, 0x3, 0x2, 0x2, 0x2, 0x3bc, 
       0x3c0, 0x7, 0x407, 0x2, 0x2, 0x3bd, 0x3bf, 0x5, 0x48, 0x25, 0x2, 
       0x3be, 0x3bd, 0x3, 0x2, 0x2, 0x2, 0x3bf, 0x3c2, 0x3, 0x2, 0x2, 0x2, 
       0x3c0, 0x3be, 0x3, 0x2, 0x2, 0x2, 0x3c0, 0x3c1, 0x3, 0x2, 0x2, 0x2, 
       0x3c1, 0x3c3, 0x3, 0x2, 0x2, 0x2, 0x3c2, 0x3c0, 0x3, 0x2, 0x2, 0x2, 
       0x3c3, 0x3c4, 0x5, 0x15e, 0xb0, 0x2, 0x3c4, 0x23, 0x3, 0x2, 0x2, 
       0x2, 0x3c5, 0x3c7, 0x7, 0x20, 0x2, 0x2, 0x3c6, 0x3c8, 0x5, 0x34, 
       0x1b, 0x2, 0x3c7, 0x3c6, 0x3, 0x2, 0x2, 0x2, 0x3c7, 0x3c8, 0x3, 0x2, 
       0x2, 0x2, 0x3c8, 0x3c9, 0x3, 0x2, 0x2, 0x2, 0x3c9, 0x3ca, 0x7, 0x172, 
       0x2, 0x2, 0x3ca, 0x3cb, 0x5, 0x1f6, 0xfc, 0x2, 0x3cb, 0x3cd, 0x7, 
       0x406, 0x2, 0x2, 0x3cc, 0x3ce, 0x5, 0x46, 0x24, 0x2, 0x3cd, 0x3cc, 
       0x3, 0x2, 0x2, 0x2, 0x3cd, 0x3ce, 0x3, 0x2, 0x2, 0x2, 0x3ce, 0x3d3, 
       0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3d0, 0x7, 0x408, 0x2, 0x2, 0x3d0, 0x3d2, 
       0x5, 0x46, 0x24, 0x2, 0x3d1, 0x3cf, 0x3, 0x2, 0x2, 0x2, 0x3d2, 0x3d5, 
       0x3, 0x2, 0x2, 0x2, 0x3d3, 0x3d1, 0x3, 0x2, 0x2, 0x2, 0x3d3, 0x3d4, 
       0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3d5, 0x3d3, 
       0x3, 0x2, 0x2, 0x2, 0x3d6, 0x3d7, 0x7, 0x407, 0x2, 0x2, 0x3d7, 0x3d8, 
       0x7, 0x1fe, 0x2, 0x2, 0x3d8, 0x3dc, 0x5, 0x224, 0x113, 0x2, 0x3d9, 
       0x3db, 0x5, 0x48, 0x25, 0x2, 0x3da, 0x3d9, 0x3, 0x2, 0x2, 0x2, 0x3db, 
       0x3de, 0x3, 0x2, 0x2, 0x2, 0x3dc, 0x3da, 0x3, 0x2, 0x2, 0x2, 0x3dc, 
       0x3dd, 0x3, 0x2, 0x2, 0x2, 0x3dd, 0x3e1, 0x3, 0x2, 0x2, 0x2, 0x3de, 
       0x3dc, 0x3, 0x2, 0x2, 0x2, 0x3df, 0x3e2, 0x5, 0x15e, 0xb0, 0x2, 0x3e0, 
       0x3e2, 0x5, 0x16e, 0xb8, 0x2, 0x3e1, 0x3df, 0x3, 0x2, 0x2, 0x2, 0x3e1, 
       0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e2, 0x25, 0x3, 0x2, 0x2, 0x2, 0x3e3, 
       0x3e4, 0x7, 0x20, 0x2, 0x2, 0x3e4, 0x3e5, 0x7, 0x209, 0x2, 0x2, 0x3e5, 
       0x3e6, 0x5, 0x210, 0x109, 0x2, 0x3e6, 0x3e7, 0x7, 0x3e, 0x2, 0x2, 
       0x3e7, 0x3e8, 0x7, 0x145, 0x2, 0x2, 0x3e8, 0x3e9, 0x7, 0x24d, 0x2, 
       0x2, 0x3e9, 0x3ea, 0x9, 0x7, 0x2, 0x2, 0x3ea, 0x3eb, 0x7, 0x1d0, 
       0x2, 0x2, 0x3eb, 0x3ec, 0x7, 0x406, 0x2, 0x2, 0x3ec, 0x3f1, 0x5, 
       0x4a, 0x26, 0x2, 0x3ed, 0x3ee, 0x7, 0x408, 0x2, 0x2, 0x3ee, 0x3f0, 
       0x5, 0x4a, 0x26, 0x2, 0x3ef, 0x3ed, 0x3, 0x2, 0x2, 0x2, 0x3f0, 0x3f3, 
       0x3, 0x2, 0x2, 0x2, 0x3f1, 0x3ef, 0x3, 0x2, 0x2, 0x2, 0x3f1, 0x3f2, 
       0x3, 0x2, 0x2, 0x2, 0x3f2, 0x3f4, 0x3, 0x2, 0x2, 0x2, 0x3f3, 0x3f1, 
       0x3, 0x2, 0x2, 0x2, 0x3f4, 0x3f5, 0x7, 0x407, 0x2, 0x2, 0x3f5, 0x27, 
       0x3, 0x2, 0x2, 0x2, 0x3f6, 0x3f8, 0x7, 0x20, 0x2, 0x2, 0x3f7, 0x3f9, 
       0x7, 0x231, 0x2, 0x2, 0x3f8, 0x3f7, 0x3, 0x2, 0x2, 0x2, 0x3f8, 0x3f9, 
       0x3, 0x2, 0x2, 0x2, 0x3f9, 0x3fa, 0x3, 0x2, 0x2, 0x2, 0x3fa, 0x3fc, 
       0x7, 0x9c, 0x2, 0x2, 0x3fb, 0x3fd, 0x5, 0x248, 0x125, 0x2, 0x3fc, 
       0x3fb, 0x3, 0x2, 0x2, 0x2, 0x3fc, 0x3fd, 0x3, 0x2, 0x2, 0x2, 0x3fd, 
       0x3fe, 0x3, 0x2, 0x2, 0x2, 0x3fe, 0x406, 0x5, 0x1f8, 0xfd, 0x2, 0x3ff, 
       0x400, 0x7, 0x5a, 0x2, 0x2, 0x400, 0x407, 0x5, 0x1f8, 0xfd, 0x2, 
       0x401, 0x402, 0x7, 0x406, 0x2, 0x2, 0x402, 0x403, 0x7, 0x5a, 0x2, 
       0x2, 0x403, 0x404, 0x5, 0x1f8, 0xfd, 0x2, 0x404, 0x405, 0x7, 0x407, 
       0x2, 0x2, 0x405, 0x407, 0x3, 0x2, 0x2, 0x2, 0x406, 0x3ff, 0x3, 0x2, 
       0x2, 0x2, 0x406, 0x401, 0x3, 0x2, 0x2, 0x2, 0x407, 0x445, 0x3, 0x2, 
       0x2, 0x2, 0x408, 0x40a, 0x7, 0x20, 0x2, 0x2, 0x409, 0x40b, 0x7, 0x231, 
       0x2, 0x2, 0x40a, 0x409, 0x3, 0x2, 0x2, 0x2, 0x40a, 0x40b, 0x3, 0x2, 
       0x2, 0x2, 0x40b, 0x40c, 0x3, 0x2, 0x2, 0x2, 0x40c, 0x40e, 0x7, 0x9c, 
       0x2, 0x2, 0x40d, 0x40f, 0x5, 0x248, 0x125, 0x2, 0x40e, 0x40d, 0x3, 
       0x2, 0x2, 0x2, 0x40e, 0x40f, 0x3, 0x2, 0x2, 0x2, 0x40f, 0x410, 0x3, 
       0x2, 0x2, 0x2, 0x410, 0x412, 0x5, 0x1f8, 0xfd, 0x2, 0x411, 0x413, 
       0x5, 0x4c, 0x27, 0x2, 0x412, 0x411, 0x3, 0x2, 0x2, 0x2, 0x412, 0x413, 
       0x3, 0x2, 0x2, 0x2, 0x413, 0x41e, 0x3, 0x2, 0x2, 0x2, 0x414, 0x41b, 
       0x5, 0x5e, 0x30, 0x2, 0x415, 0x417, 0x7, 0x408, 0x2, 0x2, 0x416, 
       0x415, 0x3, 0x2, 0x2, 0x2, 0x416, 0x417, 0x3, 0x2, 0x2, 0x2, 0x417, 
       0x418, 0x3, 0x2, 0x2, 0x2, 0x418, 0x41a, 0x5, 0x5e, 0x30, 0x2, 0x419, 
       0x416, 0x3, 0x2, 0x2, 0x2, 0x41a, 0x41d, 0x3, 0x2, 0x2, 0x2, 0x41b, 
       0x419, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x41c, 0x3, 0x2, 0x2, 0x2, 0x41c, 
       0x41f, 0x3, 0x2, 0x2, 0x2, 0x41d, 0x41b, 0x3, 0x2, 0x2, 0x2, 0x41e, 
       0x414, 0x3, 0x2, 0x2, 0x2, 0x41e, 0x41f, 0x3, 0x2, 0x2, 0x2, 0x41f, 
       0x421, 0x3, 0x2, 0x2, 0x2, 0x420, 0x422, 0x5, 0x62, 0x32, 0x2, 0x421, 
       0x420, 0x3, 0x2, 0x2, 0x2, 0x421, 0x422, 0x3, 0x2, 0x2, 0x2, 0x422, 
       0x424, 0x3, 0x2, 0x2, 0x2, 0x423, 0x425, 0x9, 0x8, 0x2, 0x2, 0x424, 
       0x423, 0x3, 0x2, 0x2, 0x2, 0x424, 0x425, 0x3, 0x2, 0x2, 0x2, 0x425, 
       0x427, 0x3, 0x2, 0x2, 0x2, 0x426, 0x428, 0x7, 0xd, 0x2, 0x2, 0x427, 
       0x426, 0x3, 0x2, 0x2, 0x2, 0x427, 0x428, 0x3, 0x2, 0x2, 0x2, 0x428, 
       0x429, 0x3, 0x2, 0x2, 0x2, 0x429, 0x42a, 0x5, 0xb4, 0x5b, 0x2, 0x42a, 
       0x445, 0x3, 0x2, 0x2, 0x2, 0x42b, 0x42d, 0x7, 0x20, 0x2, 0x2, 0x42c, 
       0x42e, 0x7, 0x231, 0x2, 0x2, 0x42d, 0x42c, 0x3, 0x2, 0x2, 0x2, 0x42d, 
       0x42e, 0x3, 0x2, 0x2, 0x2, 0x42e, 0x42f, 0x3, 0x2, 0x2, 0x2, 0x42f, 
       0x431, 0x7, 0x9c, 0x2, 0x2, 0x430, 0x432, 0x5, 0x248, 0x125, 0x2, 
       0x431, 0x430, 0x3, 0x2, 0x2, 0x2, 0x431, 0x432, 0x3, 0x2, 0x2, 0x2, 
       0x432, 0x433, 0x3, 0x2, 0x2, 0x2, 0x433, 0x434, 0x5, 0x1f8, 0xfd, 
       0x2, 0x434, 0x43f, 0x5, 0x4c, 0x27, 0x2, 0x435, 0x43c, 0x5, 0x5e, 
       0x30, 0x2, 0x436, 0x438, 0x7, 0x408, 0x2, 0x2, 0x437, 0x436, 0x3, 
       0x2, 0x2, 0x2, 0x437, 0x438, 0x3, 0x2, 0x2, 0x2, 0x438, 0x439, 0x3, 
       0x2, 0x2, 0x2, 0x439, 0x43b, 0x5, 0x5e, 0x30, 0x2, 0x43a, 0x437, 
       0x3, 0x2, 0x2, 0x2, 0x43b, 0x43e, 0x3, 0x2, 0x2, 0x2, 0x43c, 0x43a, 
       0x3, 0x2, 0x2, 0x2, 0x43c, 0x43d, 0x3, 0x2, 0x2, 0x2, 0x43d, 0x440, 
       0x3, 0x2, 0x2, 0x2, 0x43e, 0x43c, 0x3, 0x2, 0x2, 0x2, 0x43f, 0x435, 
       0x3, 0x2, 0x2, 0x2, 0x43f, 0x440, 0x3, 0x2, 0x2, 0x2, 0x440, 0x442, 
       0x3, 0x2, 0x2, 0x2, 0x441, 0x443, 0x5, 0x62, 0x32, 0x2, 0x442, 0x441, 
       0x3, 0x2, 0x2, 0x2, 0x442, 0x443, 0x3, 0x2, 0x2, 0x2, 0x443, 0x445, 
       0x3, 0x2, 0x2, 0x2, 0x444, 0x3f6, 0x3, 0x2, 0x2, 0x2, 0x444, 0x408, 
       0x3, 0x2, 0x2, 0x2, 0x444, 0x42b, 0x3, 0x2, 0x2, 0x2, 0x445, 0x29, 
       0x3, 0x2, 0x2, 0x2, 0x446, 0x447, 0x7, 0x20, 0x2, 0x2, 0x447, 0x448, 
       0x7, 0x230, 0x2, 0x2, 0x448, 0x449, 0x5, 0x210, 0x109, 0x2, 0x449, 
       0x44a, 0x7, 0x7, 0x2, 0x2, 0x44a, 0x44b, 0x7, 0x146, 0x2, 0x2, 0x44b, 
       0x44f, 0x7, 0x415, 0x2, 0x2, 0x44c, 0x44d, 0x7, 0x16a, 0x2, 0x2, 
       0x44d, 0x44e, 0x7, 0x3fd, 0x2, 0x2, 0x44e, 0x450, 0x5, 0x218, 0x10d, 
       0x2, 0x44f, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44f, 0x450, 0x3, 0x2, 0x2, 
       0x2, 0x450, 0x456, 0x3, 0x2, 0x2, 0x2, 0x451, 0x453, 0x7, 0x158, 
       0x2, 0x2, 0x452, 0x454, 0x7, 0x3fd, 0x2, 0x2, 0x453, 0x452, 0x3, 
       0x2, 0x2, 0x2, 0x453, 0x454, 0x3, 0x2, 0x2, 0x2, 0x454, 0x455, 0x3, 
       0x2, 0x2, 0x2, 0x455, 0x457, 0x5, 0x206, 0x104, 0x2, 0x456, 0x451, 
       0x3, 0x2, 0x2, 0x2, 0x456, 0x457, 0x3, 0x2, 0x2, 0x2, 0x457, 0x2b, 
       0x3, 0x2, 0x2, 0x2, 0x458, 0x459, 0x7, 0x20, 0x2, 0x2, 0x459, 0x45a, 
       0x7, 0x230, 0x2, 0x2, 0x45a, 0x45b, 0x5, 0x210, 0x109, 0x2, 0x45b, 
       0x45c, 0x7, 0x7, 0x2, 0x2, 0x45c, 0x45d, 0x7, 0x146, 0x2, 0x2, 0x45d, 
       0x45e, 0x7, 0x415, 0x2, 0x2, 0x45e, 0x45f, 0x7, 0xaa, 0x2, 0x2, 0x45f, 
       0x460, 0x7, 0x195, 0x2, 0x2, 0x460, 0x461, 0x7, 0x44, 0x2, 0x2, 0x461, 
       0x467, 0x5, 0x210, 0x109, 0x2, 0x462, 0x464, 0x7, 0x166, 0x2, 0x2, 
       0x463, 0x465, 0x7, 0x3fd, 0x2, 0x2, 0x464, 0x463, 0x3, 0x2, 0x2, 
       0x2, 0x464, 0x465, 0x3, 0x2, 0x2, 0x2, 0x465, 0x466, 0x3, 0x2, 0x2, 
       0x2, 0x466, 0x468, 0x5, 0x218, 0x10d, 0x2, 0x467, 0x462, 0x3, 0x2, 
       0x2, 0x2, 0x467, 0x468, 0x3, 0x2, 0x2, 0x2, 0x468, 0x46e, 0x3, 0x2, 
       0x2, 0x2, 0x469, 0x46b, 0x7, 0x180, 0x2, 0x2, 0x46a, 0x46c, 0x7, 
       0x3fd, 0x2, 0x2, 0x46b, 0x46a, 0x3, 0x2, 0x2, 0x2, 0x46b, 0x46c, 
       0x3, 0x2, 0x2, 0x2, 0x46c, 0x46d, 0x3, 0x2, 0x2, 0x2, 0x46d, 0x46f, 
       0x5, 0x218, 0x10d, 0x2, 0x46e, 0x469, 0x3, 0x2, 0x2, 0x2, 0x46e, 
       0x46f, 0x3, 0x2, 0x2, 0x2, 0x46f, 0x475, 0x3, 0x2, 0x2, 0x2, 0x470, 
       0x472, 0x7, 0x119, 0x2, 0x2, 0x471, 0x473, 0x7, 0x3fd, 0x2, 0x2, 
       0x472, 0x471, 0x3, 0x2, 0x2, 0x2, 0x472, 0x473, 0x3, 0x2, 0x2, 0x2, 
       0x473, 0x474, 0x3, 0x2, 0x2, 0x2, 0x474, 0x476, 0x5, 0x218, 0x10d, 
       0x2, 0x475, 0x470, 0x3, 0x2, 0x2, 0x2, 0x475, 0x476, 0x3, 0x2, 0x2, 
       0x2, 0x476, 0x47c, 0x3, 0x2, 0x2, 0x2, 0x477, 0x479, 0x7, 0x1af, 
       0x2, 0x2, 0x478, 0x47a, 0x7, 0x3fd, 0x2, 0x2, 0x479, 0x478, 0x3, 
       0x2, 0x2, 0x2, 0x479, 0x47a, 0x3, 0x2, 0x2, 0x2, 0x47a, 0x47b, 0x3, 
       0x2, 0x2, 0x2, 0x47b, 0x47d, 0x5, 0x218, 0x10d, 0x2, 0x47c, 0x477, 
       0x3, 0x2, 0x2, 0x2, 0x47c, 0x47d, 0x3, 0x2, 0x2, 0x2, 0x47d, 0x483, 
       0x3, 0x2, 0x2, 0x2, 0x47e, 0x480, 0x7, 0x1c4, 0x2, 0x2, 0x47f, 0x481, 
       0x7, 0x3fd, 0x2, 0x2, 0x480, 0x47f, 0x3, 0x2, 0x2, 0x2, 0x480, 0x481, 
       0x3, 0x2, 0x2, 0x2, 0x481, 0x482, 0x3, 0x2, 0x2, 0x2, 0x482, 0x484, 
       0x5, 0x210, 0x109, 0x2, 0x483, 0x47e, 0x3, 0x2, 0x2, 0x2, 0x483, 
       0x484, 0x3, 0x2, 0x2, 0x2, 0x484, 0x486, 0x3, 0x2, 0x2, 0x2, 0x485, 
       0x487, 0x7, 0x249, 0x2, 0x2, 0x486, 0x485, 0x3, 0x2, 0x2, 0x2, 0x486, 
       0x487, 0x3, 0x2, 0x2, 0x2, 0x487, 0x48d, 0x3, 0x2, 0x2, 0x2, 0x488, 
       0x48a, 0x7, 0x133, 0x2, 0x2, 0x489, 0x48b, 0x7, 0x3fd, 0x2, 0x2, 
       0x48a, 0x489, 0x3, 0x2, 0x2, 0x2, 0x48a, 0x48b, 0x3, 0x2, 0x2, 0x2, 
       0x48b, 0x48c, 0x3, 0x2, 0x2, 0x2, 0x48c, 0x48e, 0x7, 0x415, 0x2, 
       0x2, 0x48d, 0x488, 0x3, 0x2, 0x2, 0x2, 0x48d, 0x48e, 0x3, 0x2, 0x2, 
       0x2, 0x48e, 0x48f, 0x3, 0x2, 0x2, 0x2, 0x48f, 0x491, 0x7, 0x158, 
       0x2, 0x2, 0x490, 0x492, 0x7, 0x3fd, 0x2, 0x2, 0x491, 0x490, 0x3, 
       0x2, 0x2, 0x2, 0x491, 0x492, 0x3, 0x2, 0x2, 0x2, 0x492, 0x493, 0x3, 
       0x2, 0x2, 0x2, 0x493, 0x494, 0x5, 0x206, 0x104, 0x2, 0x494, 0x2d, 
       0x3, 0x2, 0x2, 0x2, 0x495, 0x497, 0x7, 0x20, 0x2, 0x2, 0x496, 0x498, 
       0x5, 0x34, 0x1b, 0x2, 0x497, 0x496, 0x3, 0x2, 0x2, 0x2, 0x497, 0x498, 
       0x3, 0x2, 0x2, 0x2, 0x498, 0x499, 0x3, 0x2, 0x2, 0x2, 0x499, 0x49a, 
       0x7, 0xa1, 0x2, 0x2, 0x49a, 0x49b, 0x5, 0x1f6, 0xfc, 0x2, 0x49b, 
       0x49c, 0x9, 0x9, 0x2, 0x2, 0x49c, 0x49d, 0x9, 0xa, 0x2, 0x2, 0x49d, 
       0x49e, 0x7, 0x6c, 0x2, 0x2, 0x49e, 0x49f, 0x5, 0x1f8, 0xfd, 0x2, 
       0x49f, 0x4a0, 0x7, 0x3c, 0x2, 0x2, 0x4a0, 0x4a1, 0x7, 0x32, 0x2, 
       0x2, 0x4a1, 0x4a4, 0x7, 0x203, 0x2, 0x2, 0x4a2, 0x4a3, 0x9, 0xb, 
       0x2, 0x2, 0x4a3, 0x4a5, 0x5, 0x1f6, 0xfc, 0x2, 0x4a4, 0x4a2, 0x3, 
       0x2, 0x2, 0x2, 0x4a4, 0x4a5, 0x3, 0x2, 0x2, 0x2, 0x4a5, 0x4a6, 0x3, 
       0x2, 0x2, 0x2, 0x4a6, 0x4a7, 0x5, 0x15e, 0xb0, 0x2, 0x4a7, 0x2f, 
       0x3, 0x2, 0x2, 0x2, 0x4a8, 0x4ab, 0x7, 0x20, 0x2, 0x2, 0x4a9, 0x4aa, 
       0x7, 0x70, 0x2, 0x2, 0x4aa, 0x4ac, 0x7, 0x81, 0x2, 0x2, 0x4ab, 0x4a9, 
       0x3, 0x2, 0x2, 0x2, 0x4ab, 0x4ac, 0x3, 0x2, 0x2, 0x2, 0x4ac, 0x4b0, 
       0x3, 0x2, 0x2, 0x2, 0x4ad, 0x4ae, 0x7, 0x114, 0x2, 0x2, 0x4ae, 0x4af, 
       0x7, 0x3fd, 0x2, 0x2, 0x4af, 0x4b1, 0x9, 0xc, 0x2, 0x2, 0x4b0, 0x4ad, 
       0x3, 0x2, 0x2, 0x2, 0x4b0, 0x4b1, 0x3, 0x2, 0x2, 0x2, 0x4b1, 0x4b3, 
       0x3, 0x2, 0x2, 0x2, 0x4b2, 0x4b4, 0x5, 0x34, 0x1b, 0x2, 0x4b3, 0x4b2, 
       0x3, 0x2, 0x2, 0x2, 0x4b3, 0x4b4, 0x3, 0x2, 0x2, 0x2, 0x4b4, 0x4b8, 
       0x3, 0x2, 0x2, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x2, 0x4b5, 0x4b6, 0x7, 0x91, 0x2, 0x2, 0x4b6, 0x4b7, 0x7, 0x208, 0x2, 
       0x2, 0x4b7, 0x4b9, 0x9, 0xd, 0x2, 0x2, 0x4b8, 0x4b5, 0x3, 0x2, 0x2, 
       0x2, 0x4b8, 0x4b9, 0x3, 0x2, 0x2, 0x2, 0x4b9, 0x4ba, 0x3, 0x2, 0x2, 
       0x2, 0x4ba, 0x4bb, 0x7, 0x246, 0x2, 0x2, 0x4bb, 0x4c0, 0x5, 0x1f6, 
       0xfc, 0x2, 0x4bc, 0x4bd, 0x7, 0x406, 0x2, 0x2, 0x4bd, 0x4be, 0x5, 
       0x230, 0x119, 0x2, 0x4be, 0x4bf, 0x7, 0x407, 0x2, 0x2, 0x4bf, 0x4c1, 
       0x3, 0x2, 0x2, 0x2, 0x4c0, 0x4bc, 0x3, 0x2, 0x2, 0x2, 0x4c0, 0x4c1, 
       0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4c2, 0x3, 0x2, 0x2, 0x2, 0x4c2, 0x4c3, 
       0x7, 0xd, 0x2, 0x2, 0x4c3, 0x4ca, 0x5, 0xb4, 0x5b, 0x2, 0x4c4, 0x4c6, 
       0x7, 0xb0, 0x2, 0x2, 0x4c5, 0x4c7, 0x9, 0xe, 0x2, 0x2, 0x4c6, 0x4c5, 
       0x3, 0x2, 0x2, 0x2, 0x4c6, 0x4c7, 0x3, 0x2, 0x2, 0x2, 0x4c7, 0x4c8, 
       0x3, 0x2, 0x2, 0x2, 0x4c8, 0x4c9, 0x7, 0x19, 0x2, 0x2, 0x4c9, 0x4cb, 
       0x7, 0x6e, 0x2, 0x2, 0x4ca, 0x4c4, 0x3, 0x2, 0x2, 0x2, 0x4ca, 0x4cb, 
       0x3, 0x2, 0x2, 0x2, 0x4cb, 0x31, 0x3, 0x2, 0x2, 0x2, 0x4cc, 0x4ce, 
       0x7, 0x28, 0x2, 0x2, 0x4cd, 0x4cc, 0x3, 0x2, 0x2, 0x2, 0x4cd, 0x4ce, 
       0x3, 0x2, 0x2, 0x2, 0x4ce, 0x4d2, 0x3, 0x2, 0x2, 0x2, 0x4cf, 0x4d0, 
       0x7, 0x18, 0x2, 0x2, 0x4d0, 0x4d3, 0x7, 0x8c, 0x2, 0x2, 0x4d1, 0x4d3, 
       0x7, 0x2e5, 0x2, 0x2, 0x4d2, 0x4cf, 0x3, 0x2, 0x2, 0x2, 0x4d2, 0x4d1, 
       0x3, 0x2, 0x2, 0x2, 0x4d3, 0x4d5, 0x3, 0x2, 0x2, 0x2, 0x4d4, 0x4d6, 
       0x7, 0x3fd, 0x2, 0x2, 0x4d5, 0x4d4, 0x3, 0x2, 0x2, 0x2, 0x4d5, 0x4d6, 
       0x3, 0x2, 0x2, 0x2, 0x4d6, 0x4d9, 0x3, 0x2, 0x2, 0x2, 0x4d7, 0x4da, 
       0x5, 0x202, 0x102, 0x2, 0x4d8, 0x4da, 0x7, 0x28, 0x2, 0x2, 0x4d9, 
       0x4d7, 0x3, 0x2, 0x2, 0x2, 0x4d9, 0x4d8, 0x3, 0x2, 0x2, 0x2, 0x4da, 
       0x4e4, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4dd, 0x7, 0x28, 0x2, 0x2, 0x4dc, 
       0x4db, 0x3, 0x2, 0x2, 0x2, 0x4dc, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0x4dd, 
       0x4de, 0x3, 0x2, 0x2, 0x2, 0x4de, 0x4e0, 0x7, 0x1a, 0x2, 0x2, 0x4df, 
       0x4e1, 0x7, 0x3fd, 0x2, 0x2, 0x4e0, 0x4df, 0x3, 0x2, 0x2, 0x2, 0x4e0, 
       0x4e1, 0x3, 0x2, 0x2, 0x2, 0x4e1, 0x4e2, 0x3, 0x2, 0x2, 0x2, 0x4e2, 
       0x4e4, 0x5, 0x204, 0x103, 0x2, 0x4e3, 0x4cd, 0x3, 0x2, 0x2, 0x2, 
       0x4e3, 0x4dc, 0x3, 0x2, 0x2, 0x2, 0x4e4, 0x33, 0x3, 0x2, 0x2, 0x2, 
       0x4e5, 0x4e6, 0x7, 0x149, 0x2, 0x2, 0x4e6, 0x4ed, 0x7, 0x3fd, 0x2, 
       0x2, 0x4e7, 0x4ee, 0x5, 0x1fe, 0x100, 0x2, 0x4e8, 0x4eb, 0x7, 0x23, 
       0x2, 0x2, 0x4e9, 0x4ea, 0x7, 0x406, 0x2, 0x2, 0x4ea, 0x4ec, 0x7, 
       0x407, 0x2, 0x2, 0x4eb, 0x4e9, 0x3, 0x2, 0x2, 0x2, 0x4eb, 0x4ec, 
       0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4ed, 0x4e7, 
       0x3, 0x2, 0x2, 0x2, 0x4ed, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x4ee, 0x35, 
       0x3, 0x2, 0x2, 0x2, 0x4ef, 0x4f0, 0x7, 0x116, 0x2, 0x2, 0x4f0, 0x4f4, 
       0x5, 0x38, 0x1d, 0x2, 0x4f1, 0x4f3, 0x5, 0x3a, 0x1e, 0x2, 0x4f2, 
       0x4f1, 0x3, 0x2, 0x2, 0x2, 0x4f3, 0x4f6, 0x3, 0x2, 0x2, 0x2, 0x4f4, 
       0x4f2, 0x3, 0x2, 0x2, 0x2, 0x4f4, 0x4f5, 0x3, 0x2, 0x2, 0x2, 0x4f5, 
       0x512, 0x3, 0x2, 0x2, 0x2, 0x4f6, 0x4f4, 0x3, 0x2, 0x2, 0x2, 0x4f7, 
       0x4fa, 0x7, 0x160, 0x2, 0x2, 0x4f8, 0x4fb, 0x5, 0x216, 0x10c, 0x2, 
       0x4f9, 0x4fb, 0x5, 0x25e, 0x130, 0x2, 0x4fa, 0x4f8, 0x3, 0x2, 0x2, 
       0x2, 0x4fa, 0x4f9, 0x3, 0x2, 0x2, 0x2, 0x4fb, 0x4fc, 0x3, 0x2, 0x2, 
       0x2, 0x4fc, 0x505, 0x5, 0x3c, 0x1f, 0x2, 0x4fd, 0x4fe, 0x7, 0x21f, 
       0x2, 0x2, 0x4fe, 0x502, 0x5, 0x38, 0x1d, 0x2, 0x4ff, 0x501, 0x5, 
       0x3a, 0x1e, 0x2, 0x500, 0x4ff, 0x3, 0x2, 0x2, 0x2, 0x501, 0x504, 
       0x3, 0x2, 0x2, 0x2, 0x502, 0x500, 0x3, 0x2, 0x2, 0x2, 0x502, 0x503, 
       0x3, 0x2, 0x2, 0x2, 0x503, 0x506, 0x3, 0x2, 0x2, 0x2, 0x504, 0x502, 
       0x3, 0x2, 0x2, 0x2, 0x505, 0x4fd, 0x3, 0x2, 0x2, 0x2, 0x505, 0x506, 
       0x3, 0x2, 0x2, 0x2, 0x506, 0x50f, 0x3, 0x2, 0x2, 0x2, 0x507, 0x508, 
       0x7, 0x157, 0x2, 0x2, 0x508, 0x50c, 0x5, 0x38, 0x1d, 0x2, 0x509, 
       0x50b, 0x5, 0x3a, 0x1e, 0x2, 0x50a, 0x509, 0x3, 0x2, 0x2, 0x2, 0x50b, 
       0x50e, 0x3, 0x2, 0x2, 0x2, 0x50c, 0x50a, 0x3, 0x2, 0x2, 0x2, 0x50c, 
       0x50d, 0x3, 0x2, 0x2, 0x2, 0x50d, 0x510, 0x3, 0x2, 0x2, 0x2, 0x50e, 
       0x50c, 0x3, 0x2, 0x2, 0x2, 0x50f, 0x507, 0x3, 0x2, 0x2, 0x2, 0x50f, 
       0x510, 0x3, 0x2, 0x2, 0x2, 0x510, 0x512, 0x3, 0x2, 0x2, 0x2, 0x511, 
       0x4ef, 0x3, 0x2, 0x2, 0x2, 0x511, 0x4f7, 0x3, 0x2, 0x2, 0x2, 0x512, 
       0x37, 0x3, 0x2, 0x2, 0x2, 0x513, 0x518, 0x7, 0xff, 0x2, 0x2, 0x514, 
       0x518, 0x5, 0x21a, 0x10e, 0x2, 0x515, 0x518, 0x5, 0x216, 0x10c, 0x2, 
       0x516, 0x518, 0x5, 0x25e, 0x130, 0x2, 0x517, 0x513, 0x3, 0x2, 0x2, 
       0x2, 0x517, 0x514, 0x3, 0x2, 0x2, 0x2, 0x517, 0x515, 0x3, 0x2, 0x2, 
       0x2, 0x517, 0x516, 0x3, 0x2, 0x2, 0x2, 0x518, 0x39, 0x3, 0x2, 0x2, 
       0x2, 0x519, 0x51a, 0x7, 0x3f8, 0x2, 0x2, 0x51a, 0x51d, 0x7, 0x4f, 
       0x2, 0x2, 0x51b, 0x51e, 0x5, 0x216, 0x10c, 0x2, 0x51c, 0x51e, 0x5, 
       0x25e, 0x130, 0x2, 0x51d, 0x51b, 0x3, 0x2, 0x2, 0x2, 0x51d, 0x51c, 
       0x3, 0x2, 0x2, 0x2, 0x51e, 0x51f, 0x3, 0x2, 0x2, 0x2, 0x51f, 0x520, 
       0x5, 0x3c, 0x1f, 0x2, 0x520, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x521, 0x52f, 
       0x5, 0x276, 0x13c, 0x2, 0x522, 0x52f, 0x7, 0xcd, 0x2, 0x2, 0x523, 
       0x52f, 0x7, 0xe0, 0x2, 0x2, 0x524, 0x52f, 0x7, 0xe1, 0x2, 0x2, 0x525, 
       0x52f, 0x7, 0xe2, 0x2, 0x2, 0x526, 0x52f, 0x7, 0xe3, 0x2, 0x2, 0x527, 
       0x52f, 0x7, 0xe4, 0x2, 0x2, 0x528, 0x52f, 0x7, 0xe5, 0x2, 0x2, 0x529, 
       0x52f, 0x7, 0xe6, 0x2, 0x2, 0x52a, 0x52f, 0x7, 0xe7, 0x2, 0x2, 0x52b, 
       0x52f, 0x7, 0xe8, 0x2, 0x2, 0x52c, 0x52f, 0x7, 0xe9, 0x2, 0x2, 0x52d, 
       0x52f, 0x7, 0xea, 0x2, 0x2, 0x52e, 0x521, 0x3, 0x2, 0x2, 0x2, 0x52e, 
       0x522, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x523, 0x3, 0x2, 0x2, 0x2, 0x52e, 
       0x524, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x525, 0x3, 0x2, 0x2, 0x2, 0x52e, 
       0x526, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x527, 0x3, 0x2, 0x2, 0x2, 0x52e, 
       0x528, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x529, 0x3, 0x2, 0x2, 0x2, 0x52e, 
       0x52a, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x52b, 0x3, 0x2, 0x2, 0x2, 0x52e, 
       0x52c, 0x3, 0x2, 0x2, 0x2, 0x52e, 0x52d, 0x3, 0x2, 0x2, 0x2, 0x52f, 
       0x3d, 0x3, 0x2, 0x2, 0x2, 0x530, 0x536, 0x7, 0x154, 0x2, 0x2, 0x531, 
       0x536, 0x7, 0x14d, 0x2, 0x2, 0x532, 0x533, 0x7, 0x14d, 0x2, 0x2, 
       0x533, 0x534, 0x7, 0x6c, 0x2, 0x2, 0x534, 0x536, 0x7, 0x20f, 0x2, 
       0x2, 0x535, 0x530, 0x3, 0x2, 0x2, 0x2, 0x535, 0x531, 0x3, 0x2, 0x2, 
       0x2, 0x535, 0x532, 0x3, 0x2, 0x2, 0x2, 0x536, 0x3f, 0x3, 0x2, 0x2, 
       0x2, 0x537, 0x538, 0x7, 0xab, 0x2, 0x2, 0x538, 0x539, 0x9, 0xf, 0x2, 
       0x2, 0x539, 0x41, 0x3, 0x2, 0x2, 0x2, 0x53a, 0x53c, 0x7, 0x18d, 0x2, 
       0x2, 0x53b, 0x53d, 0x7, 0x3fd, 0x2, 0x2, 0x53c, 0x53b, 0x3, 0x2, 
       0x2, 0x2, 0x53c, 0x53d, 0x3, 0x2, 0x2, 0x2, 0x53d, 0x53e, 0x3, 0x2, 
       0x2, 0x2, 0x53e, 0x548, 0x5, 0x218, 0x10d, 0x2, 0x53f, 0x548, 0x5, 
       0x40, 0x21, 0x2, 0x540, 0x541, 0x7, 0xb0, 0x2, 0x2, 0x541, 0x542, 
       0x7, 0x1d4, 0x2, 0x2, 0x542, 0x548, 0x5, 0x210, 0x109, 0x2, 0x543, 
       0x544, 0x7, 0x133, 0x2, 0x2, 0x544, 0x548, 0x7, 0x415, 0x2, 0x2, 
       0x545, 0x548, 0x7, 0x185, 0x2, 0x2, 0x546, 0x548, 0x7, 0x248, 0x2, 
       0x2, 0x547, 0x53a, 0x3, 0x2, 0x2, 0x2, 0x547, 0x53f, 0x3, 0x2, 0x2, 
       0x2, 0x547, 0x540, 0x3, 0x2, 0x2, 0x2, 0x547, 0x543, 0x3, 0x2, 0x2, 
       0x2, 0x547, 0x545, 0x3, 0x2, 0x2, 0x2, 0x547, 0x546, 0x3, 0x2, 0x2, 
       0x2, 0x548, 0x43, 0x3, 0x2, 0x2, 0x2, 0x549, 0x54b, 0x9, 0x10, 0x2, 
       0x2, 0x54a, 0x549, 0x3, 0x2, 0x2, 0x2, 0x54a, 0x54b, 0x3, 0x2, 0x2, 
       0x2, 0x54b, 0x54c, 0x3, 0x2, 0x2, 0x2, 0x54c, 0x54d, 0x5, 0x210, 
       0x109, 0x2, 0x54d, 0x54e, 0x5, 0x224, 0x113, 0x2, 0x54e, 0x45, 0x3, 
       0x2, 0x2, 0x2, 0x54f, 0x550, 0x5, 0x210, 0x109, 0x2, 0x550, 0x551, 
       0x5, 0x224, 0x113, 0x2, 0x551, 0x47, 0x3, 0x2, 0x2, 0x2, 0x552, 0x553, 
       0x7, 0x133, 0x2, 0x2, 0x553, 0x56a, 0x7, 0x415, 0x2, 0x2, 0x554, 
       0x555, 0x7, 0x18e, 0x2, 0x2, 0x555, 0x56a, 0x7, 0x91, 0x2, 0x2, 0x556, 
       0x558, 0x7, 0x68, 0x2, 0x2, 0x557, 0x556, 0x3, 0x2, 0x2, 0x2, 0x557, 
       0x558, 0x3, 0x2, 0x2, 0x2, 0x558, 0x559, 0x3, 0x2, 0x2, 0x2, 0x559, 
       0x56a, 0x7, 0x2d, 0x2, 0x2, 0x55a, 0x55b, 0x7, 0x13f, 0x2, 0x2, 0x55b, 
       0x565, 0x7, 0x91, 0x2, 0x2, 0x55c, 0x55d, 0x7, 0x1c3, 0x2, 0x2, 0x55d, 
       0x565, 0x7, 0x91, 0x2, 0x2, 0x55e, 0x55f, 0x7, 0x7b, 0x2, 0x2, 0x55f, 
       0x560, 0x7, 0x91, 0x2, 0x2, 0x560, 0x565, 0x7, 0x145, 0x2, 0x2, 0x561, 
       0x562, 0x7, 0x66, 0x2, 0x2, 0x562, 0x563, 0x7, 0x91, 0x2, 0x2, 0x563, 
       0x565, 0x7, 0x145, 0x2, 0x2, 0x564, 0x55a, 0x3, 0x2, 0x2, 0x2, 0x564, 
       0x55c, 0x3, 0x2, 0x2, 0x2, 0x564, 0x55e, 0x3, 0x2, 0x2, 0x2, 0x564, 
       0x561, 0x3, 0x2, 0x2, 0x2, 0x565, 0x56a, 0x3, 0x2, 0x2, 0x2, 0x566, 
       0x567, 0x7, 0x91, 0x2, 0x2, 0x567, 0x568, 0x7, 0x208, 0x2, 0x2, 0x568, 
       0x56a, 0x9, 0xd, 0x2, 0x2, 0x569, 0x552, 0x3, 0x2, 0x2, 0x2, 0x569, 
       0x554, 0x3, 0x2, 0x2, 0x2, 0x569, 0x557, 0x3, 0x2, 0x2, 0x2, 0x569, 
       0x564, 0x3, 0x2, 0x2, 0x2, 0x569, 0x566, 0x3, 0x2, 0x2, 0x2, 0x56a, 
       0x49, 0x3, 0x2, 0x2, 0x2, 0x56b, 0x56c, 0x7, 0x17a, 0x2, 0x2, 0x56c, 
       0x57a, 0x7, 0x415, 0x2, 0x2, 0x56d, 0x56e, 0x7, 0x25, 0x2, 0x2, 0x56e, 
       0x57a, 0x7, 0x415, 0x2, 0x2, 0x56f, 0x570, 0x7, 0x240, 0x2, 0x2, 
       0x570, 0x57a, 0x7, 0x415, 0x2, 0x2, 0x571, 0x572, 0x7, 0x1d8, 0x2, 
       0x2, 0x572, 0x57a, 0x7, 0x415, 0x2, 0x2, 0x573, 0x574, 0x7, 0x212, 
       0x2, 0x2, 0x574, 0x57a, 0x7, 0x415, 0x2, 0x2, 0x575, 0x576, 0x7, 
       0x1d1, 0x2, 0x2, 0x576, 0x57a, 0x7, 0x415, 0x2, 0x2, 0x577, 0x578, 
       0x7, 0x1dd, 0x2, 0x2, 0x578, 0x57a, 0x5, 0x216, 0x10c, 0x2, 0x579, 
       0x56b, 0x3, 0x2, 0x2, 0x2, 0x579, 0x56d, 0x3, 0x2, 0x2, 0x2, 0x579, 
       0x56f, 0x3, 0x2, 0x2, 0x2, 0x579, 0x571, 0x3, 0x2, 0x2, 0x2, 0x579, 
       0x573, 0x3, 0x2, 0x2, 0x2, 0x579, 0x575, 0x3, 0x2, 0x2, 0x2, 0x579, 
       0x577, 0x3, 0x2, 0x2, 0x2, 0x57a, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x57b, 
       0x57c, 0x7, 0x406, 0x2, 0x2, 0x57c, 0x581, 0x5, 0x4e, 0x28, 0x2, 
       0x57d, 0x57e, 0x7, 0x408, 0x2, 0x2, 0x57e, 0x580, 0x5, 0x4e, 0x28, 
       0x2, 0x57f, 0x57d, 0x3, 0x2, 0x2, 0x2, 0x580, 0x583, 0x3, 0x2, 0x2, 
       0x2, 0x581, 0x57f, 0x3, 0x2, 0x2, 0x2, 0x581, 0x582, 0x3, 0x2, 0x2, 
       0x2, 0x582, 0x584, 0x3, 0x2, 0x2, 0x2, 0x583, 0x581, 0x3, 0x2, 0x2, 
       0x2, 0x584, 0x585, 0x7, 0x407, 0x2, 0x2, 0x585, 0x4d, 0x3, 0x2, 0x2, 
       0x2, 0x586, 0x587, 0x5, 0x210, 0x109, 0x2, 0x587, 0x588, 0x5, 0x50, 
       0x29, 0x2, 0x588, 0x58c, 0x3, 0x2, 0x2, 0x2, 0x589, 0x58c, 0x5, 0x54, 
       0x2b, 0x2, 0x58a, 0x58c, 0x5, 0x5c, 0x2f, 0x2, 0x58b, 0x586, 0x3, 
       0x2, 0x2, 0x2, 0x58b, 0x589, 0x3, 0x2, 0x2, 0x2, 0x58b, 0x58a, 0x3, 
       0x2, 0x2, 0x2, 0x58c, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x58d, 0x591, 0x5, 
       0x224, 0x113, 0x2, 0x58e, 0x590, 0x5, 0x52, 0x2a, 0x2, 0x58f, 0x58e, 
       0x3, 0x2, 0x2, 0x2, 0x590, 0x593, 0x3, 0x2, 0x2, 0x2, 0x591, 0x58f, 
       0x3, 0x2, 0x2, 0x2, 0x591, 0x592, 0x3, 0x2, 0x2, 0x2, 0x592, 0x51, 
       0x3, 0x2, 0x2, 0x2, 0x593, 0x591, 0x3, 0x2, 0x2, 0x2, 0x594, 0x5c8, 
       0x5, 0x220, 0x111, 0x2, 0x595, 0x596, 0x7, 0x28, 0x2, 0x2, 0x596, 
       0x5c8, 0x5, 0x240, 0x121, 0x2, 0x597, 0x59c, 0x7, 0x11a, 0x2, 0x2, 
       0x598, 0x599, 0x7, 0x6c, 0x2, 0x2, 0x599, 0x59a, 0x7, 0xa8, 0x2, 
       0x2, 0x59a, 0x59c, 0x5, 0x242, 0x122, 0x2, 0x59b, 0x597, 0x3, 0x2, 
       0x2, 0x2, 0x59b, 0x598, 0x3, 0x2, 0x2, 0x2, 0x59c, 0x5c8, 0x3, 0x2, 
       0x2, 0x2, 0x59d, 0x59f, 0x7, 0x76, 0x2, 0x2, 0x59e, 0x59d, 0x3, 0x2, 
       0x2, 0x2, 0x59e, 0x59f, 0x3, 0x2, 0x2, 0x2, 0x59f, 0x5a0, 0x3, 0x2, 
       0x2, 0x2, 0x5a0, 0x5c8, 0x7, 0x54, 0x2, 0x2, 0x5a1, 0x5a3, 0x7, 0xa5, 
       0x2, 0x2, 0x5a2, 0x5a4, 0x7, 0x54, 0x2, 0x2, 0x5a3, 0x5a2, 0x3, 0x2, 
       0x2, 0x2, 0x5a3, 0x5a4, 0x3, 0x2, 0x2, 0x2, 0x5a4, 0x5c8, 0x3, 0x2, 
       0x2, 0x2, 0x5a5, 0x5a6, 0x7, 0x133, 0x2, 0x2, 0x5a6, 0x5c8, 0x7, 
       0x415, 0x2, 0x2, 0x5a7, 0x5a8, 0x7, 0x131, 0x2, 0x2, 0x5a8, 0x5c8, 
       0x9, 0x11, 0x2, 0x2, 0x5a9, 0x5aa, 0x7, 0x225, 0x2, 0x2, 0x5aa, 0x5c8, 
       0x9, 0x12, 0x2, 0x2, 0x5ab, 0x5c8, 0x5, 0x56, 0x2c, 0x2, 0x5ac, 0x5ad, 
       0x7, 0x1a, 0x2, 0x2, 0x5ad, 0x5c8, 0x5, 0x204, 0x103, 0x2, 0x5ae, 
       0x5af, 0x7, 0x41, 0x2, 0x2, 0x5af, 0x5b1, 0x7, 0xa, 0x2, 0x2, 0x5b0, 
       0x5ae, 0x3, 0x2, 0x2, 0x2, 0x5b0, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b1, 
       0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5b2, 0x5b3, 0x7, 0xd, 0x2, 0x2, 0x5b3, 
       0x5b4, 0x7, 0x406, 0x2, 0x2, 0x5b4, 0x5b5, 0x5, 0x25e, 0x130, 0x2, 
       0x5b5, 0x5b7, 0x7, 0x407, 0x2, 0x2, 0x5b6, 0x5b8, 0x9, 0x13, 0x2, 
       0x2, 0x5b7, 0x5b6, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b8, 0x3, 0x2, 0x2, 
       0x2, 0x5b8, 0x5c8, 0x3, 0x2, 0x2, 0x2, 0x5b9, 0x5ba, 0x7, 0xdf, 0x2, 
       0x2, 0x5ba, 0x5bb, 0x7, 0x28, 0x2, 0x2, 0x5bb, 0x5c8, 0x7, 0x244, 
       0x2, 0x2, 0x5bc, 0x5be, 0x7, 0x1d, 0x2, 0x2, 0x5bd, 0x5bf, 0x5, 0x210, 
       0x109, 0x2, 0x5be, 0x5bd, 0x3, 0x2, 0x2, 0x2, 0x5be, 0x5bf, 0x3, 
       0x2, 0x2, 0x2, 0x5bf, 0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c0, 0x5bc, 0x3, 
       0x2, 0x2, 0x2, 0x5c0, 0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c1, 0x5c2, 0x3, 
       0x2, 0x2, 0x2, 0x5c2, 0x5c3, 0x7, 0x19, 0x2, 0x2, 0x5c3, 0x5c4, 0x7, 
       0x406, 0x2, 0x2, 0x5c4, 0x5c5, 0x5, 0x25e, 0x130, 0x2, 0x5c5, 0x5c6, 
       0x7, 0x407, 0x2, 0x2, 0x5c6, 0x5c8, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x594, 
       0x3, 0x2, 0x2, 0x2, 0x5c7, 0x595, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x59b, 
       0x3, 0x2, 0x2, 0x2, 0x5c7, 0x59e, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5a1, 
       0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5a7, 
       0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5a9, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5ab, 
       0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5ac, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5b0, 
       0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5b9, 0x3, 0x2, 0x2, 0x2, 0x5c7, 0x5c0, 
       0x3, 0x2, 0x2, 0x2, 0x5c8, 0x53, 0x3, 0x2, 0x2, 0x2, 0x5c9, 0x5cb, 
       0x7, 0x1d, 0x2, 0x2, 0x5ca, 0x5cc, 0x5, 0x210, 0x109, 0x2, 0x5cb, 
       0x5ca, 0x3, 0x2, 0x2, 0x2, 0x5cb, 0x5cc, 0x3, 0x2, 0x2, 0x2, 0x5cc, 
       0x5ce, 0x3, 0x2, 0x2, 0x2, 0x5cd, 0x5c9, 0x3, 0x2, 0x2, 0x2, 0x5cd, 
       0x5ce, 0x3, 0x2, 0x2, 0x2, 0x5ce, 0x5cf, 0x3, 0x2, 0x2, 0x2, 0x5cf, 
       0x5d0, 0x7, 0x76, 0x2, 0x2, 0x5d0, 0x5d2, 0x7, 0x54, 0x2, 0x2, 0x5d1, 
       0x5d3, 0x5, 0x210, 0x109, 0x2, 0x5d2, 0x5d1, 0x3, 0x2, 0x2, 0x2, 
       0x5d2, 0x5d3, 0x3, 0x2, 0x2, 0x2, 0x5d3, 0x5d5, 0x3, 0x2, 0x2, 0x2, 
       0x5d4, 0x5d6, 0x5, 0x40, 0x21, 0x2, 0x5d5, 0x5d4, 0x3, 0x2, 0x2, 
       0x2, 0x5d5, 0x5d6, 0x3, 0x2, 0x2, 0x2, 0x5d6, 0x5d7, 0x3, 0x2, 0x2, 
       0x2, 0x5d7, 0x5db, 0x5, 0x234, 0x11b, 0x2, 0x5d8, 0x5da, 0x5, 0x42, 
       0x22, 0x2, 0x5d9, 0x5d8, 0x3, 0x2, 0x2, 0x2, 0x5da, 0x5dd, 0x3, 0x2, 
       0x2, 0x2, 0x5db, 0x5d9, 0x3, 0x2, 0x2, 0x2, 0x5db, 0x5dc, 0x3, 0x2, 
       0x2, 0x2, 0x5dc, 0x60f, 0x3, 0x2, 0x2, 0x2, 0x5dd, 0x5db, 0x3, 0x2, 
       0x2, 0x2, 0x5de, 0x5e0, 0x7, 0x1d, 0x2, 0x2, 0x5df, 0x5e1, 0x5, 0x210, 
       0x109, 0x2, 0x5e0, 0x5df, 0x3, 0x2, 0x2, 0x2, 0x5e0, 0x5e1, 0x3, 
       0x2, 0x2, 0x2, 0x5e1, 0x5e3, 0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5de, 0x3, 
       0x2, 0x2, 0x2, 0x5e2, 0x5e3, 0x3, 0x2, 0x2, 0x2, 0x5e3, 0x5e4, 0x3, 
       0x2, 0x2, 0x2, 0x5e4, 0x5e6, 0x7, 0xa5, 0x2, 0x2, 0x5e5, 0x5e7, 0x9, 
       0x14, 0x2, 0x2, 0x5e6, 0x5e5, 0x3, 0x2, 0x2, 0x2, 0x5e6, 0x5e7, 0x3, 
       0x2, 0x2, 0x2, 0x5e7, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5e8, 0x5ea, 0x5, 
       0x210, 0x109, 0x2, 0x5e9, 0x5e8, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5ea, 
       0x3, 0x2, 0x2, 0x2, 0x5ea, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5eb, 0x5ed, 
       0x5, 0x40, 0x21, 0x2, 0x5ec, 0x5eb, 0x3, 0x2, 0x2, 0x2, 0x5ec, 0x5ed, 
       0x3, 0x2, 0x2, 0x2, 0x5ed, 0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5ee, 0x5f2, 
       0x5, 0x234, 0x11b, 0x2, 0x5ef, 0x5f1, 0x5, 0x42, 0x22, 0x2, 0x5f0, 
       0x5ef, 0x3, 0x2, 0x2, 0x2, 0x5f1, 0x5f4, 0x3, 0x2, 0x2, 0x2, 0x5f2, 
       0x5f0, 0x3, 0x2, 0x2, 0x2, 0x5f2, 0x5f3, 0x3, 0x2, 0x2, 0x2, 0x5f3, 
       0x60f, 0x3, 0x2, 0x2, 0x2, 0x5f4, 0x5f2, 0x3, 0x2, 0x2, 0x2, 0x5f5, 
       0x5f7, 0x7, 0x1d, 0x2, 0x2, 0x5f6, 0x5f8, 0x5, 0x210, 0x109, 0x2, 
       0x5f7, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0x5f7, 0x5f8, 0x3, 0x2, 0x2, 0x2, 
       0x5f8, 0x5fa, 0x3, 0x2, 0x2, 0x2, 0x5f9, 0x5f5, 0x3, 0x2, 0x2, 0x2, 
       0x5f9, 0x5fa, 0x3, 0x2, 0x2, 0x2, 0x5fa, 0x5fb, 0x3, 0x2, 0x2, 0x2, 
       0x5fb, 0x5fc, 0x7, 0x3e, 0x2, 0x2, 0x5fc, 0x5fe, 0x7, 0x54, 0x2, 
       0x2, 0x5fd, 0x5ff, 0x5, 0x210, 0x109, 0x2, 0x5fe, 0x5fd, 0x3, 0x2, 
       0x2, 0x2, 0x5fe, 0x5ff, 0x3, 0x2, 0x2, 0x2, 0x5ff, 0x600, 0x3, 0x2, 
       0x2, 0x2, 0x600, 0x601, 0x5, 0x234, 0x11b, 0x2, 0x601, 0x602, 0x5, 
       0x56, 0x2c, 0x2, 0x602, 0x60f, 0x3, 0x2, 0x2, 0x2, 0x603, 0x605, 
       0x7, 0x1d, 0x2, 0x2, 0x604, 0x606, 0x5, 0x210, 0x109, 0x2, 0x605, 
       0x604, 0x3, 0x2, 0x2, 0x2, 0x605, 0x606, 0x3, 0x2, 0x2, 0x2, 0x606, 
       0x608, 0x3, 0x2, 0x2, 0x2, 0x607, 0x603, 0x3, 0x2, 0x2, 0x2, 0x607, 
       0x608, 0x3, 0x2, 0x2, 0x2, 0x608, 0x609, 0x3, 0x2, 0x2, 0x2, 0x609, 
       0x60a, 0x7, 0x19, 0x2, 0x2, 0x60a, 0x60b, 0x7, 0x406, 0x2, 0x2, 0x60b, 
       0x60c, 0x5, 0x25e, 0x130, 0x2, 0x60c, 0x60d, 0x7, 0x407, 0x2, 0x2, 
       0x60d, 0x60f, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x5cd, 0x3, 0x2, 0x2, 0x2, 
       0x60e, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x5f9, 0x3, 0x2, 0x2, 0x2, 
       0x60e, 0x607, 0x3, 0x2, 0x2, 0x2, 0x60f, 0x55, 0x3, 0x2, 0x2, 0x2, 
       0x610, 0x611, 0x7, 0x7c, 0x2, 0x2, 0x611, 0x613, 0x5, 0x1f8, 0xfd, 
       0x2, 0x612, 0x614, 0x5, 0x234, 0x11b, 0x2, 0x613, 0x612, 0x3, 0x2, 
       0x2, 0x2, 0x613, 0x614, 0x3, 0x2, 0x2, 0x2, 0x614, 0x617, 0x3, 0x2, 
       0x2, 0x2, 0x615, 0x616, 0x7, 0x64, 0x2, 0x2, 0x616, 0x618, 0x9, 0x15, 
       0x2, 0x2, 0x617, 0x615, 0x3, 0x2, 0x2, 0x2, 0x617, 0x618, 0x3, 0x2, 
       0x2, 0x2, 0x618, 0x61a, 0x3, 0x2, 0x2, 0x2, 0x619, 0x61b, 0x5, 0x58, 
       0x2d, 0x2, 0x61a, 0x619, 0x3, 0x2, 0x2, 0x2, 0x61a, 0x61b, 0x3, 0x2, 
       0x2, 0x2, 0x61b, 0x57, 0x3, 0x2, 0x2, 0x2, 0x61c, 0x61d, 0x7, 0x6c, 
       0x2, 0x2, 0x61d, 0x61e, 0x7, 0x2a, 0x2, 0x2, 0x61e, 0x622, 0x5, 0x5a, 
       0x2e, 0x2, 0x61f, 0x620, 0x7, 0x6c, 0x2, 0x2, 0x620, 0x621, 0x7, 
       0xa8, 0x2, 0x2, 0x621, 0x623, 0x5, 0x5a, 0x2e, 0x2, 0x622, 0x61f, 
       0x3, 0x2, 0x2, 0x2, 0x622, 0x623, 0x3, 0x2, 0x2, 0x2, 0x623, 0x62d, 
       0x3, 0x2, 0x2, 0x2, 0x624, 0x625, 0x7, 0x6c, 0x2, 0x2, 0x625, 0x626, 
       0x7, 0xa8, 0x2, 0x2, 0x626, 0x62a, 0x5, 0x5a, 0x2e, 0x2, 0x627, 0x628, 
       0x7, 0x6c, 0x2, 0x2, 0x628, 0x629, 0x7, 0x2a, 0x2, 0x2, 0x629, 0x62b, 
       0x5, 0x5a, 0x2e, 0x2, 0x62a, 0x627, 0x3, 0x2, 0x2, 0x2, 0x62a, 0x62b, 
       0x3, 0x2, 0x2, 0x2, 0x62b, 0x62d, 0x3, 0x2, 0x2, 0x2, 0x62c, 0x61c, 
       0x3, 0x2, 0x2, 0x2, 0x62c, 0x624, 0x3, 0x2, 0x2, 0x2, 0x62d, 0x59, 
       0x3, 0x2, 0x2, 0x2, 0x62e, 0x635, 0x7, 0x84, 0x2, 0x2, 0x62f, 0x635, 
       0x7, 0x14, 0x2, 0x2, 0x630, 0x631, 0x7, 0x8c, 0x2, 0x2, 0x631, 0x635, 
       0x7, 0x6a, 0x2, 0x2, 0x632, 0x633, 0x7, 0x1c3, 0x2, 0x2, 0x633, 0x635, 
       0x7, 0x111, 0x2, 0x2, 0x634, 0x62e, 0x3, 0x2, 0x2, 0x2, 0x634, 0x62f, 
       0x3, 0x2, 0x2, 0x2, 0x634, 0x630, 0x3, 0x2, 0x2, 0x2, 0x634, 0x632, 
       0x3, 0x2, 0x2, 0x2, 0x635, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x636, 0x638, 
       0x9, 0x14, 0x2, 0x2, 0x637, 0x639, 0x5, 0x210, 0x109, 0x2, 0x638, 
       0x637, 0x3, 0x2, 0x2, 0x2, 0x638, 0x639, 0x3, 0x2, 0x2, 0x2, 0x639, 
       0x63b, 0x3, 0x2, 0x2, 0x2, 0x63a, 0x63c, 0x5, 0x40, 0x21, 0x2, 0x63b, 
       0x63a, 0x3, 0x2, 0x2, 0x2, 0x63b, 0x63c, 0x3, 0x2, 0x2, 0x2, 0x63c, 
       0x63d, 0x3, 0x2, 0x2, 0x2, 0x63d, 0x641, 0x5, 0x234, 0x11b, 0x2, 
       0x63e, 0x640, 0x5, 0x42, 0x22, 0x2, 0x63f, 0x63e, 0x3, 0x2, 0x2, 
       0x2, 0x640, 0x643, 0x3, 0x2, 0x2, 0x2, 0x641, 0x63f, 0x3, 0x2, 0x2, 
       0x2, 0x641, 0x642, 0x3, 0x2, 0x2, 0x2, 0x642, 0x653, 0x3, 0x2, 0x2, 
       0x2, 0x643, 0x641, 0x3, 0x2, 0x2, 0x2, 0x644, 0x646, 0x9, 0x16, 0x2, 
       0x2, 0x645, 0x647, 0x9, 0x14, 0x2, 0x2, 0x646, 0x645, 0x3, 0x2, 0x2, 
       0x2, 0x646, 0x647, 0x3, 0x2, 0x2, 0x2, 0x647, 0x649, 0x3, 0x2, 0x2, 
       0x2, 0x648, 0x64a, 0x5, 0x210, 0x109, 0x2, 0x649, 0x648, 0x3, 0x2, 
       0x2, 0x2, 0x649, 0x64a, 0x3, 0x2, 0x2, 0x2, 0x64a, 0x64b, 0x3, 0x2, 
       0x2, 0x2, 0x64b, 0x64f, 0x5, 0x234, 0x11b, 0x2, 0x64c, 0x64e, 0x5, 
       0x42, 0x22, 0x2, 0x64d, 0x64c, 0x3, 0x2, 0x2, 0x2, 0x64e, 0x651, 
       0x3, 0x2, 0x2, 0x2, 0x64f, 0x64d, 0x3, 0x2, 0x2, 0x2, 0x64f, 0x650, 
       0x3, 0x2, 0x2, 0x2, 0x650, 0x653, 0x3, 0x2, 0x2, 0x2, 0x651, 0x64f, 
       0x3, 0x2, 0x2, 0x2, 0x652, 0x636, 0x3, 0x2, 0x2, 0x2, 0x652, 0x644, 
       0x3, 0x2, 0x2, 0x2, 0x653, 0x5d, 0x3, 0x2, 0x2, 0x2, 0x654, 0x656, 
       0x7, 0x158, 0x2, 0x2, 0x655, 0x657, 0x7, 0x3fd, 0x2, 0x2, 0x656, 
       0x655, 0x3, 0x2, 0x2, 0x2, 0x656, 0x657, 0x3, 0x2, 0x2, 0x2, 0x657, 
       0x658, 0x3, 0x2, 0x2, 0x2, 0x658, 0x6e5, 0x5, 0x206, 0x104, 0x2, 
       0x659, 0x65b, 0x7, 0x11a, 0x2, 0x2, 0x65a, 0x65c, 0x7, 0x3fd, 0x2, 
       0x2, 0x65b, 0x65a, 0x3, 0x2, 0x2, 0x2, 0x65b, 0x65c, 0x3, 0x2, 0x2, 
       0x2, 0x65c, 0x65d, 0x3, 0x2, 0x2, 0x2, 0x65d, 0x6e5, 0x5, 0x216, 
       0x10c, 0x2, 0x65e, 0x660, 0x7, 0x11b, 0x2, 0x2, 0x65f, 0x661, 0x7, 
       0x3fd, 0x2, 0x2, 0x660, 0x65f, 0x3, 0x2, 0x2, 0x2, 0x660, 0x661, 
       0x3, 0x2, 0x2, 0x2, 0x661, 0x662, 0x3, 0x2, 0x2, 0x2, 0x662, 0x6e5, 
       0x5, 0x216, 0x10c, 0x2, 0x663, 0x665, 0x7, 0x28, 0x2, 0x2, 0x664, 
       0x663, 0x3, 0x2, 0x2, 0x2, 0x664, 0x665, 0x3, 0x2, 0x2, 0x2, 0x665, 
       0x669, 0x3, 0x2, 0x2, 0x2, 0x666, 0x667, 0x7, 0x18, 0x2, 0x2, 0x667, 
       0x66a, 0x7, 0x8c, 0x2, 0x2, 0x668, 0x66a, 0x7, 0x2e5, 0x2, 0x2, 0x669, 
       0x666, 0x3, 0x2, 0x2, 0x2, 0x669, 0x668, 0x3, 0x2, 0x2, 0x2, 0x66a, 
       0x66c, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x66d, 0x7, 0x3fd, 0x2, 0x2, 0x66c, 
       0x66b, 0x3, 0x2, 0x2, 0x2, 0x66c, 0x66d, 0x3, 0x2, 0x2, 0x2, 0x66d, 
       0x670, 0x3, 0x2, 0x2, 0x2, 0x66e, 0x671, 0x5, 0x202, 0x102, 0x2, 
       0x66f, 0x671, 0x7, 0x28, 0x2, 0x2, 0x670, 0x66e, 0x3, 0x2, 0x2, 0x2, 
       0x670, 0x66f, 0x3, 0x2, 0x2, 0x2, 0x671, 0x6e5, 0x3, 0x2, 0x2, 0x2, 
       0x672, 0x674, 0x9, 0x17, 0x2, 0x2, 0x673, 0x675, 0x7, 0x3fd, 0x2, 
       0x2, 0x674, 0x673, 0x3, 0x2, 0x2, 0x2, 0x674, 0x675, 0x3, 0x2, 0x2, 
       0x2, 0x675, 0x676, 0x3, 0x2, 0x2, 0x2, 0x676, 0x6e5, 0x9, 0x18, 0x2, 
       0x2, 0x677, 0x679, 0x7, 0x28, 0x2, 0x2, 0x678, 0x677, 0x3, 0x2, 0x2, 
       0x2, 0x678, 0x679, 0x3, 0x2, 0x2, 0x2, 0x679, 0x67a, 0x3, 0x2, 0x2, 
       0x2, 0x67a, 0x67c, 0x7, 0x1a, 0x2, 0x2, 0x67b, 0x67d, 0x7, 0x3fd, 
       0x2, 0x2, 0x67c, 0x67b, 0x3, 0x2, 0x2, 0x2, 0x67c, 0x67d, 0x3, 0x2, 
       0x2, 0x2, 0x67d, 0x67e, 0x3, 0x2, 0x2, 0x2, 0x67e, 0x6e5, 0x5, 0x204, 
       0x103, 0x2, 0x67f, 0x681, 0x7, 0x133, 0x2, 0x2, 0x680, 0x682, 0x7, 
       0x3fd, 0x2, 0x2, 0x681, 0x680, 0x3, 0x2, 0x2, 0x2, 0x681, 0x682, 
       0x3, 0x2, 0x2, 0x2, 0x682, 0x683, 0x3, 0x2, 0x2, 0x2, 0x683, 0x6e5, 
       0x7, 0x415, 0x2, 0x2, 0x684, 0x686, 0x7, 0x138, 0x2, 0x2, 0x685, 
       0x687, 0x7, 0x3fd, 0x2, 0x2, 0x686, 0x685, 0x3, 0x2, 0x2, 0x2, 0x686, 
       0x687, 0x3, 0x2, 0x2, 0x2, 0x687, 0x688, 0x3, 0x2, 0x2, 0x2, 0x688, 
       0x6e5, 0x9, 0x19, 0x2, 0x2, 0x689, 0x68b, 0x7, 0x13a, 0x2, 0x2, 0x68a, 
       0x68c, 0x7, 0x3fd, 0x2, 0x2, 0x68b, 0x68a, 0x3, 0x2, 0x2, 0x2, 0x68b, 
       0x68c, 0x3, 0x2, 0x2, 0x2, 0x68c, 0x68d, 0x3, 0x2, 0x2, 0x2, 0x68d, 
       0x6e5, 0x7, 0x415, 0x2, 0x2, 0x68e, 0x68f, 0x7, 0x145, 0x2, 0x2, 
       0x68f, 0x691, 0x7, 0x14c, 0x2, 0x2, 0x690, 0x692, 0x7, 0x3fd, 0x2, 
       0x2, 0x691, 0x690, 0x3, 0x2, 0x2, 0x2, 0x691, 0x692, 0x3, 0x2, 0x2, 
       0x2, 0x692, 0x693, 0x3, 0x2, 0x2, 0x2, 0x693, 0x6e5, 0x7, 0x415, 
       0x2, 0x2, 0x694, 0x696, 0x7, 0x14a, 0x2, 0x2, 0x695, 0x697, 0x7, 
       0x3fd, 0x2, 0x2, 0x696, 0x695, 0x3, 0x2, 0x2, 0x2, 0x696, 0x697, 
       0x3, 0x2, 0x2, 0x2, 0x697, 0x698, 0x3, 0x2, 0x2, 0x2, 0x698, 0x6e5, 
       0x9, 0x18, 0x2, 0x2, 0x699, 0x69b, 0x7, 0x155, 0x2, 0x2, 0x69a, 0x69c, 
       0x7, 0x3fd, 0x2, 0x2, 0x69b, 0x69a, 0x3, 0x2, 0x2, 0x2, 0x69b, 0x69c, 
       0x3, 0x2, 0x2, 0x2, 0x69c, 0x69d, 0x3, 0x2, 0x2, 0x2, 0x69d, 0x6e5, 
       0x7, 0x415, 0x2, 0x2, 0x69e, 0x69f, 0x7, 0x4a, 0x2, 0x2, 0x69f, 0x6a1, 
       0x7, 0x14c, 0x2, 0x2, 0x6a0, 0x6a2, 0x7, 0x3fd, 0x2, 0x2, 0x6a1, 
       0x6a0, 0x3, 0x2, 0x2, 0x2, 0x6a1, 0x6a2, 0x3, 0x2, 0x2, 0x2, 0x6a2, 
       0x6a3, 0x3, 0x2, 0x2, 0x2, 0x6a3, 0x6e5, 0x7, 0x415, 0x2, 0x2, 0x6a4, 
       0x6a6, 0x7, 0x182, 0x2, 0x2, 0x6a5, 0x6a7, 0x7, 0x3fd, 0x2, 0x2, 
       0x6a6, 0x6a5, 0x3, 0x2, 0x2, 0x2, 0x6a6, 0x6a7, 0x3, 0x2, 0x2, 0x2, 
       0x6a7, 0x6a8, 0x3, 0x2, 0x2, 0x2, 0x6a8, 0x6e5, 0x9, 0x1a, 0x2, 0x2, 
       0x6a9, 0x6ab, 0x7, 0x18d, 0x2, 0x2, 0x6aa, 0x6ac, 0x7, 0x3fd, 0x2, 
       0x2, 0x6ab, 0x6aa, 0x3, 0x2, 0x2, 0x2, 0x6ab, 0x6ac, 0x3, 0x2, 0x2, 
       0x2, 0x6ac, 0x6ad, 0x3, 0x2, 0x2, 0x2, 0x6ad, 0x6e5, 0x5, 0x218, 
       0x10d, 0x2, 0x6ae, 0x6b0, 0x7, 0x1ae, 0x2, 0x2, 0x6af, 0x6b1, 0x7, 
       0x3fd, 0x2, 0x2, 0x6b0, 0x6af, 0x3, 0x2, 0x2, 0x2, 0x6b0, 0x6b1, 
       0x3, 0x2, 0x2, 0x2, 0x6b1, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6b2, 0x6e5, 
       0x5, 0x216, 0x10c, 0x2, 0x6b3, 0x6b5, 0x7, 0x1b8, 0x2, 0x2, 0x6b4, 
       0x6b6, 0x7, 0x3fd, 0x2, 0x2, 0x6b5, 0x6b4, 0x3, 0x2, 0x2, 0x2, 0x6b5, 
       0x6b6, 0x3, 0x2, 0x2, 0x2, 0x6b6, 0x6b7, 0x3, 0x2, 0x2, 0x2, 0x6b7, 
       0x6e5, 0x5, 0x216, 0x10c, 0x2, 0x6b8, 0x6ba, 0x7, 0x1d2, 0x2, 0x2, 
       0x6b9, 0x6bb, 0x7, 0x3fd, 0x2, 0x2, 0x6ba, 0x6b9, 0x3, 0x2, 0x2, 
       0x2, 0x6ba, 0x6bb, 0x3, 0x2, 0x2, 0x2, 0x6bb, 0x6bc, 0x3, 0x2, 0x2, 
       0x2, 0x6bc, 0x6e5, 0x9, 0x1b, 0x2, 0x2, 0x6bd, 0x6bf, 0x7, 0x1d8, 
       0x2, 0x2, 0x6be, 0x6c0, 0x7, 0x3fd, 0x2, 0x2, 0x6bf, 0x6be, 0x3, 
       0x2, 0x2, 0x2, 0x6bf, 0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6c0, 0x6c1, 0x3, 
       0x2, 0x2, 0x2, 0x6c1, 0x6e5, 0x7, 0x415, 0x2, 0x2, 0x6c2, 0x6c4, 
       0x7, 0x205, 0x2, 0x2, 0x6c3, 0x6c5, 0x7, 0x3fd, 0x2, 0x2, 0x6c4, 
       0x6c3, 0x3, 0x2, 0x2, 0x2, 0x6c4, 0x6c5, 0x3, 0x2, 0x2, 0x2, 0x6c5, 
       0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6c6, 0x6e5, 0x9, 0x1c, 0x2, 0x2, 0x6c7, 
       0x6c9, 0x7, 0x220, 0x2, 0x2, 0x6c8, 0x6ca, 0x7, 0x3fd, 0x2, 0x2, 
       0x6c9, 0x6c8, 0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6ca, 0x3, 0x2, 0x2, 0x2, 
       0x6ca, 0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6cb, 0x6e5, 0x9, 0x1b, 0x2, 0x2, 
       0x6cc, 0x6ce, 0x7, 0x221, 0x2, 0x2, 0x6cd, 0x6cf, 0x7, 0x3fd, 0x2, 
       0x2, 0x6ce, 0x6cd, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6cf, 0x3, 0x2, 0x2, 
       0x2, 0x6cf, 0x6d0, 0x3, 0x2, 0x2, 0x2, 0x6d0, 0x6e5, 0x9, 0x1b, 0x2, 
       0x2, 0x6d1, 0x6d3, 0x7, 0x222, 0x2, 0x2, 0x6d2, 0x6d4, 0x7, 0x3fd, 
       0x2, 0x2, 0x6d3, 0x6d2, 0x3, 0x2, 0x2, 0x2, 0x6d3, 0x6d4, 0x3, 0x2, 
       0x2, 0x2, 0x6d4, 0x6d5, 0x3, 0x2, 0x2, 0x2, 0x6d5, 0x6e5, 0x5, 0x216, 
       0x10c, 0x2, 0x6d6, 0x6d7, 0x7, 0x230, 0x2, 0x2, 0x6d7, 0x6d9, 0x5, 
       0x210, 0x109, 0x2, 0x6d8, 0x6da, 0x5, 0x60, 0x31, 0x2, 0x6d9, 0x6d8, 
       0x3, 0x2, 0x2, 0x2, 0x6d9, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6da, 0x6e5, 
       0x3, 0x2, 0x2, 0x2, 0x6db, 0x6e5, 0x5, 0x60, 0x31, 0x2, 0x6dc, 0x6de, 
       0x7, 0xa4, 0x2, 0x2, 0x6dd, 0x6df, 0x7, 0x3fd, 0x2, 0x2, 0x6de, 0x6dd, 
       0x3, 0x2, 0x2, 0x2, 0x6de, 0x6df, 0x3, 0x2, 0x2, 0x2, 0x6df, 0x6e0, 
       0x3, 0x2, 0x2, 0x2, 0x6e0, 0x6e1, 0x7, 0x406, 0x2, 0x2, 0x6e1, 0x6e2, 
       0x5, 0x232, 0x11a, 0x2, 0x6e2, 0x6e3, 0x7, 0x407, 0x2, 0x2, 0x6e3, 
       0x6e5, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x654, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x659, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x65e, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x664, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x672, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x678, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x67f, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x684, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x689, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x68e, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x694, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x699, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x69e, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6a4, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6a9, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6ae, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6b3, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6b8, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6bd, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6c2, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6c7, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6cc, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6d1, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6d6, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6db, 0x3, 0x2, 0x2, 0x2, 0x6e4, 
       0x6dc, 0x3, 0x2, 0x2, 0x2, 0x6e5, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x6e6, 
       0x6e7, 0x7, 0x225, 0x2, 0x2, 0x6e7, 0x6e8, 0x9, 0x12, 0x2, 0x2, 0x6e8, 
       0x61, 0x3, 0x2, 0x2, 0x2, 0x6e9, 0x6ea, 0x7, 0x75, 0x2, 0x2, 0x6ea, 
       0x6eb, 0x7, 0x12, 0x2, 0x2, 0x6eb, 0x6ee, 0x5, 0x64, 0x33, 0x2, 0x6ec, 
       0x6ed, 0x7, 0x1d7, 0x2, 0x2, 0x6ed, 0x6ef, 0x5, 0x216, 0x10c, 0x2, 
       0x6ee, 0x6ec, 0x3, 0x2, 0x2, 0x2, 0x6ee, 0x6ef, 0x3, 0x2, 0x2, 0x2, 
       0x6ef, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6f0, 0x6f1, 0x7, 0x22a, 0x2, 
       0x2, 0x6f1, 0x6f2, 0x7, 0x12, 0x2, 0x2, 0x6f2, 0x6f5, 0x5, 0x66, 
       0x34, 0x2, 0x6f3, 0x6f4, 0x7, 0x22b, 0x2, 0x2, 0x6f4, 0x6f6, 0x5, 
       0x216, 0x10c, 0x2, 0x6f5, 0x6f3, 0x3, 0x2, 0x2, 0x2, 0x6f5, 0x6f6, 
       0x3, 0x2, 0x2, 0x2, 0x6f6, 0x6f8, 0x3, 0x2, 0x2, 0x2, 0x6f7, 0x6f0, 
       0x3, 0x2, 0x2, 0x2, 0x6f7, 0x6f8, 0x3, 0x2, 0x2, 0x2, 0x6f8, 0x704, 
       0x3, 0x2, 0x2, 0x2, 0x6f9, 0x6fa, 0x7, 0x406, 0x2, 0x2, 0x6fa, 0x6ff, 
       0x5, 0x68, 0x35, 0x2, 0x6fb, 0x6fc, 0x7, 0x408, 0x2, 0x2, 0x6fc, 
       0x6fe, 0x5, 0x68, 0x35, 0x2, 0x6fd, 0x6fb, 0x3, 0x2, 0x2, 0x2, 0x6fe, 
       0x701, 0x3, 0x2, 0x2, 0x2, 0x6ff, 0x6fd, 0x3, 0x2, 0x2, 0x2, 0x6ff, 
       0x700, 0x3, 0x2, 0x2, 0x2, 0x700, 0x702, 0x3, 0x2, 0x2, 0x2, 0x701, 
       0x6ff, 0x3, 0x2, 0x2, 0x2, 0x702, 0x703, 0x7, 0x407, 0x2, 0x2, 0x703, 
       0x705, 0x3, 0x2, 0x2, 0x2, 0x704, 0x6f9, 0x3, 0x2, 0x2, 0x2, 0x704, 
       0x705, 0x3, 0x2, 0x2, 0x2, 0x705, 0x63, 0x3, 0x2, 0x2, 0x2, 0x706, 
       0x708, 0x7, 0x5c, 0x2, 0x2, 0x707, 0x706, 0x3, 0x2, 0x2, 0x2, 0x707, 
       0x708, 0x3, 0x2, 0x2, 0x2, 0x708, 0x709, 0x3, 0x2, 0x2, 0x2, 0x709, 
       0x70a, 0x7, 0x178, 0x2, 0x2, 0x70a, 0x70b, 0x7, 0x406, 0x2, 0x2, 
       0x70b, 0x70c, 0x5, 0x25e, 0x130, 0x2, 0x70c, 0x70d, 0x7, 0x407, 0x2, 
       0x2, 0x70d, 0x734, 0x3, 0x2, 0x2, 0x2, 0x70e, 0x710, 0x7, 0x5c, 0x2, 
       0x2, 0x70f, 0x70e, 0x3, 0x2, 0x2, 0x2, 0x70f, 0x710, 0x3, 0x2, 0x2, 
       0x2, 0x710, 0x711, 0x3, 0x2, 0x2, 0x2, 0x711, 0x715, 0x7, 0x54, 0x2, 
       0x2, 0x712, 0x713, 0x7, 0x114, 0x2, 0x2, 0x713, 0x714, 0x7, 0x3fd, 
       0x2, 0x2, 0x714, 0x716, 0x9, 0x1d, 0x2, 0x2, 0x715, 0x712, 0x3, 0x2, 
       0x2, 0x2, 0x715, 0x716, 0x3, 0x2, 0x2, 0x2, 0x716, 0x717, 0x3, 0x2, 
       0x2, 0x2, 0x717, 0x718, 0x7, 0x406, 0x2, 0x2, 0x718, 0x719, 0x5, 
       0x230, 0x119, 0x2, 0x719, 0x71a, 0x7, 0x407, 0x2, 0x2, 0x71a, 0x734, 
       0x3, 0x2, 0x2, 0x2, 0x71b, 0x725, 0x7, 0x79, 0x2, 0x2, 0x71c, 0x71d, 
       0x7, 0x406, 0x2, 0x2, 0x71d, 0x71e, 0x5, 0x25e, 0x130, 0x2, 0x71e, 
       0x71f, 0x7, 0x407, 0x2, 0x2, 0x71f, 0x726, 0x3, 0x2, 0x2, 0x2, 0x720, 
       0x721, 0x7, 0x130, 0x2, 0x2, 0x721, 0x722, 0x7, 0x406, 0x2, 0x2, 
       0x722, 0x723, 0x5, 0x230, 0x119, 0x2, 0x723, 0x724, 0x7, 0x407, 0x2, 
       0x2, 0x724, 0x726, 0x3, 0x2, 0x2, 0x2, 0x725, 0x71c, 0x3, 0x2, 0x2, 
       0x2, 0x725, 0x720, 0x3, 0x2, 0x2, 0x2, 0x726, 0x734, 0x3, 0x2, 0x2, 
       0x2, 0x727, 0x731, 0x7, 0x193, 0x2, 0x2, 0x728, 0x729, 0x7, 0x406, 
       0x2, 0x2, 0x729, 0x72a, 0x5, 0x25e, 0x130, 0x2, 0x72a, 0x72b, 0x7, 
       0x407, 0x2, 0x2, 0x72b, 0x732, 0x3, 0x2, 0x2, 0x2, 0x72c, 0x72d, 
       0x7, 0x130, 0x2, 0x2, 0x72d, 0x72e, 0x7, 0x406, 0x2, 0x2, 0x72e, 
       0x72f, 0x5, 0x230, 0x119, 0x2, 0x72f, 0x730, 0x7, 0x407, 0x2, 0x2, 
       0x730, 0x732, 0x3, 0x2, 0x2, 0x2, 0x731, 0x728, 0x3, 0x2, 0x2, 0x2, 
       0x731, 0x72c, 0x3, 0x2, 0x2, 0x2, 0x732, 0x734, 0x3, 0x2, 0x2, 0x2, 
       0x733, 0x707, 0x3, 0x2, 0x2, 0x2, 0x733, 0x70f, 0x3, 0x2, 0x2, 0x2, 
       0x733, 0x71b, 0x3, 0x2, 0x2, 0x2, 0x733, 0x727, 0x3, 0x2, 0x2, 0x2, 
       0x734, 0x65, 0x3, 0x2, 0x2, 0x2, 0x735, 0x737, 0x7, 0x5c, 0x2, 0x2, 
       0x736, 0x735, 0x3, 0x2, 0x2, 0x2, 0x736, 0x737, 0x3, 0x2, 0x2, 0x2, 
       0x737, 0x738, 0x3, 0x2, 0x2, 0x2, 0x738, 0x739, 0x7, 0x178, 0x2, 
       0x2, 0x739, 0x73a, 0x7, 0x406, 0x2, 0x2, 0x73a, 0x73b, 0x5, 0x25e, 
       0x130, 0x2, 0x73b, 0x73c, 0x7, 0x407, 0x2, 0x2, 0x73c, 0x74b, 0x3, 
       0x2, 0x2, 0x2, 0x73d, 0x73f, 0x7, 0x5c, 0x2, 0x2, 0x73e, 0x73d, 0x3, 
       0x2, 0x2, 0x2, 0x73e, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x73f, 0x740, 0x3, 
       0x2, 0x2, 0x2, 0x740, 0x744, 0x7, 0x54, 0x2, 0x2, 0x741, 0x742, 0x7, 
       0x114, 0x2, 0x2, 0x742, 0x743, 0x7, 0x3fd, 0x2, 0x2, 0x743, 0x745, 
       0x9, 0x1d, 0x2, 0x2, 0x744, 0x741, 0x3, 0x2, 0x2, 0x2, 0x744, 0x745, 
       0x3, 0x2, 0x2, 0x2, 0x745, 0x746, 0x3, 0x2, 0x2, 0x2, 0x746, 0x747, 
       0x7, 0x406, 0x2, 0x2, 0x747, 0x748, 0x5, 0x230, 0x119, 0x2, 0x748, 
       0x749, 0x7, 0x407, 0x2, 0x2, 0x749, 0x74b, 0x3, 0x2, 0x2, 0x2, 0x74a, 
       0x736, 0x3, 0x2, 0x2, 0x2, 0x74a, 0x73e, 0x3, 0x2, 0x2, 0x2, 0x74b, 
       0x67, 0x3, 0x2, 0x2, 0x2, 0x74c, 0x74d, 0x7, 0x75, 0x2, 0x2, 0x74d, 
       0x74e, 0x5, 0x210, 0x109, 0x2, 0x74e, 0x74f, 0x7, 0xac, 0x2, 0x2, 
       0x74f, 0x750, 0x7, 0x191, 0x2, 0x2, 0x750, 0x751, 0x7, 0x233, 0x2, 
       0x2, 0x751, 0x752, 0x7, 0x406, 0x2, 0x2, 0x752, 0x757, 0x5, 0x6a, 
       0x36, 0x2, 0x753, 0x754, 0x7, 0x408, 0x2, 0x2, 0x754, 0x756, 0x5, 
       0x6a, 0x36, 0x2, 0x755, 0x753, 0x3, 0x2, 0x2, 0x2, 0x756, 0x759, 
       0x3, 0x2, 0x2, 0x2, 0x757, 0x755, 0x3, 0x2, 0x2, 0x2, 0x757, 0x758, 
       0x3, 0x2, 0x2, 0x2, 0x758, 0x75a, 0x3, 0x2, 0x2, 0x2, 0x759, 0x757, 
       0x3, 0x2, 0x2, 0x2, 0x75a, 0x75e, 0x7, 0x407, 0x2, 0x2, 0x75b, 0x75d, 
       0x5, 0x70, 0x39, 0x2, 0x75c, 0x75b, 0x3, 0x2, 0x2, 0x2, 0x75d, 0x760, 
       0x3, 0x2, 0x2, 0x2, 0x75e, 0x75c, 0x3, 0x2, 0x2, 0x2, 0x75e, 0x75f, 
       0x3, 0x2, 0x2, 0x2, 0x75f, 0x76c, 0x3, 0x2, 0x2, 0x2, 0x760, 0x75e, 
       0x3, 0x2, 0x2, 0x2, 0x761, 0x762, 0x7, 0x406, 0x2, 0x2, 0x762, 0x767, 
       0x5, 0x6e, 0x38, 0x2, 0x763, 0x764, 0x7, 0x408, 0x2, 0x2, 0x764, 
       0x766, 0x5, 0x6e, 0x38, 0x2, 0x765, 0x763, 0x3, 0x2, 0x2, 0x2, 0x766, 
       0x769, 0x3, 0x2, 0x2, 0x2, 0x767, 0x765, 0x3, 0x2, 0x2, 0x2, 0x767, 
       0x768, 0x3, 0x2, 0x2, 0x2, 0x768, 0x76a, 0x3, 0x2, 0x2, 0x2, 0x769, 
       0x767, 0x3, 0x2, 0x2, 0x2, 0x76a, 0x76b, 0x7, 0x407, 0x2, 0x2, 0x76b, 
       0x76d, 0x3, 0x2, 0x2, 0x2, 0x76c, 0x761, 0x3, 0x2, 0x2, 0x2, 0x76c, 
       0x76d, 0x3, 0x2, 0x2, 0x2, 0x76d, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x76e, 
       0x76f, 0x7, 0x75, 0x2, 0x2, 0x76f, 0x770, 0x5, 0x210, 0x109, 0x2, 
       0x770, 0x771, 0x7, 0xac, 0x2, 0x2, 0x771, 0x772, 0x7, 0x191, 0x2, 
       0x2, 0x772, 0x773, 0x7, 0x233, 0x2, 0x2, 0x773, 0x777, 0x5, 0x6a, 
       0x36, 0x2, 0x774, 0x776, 0x5, 0x70, 0x39, 0x2, 0x775, 0x774, 0x3, 
       0x2, 0x2, 0x2, 0x776, 0x779, 0x3, 0x2, 0x2, 0x2, 0x777, 0x775, 0x3, 
       0x2, 0x2, 0x2, 0x777, 0x778, 0x3, 0x2, 0x2, 0x2, 0x778, 0x785, 0x3, 
       0x2, 0x2, 0x2, 0x779, 0x777, 0x3, 0x2, 0x2, 0x2, 0x77a, 0x77b, 0x7, 
       0x406, 0x2, 0x2, 0x77b, 0x780, 0x5, 0x6e, 0x38, 0x2, 0x77c, 0x77d, 
       0x7, 0x408, 0x2, 0x2, 0x77d, 0x77f, 0x5, 0x6e, 0x38, 0x2, 0x77e, 
       0x77c, 0x3, 0x2, 0x2, 0x2, 0x77f, 0x782, 0x3, 0x2, 0x2, 0x2, 0x780, 
       0x77e, 0x3, 0x2, 0x2, 0x2, 0x780, 0x781, 0x3, 0x2, 0x2, 0x2, 0x781, 
       0x783, 0x3, 0x2, 0x2, 0x2, 0x782, 0x780, 0x3, 0x2, 0x2, 0x2, 0x783, 
       0x784, 0x7, 0x407, 0x2, 0x2, 0x784, 0x786, 0x3, 0x2, 0x2, 0x2, 0x785, 
       0x77a, 0x3, 0x2, 0x2, 0x2, 0x785, 0x786, 0x3, 0x2, 0x2, 0x2, 0x786, 
       0x7df, 0x3, 0x2, 0x2, 0x2, 0x787, 0x788, 0x7, 0x75, 0x2, 0x2, 0x788, 
       0x789, 0x5, 0x210, 0x109, 0x2, 0x789, 0x78a, 0x7, 0xac, 0x2, 0x2, 
       0x78a, 0x78b, 0x7, 0x49, 0x2, 0x2, 0x78b, 0x78c, 0x7, 0x406, 0x2, 
       0x2, 0x78c, 0x791, 0x5, 0x6a, 0x36, 0x2, 0x78d, 0x78e, 0x7, 0x408, 
       0x2, 0x2, 0x78e, 0x790, 0x5, 0x6a, 0x36, 0x2, 0x78f, 0x78d, 0x3, 
       0x2, 0x2, 0x2, 0x790, 0x793, 0x3, 0x2, 0x2, 0x2, 0x791, 0x78f, 0x3, 
       0x2, 0x2, 0x2, 0x791, 0x792, 0x3, 0x2, 0x2, 0x2, 0x792, 0x794, 0x3, 
       0x2, 0x2, 0x2, 0x793, 0x791, 0x3, 0x2, 0x2, 0x2, 0x794, 0x798, 0x7, 
       0x407, 0x2, 0x2, 0x795, 0x797, 0x5, 0x70, 0x39, 0x2, 0x796, 0x795, 
       0x3, 0x2, 0x2, 0x2, 0x797, 0x79a, 0x3, 0x2, 0x2, 0x2, 0x798, 0x796, 
       0x3, 0x2, 0x2, 0x2, 0x798, 0x799, 0x3, 0x2, 0x2, 0x2, 0x799, 0x7a6, 
       0x3, 0x2, 0x2, 0x2, 0x79a, 0x798, 0x3, 0x2, 0x2, 0x2, 0x79b, 0x79c, 
       0x7, 0x406, 0x2, 0x2, 0x79c, 0x7a1, 0x5, 0x6e, 0x38, 0x2, 0x79d, 
       0x79e, 0x7, 0x408, 0x2, 0x2, 0x79e, 0x7a0, 0x5, 0x6e, 0x38, 0x2, 
       0x79f, 0x79d, 0x3, 0x2, 0x2, 0x2, 0x7a0, 0x7a3, 0x3, 0x2, 0x2, 0x2, 
       0x7a1, 0x79f, 0x3, 0x2, 0x2, 0x2, 0x7a1, 0x7a2, 0x3, 0x2, 0x2, 0x2, 
       0x7a2, 0x7a4, 0x3, 0x2, 0x2, 0x2, 0x7a3, 0x7a1, 0x3, 0x2, 0x2, 0x2, 
       0x7a4, 0x7a5, 0x7, 0x407, 0x2, 0x2, 0x7a5, 0x7a7, 0x3, 0x2, 0x2, 
       0x2, 0x7a6, 0x79b, 0x3, 0x2, 0x2, 0x2, 0x7a6, 0x7a7, 0x3, 0x2, 0x2, 
       0x2, 0x7a7, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x7a8, 0x7a9, 0x7, 0x75, 0x2, 
       0x2, 0x7a9, 0x7aa, 0x5, 0x210, 0x109, 0x2, 0x7aa, 0x7ab, 0x7, 0xac, 
       0x2, 0x2, 0x7ab, 0x7ac, 0x7, 0x49, 0x2, 0x2, 0x7ac, 0x7ad, 0x7, 0x406, 
       0x2, 0x2, 0x7ad, 0x7b2, 0x5, 0x6c, 0x37, 0x2, 0x7ae, 0x7af, 0x7, 
       0x408, 0x2, 0x2, 0x7af, 0x7b1, 0x5, 0x6c, 0x37, 0x2, 0x7b0, 0x7ae, 
       0x3, 0x2, 0x2, 0x2, 0x7b1, 0x7b4, 0x3, 0x2, 0x2, 0x2, 0x7b2, 0x7b0, 
       0x3, 0x2, 0x2, 0x2, 0x7b2, 0x7b3, 0x3, 0x2, 0x2, 0x2, 0x7b3, 0x7b5, 
       0x3, 0x2, 0x2, 0x2, 0x7b4, 0x7b2, 0x3, 0x2, 0x2, 0x2, 0x7b5, 0x7b9, 
       0x7, 0x407, 0x2, 0x2, 0x7b6, 0x7b8, 0x5, 0x70, 0x39, 0x2, 0x7b7, 
       0x7b6, 0x3, 0x2, 0x2, 0x2, 0x7b8, 0x7bb, 0x3, 0x2, 0x2, 0x2, 0x7b9, 
       0x7b7, 0x3, 0x2, 0x2, 0x2, 0x7b9, 0x7ba, 0x3, 0x2, 0x2, 0x2, 0x7ba, 
       0x7c7, 0x3, 0x2, 0x2, 0x2, 0x7bb, 0x7b9, 0x3, 0x2, 0x2, 0x2, 0x7bc, 
       0x7bd, 0x7, 0x406, 0x2, 0x2, 0x7bd, 0x7c2, 0x5, 0x6e, 0x38, 0x2, 
       0x7be, 0x7bf, 0x7, 0x408, 0x2, 0x2, 0x7bf, 0x7c1, 0x5, 0x6e, 0x38, 
       0x2, 0x7c0, 0x7be, 0x3, 0x2, 0x2, 0x2, 0x7c1, 0x7c4, 0x3, 0x2, 0x2, 
       0x2, 0x7c2, 0x7c0, 0x3, 0x2, 0x2, 0x2, 0x7c2, 0x7c3, 0x3, 0x2, 0x2, 
       0x2, 0x7c3, 0x7c5, 0x3, 0x2, 0x2, 0x2, 0x7c4, 0x7c2, 0x3, 0x2, 0x2, 
       0x2, 0x7c5, 0x7c6, 0x7, 0x407, 0x2, 0x2, 0x7c6, 0x7c8, 0x3, 0x2, 
       0x2, 0x2, 0x7c7, 0x7bc, 0x3, 0x2, 0x2, 0x2, 0x7c7, 0x7c8, 0x3, 0x2, 
       0x2, 0x2, 0x7c8, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x7c9, 0x7ca, 0x7, 0x75, 
       0x2, 0x2, 0x7ca, 0x7ce, 0x5, 0x210, 0x109, 0x2, 0x7cb, 0x7cd, 0x5, 
       0x70, 0x39, 0x2, 0x7cc, 0x7cb, 0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7d0, 
       0x3, 0x2, 0x2, 0x2, 0x7ce, 0x7cc, 0x3, 0x2, 0x2, 0x2, 0x7ce, 0x7cf, 
       0x3, 0x2, 0x2, 0x2, 0x7cf, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7d0, 0x7ce, 
       0x3, 0x2, 0x2, 0x2, 0x7d1, 0x7d2, 0x7, 0x406, 0x2, 0x2, 0x7d2, 0x7d7, 
       0x5, 0x6e, 0x38, 0x2, 0x7d3, 0x7d4, 0x7, 0x408, 0x2, 0x2, 0x7d4, 
       0x7d6, 0x5, 0x6e, 0x38, 0x2, 0x7d5, 0x7d3, 0x3, 0x2, 0x2, 0x2, 0x7d6, 
       0x7d9, 0x3, 0x2, 0x2, 0x2, 0x7d7, 0x7d5, 0x3, 0x2, 0x2, 0x2, 0x7d7, 
       0x7d8, 0x3, 0x2, 0x2, 0x2, 0x7d8, 0x7da, 0x3, 0x2, 0x2, 0x2, 0x7d9, 
       0x7d7, 0x3, 0x2, 0x2, 0x2, 0x7da, 0x7db, 0x7, 0x407, 0x2, 0x2, 0x7db, 
       0x7dd, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7d1, 0x3, 0x2, 0x2, 0x2, 0x7dc, 
       0x7dd, 0x3, 0x2, 0x2, 0x2, 0x7dd, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x7de, 
       0x74c, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x76e, 0x3, 0x2, 0x2, 0x2, 0x7de, 
       0x787, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7a8, 0x3, 0x2, 0x2, 0x2, 0x7de, 
       0x7c9, 0x3, 0x2, 0x2, 0x2, 0x7df, 0x69, 0x3, 0x2, 0x2, 0x2, 0x7e0, 
       0x7e4, 0x5, 0x222, 0x112, 0x2, 0x7e1, 0x7e4, 0x5, 0x25e, 0x130, 0x2, 
       0x7e2, 0x7e4, 0x7, 0x65, 0x2, 0x2, 0x7e3, 0x7e0, 0x3, 0x2, 0x2, 0x2, 
       0x7e3, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7e3, 0x7e2, 0x3, 0x2, 0x2, 0x2, 
       0x7e4, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x7e5, 0x7e6, 0x7, 0x406, 0x2, 0x2, 
       0x7e6, 0x7e9, 0x5, 0x6a, 0x36, 0x2, 0x7e7, 0x7e8, 0x7, 0x408, 0x2, 
       0x2, 0x7e8, 0x7ea, 0x5, 0x6a, 0x36, 0x2, 0x7e9, 0x7e7, 0x3, 0x2, 
       0x2, 0x2, 0x7ea, 0x7eb, 0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7e9, 0x3, 0x2, 
       0x2, 0x2, 0x7eb, 0x7ec, 0x3, 0x2, 0x2, 0x2, 0x7ec, 0x7ed, 0x3, 0x2, 
       0x2, 0x2, 0x7ed, 0x7ee, 0x7, 0x407, 0x2, 0x2, 0x7ee, 0x6d, 0x3, 0x2, 
       0x2, 0x2, 0x7ef, 0x7f0, 0x7, 0x22a, 0x2, 0x2, 0x7f0, 0x7f4, 0x5, 
       0x210, 0x109, 0x2, 0x7f1, 0x7f3, 0x5, 0x70, 0x39, 0x2, 0x7f2, 0x7f1, 
       0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f6, 0x3, 0x2, 0x2, 0x2, 0x7f4, 0x7f2, 
       0x3, 0x2, 0x2, 0x2, 0x7f4, 0x7f5, 0x3, 0x2, 0x2, 0x2, 0x7f5, 0x6f, 
       0x3, 0x2, 0x2, 0x2, 0x7f6, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7f7, 0x7f9, 
       0x7, 0x225, 0x2, 0x2, 0x7f8, 0x7f7, 0x3, 0x2, 0x2, 0x2, 0x7f8, 0x7f9, 
       0x3, 0x2, 0x2, 0x2, 0x7f9, 0x7fa, 0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7fc, 
       0x7, 0x158, 0x2, 0x2, 0x7fb, 0x7fd, 0x7, 0x3fd, 0x2, 0x2, 0x7fc, 
       0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fc, 0x7fd, 0x3, 0x2, 0x2, 0x2, 0x7fd, 
       0x7fe, 0x3, 0x2, 0x2, 0x2, 0x7fe, 0x825, 0x5, 0x206, 0x104, 0x2, 
       0x7ff, 0x801, 0x7, 0x133, 0x2, 0x2, 0x800, 0x802, 0x7, 0x3fd, 0x2, 
       0x2, 0x801, 0x800, 0x3, 0x2, 0x2, 0x2, 0x801, 0x802, 0x3, 0x2, 0x2, 
       0x2, 0x802, 0x803, 0x3, 0x2, 0x2, 0x2, 0x803, 0x825, 0x7, 0x415, 
       0x2, 0x2, 0x804, 0x805, 0x7, 0x145, 0x2, 0x2, 0x805, 0x807, 0x7, 
       0x14c, 0x2, 0x2, 0x806, 0x808, 0x7, 0x3fd, 0x2, 0x2, 0x807, 0x806, 
       0x3, 0x2, 0x2, 0x2, 0x807, 0x808, 0x3, 0x2, 0x2, 0x2, 0x808, 0x809, 
       0x3, 0x2, 0x2, 0x2, 0x809, 0x825, 0x7, 0x415, 0x2, 0x2, 0x80a, 0x80b, 
       0x7, 0x4a, 0x2, 0x2, 0x80b, 0x80d, 0x7, 0x14c, 0x2, 0x2, 0x80c, 0x80e, 
       0x7, 0x3fd, 0x2, 0x2, 0x80d, 0x80c, 0x3, 0x2, 0x2, 0x2, 0x80d, 0x80e, 
       0x3, 0x2, 0x2, 0x2, 0x80e, 0x80f, 0x3, 0x2, 0x2, 0x2, 0x80f, 0x825, 
       0x7, 0x415, 0x2, 0x2, 0x810, 0x812, 0x7, 0x1ae, 0x2, 0x2, 0x811, 
       0x813, 0x7, 0x3fd, 0x2, 0x2, 0x812, 0x811, 0x3, 0x2, 0x2, 0x2, 0x812, 
       0x813, 0x3, 0x2, 0x2, 0x2, 0x813, 0x814, 0x3, 0x2, 0x2, 0x2, 0x814, 
       0x825, 0x5, 0x216, 0x10c, 0x2, 0x815, 0x817, 0x7, 0x1b8, 0x2, 0x2, 
       0x816, 0x818, 0x7, 0x3fd, 0x2, 0x2, 0x817, 0x816, 0x3, 0x2, 0x2, 
       0x2, 0x817, 0x818, 0x3, 0x2, 0x2, 0x2, 0x818, 0x819, 0x3, 0x2, 0x2, 
       0x2, 0x819, 0x825, 0x5, 0x216, 0x10c, 0x2, 0x81a, 0x81c, 0x7, 0x230, 
       0x2, 0x2, 0x81b, 0x81d, 0x7, 0x3fd, 0x2, 0x2, 0x81c, 0x81b, 0x3, 
       0x2, 0x2, 0x2, 0x81c, 0x81d, 0x3, 0x2, 0x2, 0x2, 0x81d, 0x81e, 0x3, 
       0x2, 0x2, 0x2, 0x81e, 0x825, 0x5, 0x210, 0x109, 0x2, 0x81f, 0x821, 
       0x7, 0x1c4, 0x2, 0x2, 0x820, 0x822, 0x7, 0x3fd, 0x2, 0x2, 0x821, 
       0x820, 0x3, 0x2, 0x2, 0x2, 0x821, 0x822, 0x3, 0x2, 0x2, 0x2, 0x822, 
       0x823, 0x3, 0x2, 0x2, 0x2, 0x823, 0x825, 0x5, 0x210, 0x109, 0x2, 
       0x824, 0x7f8, 0x3, 0x2, 0x2, 0x2, 0x824, 0x7ff, 0x3, 0x2, 0x2, 0x2, 
       0x824, 0x804, 0x3, 0x2, 0x2, 0x2, 0x824, 0x80a, 0x3, 0x2, 0x2, 0x2, 
       0x824, 0x810, 0x3, 0x2, 0x2, 0x2, 0x824, 0x815, 0x3, 0x2, 0x2, 0x2, 
       0x824, 0x81a, 0x3, 0x2, 0x2, 0x2, 0x824, 0x81f, 0x3, 0x2, 0x2, 0x2, 
       0x825, 0x71, 0x3, 0x2, 0x2, 0x2, 0x826, 0x827, 0x7, 0x9, 0x2, 0x2, 
       0x827, 0x829, 0x9, 0x2, 0x2, 0x2, 0x828, 0x82a, 0x5, 0x210, 0x109, 
       0x2, 0x829, 0x828, 0x3, 0x2, 0x2, 0x2, 0x829, 0x82a, 0x3, 0x2, 0x2, 
       0x2, 0x82a, 0x82c, 0x3, 0x2, 0x2, 0x2, 0x82b, 0x82d, 0x5, 0x32, 0x1a, 
       0x2, 0x82c, 0x82b, 0x3, 0x2, 0x2, 0x2, 0x82d, 0x82e, 0x3, 0x2, 0x2, 
       0x2, 0x82e, 0x82c, 0x3, 0x2, 0x2, 0x2, 0x82e, 0x82f, 0x3, 0x2, 0x2, 
       0x2, 0x82f, 0x839, 0x3, 0x2, 0x2, 0x2, 0x830, 0x831, 0x7, 0x9, 0x2, 
       0x2, 0x831, 0x832, 0x9, 0x2, 0x2, 0x2, 0x832, 0x833, 0x5, 0x210, 
       0x109, 0x2, 0x833, 0x834, 0x7, 0x23f, 0x2, 0x2, 0x834, 0x835, 0x7, 
       0x145, 0x2, 0x2, 0x835, 0x836, 0x7, 0x14c, 0x2, 0x2, 0x836, 0x837, 
       0x7, 0x1be, 0x2, 0x2, 0x837, 0x839, 0x3, 0x2, 0x2, 0x2, 0x838, 0x826, 
       0x3, 0x2, 0x2, 0x2, 0x838, 0x830, 0x3, 0x2, 0x2, 0x2, 0x839, 0x73, 
       0x3, 0x2, 0x2, 0x2, 0x83a, 0x83c, 0x7, 0x9, 0x2, 0x2, 0x83b, 0x83d, 
       0x5, 0x34, 0x1b, 0x2, 0x83c, 0x83b, 0x3, 0x2, 0x2, 0x2, 0x83c, 0x83d, 
       0x3, 0x2, 0x2, 0x2, 0x83d, 0x83e, 0x3, 0x2, 0x2, 0x2, 0x83e, 0x83f, 
       0x7, 0x15e, 0x2, 0x2, 0x83f, 0x843, 0x5, 0x1f6, 0xfc, 0x2, 0x840, 
       0x841, 0x7, 0x6c, 0x2, 0x2, 0x841, 0x842, 0x7, 0x207, 0x2, 0x2, 0x842, 
       0x844, 0x5, 0x36, 0x1c, 0x2, 0x843, 0x840, 0x3, 0x2, 0x2, 0x2, 0x843, 
       0x844, 0x3, 0x2, 0x2, 0x2, 0x844, 0x84b, 0x3, 0x2, 0x2, 0x2, 0x845, 
       0x846, 0x7, 0x6c, 0x2, 0x2, 0x846, 0x848, 0x7, 0x136, 0x2, 0x2, 0x847, 
       0x849, 0x7, 0x68, 0x2, 0x2, 0x848, 0x847, 0x3, 0x2, 0x2, 0x2, 0x848, 
       0x849, 0x3, 0x2, 0x2, 0x2, 0x849, 0x84a, 0x3, 0x2, 0x2, 0x2, 0x84a, 
       0x84c, 0x7, 0x1e0, 0x2, 0x2, 0x84b, 0x845, 0x3, 0x2, 0x2, 0x2, 0x84b, 
       0x84c, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x850, 0x3, 0x2, 0x2, 0x2, 0x84d, 
       0x84e, 0x7, 0x7f, 0x2, 0x2, 0x84e, 0x84f, 0x7, 0x9f, 0x2, 0x2, 0x84f, 
       0x851, 0x5, 0x1f6, 0xfc, 0x2, 0x850, 0x84d, 0x3, 0x2, 0x2, 0x2, 0x850, 
       0x851, 0x3, 0x2, 0x2, 0x2, 0x851, 0x853, 0x3, 0x2, 0x2, 0x2, 0x852, 
       0x854, 0x5, 0x3e, 0x20, 0x2, 0x853, 0x852, 0x3, 0x2, 0x2, 0x2, 0x853, 
       0x854, 0x3, 0x2, 0x2, 0x2, 0x854, 0x857, 0x3, 0x2, 0x2, 0x2, 0x855, 
       0x856, 0x7, 0x133, 0x2, 0x2, 0x856, 0x858, 0x7, 0x415, 0x2, 0x2, 
       0x857, 0x855, 0x3, 0x2, 0x2, 0x2, 0x857, 0x858, 0x3, 0x2, 0x2, 0x2, 
       0x858, 0x85b, 0x3, 0x2, 0x2, 0x2, 0x859, 0x85a, 0x7, 0x150, 0x2, 
       0x2, 0x85a, 0x85c, 0x5, 0x15e, 0xb0, 0x2, 0x85b, 0x859, 0x3, 0x2, 
       0x2, 0x2, 0x85b, 0x85c, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x75, 0x3, 0x2, 
       0x2, 0x2, 0x85d, 0x85e, 0x7, 0x9, 0x2, 0x2, 0x85e, 0x85f, 0x7, 0x172, 
       0x2, 0x2, 0x85f, 0x863, 0x5, 0x1f6, 0xfc, 0x2, 0x860, 0x862, 0x5, 
       0x48, 0x25, 0x2, 0x861, 0x860, 0x3, 0x2, 0x2, 0x2, 0x862, 0x865, 
       0x3, 0x2, 0x2, 0x2, 0x863, 0x861, 0x3, 0x2, 0x2, 0x2, 0x863, 0x864, 
       0x3, 0x2, 0x2, 0x2, 0x864, 0x77, 0x3, 0x2, 0x2, 0x2, 0x865, 0x863, 
       0x3, 0x2, 0x2, 0x2, 0x866, 0x867, 0x7, 0x9, 0x2, 0x2, 0x867, 0x868, 
       0x7, 0x184, 0x2, 0x2, 0x868, 0x869, 0x7, 0x202, 0x2, 0x2, 0x869, 
       0x86a, 0x7, 0x2b3, 0x2, 0x2, 0x86a, 0x86b, 0x7, 0x197, 0x2, 0x2, 
       0x86b, 0x86c, 0x7, 0x54, 0x2, 0x2, 0x86c, 0x79, 0x3, 0x2, 0x2, 0x2, 
       0x86d, 0x86e, 0x7, 0x9, 0x2, 0x2, 0x86e, 0x86f, 0x7, 0x195, 0x2, 
       0x2, 0x86f, 0x870, 0x7, 0x44, 0x2, 0x2, 0x870, 0x871, 0x5, 0x210, 
       0x109, 0x2, 0x871, 0x872, 0x7, 0x7, 0x2, 0x2, 0x872, 0x873, 0x7, 
       0x23a, 0x2, 0x2, 0x873, 0x879, 0x7, 0x415, 0x2, 0x2, 0x874, 0x876, 
       0x7, 0x180, 0x2, 0x2, 0x875, 0x877, 0x7, 0x3fd, 0x2, 0x2, 0x876, 
       0x875, 0x3, 0x2, 0x2, 0x2, 0x876, 0x877, 0x3, 0x2, 0x2, 0x2, 0x877, 
       0x878, 0x3, 0x2, 0x2, 0x2, 0x878, 0x87a, 0x5, 0x218, 0x10d, 0x2, 
       0x879, 0x874, 0x3, 0x2, 0x2, 0x2, 0x879, 0x87a, 0x3, 0x2, 0x2, 0x2, 
       0x87a, 0x87c, 0x3, 0x2, 0x2, 0x2, 0x87b, 0x87d, 0x7, 0x249, 0x2, 
       0x2, 0x87c, 0x87b, 0x3, 0x2, 0x2, 0x2, 0x87c, 0x87d, 0x3, 0x2, 0x2, 
       0x2, 0x87d, 0x87e, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x880, 0x7, 0x158, 
       0x2, 0x2, 0x87f, 0x881, 0x7, 0x3fd, 0x2, 0x2, 0x880, 0x87f, 0x3, 
       0x2, 0x2, 0x2, 0x880, 0x881, 0x3, 0x2, 0x2, 0x2, 0x881, 0x882, 0x3, 
       0x2, 0x2, 0x2, 0x882, 0x883, 0x5, 0x206, 0x104, 0x2, 0x883, 0x7b, 
       0x3, 0x2, 0x2, 0x2, 0x884, 0x885, 0x7, 0x9, 0x2, 0x2, 0x885, 0x886, 
       0x7, 0x77, 0x2, 0x2, 0x886, 0x88a, 0x5, 0x1f6, 0xfc, 0x2, 0x887, 
       0x889, 0x5, 0x48, 0x25, 0x2, 0x888, 0x887, 0x3, 0x2, 0x2, 0x2, 0x889, 
       0x88c, 0x3, 0x2, 0x2, 0x2, 0x88a, 0x888, 0x3, 0x2, 0x2, 0x2, 0x88a, 
       0x88b, 0x3, 0x2, 0x2, 0x2, 0x88b, 0x7d, 0x3, 0x2, 0x2, 0x2, 0x88c, 
       0x88a, 0x3, 0x2, 0x2, 0x2, 0x88d, 0x88e, 0x7, 0x9, 0x2, 0x2, 0x88e, 
       0x88f, 0x7, 0x209, 0x2, 0x2, 0x88f, 0x890, 0x5, 0x210, 0x109, 0x2, 
       0x890, 0x891, 0x7, 0x1d0, 0x2, 0x2, 0x891, 0x892, 0x7, 0x406, 0x2, 
       0x2, 0x892, 0x897, 0x5, 0x4a, 0x26, 0x2, 0x893, 0x894, 0x7, 0x408, 
       0x2, 0x2, 0x894, 0x896, 0x5, 0x4a, 0x26, 0x2, 0x895, 0x893, 0x3, 
       0x2, 0x2, 0x2, 0x896, 0x899, 0x3, 0x2, 0x2, 0x2, 0x897, 0x895, 0x3, 
       0x2, 0x2, 0x2, 0x897, 0x898, 0x3, 0x2, 0x2, 0x2, 0x898, 0x89a, 0x3, 
       0x2, 0x2, 0x2, 0x899, 0x897, 0x3, 0x2, 0x2, 0x2, 0x89a, 0x89b, 0x7, 
       0x407, 0x2, 0x2, 0x89b, 0x7f, 0x3, 0x2, 0x2, 0x2, 0x89c, 0x89e, 0x7, 
       0x9, 0x2, 0x2, 0x89d, 0x89f, 0x9, 0x3, 0x2, 0x2, 0x89e, 0x89d, 0x3, 
       0x2, 0x2, 0x2, 0x89e, 0x89f, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x8a1, 0x3, 
       0x2, 0x2, 0x2, 0x8a0, 0x8a2, 0x7, 0x48, 0x2, 0x2, 0x8a1, 0x8a0, 0x3, 
       0x2, 0x2, 0x2, 0x8a1, 0x8a2, 0x3, 0x2, 0x2, 0x2, 0x8a2, 0x8a3, 0x3, 
       0x2, 0x2, 0x2, 0x8a3, 0x8a4, 0x7, 0x9c, 0x2, 0x2, 0x8a4, 0x8ad, 0x5, 
       0x1f8, 0xfd, 0x2, 0x8a5, 0x8aa, 0x5, 0x86, 0x44, 0x2, 0x8a6, 0x8a7, 
       0x7, 0x408, 0x2, 0x2, 0x8a7, 0x8a9, 0x5, 0x86, 0x44, 0x2, 0x8a8, 
       0x8a6, 0x3, 0x2, 0x2, 0x2, 0x8a9, 0x8ac, 0x3, 0x2, 0x2, 0x2, 0x8aa, 
       0x8a8, 0x3, 0x2, 0x2, 0x2, 0x8aa, 0x8ab, 0x3, 0x2, 0x2, 0x2, 0x8ab, 
       0x8ae, 0x3, 0x2, 0x2, 0x2, 0x8ac, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8ad, 
       0x8a5, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ae, 0x3, 0x2, 0x2, 0x2, 0x8ae, 
       0x8b0, 0x3, 0x2, 0x2, 0x2, 0x8af, 0x8b1, 0x5, 0x62, 0x32, 0x2, 0x8b0, 
       0x8af, 0x3, 0x2, 0x2, 0x2, 0x8b0, 0x8b1, 0x3, 0x2, 0x2, 0x2, 0x8b1, 
       0x81, 0x3, 0x2, 0x2, 0x2, 0x8b2, 0x8b3, 0x7, 0x9, 0x2, 0x2, 0x8b3, 
       0x8b4, 0x7, 0x230, 0x2, 0x2, 0x8b4, 0x8b5, 0x5, 0x210, 0x109, 0x2, 
       0x8b5, 0x8b6, 0x9, 0x1e, 0x2, 0x2, 0x8b6, 0x8b7, 0x7, 0x146, 0x2, 
       0x2, 0x8b7, 0x8bb, 0x7, 0x415, 0x2, 0x2, 0x8b8, 0x8b9, 0x7, 0x180, 
       0x2, 0x2, 0x8b9, 0x8ba, 0x7, 0x3fd, 0x2, 0x2, 0x8ba, 0x8bc, 0x5, 
       0x218, 0x10d, 0x2, 0x8bb, 0x8b8, 0x3, 0x2, 0x2, 0x2, 0x8bb, 0x8bc, 
       0x3, 0x2, 0x2, 0x2, 0x8bc, 0x8be, 0x3, 0x2, 0x2, 0x2, 0x8bd, 0x8bf, 
       0x7, 0x249, 0x2, 0x2, 0x8be, 0x8bd, 0x3, 0x2, 0x2, 0x2, 0x8be, 0x8bf, 
       0x3, 0x2, 0x2, 0x2, 0x8bf, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8c0, 0x8c2, 
       0x7, 0x158, 0x2, 0x2, 0x8c1, 0x8c3, 0x7, 0x3fd, 0x2, 0x2, 0x8c2, 
       0x8c1, 0x3, 0x2, 0x2, 0x2, 0x8c2, 0x8c3, 0x3, 0x2, 0x2, 0x2, 0x8c3, 
       0x8c4, 0x3, 0x2, 0x2, 0x2, 0x8c4, 0x8c5, 0x5, 0x206, 0x104, 0x2, 
       0x8c5, 0x83, 0x3, 0x2, 0x2, 0x2, 0x8c6, 0x8ca, 0x7, 0x9, 0x2, 0x2, 
       0x8c7, 0x8c8, 0x7, 0x114, 0x2, 0x2, 0x8c8, 0x8c9, 0x7, 0x3fd, 0x2, 
       0x2, 0x8c9, 0x8cb, 0x9, 0xc, 0x2, 0x2, 0x8ca, 0x8c7, 0x3, 0x2, 0x2, 
       0x2, 0x8ca, 0x8cb, 0x3, 0x2, 0x2, 0x2, 0x8cb, 0x8cd, 0x3, 0x2, 0x2, 
       0x2, 0x8cc, 0x8ce, 0x5, 0x34, 0x1b, 0x2, 0x8cd, 0x8cc, 0x3, 0x2, 
       0x2, 0x2, 0x8cd, 0x8ce, 0x3, 0x2, 0x2, 0x2, 0x8ce, 0x8d2, 0x3, 0x2, 
       0x2, 0x2, 0x8cf, 0x8d0, 0x7, 0x91, 0x2, 0x2, 0x8d0, 0x8d1, 0x7, 0x208, 
       0x2, 0x2, 0x8d1, 0x8d3, 0x9, 0xd, 0x2, 0x2, 0x8d2, 0x8cf, 0x3, 0x2, 
       0x2, 0x2, 0x8d2, 0x8d3, 0x3, 0x2, 0x2, 0x2, 0x8d3, 0x8d4, 0x3, 0x2, 
       0x2, 0x2, 0x8d4, 0x8d5, 0x7, 0x246, 0x2, 0x2, 0x8d5, 0x8da, 0x5, 
       0x1f6, 0xfc, 0x2, 0x8d6, 0x8d7, 0x7, 0x406, 0x2, 0x2, 0x8d7, 0x8d8, 
       0x5, 0x230, 0x119, 0x2, 0x8d8, 0x8d9, 0x7, 0x407, 0x2, 0x2, 0x8d9, 
       0x8db, 0x3, 0x2, 0x2, 0x2, 0x8da, 0x8d6, 0x3, 0x2, 0x2, 0x2, 0x8da, 
       0x8db, 0x3, 0x2, 0x2, 0x2, 0x8db, 0x8dc, 0x3, 0x2, 0x2, 0x2, 0x8dc, 
       0x8dd, 0x7, 0xd, 0x2, 0x2, 0x8dd, 0x8e4, 0x5, 0xb4, 0x5b, 0x2, 0x8de, 
       0x8e0, 0x7, 0xb0, 0x2, 0x2, 0x8df, 0x8e1, 0x9, 0xe, 0x2, 0x2, 0x8e0, 
       0x8df, 0x3, 0x2, 0x2, 0x2, 0x8e0, 0x8e1, 0x3, 0x2, 0x2, 0x2, 0x8e1, 
       0x8e2, 0x3, 0x2, 0x2, 0x2, 0x8e2, 0x8e3, 0x7, 0x19, 0x2, 0x2, 0x8e3, 
       0x8e5, 0x7, 0x6e, 0x2, 0x2, 0x8e4, 0x8de, 0x3, 0x2, 0x2, 0x2, 0x8e4, 
       0x8e5, 0x3, 0x2, 0x2, 0x2, 0x8e5, 0x85, 0x3, 0x2, 0x2, 0x2, 0x8e6, 
       0x8ed, 0x5, 0x5e, 0x30, 0x2, 0x8e7, 0x8e9, 0x7, 0x408, 0x2, 0x2, 
       0x8e8, 0x8e7, 0x3, 0x2, 0x2, 0x2, 0x8e8, 0x8e9, 0x3, 0x2, 0x2, 0x2, 
       0x8e9, 0x8ea, 0x3, 0x2, 0x2, 0x2, 0x8ea, 0x8ec, 0x5, 0x5e, 0x30, 
       0x2, 0x8eb, 0x8e8, 0x3, 0x2, 0x2, 0x2, 0x8ec, 0x8ef, 0x3, 0x2, 0x2, 
       0x2, 0x8ed, 0x8eb, 0x3, 0x2, 0x2, 0x2, 0x8ed, 0x8ee, 0x3, 0x2, 0x2, 
       0x2, 0x8ee, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x8ef, 0x8ed, 0x3, 0x2, 0x2, 
       0x2, 0x8f0, 0x8f2, 0x7, 0x7, 0x2, 0x2, 0x8f1, 0x8f3, 0x7, 0x1b, 0x2, 
       0x2, 0x8f2, 0x8f1, 0x3, 0x2, 0x2, 0x2, 0x8f2, 0x8f3, 0x3, 0x2, 0x2, 
       0x2, 0x8f3, 0x8f4, 0x3, 0x2, 0x2, 0x2, 0x8f4, 0x8f5, 0x5, 0x210, 
       0x109, 0x2, 0x8f5, 0x8f9, 0x5, 0x50, 0x29, 0x2, 0x8f6, 0x8fa, 0x7, 
       0x16c, 0x2, 0x2, 0x8f7, 0x8f8, 0x7, 0x112, 0x2, 0x2, 0x8f8, 0x8fa, 
       0x5, 0x210, 0x109, 0x2, 0x8f9, 0x8f6, 0x3, 0x2, 0x2, 0x2, 0x8f9, 
       0x8f7, 0x3, 0x2, 0x2, 0x2, 0x8f9, 0x8fa, 0x3, 0x2, 0x2, 0x2, 0x8fa, 
       0xa55, 0x3, 0x2, 0x2, 0x2, 0x8fb, 0x8fd, 0x7, 0x7, 0x2, 0x2, 0x8fc, 
       0x8fe, 0x7, 0x1b, 0x2, 0x2, 0x8fd, 0x8fc, 0x3, 0x2, 0x2, 0x2, 0x8fd, 
       0x8fe, 0x3, 0x2, 0x2, 0x2, 0x8fe, 0x8ff, 0x3, 0x2, 0x2, 0x2, 0x8ff, 
       0x900, 0x7, 0x406, 0x2, 0x2, 0x900, 0x901, 0x5, 0x210, 0x109, 0x2, 
       0x901, 0x908, 0x5, 0x50, 0x29, 0x2, 0x902, 0x903, 0x7, 0x408, 0x2, 
       0x2, 0x903, 0x904, 0x5, 0x210, 0x109, 0x2, 0x904, 0x905, 0x5, 0x50, 
       0x29, 0x2, 0x905, 0x907, 0x3, 0x2, 0x2, 0x2, 0x906, 0x902, 0x3, 0x2, 
       0x2, 0x2, 0x907, 0x90a, 0x3, 0x2, 0x2, 0x2, 0x908, 0x906, 0x3, 0x2, 
       0x2, 0x2, 0x908, 0x909, 0x3, 0x2, 0x2, 0x2, 0x909, 0x90b, 0x3, 0x2, 
       0x2, 0x2, 0x90a, 0x908, 0x3, 0x2, 0x2, 0x2, 0x90b, 0x90c, 0x7, 0x407, 
       0x2, 0x2, 0x90c, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x90d, 0x90e, 0x7, 0x7, 
       0x2, 0x2, 0x90e, 0x910, 0x9, 0x14, 0x2, 0x2, 0x90f, 0x911, 0x5, 0x210, 
       0x109, 0x2, 0x910, 0x90f, 0x3, 0x2, 0x2, 0x2, 0x910, 0x911, 0x3, 
       0x2, 0x2, 0x2, 0x911, 0x913, 0x3, 0x2, 0x2, 0x2, 0x912, 0x914, 0x5, 
       0x40, 0x21, 0x2, 0x913, 0x912, 0x3, 0x2, 0x2, 0x2, 0x913, 0x914, 
       0x3, 0x2, 0x2, 0x2, 0x914, 0x915, 0x3, 0x2, 0x2, 0x2, 0x915, 0x919, 
       0x5, 0x234, 0x11b, 0x2, 0x916, 0x918, 0x5, 0x42, 0x22, 0x2, 0x917, 
       0x916, 0x3, 0x2, 0x2, 0x2, 0x918, 0x91b, 0x3, 0x2, 0x2, 0x2, 0x919, 
       0x917, 0x3, 0x2, 0x2, 0x2, 0x919, 0x91a, 0x3, 0x2, 0x2, 0x2, 0x91a, 
       0xa55, 0x3, 0x2, 0x2, 0x2, 0x91b, 0x919, 0x3, 0x2, 0x2, 0x2, 0x91c, 
       0x921, 0x7, 0x7, 0x2, 0x2, 0x91d, 0x91f, 0x7, 0x1d, 0x2, 0x2, 0x91e, 
       0x920, 0x5, 0x210, 0x109, 0x2, 0x91f, 0x91e, 0x3, 0x2, 0x2, 0x2, 
       0x91f, 0x920, 0x3, 0x2, 0x2, 0x2, 0x920, 0x922, 0x3, 0x2, 0x2, 0x2, 
       0x921, 0x91d, 0x3, 0x2, 0x2, 0x2, 0x921, 0x922, 0x3, 0x2, 0x2, 0x2, 
       0x922, 0x923, 0x3, 0x2, 0x2, 0x2, 0x923, 0x924, 0x7, 0x76, 0x2, 0x2, 
       0x924, 0x926, 0x7, 0x54, 0x2, 0x2, 0x925, 0x927, 0x5, 0x210, 0x109, 
       0x2, 0x926, 0x925, 0x3, 0x2, 0x2, 0x2, 0x926, 0x927, 0x3, 0x2, 0x2, 
       0x2, 0x927, 0x929, 0x3, 0x2, 0x2, 0x2, 0x928, 0x92a, 0x5, 0x40, 0x21, 
       0x2, 0x929, 0x928, 0x3, 0x2, 0x2, 0x2, 0x929, 0x92a, 0x3, 0x2, 0x2, 
       0x2, 0x92a, 0x92b, 0x3, 0x2, 0x2, 0x2, 0x92b, 0x92f, 0x5, 0x234, 
       0x11b, 0x2, 0x92c, 0x92e, 0x5, 0x42, 0x22, 0x2, 0x92d, 0x92c, 0x3, 
       0x2, 0x2, 0x2, 0x92e, 0x931, 0x3, 0x2, 0x2, 0x2, 0x92f, 0x92d, 0x3, 
       0x2, 0x2, 0x2, 0x92f, 0x930, 0x3, 0x2, 0x2, 0x2, 0x930, 0xa55, 0x3, 
       0x2, 0x2, 0x2, 0x931, 0x92f, 0x3, 0x2, 0x2, 0x2, 0x932, 0x937, 0x7, 
       0x7, 0x2, 0x2, 0x933, 0x935, 0x7, 0x1d, 0x2, 0x2, 0x934, 0x936, 0x5, 
       0x210, 0x109, 0x2, 0x935, 0x934, 0x3, 0x2, 0x2, 0x2, 0x935, 0x936, 
       0x3, 0x2, 0x2, 0x2, 0x936, 0x938, 0x3, 0x2, 0x2, 0x2, 0x937, 0x933, 
       0x3, 0x2, 0x2, 0x2, 0x937, 0x938, 0x3, 0x2, 0x2, 0x2, 0x938, 0x939, 
       0x3, 0x2, 0x2, 0x2, 0x939, 0x93b, 0x7, 0xa5, 0x2, 0x2, 0x93a, 0x93c, 
       0x9, 0x14, 0x2, 0x2, 0x93b, 0x93a, 0x3, 0x2, 0x2, 0x2, 0x93b, 0x93c, 
       0x3, 0x2, 0x2, 0x2, 0x93c, 0x93e, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x93f, 
       0x5, 0x210, 0x109, 0x2, 0x93e, 0x93d, 0x3, 0x2, 0x2, 0x2, 0x93e, 
       0x93f, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x941, 0x3, 0x2, 0x2, 0x2, 0x940, 
       0x942, 0x5, 0x40, 0x21, 0x2, 0x941, 0x940, 0x3, 0x2, 0x2, 0x2, 0x941, 
       0x942, 0x3, 0x2, 0x2, 0x2, 0x942, 0x943, 0x3, 0x2, 0x2, 0x2, 0x943, 
       0x947, 0x5, 0x234, 0x11b, 0x2, 0x944, 0x946, 0x5, 0x42, 0x22, 0x2, 
       0x945, 0x944, 0x3, 0x2, 0x2, 0x2, 0x946, 0x949, 0x3, 0x2, 0x2, 0x2, 
       0x947, 0x945, 0x3, 0x2, 0x2, 0x2, 0x947, 0x948, 0x3, 0x2, 0x2, 0x2, 
       0x948, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x949, 0x947, 0x3, 0x2, 0x2, 0x2, 
       0x94a, 0x94b, 0x7, 0x7, 0x2, 0x2, 0x94b, 0x94d, 0x9, 0x16, 0x2, 0x2, 
       0x94c, 0x94e, 0x9, 0x14, 0x2, 0x2, 0x94d, 0x94c, 0x3, 0x2, 0x2, 0x2, 
       0x94d, 0x94e, 0x3, 0x2, 0x2, 0x2, 0x94e, 0x950, 0x3, 0x2, 0x2, 0x2, 
       0x94f, 0x951, 0x5, 0x210, 0x109, 0x2, 0x950, 0x94f, 0x3, 0x2, 0x2, 
       0x2, 0x950, 0x951, 0x3, 0x2, 0x2, 0x2, 0x951, 0x952, 0x3, 0x2, 0x2, 
       0x2, 0x952, 0x956, 0x5, 0x234, 0x11b, 0x2, 0x953, 0x955, 0x5, 0x42, 
       0x22, 0x2, 0x954, 0x953, 0x3, 0x2, 0x2, 0x2, 0x955, 0x958, 0x3, 0x2, 
       0x2, 0x2, 0x956, 0x954, 0x3, 0x2, 0x2, 0x2, 0x956, 0x957, 0x3, 0x2, 
       0x2, 0x2, 0x957, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x958, 0x956, 0x3, 0x2, 
       0x2, 0x2, 0x959, 0x95e, 0x7, 0x7, 0x2, 0x2, 0x95a, 0x95c, 0x7, 0x1d, 
       0x2, 0x2, 0x95b, 0x95d, 0x5, 0x210, 0x109, 0x2, 0x95c, 0x95b, 0x3, 
       0x2, 0x2, 0x2, 0x95c, 0x95d, 0x3, 0x2, 0x2, 0x2, 0x95d, 0x95f, 0x3, 
       0x2, 0x2, 0x2, 0x95e, 0x95a, 0x3, 0x2, 0x2, 0x2, 0x95e, 0x95f, 0x3, 
       0x2, 0x2, 0x2, 0x95f, 0x960, 0x3, 0x2, 0x2, 0x2, 0x960, 0x961, 0x7, 
       0x3e, 0x2, 0x2, 0x961, 0x963, 0x7, 0x54, 0x2, 0x2, 0x962, 0x964, 
       0x5, 0x210, 0x109, 0x2, 0x963, 0x962, 0x3, 0x2, 0x2, 0x2, 0x963, 
       0x964, 0x3, 0x2, 0x2, 0x2, 0x964, 0x965, 0x3, 0x2, 0x2, 0x2, 0x965, 
       0x966, 0x5, 0x234, 0x11b, 0x2, 0x966, 0x967, 0x5, 0x56, 0x2c, 0x2, 
       0x967, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x968, 0x96d, 0x7, 0x7, 0x2, 0x2, 
       0x969, 0x96b, 0x7, 0x1d, 0x2, 0x2, 0x96a, 0x96c, 0x5, 0x210, 0x109, 
       0x2, 0x96b, 0x96a, 0x3, 0x2, 0x2, 0x2, 0x96b, 0x96c, 0x3, 0x2, 0x2, 
       0x2, 0x96c, 0x96e, 0x3, 0x2, 0x2, 0x2, 0x96d, 0x969, 0x3, 0x2, 0x2, 
       0x2, 0x96d, 0x96e, 0x3, 0x2, 0x2, 0x2, 0x96e, 0x96f, 0x3, 0x2, 0x2, 
       0x2, 0x96f, 0x970, 0x7, 0x19, 0x2, 0x2, 0x970, 0x971, 0x7, 0x406, 
       0x2, 0x2, 0x971, 0x972, 0x5, 0x25e, 0x130, 0x2, 0x972, 0x973, 0x7, 
       0x407, 0x2, 0x2, 0x973, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x974, 0x976, 
       0x7, 0x114, 0x2, 0x2, 0x975, 0x977, 0x7, 0x3fd, 0x2, 0x2, 0x976, 
       0x975, 0x3, 0x2, 0x2, 0x2, 0x976, 0x977, 0x3, 0x2, 0x2, 0x2, 0x977, 
       0x978, 0x3, 0x2, 0x2, 0x2, 0x978, 0xa55, 0x9, 0x5, 0x2, 0x2, 0x979, 
       0x97b, 0x7, 0x9, 0x2, 0x2, 0x97a, 0x97c, 0x7, 0x1b, 0x2, 0x2, 0x97b, 
       0x97a, 0x3, 0x2, 0x2, 0x2, 0x97b, 0x97c, 0x3, 0x2, 0x2, 0x2, 0x97c, 
       0x97d, 0x3, 0x2, 0x2, 0x2, 0x97d, 0x983, 0x5, 0x210, 0x109, 0x2, 
       0x97e, 0x97f, 0x7, 0x8c, 0x2, 0x2, 0x97f, 0x980, 0x7, 0x28, 0x2, 
       0x2, 0x980, 0x984, 0x5, 0x240, 0x121, 0x2, 0x981, 0x982, 0x7, 0x31, 
       0x2, 0x2, 0x982, 0x984, 0x7, 0x28, 0x2, 0x2, 0x983, 0x97e, 0x3, 0x2, 
       0x2, 0x2, 0x983, 0x981, 0x3, 0x2, 0x2, 0x2, 0x984, 0xa55, 0x3, 0x2, 
       0x2, 0x2, 0x985, 0x987, 0x7, 0x17, 0x2, 0x2, 0x986, 0x988, 0x7, 0x1b, 
       0x2, 0x2, 0x987, 0x986, 0x3, 0x2, 0x2, 0x2, 0x987, 0x988, 0x3, 0x2, 
       0x2, 0x2, 0x988, 0x989, 0x3, 0x2, 0x2, 0x2, 0x989, 0x98a, 0x5, 0x210, 
       0x109, 0x2, 0x98a, 0x98b, 0x5, 0x210, 0x109, 0x2, 0x98b, 0x98f, 0x5, 
       0x50, 0x29, 0x2, 0x98c, 0x990, 0x7, 0x16c, 0x2, 0x2, 0x98d, 0x98e, 
       0x7, 0x112, 0x2, 0x2, 0x98e, 0x990, 0x5, 0x210, 0x109, 0x2, 0x98f, 
       0x98c, 0x3, 0x2, 0x2, 0x2, 0x98f, 0x98d, 0x3, 0x2, 0x2, 0x2, 0x98f, 
       0x990, 0x3, 0x2, 0x2, 0x2, 0x990, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x991, 
       0x992, 0x7, 0x7f, 0x2, 0x2, 0x992, 0x993, 0x7, 0x1b, 0x2, 0x2, 0x993, 
       0x994, 0x5, 0x210, 0x109, 0x2, 0x994, 0x995, 0x7, 0x9f, 0x2, 0x2, 
       0x995, 0x996, 0x5, 0x210, 0x109, 0x2, 0x996, 0xa55, 0x3, 0x2, 0x2, 
       0x2, 0x997, 0x999, 0x7, 0x5f, 0x2, 0x2, 0x998, 0x99a, 0x7, 0x3fd, 
       0x2, 0x2, 0x999, 0x998, 0x3, 0x2, 0x2, 0x2, 0x999, 0x99a, 0x3, 0x2, 
       0x2, 0x2, 0x99a, 0x99b, 0x3, 0x2, 0x2, 0x2, 0x99b, 0xa55, 0x9, 0x6, 
       0x2, 0x2, 0x99c, 0x99e, 0x7, 0x1ba, 0x2, 0x2, 0x99d, 0x99f, 0x7, 
       0x1b, 0x2, 0x2, 0x99e, 0x99d, 0x3, 0x2, 0x2, 0x2, 0x99e, 0x99f, 0x3, 
       0x2, 0x2, 0x2, 0x99f, 0x9a0, 0x3, 0x2, 0x2, 0x2, 0x9a0, 0x9a1, 0x5, 
       0x210, 0x109, 0x2, 0x9a1, 0x9a5, 0x5, 0x50, 0x29, 0x2, 0x9a2, 0x9a6, 
       0x7, 0x16c, 0x2, 0x2, 0x9a3, 0x9a4, 0x7, 0x112, 0x2, 0x2, 0x9a4, 
       0x9a6, 0x5, 0x210, 0x109, 0x2, 0x9a5, 0x9a2, 0x3, 0x2, 0x2, 0x2, 
       0x9a5, 0x9a3, 0x3, 0x2, 0x2, 0x2, 0x9a5, 0x9a6, 0x3, 0x2, 0x2, 0x2, 
       0x9a6, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x9a7, 0x9a9, 0x7, 0x31, 0x2, 0x2, 
       0x9a8, 0x9aa, 0x7, 0x1b, 0x2, 0x2, 0x9a9, 0x9a8, 0x3, 0x2, 0x2, 0x2, 
       0x9a9, 0x9aa, 0x3, 0x2, 0x2, 0x2, 0x9aa, 0x9ab, 0x3, 0x2, 0x2, 0x2, 
       0x9ab, 0x9ad, 0x5, 0x210, 0x109, 0x2, 0x9ac, 0x9ae, 0x7, 0x84, 0x2, 
       0x2, 0x9ad, 0x9ac, 0x3, 0x2, 0x2, 0x2, 0x9ad, 0x9ae, 0x3, 0x2, 0x2, 
       0x2, 0x9ae, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x9af, 0x9b0, 0x7, 0x31, 0x2, 
       0x2, 0x9b0, 0x9b1, 0x9, 0x1f, 0x2, 0x2, 0x9b1, 0xa55, 0x5, 0x210, 
       0x109, 0x2, 0x9b2, 0x9b3, 0x7, 0x31, 0x2, 0x2, 0x9b3, 0x9b4, 0x7, 
       0x76, 0x2, 0x2, 0x9b4, 0xa55, 0x7, 0x54, 0x2, 0x2, 0x9b5, 0x9b6, 
       0x7, 0x7f, 0x2, 0x2, 0x9b6, 0x9b7, 0x9, 0x14, 0x2, 0x2, 0x9b7, 0x9b8, 
       0x5, 0x210, 0x109, 0x2, 0x9b8, 0x9b9, 0x7, 0x9f, 0x2, 0x2, 0x9b9, 
       0x9ba, 0x5, 0x210, 0x109, 0x2, 0x9ba, 0xa55, 0x3, 0x2, 0x2, 0x2, 
       0x9bb, 0x9bc, 0x7, 0x9, 0x2, 0x2, 0x9bc, 0x9bd, 0x7, 0x4a, 0x2, 0x2, 
       0x9bd, 0x9be, 0x5, 0x210, 0x109, 0x2, 0x9be, 0x9bf, 0x9, 0x20, 0x2, 
       0x2, 0x9bf, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x9c0, 0x9c1, 0x7, 0x31, 0x2, 
       0x2, 0x9c1, 0x9c2, 0x9, 0x14, 0x2, 0x2, 0x9c2, 0xa55, 0x5, 0x210, 
       0x109, 0x2, 0x9c3, 0x9c4, 0x7, 0x31, 0x2, 0x2, 0x9c4, 0x9c5, 0x7, 
       0x3e, 0x2, 0x2, 0x9c5, 0x9c6, 0x7, 0x54, 0x2, 0x2, 0x9c6, 0xa55, 
       0x5, 0x210, 0x109, 0x2, 0x9c7, 0x9c8, 0x7, 0x14d, 0x2, 0x2, 0x9c8, 
       0xa55, 0x7, 0x55, 0x2, 0x2, 0x9c9, 0x9ca, 0x7, 0x154, 0x2, 0x2, 0x9ca, 
       0xa55, 0x7, 0x55, 0x2, 0x2, 0x9cb, 0x9cd, 0x7, 0x7f, 0x2, 0x2, 0x9cc, 
       0x9ce, 0x9, 0x21, 0x2, 0x2, 0x9cd, 0x9cc, 0x3, 0x2, 0x2, 0x2, 0x9cd, 
       0x9ce, 0x3, 0x2, 0x2, 0x2, 0x9ce, 0x9d1, 0x3, 0x2, 0x2, 0x2, 0x9cf, 
       0x9d2, 0x5, 0x210, 0x109, 0x2, 0x9d0, 0x9d2, 0x5, 0x1f6, 0xfc, 0x2, 
       0x9d1, 0x9cf, 0x3, 0x2, 0x2, 0x2, 0x9d1, 0x9d0, 0x3, 0x2, 0x2, 0x2, 
       0x9d2, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x9d3, 0x9d4, 0x7, 0x71, 0x2, 0x2, 
       0x9d4, 0x9d5, 0x7, 0x12, 0x2, 0x2, 0x9d5, 0xa55, 0x5, 0x230, 0x119, 
       0x2, 0x9d6, 0x9d7, 0x7, 0x1f, 0x2, 0x2, 0x9d7, 0x9d8, 0x7, 0x9f, 
       0x2, 0x2, 0x9d8, 0x9d9, 0x7, 0x18, 0x2, 0x2, 0x9d9, 0x9da, 0x7, 0x8c, 
       0x2, 0x2, 0x9da, 0x9dd, 0x5, 0x202, 0x102, 0x2, 0x9db, 0x9dc, 0x7, 
       0x1a, 0x2, 0x2, 0x9dc, 0x9de, 0x5, 0x204, 0x103, 0x2, 0x9dd, 0x9db, 
       0x3, 0x2, 0x2, 0x2, 0x9dd, 0x9de, 0x3, 0x2, 0x2, 0x2, 0x9de, 0xa55, 
       0x3, 0x2, 0x2, 0x2, 0x9df, 0x9e1, 0x7, 0x28, 0x2, 0x2, 0x9e0, 0x9df, 
       0x3, 0x2, 0x2, 0x2, 0x9e0, 0x9e1, 0x3, 0x2, 0x2, 0x2, 0x9e1, 0x9e2, 
       0x3, 0x2, 0x2, 0x2, 0x9e2, 0x9e3, 0x7, 0x18, 0x2, 0x2, 0x9e3, 0x9e4, 
       0x7, 0x8c, 0x2, 0x2, 0x9e4, 0x9e5, 0x7, 0x3fd, 0x2, 0x2, 0x9e5, 0x9e9, 
       0x5, 0x202, 0x102, 0x2, 0x9e6, 0x9e7, 0x7, 0x1a, 0x2, 0x2, 0x9e7, 
       0x9e8, 0x7, 0x3fd, 0x2, 0x2, 0x9e8, 0x9ea, 0x5, 0x204, 0x103, 0x2, 
       0x9e9, 0x9e6, 0x3, 0x2, 0x2, 0x2, 0x9e9, 0x9ea, 0x3, 0x2, 0x2, 0x2, 
       0x9ea, 0xa55, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9ec, 0x7, 0x14e, 0x2, 
       0x2, 0x9ec, 0xa55, 0x7, 0x230, 0x2, 0x2, 0x9ed, 0x9ee, 0x7, 0x17e, 
       0x2, 0x2, 0x9ee, 0xa55, 0x7, 0x230, 0x2, 0x2, 0x9ef, 0xa55, 0x7, 
       0x3d, 0x2, 0x2, 0x9f0, 0x9f1, 0x9, 0x22, 0x2, 0x2, 0x9f1, 0xa55, 
       0x7, 0x243, 0x2, 0x2, 0x9f2, 0x9f3, 0x7, 0x7, 0x2, 0x2, 0x9f3, 0x9f4, 
       0x7, 0x75, 0x2, 0x2, 0x9f4, 0x9f5, 0x7, 0x406, 0x2, 0x2, 0x9f5, 0x9fa, 
       0x5, 0x68, 0x35, 0x2, 0x9f6, 0x9f7, 0x7, 0x408, 0x2, 0x2, 0x9f7, 
       0x9f9, 0x5, 0x68, 0x35, 0x2, 0x9f8, 0x9f6, 0x3, 0x2, 0x2, 0x2, 0x9f9, 
       0x9fc, 0x3, 0x2, 0x2, 0x2, 0x9fa, 0x9f8, 0x3, 0x2, 0x2, 0x2, 0x9fa, 
       0x9fb, 0x3, 0x2, 0x2, 0x2, 0x9fb, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0x9fc, 
       0x9fa, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9fe, 0x7, 0x407, 0x2, 0x2, 0x9fe, 
       0xa55, 0x3, 0x2, 0x2, 0x2, 0x9ff, 0xa00, 0x7, 0x31, 0x2, 0x2, 0xa00, 
       0xa01, 0x7, 0x75, 0x2, 0x2, 0xa01, 0xa55, 0x5, 0x230, 0x119, 0x2, 
       0xa02, 0xa03, 0x7, 0x14e, 0x2, 0x2, 0xa03, 0xa06, 0x7, 0x75, 0x2, 
       0x2, 0xa04, 0xa07, 0x5, 0x230, 0x119, 0x2, 0xa05, 0xa07, 0x7, 0x8, 
       0x2, 0x2, 0xa06, 0xa04, 0x3, 0x2, 0x2, 0x2, 0xa06, 0xa05, 0x3, 0x2, 
       0x2, 0x2, 0xa07, 0xa08, 0x3, 0x2, 0x2, 0x2, 0xa08, 0xa55, 0x7, 0x230, 
       0x2, 0x2, 0xa09, 0xa0a, 0x7, 0x17e, 0x2, 0x2, 0xa0a, 0xa0d, 0x7, 
       0x75, 0x2, 0x2, 0xa0b, 0xa0e, 0x5, 0x230, 0x119, 0x2, 0xa0c, 0xa0e, 
       0x7, 0x8, 0x2, 0x2, 0xa0d, 0xa0b, 0x3, 0x2, 0x2, 0x2, 0xa0d, 0xa0c, 
       0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa0f, 0x3, 0x2, 0x2, 0x2, 0xa0f, 0xa55, 
       0x7, 0x230, 0x2, 0x2, 0xa10, 0xa11, 0x7, 0x238, 0x2, 0x2, 0xa11, 
       0xa14, 0x7, 0x75, 0x2, 0x2, 0xa12, 0xa15, 0x5, 0x230, 0x119, 0x2, 
       0xa13, 0xa15, 0x7, 0x8, 0x2, 0x2, 0xa14, 0xa12, 0x3, 0x2, 0x2, 0x2, 
       0xa14, 0xa13, 0x3, 0x2, 0x2, 0x2, 0xa15, 0xa55, 0x3, 0x2, 0x2, 0x2, 
       0xa16, 0xa17, 0x7, 0x12e, 0x2, 0x2, 0xa17, 0xa18, 0x7, 0x75, 0x2, 
       0x2, 0xa18, 0xa55, 0x5, 0x216, 0x10c, 0x2, 0xa19, 0xa1a, 0x7, 0x1f1, 
       0x2, 0x2, 0xa1a, 0xa1b, 0x7, 0x75, 0x2, 0x2, 0xa1b, 0xa1c, 0x5, 0x230, 
       0x119, 0x2, 0xa1c, 0xa1d, 0x7, 0x50, 0x2, 0x2, 0xa1d, 0xa1e, 0x7, 
       0x406, 0x2, 0x2, 0xa1e, 0xa23, 0x5, 0x68, 0x35, 0x2, 0xa1f, 0xa20, 
       0x7, 0x408, 0x2, 0x2, 0xa20, 0xa22, 0x5, 0x68, 0x35, 0x2, 0xa21, 
       0xa1f, 0x3, 0x2, 0x2, 0x2, 0xa22, 0xa25, 0x3, 0x2, 0x2, 0x2, 0xa23, 
       0xa21, 0x3, 0x2, 0x2, 0x2, 0xa23, 0xa24, 0x3, 0x2, 0x2, 0x2, 0xa24, 
       0xa26, 0x3, 0x2, 0x2, 0x2, 0xa25, 0xa23, 0x3, 0x2, 0x2, 0x2, 0xa26, 
       0xa27, 0x7, 0x407, 0x2, 0x2, 0xa27, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa28, 
       0xa29, 0x7, 0x161, 0x2, 0x2, 0xa29, 0xa2a, 0x7, 0x75, 0x2, 0x2, 0xa2a, 
       0xa2b, 0x5, 0x210, 0x109, 0x2, 0xa2b, 0xa2c, 0x7, 0xb0, 0x2, 0x2, 
       0xa2c, 0xa2d, 0x7, 0x9c, 0x2, 0x2, 0xa2d, 0xa30, 0x5, 0x1f8, 0xfd, 
       0x2, 0xa2e, 0xa2f, 0x9, 0x22, 0x2, 0x2, 0xa2f, 0xa31, 0x7, 0x243, 
       0x2, 0x2, 0xa30, 0xa2e, 0x3, 0x2, 0x2, 0x2, 0xa30, 0xa31, 0x3, 0x2, 
       0x2, 0x2, 0xa31, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa32, 0xa33, 0x7, 0xb, 
       0x2, 0x2, 0xa33, 0xa36, 0x7, 0x75, 0x2, 0x2, 0xa34, 0xa37, 0x5, 0x230, 
       0x119, 0x2, 0xa35, 0xa37, 0x7, 0x8, 0x2, 0x2, 0xa36, 0xa34, 0x3, 
       0x2, 0x2, 0x2, 0xa36, 0xa35, 0x3, 0x2, 0x2, 0x2, 0xa37, 0xa55, 0x3, 
       0x2, 0x2, 0x2, 0xa38, 0xa39, 0x7, 0x19, 0x2, 0x2, 0xa39, 0xa3c, 0x7, 
       0x75, 0x2, 0x2, 0xa3a, 0xa3d, 0x5, 0x230, 0x119, 0x2, 0xa3b, 0xa3d, 
       0x7, 0x8, 0x2, 0x2, 0xa3c, 0xa3a, 0x3, 0x2, 0x2, 0x2, 0xa3c, 0xa3b, 
       0x3, 0x2, 0x2, 0x2, 0xa3d, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa3e, 0xa3f, 
       0x7, 0x6d, 0x2, 0x2, 0xa3f, 0xa42, 0x7, 0x75, 0x2, 0x2, 0xa40, 0xa43, 
       0x5, 0x230, 0x119, 0x2, 0xa41, 0xa43, 0x7, 0x8, 0x2, 0x2, 0xa42, 
       0xa40, 0x3, 0x2, 0x2, 0x2, 0xa42, 0xa41, 0x3, 0x2, 0x2, 0x2, 0xa43, 
       0xa55, 0x3, 0x2, 0x2, 0x2, 0xa44, 0xa45, 0x7, 0x1e8, 0x2, 0x2, 0xa45, 
       0xa48, 0x7, 0x75, 0x2, 0x2, 0xa46, 0xa49, 0x5, 0x230, 0x119, 0x2, 
       0xa47, 0xa49, 0x7, 0x8, 0x2, 0x2, 0xa48, 0xa46, 0x3, 0x2, 0x2, 0x2, 
       0xa48, 0xa47, 0x3, 0x2, 0x2, 0x2, 0xa49, 0xa55, 0x3, 0x2, 0x2, 0x2, 
       0xa4a, 0xa4b, 0x7, 0x1f2, 0x2, 0x2, 0xa4b, 0xa4e, 0x7, 0x75, 0x2, 
       0x2, 0xa4c, 0xa4f, 0x5, 0x230, 0x119, 0x2, 0xa4d, 0xa4f, 0x7, 0x8, 
       0x2, 0x2, 0xa4e, 0xa4c, 0x3, 0x2, 0x2, 0x2, 0xa4e, 0xa4d, 0x3, 0x2, 
       0x2, 0x2, 0xa4f, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa50, 0xa51, 0x7, 0x1f0, 
       0x2, 0x2, 0xa51, 0xa55, 0x7, 0x1d6, 0x2, 0x2, 0xa52, 0xa53, 0x7, 
       0x23f, 0x2, 0x2, 0xa53, 0xa55, 0x7, 0x1d6, 0x2, 0x2, 0xa54, 0x8e6, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x8f0, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x8fb, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x90d, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x91c, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x932, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x94a, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x959, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x968, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x974, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x979, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x985, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x991, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x997, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x99c, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9a7, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9af, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9b2, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9b5, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9bb, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9c0, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9c3, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9c7, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9c9, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9cb, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9d3, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9d6, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9e0, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9eb, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9ed, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9ef, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9f0, 0x3, 0x2, 0x2, 0x2, 0xa54, 0x9f2, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0x9ff, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa02, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa09, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa10, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa16, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa19, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa28, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa32, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa38, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa3e, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa44, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa4a, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa50, 0x3, 0x2, 0x2, 0x2, 0xa54, 0xa52, 
       0x3, 0x2, 0x2, 0x2, 0xa55, 0x87, 0x3, 0x2, 0x2, 0x2, 0xa56, 0xa57, 
       0x7, 0x31, 0x2, 0x2, 0xa57, 0xa59, 0x9, 0x2, 0x2, 0x2, 0xa58, 0xa5a, 
       0x5, 0x246, 0x124, 0x2, 0xa59, 0xa58, 0x3, 0x2, 0x2, 0x2, 0xa59, 
       0xa5a, 0x3, 0x2, 0x2, 0x2, 0xa5a, 0xa5b, 0x3, 0x2, 0x2, 0x2, 0xa5b, 
       0xa5c, 0x5, 0x210, 0x109, 0x2, 0xa5c, 0x89, 0x3, 0x2, 0x2, 0x2, 0xa5d, 
       0xa5e, 0x7, 0x31, 0x2, 0x2, 0xa5e, 0xa60, 0x7, 0x15e, 0x2, 0x2, 0xa5f, 
       0xa61, 0x5, 0x246, 0x124, 0x2, 0xa60, 0xa5f, 0x3, 0x2, 0x2, 0x2, 
       0xa60, 0xa61, 0x3, 0x2, 0x2, 0x2, 0xa61, 0xa62, 0x3, 0x2, 0x2, 0x2, 
       0xa62, 0xa63, 0x5, 0x1f6, 0xfc, 0x2, 0xa63, 0x8b, 0x3, 0x2, 0x2, 
       0x2, 0xa64, 0xa65, 0x7, 0x31, 0x2, 0x2, 0xa65, 0xa67, 0x7, 0x4a, 
       0x2, 0x2, 0xa66, 0xa68, 0x9, 0x3, 0x2, 0x2, 0xa67, 0xa66, 0x3, 0x2, 
       0x2, 0x2, 0xa67, 0xa68, 0x3, 0x2, 0x2, 0x2, 0xa68, 0xa69, 0x3, 0x2, 
       0x2, 0x2, 0xa69, 0xa6a, 0x5, 0x210, 0x109, 0x2, 0xa6a, 0xa6b, 0x7, 
       0x6c, 0x2, 0x2, 0xa6b, 0xa78, 0x5, 0x1f8, 0xfd, 0x2, 0xa6c, 0xa6e, 
       0x7, 0x114, 0x2, 0x2, 0xa6d, 0xa6f, 0x7, 0x3fd, 0x2, 0x2, 0xa6e, 
       0xa6d, 0x3, 0x2, 0x2, 0x2, 0xa6e, 0xa6f, 0x3, 0x2, 0x2, 0x2, 0xa6f, 
       0xa70, 0x3, 0x2, 0x2, 0x2, 0xa70, 0xa77, 0x9, 0x5, 0x2, 0x2, 0xa71, 
       0xa73, 0x7, 0x5f, 0x2, 0x2, 0xa72, 0xa74, 0x7, 0x3fd, 0x2, 0x2, 0xa73, 
       0xa72, 0x3, 0x2, 0x2, 0x2, 0xa73, 0xa74, 0x3, 0x2, 0x2, 0x2, 0xa74, 
       0xa75, 0x3, 0x2, 0x2, 0x2, 0xa75, 0xa77, 0x9, 0x6, 0x2, 0x2, 0xa76, 
       0xa6c, 0x3, 0x2, 0x2, 0x2, 0xa76, 0xa71, 0x3, 0x2, 0x2, 0x2, 0xa77, 
       0xa7a, 0x3, 0x2, 0x2, 0x2, 0xa78, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa78, 
       0xa79, 0x3, 0x2, 0x2, 0x2, 0xa79, 0x8d, 0x3, 0x2, 0x2, 0x2, 0xa7a, 
       0xa78, 0x3, 0x2, 0x2, 0x2, 0xa7b, 0xa7c, 0x7, 0x31, 0x2, 0x2, 0xa7c, 
       0xa7d, 0x7, 0x195, 0x2, 0x2, 0xa7d, 0xa7e, 0x7, 0x44, 0x2, 0x2, 0xa7e, 
       0xa7f, 0x5, 0x210, 0x109, 0x2, 0xa7f, 0xa80, 0x7, 0x158, 0x2, 0x2, 
       0xa80, 0xa81, 0x7, 0x3fd, 0x2, 0x2, 0xa81, 0xa82, 0x5, 0x206, 0x104, 
       0x2, 0xa82, 0x8f, 0x3, 0x2, 0x2, 0x2, 0xa83, 0xa84, 0x7, 0x31, 0x2, 
       0x2, 0xa84, 0xa86, 0x7, 0x77, 0x2, 0x2, 0xa85, 0xa87, 0x5, 0x246, 
       0x124, 0x2, 0xa86, 0xa85, 0x3, 0x2, 0x2, 0x2, 0xa86, 0xa87, 0x3, 
       0x2, 0x2, 0x2, 0xa87, 0xa88, 0x3, 0x2, 0x2, 0x2, 0xa88, 0xa89, 0x5, 
       0x1f6, 0xfc, 0x2, 0xa89, 0x91, 0x3, 0x2, 0x2, 0x2, 0xa8a, 0xa8b, 
       0x7, 0x31, 0x2, 0x2, 0xa8b, 0xa8d, 0x7, 0x172, 0x2, 0x2, 0xa8c, 0xa8e, 
       0x5, 0x246, 0x124, 0x2, 0xa8d, 0xa8c, 0x3, 0x2, 0x2, 0x2, 0xa8d, 
       0xa8e, 0x3, 0x2, 0x2, 0x2, 0xa8e, 0xa8f, 0x3, 0x2, 0x2, 0x2, 0xa8f, 
       0xa90, 0x5, 0x1f6, 0xfc, 0x2, 0xa90, 0x93, 0x3, 0x2, 0x2, 0x2, 0xa91, 
       0xa92, 0x7, 0x31, 0x2, 0x2, 0xa92, 0xa94, 0x7, 0x209, 0x2, 0x2, 0xa93, 
       0xa95, 0x5, 0x246, 0x124, 0x2, 0xa94, 0xa93, 0x3, 0x2, 0x2, 0x2, 
       0xa94, 0xa95, 0x3, 0x2, 0x2, 0x2, 0xa95, 0xa96, 0x3, 0x2, 0x2, 0x2, 
       0xa96, 0xa97, 0x5, 0x210, 0x109, 0x2, 0xa97, 0x95, 0x3, 0x2, 0x2, 
       0x2, 0xa98, 0xa9a, 0x7, 0x31, 0x2, 0x2, 0xa99, 0xa9b, 0x7, 0x231, 
       0x2, 0x2, 0xa9a, 0xa99, 0x3, 0x2, 0x2, 0x2, 0xa9a, 0xa9b, 0x3, 0x2, 
       0x2, 0x2, 0xa9b, 0xa9c, 0x3, 0x2, 0x2, 0x2, 0xa9c, 0xa9e, 0x7, 0x9c, 
       0x2, 0x2, 0xa9d, 0xa9f, 0x5, 0x246, 0x124, 0x2, 0xa9e, 0xa9d, 0x3, 
       0x2, 0x2, 0x2, 0xa9e, 0xa9f, 0x3, 0x2, 0x2, 0x2, 0xa9f, 0xaa0, 0x3, 
       0x2, 0x2, 0x2, 0xaa0, 0xaa2, 0x5, 0x232, 0x11a, 0x2, 0xaa1, 0xaa3, 
       0x9, 0x23, 0x2, 0x2, 0xaa2, 0xaa1, 0x3, 0x2, 0x2, 0x2, 0xaa2, 0xaa3, 
       0x3, 0x2, 0x2, 0x2, 0xaa3, 0x97, 0x3, 0x2, 0x2, 0x2, 0xaa4, 0xaa5, 
       0x7, 0x31, 0x2, 0x2, 0xaa5, 0xaa6, 0x7, 0x230, 0x2, 0x2, 0xaa6, 0xaac, 
       0x5, 0x210, 0x109, 0x2, 0xaa7, 0xaa9, 0x7, 0x158, 0x2, 0x2, 0xaa8, 
       0xaaa, 0x7, 0x3fd, 0x2, 0x2, 0xaa9, 0xaa8, 0x3, 0x2, 0x2, 0x2, 0xaa9, 
       0xaaa, 0x3, 0x2, 0x2, 0x2, 0xaaa, 0xaab, 0x3, 0x2, 0x2, 0x2, 0xaab, 
       0xaad, 0x5, 0x206, 0x104, 0x2, 0xaac, 0xaa7, 0x3, 0x2, 0x2, 0x2, 
       0xaac, 0xaad, 0x3, 0x2, 0x2, 0x2, 0xaad, 0x99, 0x3, 0x2, 0x2, 0x2, 
       0xaae, 0xaaf, 0x7, 0x31, 0x2, 0x2, 0xaaf, 0xab1, 0x7, 0xa1, 0x2, 
       0x2, 0xab0, 0xab2, 0x5, 0x246, 0x124, 0x2, 0xab1, 0xab0, 0x3, 0x2, 
       0x2, 0x2, 0xab1, 0xab2, 0x3, 0x2, 0x2, 0x2, 0xab2, 0xab3, 0x3, 0x2, 
       0x2, 0x2, 0xab3, 0xab4, 0x5, 0x1f6, 0xfc, 0x2, 0xab4, 0x9b, 0x3, 
       0x2, 0x2, 0x2, 0xab5, 0xab6, 0x7, 0x31, 0x2, 0x2, 0xab6, 0xab8, 0x7, 
       0x246, 0x2, 0x2, 0xab7, 0xab9, 0x5, 0x246, 0x124, 0x2, 0xab8, 0xab7, 
       0x3, 0x2, 0x2, 0x2, 0xab8, 0xab9, 0x3, 0x2, 0x2, 0x2, 0xab9, 0xaba, 
       0x3, 0x2, 0x2, 0x2, 0xaba, 0xabf, 0x5, 0x1f6, 0xfc, 0x2, 0xabb, 0xabc, 
       0x7, 0x408, 0x2, 0x2, 0xabc, 0xabe, 0x5, 0x1f6, 0xfc, 0x2, 0xabd, 
       0xabb, 0x3, 0x2, 0x2, 0x2, 0xabe, 0xac1, 0x3, 0x2, 0x2, 0x2, 0xabf, 
       0xabd, 0x3, 0x2, 0x2, 0x2, 0xabf, 0xac0, 0x3, 0x2, 0x2, 0x2, 0xac0, 
       0xac3, 0x3, 0x2, 0x2, 0x2, 0xac1, 0xabf, 0x3, 0x2, 0x2, 0x2, 0xac2, 
       0xac4, 0x9, 0x23, 0x2, 0x2, 0xac3, 0xac2, 0x3, 0x2, 0x2, 0x2, 0xac3, 
       0xac4, 0x3, 0x2, 0x2, 0x2, 0xac4, 0x9d, 0x3, 0x2, 0x2, 0x2, 0xac5, 
       0xac6, 0x7, 0x7f, 0x2, 0x2, 0xac6, 0xac7, 0x7, 0x9c, 0x2, 0x2, 0xac7, 
       0xacc, 0x5, 0xa0, 0x51, 0x2, 0xac8, 0xac9, 0x7, 0x408, 0x2, 0x2, 
       0xac9, 0xacb, 0x5, 0xa0, 0x51, 0x2, 0xaca, 0xac8, 0x3, 0x2, 0x2, 
       0x2, 0xacb, 0xace, 0x3, 0x2, 0x2, 0x2, 0xacc, 0xaca, 0x3, 0x2, 0x2, 
       0x2, 0xacc, 0xacd, 0x3, 0x2, 0x2, 0x2, 0xacd, 0x9f, 0x3, 0x2, 0x2, 
       0x2, 0xace, 0xacc, 0x3, 0x2, 0x2, 0x2, 0xacf, 0xad0, 0x5, 0x1f8, 
       0xfd, 0x2, 0xad0, 0xad1, 0x7, 0x9f, 0x2, 0x2, 0xad1, 0xad2, 0x5, 
       0x1f8, 0xfd, 0x2, 0xad2, 0xa1, 0x3, 0x2, 0x2, 0x2, 0xad3, 0xad5, 
       0x7, 0x238, 0x2, 0x2, 0xad4, 0xad6, 0x7, 0x9c, 0x2, 0x2, 0xad5, 0xad4, 
       0x3, 0x2, 0x2, 0x2, 0xad5, 0xad6, 0x3, 0x2, 0x2, 0x2, 0xad6, 0xad7, 
       0x3, 0x2, 0x2, 0x2, 0xad7, 0xad8, 0x5, 0x1f8, 0xfd, 0x2, 0xad8, 0xa3, 
       0x3, 0x2, 0x2, 0x2, 0xad9, 0xada, 0x7, 0x13, 0x2, 0x2, 0xada, 0xae1, 
       0x5, 0x1f6, 0xfc, 0x2, 0xadb, 0xade, 0x7, 0x406, 0x2, 0x2, 0xadc, 
       0xadf, 0x5, 0x23a, 0x11e, 0x2, 0xadd, 0xadf, 0x5, 0x236, 0x11c, 0x2, 
       0xade, 0xadc, 0x3, 0x2, 0x2, 0x2, 0xade, 0xadd, 0x3, 0x2, 0x2, 0x2, 
       0xade, 0xadf, 0x3, 0x2, 0x2, 0x2, 0xadf, 0xae0, 0x3, 0x2, 0x2, 0x2, 
       0xae0, 0xae2, 0x7, 0x407, 0x2, 0x2, 0xae1, 0xadb, 0x3, 0x2, 0x2, 
       0x2, 0xae1, 0xae2, 0x3, 0x2, 0x2, 0x2, 0xae2, 0xa5, 0x3, 0x2, 0x2, 
       0x2, 0xae3, 0xae6, 0x5, 0xc0, 0x61, 0x2, 0xae4, 0xae6, 0x5, 0xc2, 
       0x62, 0x2, 0xae5, 0xae3, 0x3, 0x2, 0x2, 0x2, 0xae5, 0xae4, 0x3, 0x2, 
       0x2, 0x2, 0xae6, 0xa7, 0x3, 0x2, 0x2, 0x2, 0xae7, 0xae8, 0x7, 0x150, 
       0x2, 0x2, 0xae8, 0xae9, 0x5, 0x236, 0x11c, 0x2, 0xae9, 0xa9, 0x3, 
       0x2, 0x2, 0x2, 0xaea, 0xaef, 0x5, 0xc4, 0x63, 0x2, 0xaeb, 0xaef, 
       0x5, 0xc6, 0x64, 0x2, 0xaec, 0xaef, 0x5, 0xc8, 0x65, 0x2, 0xaed, 
       0xaef, 0x5, 0xca, 0x66, 0x2, 0xaee, 0xaea, 0x3, 0x2, 0x2, 0x2, 0xaee, 
       0xaeb, 0x3, 0x2, 0x2, 0x2, 0xaee, 0xaec, 0x3, 0x2, 0x2, 0x2, 0xaee, 
       0xaed, 0x3, 0x2, 0x2, 0x2, 0xaef, 0xab, 0x3, 0x2, 0x2, 0x2, 0xaf0, 
       0xaf2, 0x7, 0x4e, 0x2, 0x2, 0xaf1, 0xaf3, 0x9, 0x24, 0x2, 0x2, 0xaf2, 
       0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaf2, 0xaf3, 0x3, 0x2, 0x2, 0x2, 0xaf3, 
       0xaf5, 0x3, 0x2, 0x2, 0x2, 0xaf4, 0xaf6, 0x7, 0x48, 0x2, 0x2, 0xaf5, 
       0xaf4, 0x3, 0x2, 0x2, 0x2, 0xaf5, 0xaf6, 0x3, 0x2, 0x2, 0x2, 0xaf6, 
       0xaf8, 0x3, 0x2, 0x2, 0x2, 0xaf7, 0xaf9, 0x7, 0x50, 0x2, 0x2, 0xaf8, 
       0xaf7, 0x3, 0x2, 0x2, 0x2, 0xaf8, 0xaf9, 0x3, 0x2, 0x2, 0x2, 0xaf9, 
       0xafa, 0x3, 0x2, 0x2, 0x2, 0xafa, 0xb01, 0x5, 0x1f8, 0xfd, 0x2, 0xafb, 
       0xafc, 0x7, 0x75, 0x2, 0x2, 0xafc, 0xafe, 0x7, 0x406, 0x2, 0x2, 0xafd, 
       0xaff, 0x5, 0x230, 0x119, 0x2, 0xafe, 0xafd, 0x3, 0x2, 0x2, 0x2, 
       0xafe, 0xaff, 0x3, 0x2, 0x2, 0x2, 0xaff, 0xb00, 0x3, 0x2, 0x2, 0x2, 
       0xb00, 0xb02, 0x7, 0x407, 0x2, 0x2, 0xb01, 0xafb, 0x3, 0x2, 0x2, 
       0x2, 0xb01, 0xb02, 0x3, 0x2, 0x2, 0x2, 0xb02, 0xb13, 0x3, 0x2, 0x2, 
       0x2, 0xb03, 0xb04, 0x7, 0x406, 0x2, 0x2, 0xb04, 0xb05, 0x5, 0x230, 
       0x119, 0x2, 0xb05, 0xb06, 0x7, 0x407, 0x2, 0x2, 0xb06, 0xb08, 0x3, 
       0x2, 0x2, 0x2, 0xb07, 0xb03, 0x3, 0x2, 0x2, 0x2, 0xb07, 0xb08, 0x3, 
       0x2, 0x2, 0x2, 0xb08, 0xb09, 0x3, 0x2, 0x2, 0x2, 0xb09, 0xb14, 0x5, 
       0xb8, 0x5d, 0x2, 0xb0a, 0xb0b, 0x7, 0x8c, 0x2, 0x2, 0xb0b, 0xb10, 
       0x5, 0xba, 0x5e, 0x2, 0xb0c, 0xb0d, 0x7, 0x408, 0x2, 0x2, 0xb0d, 
       0xb0f, 0x5, 0xba, 0x5e, 0x2, 0xb0e, 0xb0c, 0x3, 0x2, 0x2, 0x2, 0xb0f, 
       0xb12, 0x3, 0x2, 0x2, 0x2, 0xb10, 0xb0e, 0x3, 0x2, 0x2, 0x2, 0xb10, 
       0xb11, 0x3, 0x2, 0x2, 0x2, 0xb11, 0xb14, 0x3, 0x2, 0x2, 0x2, 0xb12, 
       0xb10, 0x3, 0x2, 0x2, 0x2, 0xb13, 0xb07, 0x3, 0x2, 0x2, 0x2, 0xb13, 
       0xb0a, 0x3, 0x2, 0x2, 0x2, 0xb14, 0xb21, 0x3, 0x2, 0x2, 0x2, 0xb15, 
       0xb16, 0x7, 0x6c, 0x2, 0x2, 0xb16, 0xb17, 0x7, 0x152, 0x2, 0x2, 0xb17, 
       0xb18, 0x7, 0x54, 0x2, 0x2, 0xb18, 0xb19, 0x7, 0xa8, 0x2, 0x2, 0xb19, 
       0xb1e, 0x5, 0xba, 0x5e, 0x2, 0xb1a, 0xb1b, 0x7, 0x408, 0x2, 0x2, 
       0xb1b, 0xb1d, 0x5, 0xba, 0x5e, 0x2, 0xb1c, 0xb1a, 0x3, 0x2, 0x2, 
       0x2, 0xb1d, 0xb20, 0x3, 0x2, 0x2, 0x2, 0xb1e, 0xb1c, 0x3, 0x2, 0x2, 
       0x2, 0xb1e, 0xb1f, 0x3, 0x2, 0x2, 0x2, 0xb1f, 0xb22, 0x3, 0x2, 0x2, 
       0x2, 0xb20, 0xb1e, 0x3, 0x2, 0x2, 0x2, 0xb21, 0xb15, 0x3, 0x2, 0x2, 
       0x2, 0xb21, 0xb22, 0x3, 0x2, 0x2, 0x2, 0xb22, 0xad, 0x3, 0x2, 0x2, 
       0x2, 0xb23, 0xb24, 0x7, 0x5e, 0x2, 0x2, 0xb24, 0xb26, 0x7, 0x145, 
       0x2, 0x2, 0xb25, 0xb27, 0x9, 0x25, 0x2, 0x2, 0xb26, 0xb25, 0x3, 0x2, 
       0x2, 0x2, 0xb26, 0xb27, 0x3, 0x2, 0x2, 0x2, 0xb27, 0xb29, 0x3, 0x2, 
       0x2, 0x2, 0xb28, 0xb2a, 0x7, 0x194, 0x2, 0x2, 0xb29, 0xb28, 0x3, 
       0x2, 0x2, 0x2, 0xb29, 0xb2a, 0x3, 0x2, 0x2, 0x2, 0xb2a, 0xb2b, 0x3, 
       0x2, 0x2, 0x2, 0xb2b, 0xb2c, 0x7, 0x4b, 0x2, 0x2, 0xb2c, 0xb2e, 0x7, 
       0x415, 0x2, 0x2, 0xb2d, 0xb2f, 0x9, 0x8, 0x2, 0x2, 0xb2e, 0xb2d, 
       0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb2f, 0xb30, 
       0x3, 0x2, 0x2, 0x2, 0xb30, 0xb31, 0x7, 0x50, 0x2, 0x2, 0xb31, 0xb32, 
       0x7, 0x9c, 0x2, 0x2, 0xb32, 0xb38, 0x5, 0x1f8, 0xfd, 0x2, 0xb33, 
       0xb34, 0x7, 0x75, 0x2, 0x2, 0xb34, 0xb35, 0x7, 0x406, 0x2, 0x2, 0xb35, 
       0xb36, 0x5, 0x230, 0x119, 0x2, 0xb36, 0xb37, 0x7, 0x407, 0x2, 0x2, 
       0xb37, 0xb39, 0x3, 0x2, 0x2, 0x2, 0xb38, 0xb33, 0x3, 0x2, 0x2, 0x2, 
       0xb38, 0xb39, 0x3, 0x2, 0x2, 0x2, 0xb39, 0xb3d, 0x3, 0x2, 0x2, 0x2, 
       0xb3a, 0xb3b, 0x7, 0x18, 0x2, 0x2, 0xb3b, 0xb3c, 0x7, 0x8c, 0x2, 
       0x2, 0xb3c, 0xb3e, 0x5, 0x202, 0x102, 0x2, 0xb3d, 0xb3a, 0x3, 0x2, 
       0x2, 0x2, 0xb3d, 0xb3e, 0x3, 0x2, 0x2, 0x2, 0xb3e, 0xb45, 0x3, 0x2, 
       0x2, 0x2, 0xb3f, 0xb41, 0x9, 0x26, 0x2, 0x2, 0xb40, 0xb42, 0x5, 0xf4, 
       0x7b, 0x2, 0xb41, 0xb40, 0x3, 0x2, 0x2, 0x2, 0xb42, 0xb43, 0x3, 0x2, 
       0x2, 0x2, 0xb43, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb43, 0xb44, 0x3, 0x2, 
       0x2, 0x2, 0xb44, 0xb46, 0x3, 0x2, 0x2, 0x2, 0xb45, 0xb3f, 0x3, 0x2, 
       0x2, 0x2, 0xb45, 0xb46, 0x3, 0x2, 0x2, 0x2, 0xb46, 0xb4d, 0x3, 0x2, 
       0x2, 0x2, 0xb47, 0xb49, 0x7, 0x5d, 0x2, 0x2, 0xb48, 0xb4a, 0x5, 0xf6, 
       0x7c, 0x2, 0xb49, 0xb48, 0x3, 0x2, 0x2, 0x2, 0xb4a, 0xb4b, 0x3, 0x2, 
       0x2, 0x2, 0xb4b, 0xb49, 0x3, 0x2, 0x2, 0x2, 0xb4b, 0xb4c, 0x3, 0x2, 
       0x2, 0x2, 0xb4c, 0xb4e, 0x3, 0x2, 0x2, 0x2, 0xb4d, 0xb47, 0x3, 0x2, 
       0x2, 0x2, 0xb4d, 0xb4e, 0x3, 0x2, 0x2, 0x2, 0xb4e, 0xb53, 0x3, 0x2, 
       0x2, 0x2, 0xb4f, 0xb50, 0x7, 0x48, 0x2, 0x2, 0xb50, 0xb51, 0x5, 0x216, 
       0x10c, 0x2, 0xb51, 0xb52, 0x9, 0x27, 0x2, 0x2, 0xb52, 0xb54, 0x3, 
       0x2, 0x2, 0x2, 0xb53, 0xb4f, 0x3, 0x2, 0x2, 0x2, 0xb53, 0xb54, 0x3, 
       0x2, 0x2, 0x2, 0xb54, 0xb60, 0x3, 0x2, 0x2, 0x2, 0xb55, 0xb56, 0x7, 
       0x406, 0x2, 0x2, 0xb56, 0xb5b, 0x5, 0xbc, 0x5f, 0x2, 0xb57, 0xb58, 
       0x7, 0x408, 0x2, 0x2, 0xb58, 0xb5a, 0x5, 0xbc, 0x5f, 0x2, 0xb59, 
       0xb57, 0x3, 0x2, 0x2, 0x2, 0xb5a, 0xb5d, 0x3, 0x2, 0x2, 0x2, 0xb5b, 
       0xb59, 0x3, 0x2, 0x2, 0x2, 0xb5b, 0xb5c, 0x3, 0x2, 0x2, 0x2, 0xb5c, 
       0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb5d, 0xb5b, 0x3, 0x2, 0x2, 0x2, 0xb5e, 
       0xb5f, 0x7, 0x407, 0x2, 0x2, 0xb5f, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb60, 
       0xb55, 0x3, 0x2, 0x2, 0x2, 0xb60, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb61, 
       0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb62, 0xb63, 0x7, 0x8c, 0x2, 0x2, 0xb63, 
       0xb68, 0x5, 0xba, 0x5e, 0x2, 0xb64, 0xb65, 0x7, 0x408, 0x2, 0x2, 
       0xb65, 0xb67, 0x5, 0xba, 0x5e, 0x2, 0xb66, 0xb64, 0x3, 0x2, 0x2, 
       0x2, 0xb67, 0xb6a, 0x3, 0x2, 0x2, 0x2, 0xb68, 0xb66, 0x3, 0x2, 0x2, 
       0x2, 0xb68, 0xb69, 0x3, 0x2, 0x2, 0x2, 0xb69, 0xb6c, 0x3, 0x2, 0x2, 
       0x2, 0xb6a, 0xb68, 0x3, 0x2, 0x2, 0x2, 0xb6b, 0xb62, 0x3, 0x2, 0x2, 
       0x2, 0xb6b, 0xb6c, 0x3, 0x2, 0x2, 0x2, 0xb6c, 0xaf, 0x3, 0x2, 0x2, 
       0x2, 0xb6d, 0xb6e, 0x7, 0x5e, 0x2, 0x2, 0xb6e, 0xb70, 0x7, 0x250, 
       0x2, 0x2, 0xb6f, 0xb71, 0x9, 0x25, 0x2, 0x2, 0xb70, 0xb6f, 0x3, 0x2, 
       0x2, 0x2, 0xb70, 0xb71, 0x3, 0x2, 0x2, 0x2, 0xb71, 0xb73, 0x3, 0x2, 
       0x2, 0x2, 0xb72, 0xb74, 0x7, 0x194, 0x2, 0x2, 0xb73, 0xb72, 0x3, 
       0x2, 0x2, 0x2, 0xb73, 0xb74, 0x3, 0x2, 0x2, 0x2, 0xb74, 0xb75, 0x3, 
       0x2, 0x2, 0x2, 0xb75, 0xb76, 0x7, 0x4b, 0x2, 0x2, 0xb76, 0xb78, 0x7, 
       0x415, 0x2, 0x2, 0xb77, 0xb79, 0x9, 0x8, 0x2, 0x2, 0xb78, 0xb77, 
       0x3, 0x2, 0x2, 0x2, 0xb78, 0xb79, 0x3, 0x2, 0x2, 0x2, 0xb79, 0xb7a, 
       0x3, 0x2, 0x2, 0x2, 0xb7a, 0xb7b, 0x7, 0x50, 0x2, 0x2, 0xb7b, 0xb7c, 
       0x7, 0x9c, 0x2, 0x2, 0xb7c, 0xb80, 0x5, 0x1f8, 0xfd, 0x2, 0xb7d, 
       0xb7e, 0x7, 0x18, 0x2, 0x2, 0xb7e, 0xb7f, 0x7, 0x8c, 0x2, 0x2, 0xb7f, 
       0xb81, 0x5, 0x202, 0x102, 0x2, 0xb80, 0xb7d, 0x3, 0x2, 0x2, 0x2, 
       0xb80, 0xb81, 0x3, 0x2, 0x2, 0x2, 0xb81, 0xb88, 0x3, 0x2, 0x2, 0x2, 
       0xb82, 0xb83, 0x7, 0x204, 0x2, 0x2, 0xb83, 0xb84, 0x7, 0x17c, 0x2, 
       0x2, 0xb84, 0xb85, 0x7, 0x12, 0x2, 0x2, 0xb85, 0xb86, 0x7, 0x3ff, 
       0x2, 0x2, 0xb86, 0xb87, 0x7, 0x415, 0x2, 0x2, 0xb87, 0xb89, 0x7, 
       0x3fe, 0x2, 0x2, 0xb88, 0xb82, 0x3, 0x2, 0x2, 0x2, 0xb88, 0xb89, 
       0x3, 0x2, 0x2, 0x2, 0xb89, 0xb8e, 0x3, 0x2, 0x2, 0x2, 0xb8a, 0xb8b, 
       0x7, 0x48, 0x2, 0x2, 0xb8b, 0xb8c, 0x5, 0x216, 0x10c, 0x2, 0xb8c, 
       0xb8d, 0x9, 0x27, 0x2, 0x2, 0xb8d, 0xb8f, 0x3, 0x2, 0x2, 0x2, 0xb8e, 
       0xb8a, 0x3, 0x2, 0x2, 0x2, 0xb8e, 0xb8f, 0x3, 0x2, 0x2, 0x2, 0xb8f, 
       0xb9b, 0x3, 0x2, 0x2, 0x2, 0xb90, 0xb91, 0x7, 0x406, 0x2, 0x2, 0xb91, 
       0xb96, 0x5, 0xbc, 0x5f, 0x2, 0xb92, 0xb93, 0x7, 0x408, 0x2, 0x2, 
       0xb93, 0xb95, 0x5, 0xbc, 0x5f, 0x2, 0xb94, 0xb92, 0x3, 0x2, 0x2, 
       0x2, 0xb95, 0xb98, 0x3, 0x2, 0x2, 0x2, 0xb96, 0xb94, 0x3, 0x2, 0x2, 
       0x2, 0xb96, 0xb97, 0x3, 0x2, 0x2, 0x2, 0xb97, 0xb99, 0x3, 0x2, 0x2, 
       0x2, 0xb98, 0xb96, 0x3, 0x2, 0x2, 0x2, 0xb99, 0xb9a, 0x7, 0x407, 
       0x2, 0x2, 0xb9a, 0xb9c, 0x3, 0x2, 0x2, 0x2, 0xb9b, 0xb90, 0x3, 0x2, 
       0x2, 0x2, 0xb9b, 0xb9c, 0x3, 0x2, 0x2, 0x2, 0xb9c, 0xba6, 0x3, 0x2, 
       0x2, 0x2, 0xb9d, 0xb9e, 0x7, 0x8c, 0x2, 0x2, 0xb9e, 0xba3, 0x5, 0xba, 
       0x5e, 0x2, 0xb9f, 0xba0, 0x7, 0x408, 0x2, 0x2, 0xba0, 0xba2, 0x5, 
       0xba, 0x5e, 0x2, 0xba1, 0xb9f, 0x3, 0x2, 0x2, 0x2, 0xba2, 0xba5, 
       0x3, 0x2, 0x2, 0x2, 0xba3, 0xba1, 0x3, 0x2, 0x2, 0x2, 0xba3, 0xba4, 
       0x3, 0x2, 0x2, 0x2, 0xba4, 0xba7, 0x3, 0x2, 0x2, 0x2, 0xba5, 0xba3, 
       0x3, 0x2, 0x2, 0x2, 0xba6, 0xb9d, 0x3, 0x2, 0x2, 0x2, 0xba6, 0xba7, 
       0x3, 0x2, 0x2, 0x2, 0xba7, 0xb1, 0x3, 0x2, 0x2, 0x2, 0xba8, 0xbaa, 
       0x7, 0x81, 0x2, 0x2, 0xba9, 0xbab, 0x9, 0x28, 0x2, 0x2, 0xbaa, 0xba9, 
       0x3, 0x2, 0x2, 0x2, 0xbaa, 0xbab, 0x3, 0x2, 0x2, 0x2, 0xbab, 0xbad, 
       0x3, 0x2, 0x2, 0x2, 0xbac, 0xbae, 0x7, 0x50, 0x2, 0x2, 0xbad, 0xbac, 
       0x3, 0x2, 0x2, 0x2, 0xbad, 0xbae, 0x3, 0x2, 0x2, 0x2, 0xbae, 0xbaf, 
       0x3, 0x2, 0x2, 0x2, 0xbaf, 0xbb5, 0x5, 0x1f8, 0xfd, 0x2, 0xbb0, 0xbb1, 
       0x7, 0x75, 0x2, 0x2, 0xbb1, 0xbb2, 0x7, 0x406, 0x2, 0x2, 0xbb2, 0xbb3, 
       0x5, 0x230, 0x119, 0x2, 0xbb3, 0xbb4, 0x7, 0x407, 0x2, 0x2, 0xbb4, 
       0xbb6, 0x3, 0x2, 0x2, 0x2, 0xbb5, 0xbb0, 0x3, 0x2, 0x2, 0x2, 0xbb5, 
       0xbb6, 0x3, 0x2, 0x2, 0x2, 0xbb6, 0xbc7, 0x3, 0x2, 0x2, 0x2, 0xbb7, 
       0xbb8, 0x7, 0x406, 0x2, 0x2, 0xbb8, 0xbb9, 0x5, 0x230, 0x119, 0x2, 
       0xbb9, 0xbba, 0x7, 0x407, 0x2, 0x2, 0xbba, 0xbbc, 0x3, 0x2, 0x2, 
       0x2, 0xbbb, 0xbb7, 0x3, 0x2, 0x2, 0x2, 0xbbb, 0xbbc, 0x3, 0x2, 0x2, 
       0x2, 0xbbc, 0xbbd, 0x3, 0x2, 0x2, 0x2, 0xbbd, 0xbc8, 0x5, 0xb8, 0x5d, 
       0x2, 0xbbe, 0xbbf, 0x7, 0x8c, 0x2, 0x2, 0xbbf, 0xbc4, 0x5, 0xba, 
       0x5e, 0x2, 0xbc0, 0xbc1, 0x7, 0x408, 0x2, 0x2, 0xbc1, 0xbc3, 0x5, 
       0xba, 0x5e, 0x2, 0xbc2, 0xbc0, 0x3, 0x2, 0x2, 0x2, 0xbc3, 0xbc6, 
       0x3, 0x2, 0x2, 0x2, 0xbc4, 0xbc2, 0x3, 0x2, 0x2, 0x2, 0xbc4, 0xbc5, 
       0x3, 0x2, 0x2, 0x2, 0xbc5, 0xbc8, 0x3, 0x2, 0x2, 0x2, 0xbc6, 0xbc4, 
       0x3, 0x2, 0x2, 0x2, 0xbc7, 0xbbb, 0x3, 0x2, 0x2, 0x2, 0xbc7, 0xbbe, 
       0x3, 0x2, 0x2, 0x2, 0xbc8, 0xb3, 0x3, 0x2, 0x2, 0x2, 0xbc9, 0xbcb, 
       0x5, 0xe4, 0x73, 0x2, 0xbca, 0xbcc, 0x5, 0xbe, 0x60, 0x2, 0xbcb, 
       0xbca, 0x3, 0x2, 0x2, 0x2, 0xbcb, 0xbcc, 0x3, 0x2, 0x2, 0x2, 0xbcc, 
       0xc01, 0x3, 0x2, 0x2, 0x2, 0xbcd, 0xbcf, 0x5, 0xe0, 0x71, 0x2, 0xbce, 
       0xbd0, 0x5, 0xbe, 0x60, 0x2, 0xbcf, 0xbce, 0x3, 0x2, 0x2, 0x2, 0xbcf, 
       0xbd0, 0x3, 0x2, 0x2, 0x2, 0xbd0, 0xc01, 0x3, 0x2, 0x2, 0x2, 0xbd1, 
       0xbd3, 0x5, 0xe6, 0x74, 0x2, 0xbd2, 0xbd4, 0x5, 0xea, 0x76, 0x2, 
       0xbd3, 0xbd2, 0x3, 0x2, 0x2, 0x2, 0xbd4, 0xbd5, 0x3, 0x2, 0x2, 0x2, 
       0xbd5, 0xbd3, 0x3, 0x2, 0x2, 0x2, 0xbd5, 0xbd6, 0x3, 0x2, 0x2, 0x2, 
       0xbd6, 0xbdf, 0x3, 0x2, 0x2, 0x2, 0xbd7, 0xbd9, 0x7, 0xa4, 0x2, 0x2, 
       0xbd8, 0xbda, 0x9, 0x29, 0x2, 0x2, 0xbd9, 0xbd8, 0x3, 0x2, 0x2, 0x2, 
       0xbd9, 0xbda, 0x3, 0x2, 0x2, 0x2, 0xbda, 0xbdd, 0x3, 0x2, 0x2, 0x2, 
       0xbdb, 0xbde, 0x5, 0xe4, 0x73, 0x2, 0xbdc, 0xbde, 0x5, 0xe0, 0x71, 
       0x2, 0xbdd, 0xbdb, 0x3, 0x2, 0x2, 0x2, 0xbdd, 0xbdc, 0x3, 0x2, 0x2, 
       0x2, 0xbde, 0xbe0, 0x3, 0x2, 0x2, 0x2, 0xbdf, 0xbd7, 0x3, 0x2, 0x2, 
       0x2, 0xbdf, 0xbe0, 0x3, 0x2, 0x2, 0x2, 0xbe0, 0xbe2, 0x3, 0x2, 0x2, 
       0x2, 0xbe1, 0xbe3, 0x5, 0xd0, 0x69, 0x2, 0xbe2, 0xbe1, 0x3, 0x2, 
       0x2, 0x2, 0xbe2, 0xbe3, 0x3, 0x2, 0x2, 0x2, 0xbe3, 0xbe5, 0x3, 0x2, 
       0x2, 0x2, 0xbe4, 0xbe6, 0x5, 0x100, 0x81, 0x2, 0xbe5, 0xbe4, 0x3, 
       0x2, 0x2, 0x2, 0xbe5, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbe6, 0xbe8, 0x3, 
       0x2, 0x2, 0x2, 0xbe7, 0xbe9, 0x5, 0xbe, 0x60, 0x2, 0xbe8, 0xbe7, 
       0x3, 0x2, 0x2, 0x2, 0xbe8, 0xbe9, 0x3, 0x2, 0x2, 0x2, 0xbe9, 0xc01, 
       0x3, 0x2, 0x2, 0x2, 0xbea, 0xbec, 0x5, 0xe2, 0x72, 0x2, 0xbeb, 0xbed, 
       0x5, 0xe8, 0x75, 0x2, 0xbec, 0xbeb, 0x3, 0x2, 0x2, 0x2, 0xbed, 0xbee, 
       0x3, 0x2, 0x2, 0x2, 0xbee, 0xbec, 0x3, 0x2, 0x2, 0x2, 0xbee, 0xbef, 
       0x3, 0x2, 0x2, 0x2, 0xbef, 0xbf5, 0x3, 0x2, 0x2, 0x2, 0xbf0, 0xbf2, 
       0x7, 0xa4, 0x2, 0x2, 0xbf1, 0xbf3, 0x9, 0x29, 0x2, 0x2, 0xbf2, 0xbf1, 
       0x3, 0x2, 0x2, 0x2, 0xbf2, 0xbf3, 0x3, 0x2, 0x2, 0x2, 0xbf3, 0xbf4, 
       0x3, 0x2, 0x2, 0x2, 0xbf4, 0xbf6, 0x5, 0xe0, 0x71, 0x2, 0xbf5, 0xbf0, 
       0x3, 0x2, 0x2, 0x2, 0xbf5, 0xbf6, 0x3, 0x2, 0x2, 0x2, 0xbf6, 0xbf8, 
       0x3, 0x2, 0x2, 0x2, 0xbf7, 0xbf9, 0x5, 0xd0, 0x69, 0x2, 0xbf8, 0xbf7, 
       0x3, 0x2, 0x2, 0x2, 0xbf8, 0xbf9, 0x3, 0x2, 0x2, 0x2, 0xbf9, 0xbfb, 
       0x3, 0x2, 0x2, 0x2, 0xbfa, 0xbfc, 0x5, 0x100, 0x81, 0x2, 0xbfb, 0xbfa, 
       0x3, 0x2, 0x2, 0x2, 0xbfb, 0xbfc, 0x3, 0x2, 0x2, 0x2, 0xbfc, 0xbfe, 
       0x3, 0x2, 0x2, 0x2, 0xbfd, 0xbff, 0x5, 0xbe, 0x60, 0x2, 0xbfe, 0xbfd, 
       0x3, 0x2, 0x2, 0x2, 0xbfe, 0xbff, 0x3, 0x2, 0x2, 0x2, 0xbff, 0xc01, 
       0x3, 0x2, 0x2, 0x2, 0xc00, 0xbc9, 0x3, 0x2, 0x2, 0x2, 0xc00, 0xbcd, 
       0x3, 0x2, 0x2, 0x2, 0xc00, 0xbd1, 0x3, 0x2, 0x2, 0x2, 0xc00, 0xbea, 
       0x3, 0x2, 0x2, 0x2, 0xc01, 0xb5, 0x3, 0x2, 0x2, 0x2, 0xc02, 0xc05, 
       0x5, 0xcc, 0x67, 0x2, 0xc03, 0xc05, 0x5, 0xce, 0x68, 0x2, 0xc04, 
       0xc02, 0x3, 0x2, 0x2, 0x2, 0xc04, 0xc03, 0x3, 0x2, 0x2, 0x2, 0xc05, 
       0xb7, 0x3, 0x2, 0x2, 0x2, 0xc06, 0xc19, 0x5, 0xb4, 0x5b, 0x2, 0xc07, 
       0xc08, 0x9, 0x2a, 0x2, 0x2, 0xc08, 0xc0a, 0x7, 0x406, 0x2, 0x2, 0xc09, 
       0xc0b, 0x5, 0x238, 0x11d, 0x2, 0xc0a, 0xc09, 0x3, 0x2, 0x2, 0x2, 
       0xc0a, 0xc0b, 0x3, 0x2, 0x2, 0x2, 0xc0b, 0xc0c, 0x3, 0x2, 0x2, 0x2, 
       0xc0c, 0xc15, 0x7, 0x407, 0x2, 0x2, 0xc0d, 0xc0e, 0x7, 0x408, 0x2, 
       0x2, 0xc0e, 0xc10, 0x7, 0x406, 0x2, 0x2, 0xc0f, 0xc11, 0x5, 0x238, 
       0x11d, 0x2, 0xc10, 0xc0f, 0x3, 0x2, 0x2, 0x2, 0xc10, 0xc11, 0x3, 
       0x2, 0x2, 0x2, 0xc11, 0xc12, 0x3, 0x2, 0x2, 0x2, 0xc12, 0xc14, 0x7, 
       0x407, 0x2, 0x2, 0xc13, 0xc0d, 0x3, 0x2, 0x2, 0x2, 0xc14, 0xc17, 
       0x3, 0x2, 0x2, 0x2, 0xc15, 0xc13, 0x3, 0x2, 0x2, 0x2, 0xc15, 0xc16, 
       0x3, 0x2, 0x2, 0x2, 0xc16, 0xc19, 0x3, 0x2, 0x2, 0x2, 0xc17, 0xc15, 
       0x3, 0x2, 0x2, 0x2, 0xc18, 0xc06, 0x3, 0x2, 0x2, 0x2, 0xc18, 0xc07, 
       0x3, 0x2, 0x2, 0x2, 0xc19, 0xb9, 0x3, 0x2, 0x2, 0x2, 0xc1a, 0xc1b, 
       0x5, 0x1fa, 0xfe, 0x2, 0xc1b, 0xc1e, 0x7, 0x3fd, 0x2, 0x2, 0xc1c, 
       0xc1f, 0x5, 0x25e, 0x130, 0x2, 0xc1d, 0xc1f, 0x7, 0x28, 0x2, 0x2, 
       0xc1e, 0xc1c, 0x3, 0x2, 0x2, 0x2, 0xc1e, 0xc1d, 0x3, 0x2, 0x2, 0x2, 
       0xc1f, 0xbb, 0x3, 0x2, 0x2, 0x2, 0xc20, 0xc23, 0x5, 0x210, 0x109, 
       0x2, 0xc21, 0xc23, 0x7, 0x421, 0x2, 0x2, 0xc22, 0xc20, 0x3, 0x2, 
       0x2, 0x2, 0xc22, 0xc21, 0x3, 0x2, 0x2, 0x2, 0xc23, 0xbd, 0x3, 0x2, 
       0x2, 0x2, 0xc24, 0xc25, 0x7, 0x3c, 0x2, 0x2, 0xc25, 0xc2b, 0x7, 0xa8, 
       0x2, 0x2, 0xc26, 0xc27, 0x7, 0x5f, 0x2, 0x2, 0xc27, 0xc28, 0x7, 0x49, 
       0x2, 0x2, 0xc28, 0xc29, 0x7, 0x20b, 0x2, 0x2, 0xc29, 0xc2b, 0x7, 
       0x1b9, 0x2, 0x2, 0xc2a, 0xc24, 0x3, 0x2, 0x2, 0x2, 0xc2a, 0xc26, 
       0x3, 0x2, 0x2, 0x2, 0xc2b, 0xbf, 0x3, 0x2, 0x2, 0x2, 0xc2c, 0xc2e, 
       0x7, 0x2a, 0x2, 0x2, 0xc2d, 0xc2f, 0x7, 0x61, 0x2, 0x2, 0xc2e, 0xc2d, 
       0x3, 0x2, 0x2, 0x2, 0xc2e, 0xc2f, 0x3, 0x2, 0x2, 0x2, 0xc2f, 0xc31, 
       0x3, 0x2, 0x2, 0x2, 0xc30, 0xc32, 0x7, 0x1e7, 0x2, 0x2, 0xc31, 0xc30, 
       0x3, 0x2, 0x2, 0x2, 0xc31, 0xc32, 0x3, 0x2, 0x2, 0x2, 0xc32, 0xc34, 
       0x3, 0x2, 0x2, 0x2, 0xc33, 0xc35, 0x7, 0x48, 0x2, 0x2, 0xc34, 0xc33, 
       0x3, 0x2, 0x2, 0x2, 0xc34, 0xc35, 0x3, 0x2, 0x2, 0x2, 0xc35, 0xc36, 
       0x3, 0x2, 0x2, 0x2, 0xc36, 0xc37, 0x7, 0x3f, 0x2, 0x2, 0xc37, 0xc3d, 
       0x5, 0x1f8, 0xfd, 0x2, 0xc38, 0xc39, 0x7, 0x75, 0x2, 0x2, 0xc39, 
       0xc3a, 0x7, 0x406, 0x2, 0x2, 0xc3a, 0xc3b, 0x5, 0x230, 0x119, 0x2, 
       0xc3b, 0xc3c, 0x7, 0x407, 0x2, 0x2, 0xc3c, 0xc3e, 0x3, 0x2, 0x2, 
       0x2, 0xc3d, 0xc38, 0x3, 0x2, 0x2, 0x2, 0xc3d, 0xc3e, 0x3, 0x2, 0x2, 
       0x2, 0xc3e, 0xc41, 0x3, 0x2, 0x2, 0x2, 0xc3f, 0xc40, 0x7, 0xae, 0x2, 
       0x2, 0xc40, 0xc42, 0x5, 0x25e, 0x130, 0x2, 0xc41, 0xc3f, 0x3, 0x2, 
       0x2, 0x2, 0xc41, 0xc42, 0x3, 0x2, 0x2, 0x2, 0xc42, 0xc44, 0x3, 0x2, 
       0x2, 0x2, 0xc43, 0xc45, 0x5, 0xd0, 0x69, 0x2, 0xc44, 0xc43, 0x3, 
       0x2, 0x2, 0x2, 0xc44, 0xc45, 0x3, 0x2, 0x2, 0x2, 0xc45, 0xc48, 0x3, 
       0x2, 0x2, 0x2, 0xc46, 0xc47, 0x7, 0x5b, 0x2, 0x2, 0xc47, 0xc49, 0x5, 
       0x102, 0x82, 0x2, 0xc48, 0xc46, 0x3, 0x2, 0x2, 0x2, 0xc48, 0xc49, 
       0x3, 0x2, 0x2, 0x2, 0xc49, 0xc1, 0x3, 0x2, 0x2, 0x2, 0xc4a, 0xc4c, 
       0x7, 0x2a, 0x2, 0x2, 0xc4b, 0xc4d, 0x7, 0x61, 0x2, 0x2, 0xc4c, 0xc4b, 
       0x3, 0x2, 0x2, 0x2, 0xc4c, 0xc4d, 0x3, 0x2, 0x2, 0x2, 0xc4d, 0xc4f, 
       0x3, 0x2, 0x2, 0x2, 0xc4e, 0xc50, 0x7, 0x1e7, 0x2, 0x2, 0xc4f, 0xc4e, 
       0x3, 0x2, 0x2, 0x2, 0xc4f, 0xc50, 0x3, 0x2, 0x2, 0x2, 0xc50, 0xc52, 
       0x3, 0x2, 0x2, 0x2, 0xc51, 0xc53, 0x7, 0x48, 0x2, 0x2, 0xc52, 0xc51, 
       0x3, 0x2, 0x2, 0x2, 0xc52, 0xc53, 0x3, 0x2, 0x2, 0x2, 0xc53, 0xc7b, 
       0x3, 0x2, 0x2, 0x2, 0xc54, 0xc57, 0x5, 0x1f8, 0xfd, 0x2, 0xc55, 0xc56, 
       0x7, 0x405, 0x2, 0x2, 0xc56, 0xc58, 0x7, 0x3f5, 0x2, 0x2, 0xc57, 
       0xc55, 0x3, 0x2, 0x2, 0x2, 0xc57, 0xc58, 0x3, 0x2, 0x2, 0x2, 0xc58, 
       0xc61, 0x3, 0x2, 0x2, 0x2, 0xc59, 0xc5a, 0x7, 0x408, 0x2, 0x2, 0xc5a, 
       0xc5d, 0x5, 0x1f8, 0xfd, 0x2, 0xc5b, 0xc5c, 0x7, 0x405, 0x2, 0x2, 
       0xc5c, 0xc5e, 0x7, 0x3f5, 0x2, 0x2, 0xc5d, 0xc5b, 0x3, 0x2, 0x2, 
       0x2, 0xc5d, 0xc5e, 0x3, 0x2, 0x2, 0x2, 0xc5e, 0xc60, 0x3, 0x2, 0x2, 
       0x2, 0xc5f, 0xc59, 0x3, 0x2, 0x2, 0x2, 0xc60, 0xc63, 0x3, 0x2, 0x2, 
       0x2, 0xc61, 0xc5f, 0x3, 0x2, 0x2, 0x2, 0xc61, 0xc62, 0x3, 0x2, 0x2, 
       0x2, 0xc62, 0xc64, 0x3, 0x2, 0x2, 0x2, 0xc63, 0xc61, 0x3, 0x2, 0x2, 
       0x2, 0xc64, 0xc65, 0x7, 0x3f, 0x2, 0x2, 0xc65, 0xc66, 0x5, 0xd4, 
       0x6b, 0x2, 0xc66, 0xc7c, 0x3, 0x2, 0x2, 0x2, 0xc67, 0xc68, 0x7, 0x3f, 
       0x2, 0x2, 0xc68, 0xc6b, 0x5, 0x1f8, 0xfd, 0x2, 0xc69, 0xc6a, 0x7, 
       0x405, 0x2, 0x2, 0xc6a, 0xc6c, 0x7, 0x3f5, 0x2, 0x2, 0xc6b, 0xc69, 
       0x3, 0x2, 0x2, 0x2, 0xc6b, 0xc6c, 0x3, 0x2, 0x2, 0x2, 0xc6c, 0xc75, 
       0x3, 0x2, 0x2, 0x2, 0xc6d, 0xc6e, 0x7, 0x408, 0x2, 0x2, 0xc6e, 0xc71, 
       0x5, 0x1f8, 0xfd, 0x2, 0xc6f, 0xc70, 0x7, 0x405, 0x2, 0x2, 0xc70, 
       0xc72, 0x7, 0x3f5, 0x2, 0x2, 0xc71, 0xc6f, 0x3, 0x2, 0x2, 0x2, 0xc71, 
       0xc72, 0x3, 0x2, 0x2, 0x2, 0xc72, 0xc74, 0x3, 0x2, 0x2, 0x2, 0xc73, 
       0xc6d, 0x3, 0x2, 0x2, 0x2, 0xc74, 0xc77, 0x3, 0x2, 0x2, 0x2, 0xc75, 
       0xc73, 0x3, 0x2, 0x2, 0x2, 0xc75, 0xc76, 0x3, 0x2, 0x2, 0x2, 0xc76, 
       0xc78, 0x3, 0x2, 0x2, 0x2, 0xc77, 0xc75, 0x3, 0x2, 0x2, 0x2, 0xc78, 
       0xc79, 0x7, 0xab, 0x2, 0x2, 0xc79, 0xc7a, 0x5, 0xd4, 0x6b, 0x2, 0xc7a, 
       0xc7c, 0x3, 0x2, 0x2, 0x2, 0xc7b, 0xc54, 0x3, 0x2, 0x2, 0x2, 0xc7b, 
       0xc67, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0xc7f, 0x3, 0x2, 0x2, 0x2, 0xc7d, 
       0xc7e, 0x7, 0xae, 0x2, 0x2, 0xc7e, 0xc80, 0x5, 0x25e, 0x130, 0x2, 
       0xc7f, 0xc7d, 0x3, 0x2, 0x2, 0x2, 0xc7f, 0xc80, 0x3, 0x2, 0x2, 0x2, 
       0xc80, 0xc3, 0x3, 0x2, 0x2, 0x2, 0xc81, 0xc82, 0x7, 0x177, 0x2, 0x2, 
       0xc82, 0xc83, 0x5, 0x1f8, 0xfd, 0x2, 0xc83, 0xc88, 0x7, 0x1ce, 0x2, 
       0x2, 0xc84, 0xc86, 0x7, 0xd, 0x2, 0x2, 0xc85, 0xc84, 0x3, 0x2, 0x2, 
       0x2, 0xc85, 0xc86, 0x3, 0x2, 0x2, 0x2, 0xc86, 0xc87, 0x3, 0x2, 0x2, 
       0x2, 0xc87, 0xc89, 0x5, 0x210, 0x109, 0x2, 0xc88, 0xc85, 0x3, 0x2, 
       0x2, 0x2, 0xc88, 0xc89, 0x3, 0x2, 0x2, 0x2, 0xc89, 0xc5, 0x3, 0x2, 
       0x2, 0x2, 0xc8a, 0xc8b, 0x7, 0x177, 0x2, 0x2, 0xc8b, 0xc8c, 0x5, 
       0x1f8, 0xfd, 0x2, 0xc8c, 0xc8d, 0x7, 0x7a, 0x2, 0x2, 0xc8d, 0xc94, 
       0x5, 0x210, 0x109, 0x2, 0xc8e, 0xc8f, 0x5, 0x266, 0x134, 0x2, 0xc8f, 
       0xc90, 0x7, 0x406, 0x2, 0x2, 0xc90, 0xc91, 0x5, 0x23a, 0x11e, 0x2, 
       0xc91, 0xc92, 0x7, 0x407, 0x2, 0x2, 0xc92, 0xc95, 0x3, 0x2, 0x2, 
       0x2, 0xc93, 0xc95, 0x9, 0x2b, 0x2, 0x2, 0xc94, 0xc8e, 0x3, 0x2, 0x2, 
       0x2, 0xc94, 0xc93, 0x3, 0x2, 0x2, 0x2, 0xc95, 0xc98, 0x3, 0x2, 0x2, 
       0x2, 0xc96, 0xc97, 0x7, 0xae, 0x2, 0x2, 0xc97, 0xc99, 0x5, 0x25e, 
       0x130, 0x2, 0xc98, 0xc96, 0x3, 0x2, 0x2, 0x2, 0xc98, 0xc99, 0x3, 
       0x2, 0x2, 0x2, 0xc99, 0xc9c, 0x3, 0x2, 0x2, 0x2, 0xc9a, 0xc9b, 0x7, 
       0x5b, 0x2, 0x2, 0xc9b, 0xc9d, 0x5, 0x102, 0x82, 0x2, 0xc9c, 0xc9a, 
       0x3, 0x2, 0x2, 0x2, 0xc9c, 0xc9d, 0x3, 0x2, 0x2, 0x2, 0xc9d, 0xc7, 
       0x3, 0x2, 0x2, 0x2, 0xc9e, 0xc9f, 0x7, 0x177, 0x2, 0x2, 0xc9f, 0xca0, 
       0x5, 0x1f8, 0xfd, 0x2, 0xca0, 0xca1, 0x7, 0x7a, 0x2, 0x2, 0xca1, 
       0xca4, 0x9, 0x2c, 0x2, 0x2, 0xca2, 0xca3, 0x7, 0xae, 0x2, 0x2, 0xca3, 
       0xca5, 0x5, 0x25e, 0x130, 0x2, 0xca4, 0xca2, 0x3, 0x2, 0x2, 0x2, 
       0xca4, 0xca5, 0x3, 0x2, 0x2, 0x2, 0xca5, 0xca8, 0x3, 0x2, 0x2, 0x2, 
       0xca6, 0xca7, 0x7, 0x5b, 0x2, 0x2, 0xca7, 0xca9, 0x5, 0x102, 0x82, 
       0x2, 0xca8, 0xca6, 0x3, 0x2, 0x2, 0x2, 0xca8, 0xca9, 0x3, 0x2, 0x2, 
       0x2, 0xca9, 0xc9, 0x3, 0x2, 0x2, 0x2, 0xcaa, 0xcab, 0x7, 0x177, 0x2, 
       0x2, 0xcab, 0xcac, 0x5, 0x1f8, 0xfd, 0x2, 0xcac, 0xcad, 0x7, 0x12d, 
       0x2, 0x2, 0xcad, 0xcb, 0x3, 0x2, 0x2, 0x2, 0xcae, 0xcb0, 0x7, 0xa8, 
       0x2, 0x2, 0xcaf, 0xcb1, 0x7, 0x61, 0x2, 0x2, 0xcb0, 0xcaf, 0x3, 0x2, 
       0x2, 0x2, 0xcb0, 0xcb1, 0x3, 0x2, 0x2, 0x2, 0xcb1, 0xcb3, 0x3, 0x2, 
       0x2, 0x2, 0xcb2, 0xcb4, 0x7, 0x48, 0x2, 0x2, 0xcb3, 0xcb2, 0x3, 0x2, 
       0x2, 0x2, 0xcb3, 0xcb4, 0x3, 0x2, 0x2, 0x2, 0xcb4, 0xcb5, 0x3, 0x2, 
       0x2, 0x2, 0xcb5, 0xcba, 0x5, 0x1f8, 0xfd, 0x2, 0xcb6, 0xcb8, 0x7, 
       0xd, 0x2, 0x2, 0xcb7, 0xcb6, 0x3, 0x2, 0x2, 0x2, 0xcb7, 0xcb8, 0x3, 
       0x2, 0x2, 0x2, 0xcb8, 0xcb9, 0x3, 0x2, 0x2, 0x2, 0xcb9, 0xcbb, 0x5, 
       0x210, 0x109, 0x2, 0xcba, 0xcb7, 0x3, 0x2, 0x2, 0x2, 0xcba, 0xcbb, 
       0x3, 0x2, 0x2, 0x2, 0xcbb, 0xcbc, 0x3, 0x2, 0x2, 0x2, 0xcbc, 0xcbd, 
       0x7, 0x8c, 0x2, 0x2, 0xcbd, 0xcc2, 0x5, 0xba, 0x5e, 0x2, 0xcbe, 0xcbf, 
       0x7, 0x408, 0x2, 0x2, 0xcbf, 0xcc1, 0x5, 0xba, 0x5e, 0x2, 0xcc0, 
       0xcbe, 0x3, 0x2, 0x2, 0x2, 0xcc1, 0xcc4, 0x3, 0x2, 0x2, 0x2, 0xcc2, 
       0xcc0, 0x3, 0x2, 0x2, 0x2, 0xcc2, 0xcc3, 0x3, 0x2, 0x2, 0x2, 0xcc3, 
       0xcc7, 0x3, 0x2, 0x2, 0x2, 0xcc4, 0xcc2, 0x3, 0x2, 0x2, 0x2, 0xcc5, 
       0xcc6, 0x7, 0xae, 0x2, 0x2, 0xcc6, 0xcc8, 0x5, 0x25e, 0x130, 0x2, 
       0xcc7, 0xcc5, 0x3, 0x2, 0x2, 0x2, 0xcc7, 0xcc8, 0x3, 0x2, 0x2, 0x2, 
       0xcc8, 0xcca, 0x3, 0x2, 0x2, 0x2, 0xcc9, 0xccb, 0x5, 0xd0, 0x69, 
       0x2, 0xcca, 0xcc9, 0x3, 0x2, 0x2, 0x2, 0xcca, 0xccb, 0x3, 0x2, 0x2, 
       0x2, 0xccb, 0xccd, 0x3, 0x2, 0x2, 0x2, 0xccc, 0xcce, 0x5, 0x100, 
       0x81, 0x2, 0xccd, 0xccc, 0x3, 0x2, 0x2, 0x2, 0xccd, 0xcce, 0x3, 0x2, 
       0x2, 0x2, 0xcce, 0xcd, 0x3, 0x2, 0x2, 0x2, 0xccf, 0xcd1, 0x7, 0xa8, 
       0x2, 0x2, 0xcd0, 0xcd2, 0x7, 0x61, 0x2, 0x2, 0xcd1, 0xcd0, 0x3, 0x2, 
       0x2, 0x2, 0xcd1, 0xcd2, 0x3, 0x2, 0x2, 0x2, 0xcd2, 0xcd4, 0x3, 0x2, 
       0x2, 0x2, 0xcd3, 0xcd5, 0x7, 0x48, 0x2, 0x2, 0xcd4, 0xcd3, 0x3, 0x2, 
       0x2, 0x2, 0xcd4, 0xcd5, 0x3, 0x2, 0x2, 0x2, 0xcd5, 0xcd6, 0x3, 0x2, 
       0x2, 0x2, 0xcd6, 0xcd7, 0x5, 0xd4, 0x6b, 0x2, 0xcd7, 0xcd8, 0x7, 
       0x8c, 0x2, 0x2, 0xcd8, 0xcdd, 0x5, 0xba, 0x5e, 0x2, 0xcd9, 0xcda, 
       0x7, 0x408, 0x2, 0x2, 0xcda, 0xcdc, 0x5, 0xba, 0x5e, 0x2, 0xcdb, 
       0xcd9, 0x3, 0x2, 0x2, 0x2, 0xcdc, 0xcdf, 0x3, 0x2, 0x2, 0x2, 0xcdd, 
       0xcdb, 0x3, 0x2, 0x2, 0x2, 0xcdd, 0xcde, 0x3, 0x2, 0x2, 0x2, 0xcde, 
       0xce2, 0x3, 0x2, 0x2, 0x2, 0xcdf, 0xcdd, 0x3, 0x2, 0x2, 0x2, 0xce0, 
       0xce1, 0x7, 0xae, 0x2, 0x2, 0xce1, 0xce3, 0x5, 0x25e, 0x130, 0x2, 
       0xce2, 0xce0, 0x3, 0x2, 0x2, 0x2, 0xce2, 0xce3, 0x3, 0x2, 0x2, 0x2, 
       0xce3, 0xcf, 0x3, 0x2, 0x2, 0x2, 0xce4, 0xce5, 0x7, 0x71, 0x2, 0x2, 
       0xce5, 0xce6, 0x7, 0x12, 0x2, 0x2, 0xce6, 0xceb, 0x5, 0xd2, 0x6a, 
       0x2, 0xce7, 0xce8, 0x7, 0x408, 0x2, 0x2, 0xce8, 0xcea, 0x5, 0xd2, 
       0x6a, 0x2, 0xce9, 0xce7, 0x3, 0x2, 0x2, 0x2, 0xcea, 0xced, 0x3, 0x2, 
       0x2, 0x2, 0xceb, 0xce9, 0x3, 0x2, 0x2, 0x2, 0xceb, 0xcec, 0x3, 0x2, 
       0x2, 0x2, 0xcec, 0xd1, 0x3, 0x2, 0x2, 0x2, 0xced, 0xceb, 0x3, 0x2, 
       0x2, 0x2, 0xcee, 0xcf0, 0x5, 0x25e, 0x130, 0x2, 0xcef, 0xcf1, 0x9, 
       0x2d, 0x2, 0x2, 0xcf0, 0xcef, 0x3, 0x2, 0x2, 0x2, 0xcf0, 0xcf1, 0x3, 
       0x2, 0x2, 0x2, 0xcf1, 0xd3, 0x3, 0x2, 0x2, 0x2, 0xcf2, 0xcf7, 0x5, 
       0xd6, 0x6c, 0x2, 0xcf3, 0xcf4, 0x7, 0x408, 0x2, 0x2, 0xcf4, 0xcf6, 
       0x5, 0xd6, 0x6c, 0x2, 0xcf5, 0xcf3, 0x3, 0x2, 0x2, 0x2, 0xcf6, 0xcf9, 
       0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcf5, 0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcf8, 
       0x3, 0x2, 0x2, 0x2, 0xcf8, 0xd5, 0x3, 0x2, 0x2, 0x2, 0xcf9, 0xcf7, 
       0x3, 0x2, 0x2, 0x2, 0xcfa, 0xcfe, 0x5, 0xd8, 0x6d, 0x2, 0xcfb, 0xcfd, 
       0x5, 0xde, 0x70, 0x2, 0xcfc, 0xcfb, 0x3, 0x2, 0x2, 0x2, 0xcfd, 0xd00, 
       0x3, 0x2, 0x2, 0x2, 0xcfe, 0xcfc, 0x3, 0x2, 0x2, 0x2, 0xcfe, 0xcff, 
       0x3, 0x2, 0x2, 0x2, 0xcff, 0xd0c, 0x3, 0x2, 0x2, 0x2, 0xd00, 0xcfe, 
       0x3, 0x2, 0x2, 0x2, 0xd01, 0xd02, 0x7, 0x406, 0x2, 0x2, 0xd02, 0xd06, 
       0x5, 0xd8, 0x6d, 0x2, 0xd03, 0xd05, 0x5, 0xde, 0x70, 0x2, 0xd04, 
       0xd03, 0x3, 0x2, 0x2, 0x2, 0xd05, 0xd08, 0x3, 0x2, 0x2, 0x2, 0xd06, 
       0xd04, 0x3, 0x2, 0x2, 0x2, 0xd06, 0xd07, 0x3, 0x2, 0x2, 0x2, 0xd07, 
       0xd09, 0x3, 0x2, 0x2, 0x2, 0xd08, 0xd06, 0x3, 0x2, 0x2, 0x2, 0xd09, 
       0xd0a, 0x7, 0x407, 0x2, 0x2, 0xd0a, 0xd0c, 0x3, 0x2, 0x2, 0x2, 0xd0b, 
       0xcfa, 0x3, 0x2, 0x2, 0x2, 0xd0b, 0xd01, 0x3, 0x2, 0x2, 0x2, 0xd0c, 
       0xd7, 0x3, 0x2, 0x2, 0x2, 0xd0d, 0xd13, 0x5, 0x1f8, 0xfd, 0x2, 0xd0e, 
       0xd0f, 0x7, 0x75, 0x2, 0x2, 0xd0f, 0xd10, 0x7, 0x406, 0x2, 0x2, 0xd10, 
       0xd11, 0x5, 0x230, 0x119, 0x2, 0xd11, 0xd12, 0x7, 0x407, 0x2, 0x2, 
       0xd12, 0xd14, 0x3, 0x2, 0x2, 0x2, 0xd13, 0xd0e, 0x3, 0x2, 0x2, 0x2, 
       0xd13, 0xd14, 0x3, 0x2, 0x2, 0x2, 0xd14, 0xd19, 0x3, 0x2, 0x2, 0x2, 
       0xd15, 0xd17, 0x7, 0xd, 0x2, 0x2, 0xd16, 0xd15, 0x3, 0x2, 0x2, 0x2, 
       0xd16, 0xd17, 0x3, 0x2, 0x2, 0x2, 0xd17, 0xd18, 0x3, 0x2, 0x2, 0x2, 
       0xd18, 0xd1a, 0x5, 0x210, 0x109, 0x2, 0xd19, 0xd16, 0x3, 0x2, 0x2, 
       0x2, 0xd19, 0xd1a, 0x3, 0x2, 0x2, 0x2, 0xd1a, 0xd23, 0x3, 0x2, 0x2, 
       0x2, 0xd1b, 0xd20, 0x5, 0xda, 0x6e, 0x2, 0xd1c, 0xd1d, 0x7, 0x408, 
       0x2, 0x2, 0xd1d, 0xd1f, 0x5, 0xda, 0x6e, 0x2, 0xd1e, 0xd1c, 0x3, 
       0x2, 0x2, 0x2, 0xd1f, 0xd22, 0x3, 0x2, 0x2, 0x2, 0xd20, 0xd1e, 0x3, 
       0x2, 0x2, 0x2, 0xd20, 0xd21, 0x3, 0x2, 0x2, 0x2, 0xd21, 0xd24, 0x3, 
       0x2, 0x2, 0x2, 0xd22, 0xd20, 0x3, 0x2, 0x2, 0x2, 0xd23, 0xd1b, 0x3, 
       0x2, 0x2, 0x2, 0xd23, 0xd24, 0x3, 0x2, 0x2, 0x2, 0xd24, 0xd36, 0x3, 
       0x2, 0x2, 0x2, 0xd25, 0xd2b, 0x5, 0xb4, 0x5b, 0x2, 0xd26, 0xd27, 
       0x7, 0x406, 0x2, 0x2, 0xd27, 0xd28, 0x5, 0xb4, 0x5b, 0x2, 0xd28, 
       0xd29, 0x7, 0x407, 0x2, 0x2, 0xd29, 0xd2b, 0x3, 0x2, 0x2, 0x2, 0xd2a, 
       0xd25, 0x3, 0x2, 0x2, 0x2, 0xd2a, 0xd26, 0x3, 0x2, 0x2, 0x2, 0xd2b, 
       0xd2d, 0x3, 0x2, 0x2, 0x2, 0xd2c, 0xd2e, 0x7, 0xd, 0x2, 0x2, 0xd2d, 
       0xd2c, 0x3, 0x2, 0x2, 0x2, 0xd2d, 0xd2e, 0x3, 0x2, 0x2, 0x2, 0xd2e, 
       0xd2f, 0x3, 0x2, 0x2, 0x2, 0xd2f, 0xd30, 0x5, 0x210, 0x109, 0x2, 
       0xd30, 0xd36, 0x3, 0x2, 0x2, 0x2, 0xd31, 0xd32, 0x7, 0x406, 0x2, 
       0x2, 0xd32, 0xd33, 0x5, 0xd4, 0x6b, 0x2, 0xd33, 0xd34, 0x7, 0x407, 
       0x2, 0x2, 0xd34, 0xd36, 0x3, 0x2, 0x2, 0x2, 0xd35, 0xd0d, 0x3, 0x2, 
       0x2, 0x2, 0xd35, 0xd2a, 0x3, 0x2, 0x2, 0x2, 0xd35, 0xd31, 0x3, 0x2, 
       0x2, 0x2, 0xd36, 0xd9, 0x3, 0x2, 0x2, 0x2, 0xd37, 0xd38, 0x9, 0x2e, 
       0x2, 0x2, 0xd38, 0xd3b, 0x9, 0x14, 0x2, 0x2, 0xd39, 0xd3a, 0x7, 0x3c, 
       0x2, 0x2, 0xd3a, 0xd3c, 0x5, 0xdc, 0x6f, 0x2, 0xd3b, 0xd39, 0x3, 
       0x2, 0x2, 0x2, 0xd3b, 0xd3c, 0x3, 0x2, 0x2, 0x2, 0xd3c, 0xd3d, 0x3, 
       0x2, 0x2, 0x2, 0xd3d, 0xd3e, 0x7, 0x406, 0x2, 0x2, 0xd3e, 0xd3f, 
       0x5, 0x230, 0x119, 0x2, 0xd3f, 0xd40, 0x7, 0x407, 0x2, 0x2, 0xd40, 
       0xdb, 0x3, 0x2, 0x2, 0x2, 0xd41, 0xd47, 0x7, 0x53, 0x2, 0x2, 0xd42, 
       0xd43, 0x7, 0x71, 0x2, 0x2, 0xd43, 0xd47, 0x7, 0x12, 0x2, 0x2, 0xd44, 
       0xd45, 0x7, 0x44, 0x2, 0x2, 0xd45, 0xd47, 0x7, 0x12, 0x2, 0x2, 0xd46, 
       0xd41, 0x3, 0x2, 0x2, 0x2, 0xd46, 0xd42, 0x3, 0x2, 0x2, 0x2, 0xd46, 
       0xd44, 0x3, 0x2, 0x2, 0x2, 0xd47, 0xdd, 0x3, 0x2, 0x2, 0x2, 0xd48, 
       0xd4a, 0x9, 0x2f, 0x2, 0x2, 0xd49, 0xd48, 0x3, 0x2, 0x2, 0x2, 0xd49, 
       0xd4a, 0x3, 0x2, 0x2, 0x2, 0xd4a, 0xd4b, 0x3, 0x2, 0x2, 0x2, 0xd4b, 
       0xd4c, 0x7, 0x53, 0x2, 0x2, 0xd4c, 0xd54, 0x5, 0xd8, 0x6d, 0x2, 0xd4d, 
       0xd4e, 0x7, 0x6c, 0x2, 0x2, 0xd4e, 0xd55, 0x5, 0x25e, 0x130, 0x2, 
       0xd4f, 0xd50, 0x7, 0xab, 0x2, 0x2, 0xd50, 0xd51, 0x7, 0x406, 0x2, 
       0x2, 0xd51, 0xd52, 0x5, 0x230, 0x119, 0x2, 0xd52, 0xd53, 0x7, 0x407, 
       0x2, 0x2, 0xd53, 0xd55, 0x3, 0x2, 0x2, 0x2, 0xd54, 0xd4d, 0x3, 0x2, 
       0x2, 0x2, 0xd54, 0xd4f, 0x3, 0x2, 0x2, 0x2, 0xd54, 0xd55, 0x3, 0x2, 
       0x2, 0x2, 0xd55, 0xd75, 0x3, 0x2, 0x2, 0x2, 0xd56, 0xd57, 0x7, 0x9b, 
       0x2, 0x2, 0xd57, 0xd5a, 0x5, 0xd8, 0x6d, 0x2, 0xd58, 0xd59, 0x7, 
       0x6c, 0x2, 0x2, 0xd59, 0xd5b, 0x5, 0x25e, 0x130, 0x2, 0xd5a, 0xd58, 
       0x3, 0x2, 0x2, 0x2, 0xd5a, 0xd5b, 0x3, 0x2, 0x2, 0x2, 0xd5b, 0xd75, 
       0x3, 0x2, 0x2, 0x2, 0xd5c, 0xd5e, 0x9, 0x30, 0x2, 0x2, 0xd5d, 0xd5f, 
       0x7, 0x73, 0x2, 0x2, 0xd5e, 0xd5d, 0x3, 0x2, 0x2, 0x2, 0xd5e, 0xd5f, 
       0x3, 0x2, 0x2, 0x2, 0xd5f, 0xd60, 0x3, 0x2, 0x2, 0x2, 0xd60, 0xd61, 
       0x7, 0x53, 0x2, 0x2, 0xd61, 0xd69, 0x5, 0xd8, 0x6d, 0x2, 0xd62, 0xd63, 
       0x7, 0x6c, 0x2, 0x2, 0xd63, 0xd6a, 0x5, 0x25e, 0x130, 0x2, 0xd64, 
       0xd65, 0x7, 0xab, 0x2, 0x2, 0xd65, 0xd66, 0x7, 0x406, 0x2, 0x2, 0xd66, 
       0xd67, 0x5, 0x230, 0x119, 0x2, 0xd67, 0xd68, 0x7, 0x407, 0x2, 0x2, 
       0xd68, 0xd6a, 0x3, 0x2, 0x2, 0x2, 0xd69, 0xd62, 0x3, 0x2, 0x2, 0x2, 
       0xd69, 0xd64, 0x3, 0x2, 0x2, 0x2, 0xd6a, 0xd75, 0x3, 0x2, 0x2, 0x2, 
       0xd6b, 0xd70, 0x7, 0x67, 0x2, 0x2, 0xd6c, 0xd6e, 0x9, 0x30, 0x2, 
       0x2, 0xd6d, 0xd6f, 0x7, 0x73, 0x2, 0x2, 0xd6e, 0xd6d, 0x3, 0x2, 0x2, 
       0x2, 0xd6e, 0xd6f, 0x3, 0x2, 0x2, 0x2, 0xd6f, 0xd71, 0x3, 0x2, 0x2, 
       0x2, 0xd70, 0xd6c, 0x3, 0x2, 0x2, 0x2, 0xd70, 0xd71, 0x3, 0x2, 0x2, 
       0x2, 0xd71, 0xd72, 0x3, 0x2, 0x2, 0x2, 0xd72, 0xd73, 0x7, 0x53, 0x2, 
       0x2, 0xd73, 0xd75, 0x5, 0xd8, 0x6d, 0x2, 0xd74, 0xd49, 0x3, 0x2, 
       0x2, 0x2, 0xd74, 0xd56, 0x3, 0x2, 0x2, 0x2, 0xd74, 0xd5c, 0x3, 0x2, 
       0x2, 0x2, 0xd74, 0xd6b, 0x3, 0x2, 0x2, 0x2, 0xd75, 0xdf, 0x3, 0x2, 
       0x2, 0x2, 0xd76, 0xd77, 0x7, 0x406, 0x2, 0x2, 0xd77, 0xd78, 0x5, 
       0xe4, 0x73, 0x2, 0xd78, 0xd79, 0x7, 0x407, 0x2, 0x2, 0xd79, 0xd7f, 
       0x3, 0x2, 0x2, 0x2, 0xd7a, 0xd7b, 0x7, 0x406, 0x2, 0x2, 0xd7b, 0xd7c, 
       0x5, 0xe0, 0x71, 0x2, 0xd7c, 0xd7d, 0x7, 0x407, 0x2, 0x2, 0xd7d, 
       0xd7f, 0x3, 0x2, 0x2, 0x2, 0xd7e, 0xd76, 0x3, 0x2, 0x2, 0x2, 0xd7e, 
       0xd7a, 0x3, 0x2, 0x2, 0x2, 0xd7f, 0xe1, 0x3, 0x2, 0x2, 0x2, 0xd80, 
       0xd81, 0x7, 0x406, 0x2, 0x2, 0xd81, 0xd82, 0x5, 0xe6, 0x74, 0x2, 
       0xd82, 0xd83, 0x7, 0x407, 0x2, 0x2, 0xd83, 0xd89, 0x3, 0x2, 0x2, 
       0x2, 0xd84, 0xd85, 0x7, 0x406, 0x2, 0x2, 0xd85, 0xd86, 0x5, 0xe2, 
       0x72, 0x2, 0xd86, 0xd87, 0x7, 0x407, 0x2, 0x2, 0xd87, 0xd89, 0x3, 
       0x2, 0x2, 0x2, 0xd88, 0xd80, 0x3, 0x2, 0x2, 0x2, 0xd88, 0xd84, 0x3, 
       0x2, 0x2, 0x2, 0xd89, 0xe3, 0x3, 0x2, 0x2, 0x2, 0xd8a, 0xd8e, 0x7, 
       0x8b, 0x2, 0x2, 0xd8b, 0xd8d, 0x5, 0xec, 0x77, 0x2, 0xd8c, 0xd8b, 
       0x3, 0x2, 0x2, 0x2, 0xd8d, 0xd90, 0x3, 0x2, 0x2, 0x2, 0xd8e, 0xd8c, 
       0x3, 0x2, 0x2, 0x2, 0xd8e, 0xd8f, 0x3, 0x2, 0x2, 0x2, 0xd8f, 0xd91, 
       0x3, 0x2, 0x2, 0x2, 0xd90, 0xd8e, 0x3, 0x2, 0x2, 0x2, 0xd91, 0xd93, 
       0x5, 0xee, 0x78, 0x2, 0xd92, 0xd94, 0x5, 0xf2, 0x7a, 0x2, 0xd93, 
       0xd92, 0x3, 0x2, 0x2, 0x2, 0xd93, 0xd94, 0x3, 0x2, 0x2, 0x2, 0xd94, 
       0xd96, 0x3, 0x2, 0x2, 0x2, 0xd95, 0xd97, 0x5, 0xf8, 0x7d, 0x2, 0xd96, 
       0xd95, 0x3, 0x2, 0x2, 0x2, 0xd96, 0xd97, 0x3, 0x2, 0x2, 0x2, 0xd97, 
       0xd99, 0x3, 0x2, 0x2, 0x2, 0xd98, 0xd9a, 0x5, 0xfa, 0x7e, 0x2, 0xd99, 
       0xd98, 0x3, 0x2, 0x2, 0x2, 0xd99, 0xd9a, 0x3, 0x2, 0x2, 0x2, 0xd9a, 
       0xd9c, 0x3, 0x2, 0x2, 0x2, 0xd9b, 0xd9d, 0x5, 0xfc, 0x7f, 0x2, 0xd9c, 
       0xd9b, 0x3, 0x2, 0x2, 0x2, 0xd9c, 0xd9d, 0x3, 0x2, 0x2, 0x2, 0xd9d, 
       0xd9f, 0x3, 0x2, 0x2, 0x2, 0xd9e, 0xda0, 0x5, 0xd0, 0x69, 0x2, 0xd9f, 
       0xd9e, 0x3, 0x2, 0x2, 0x2, 0xd9f, 0xda0, 0x3, 0x2, 0x2, 0x2, 0xda0, 
       0xda2, 0x3, 0x2, 0x2, 0x2, 0xda1, 0xda3, 0x5, 0x100, 0x81, 0x2, 0xda2, 
       0xda1, 0x3, 0x2, 0x2, 0x2, 0xda2, 0xda3, 0x3, 0x2, 0x2, 0x2, 0xda3, 
       0xdbf, 0x3, 0x2, 0x2, 0x2, 0xda4, 0xda8, 0x7, 0x8b, 0x2, 0x2, 0xda5, 
       0xda7, 0x5, 0xec, 0x77, 0x2, 0xda6, 0xda5, 0x3, 0x2, 0x2, 0x2, 0xda7, 
       0xdaa, 0x3, 0x2, 0x2, 0x2, 0xda8, 0xda6, 0x3, 0x2, 0x2, 0x2, 0xda8, 
       0xda9, 0x3, 0x2, 0x2, 0x2, 0xda9, 0xdab, 0x3, 0x2, 0x2, 0x2, 0xdaa, 
       0xda8, 0x3, 0x2, 0x2, 0x2, 0xdab, 0xdad, 0x5, 0xee, 0x78, 0x2, 0xdac, 
       0xdae, 0x5, 0xf8, 0x7d, 0x2, 0xdad, 0xdac, 0x3, 0x2, 0x2, 0x2, 0xdad, 
       0xdae, 0x3, 0x2, 0x2, 0x2, 0xdae, 0xdb0, 0x3, 0x2, 0x2, 0x2, 0xdaf, 
       0xdb1, 0x5, 0xfa, 0x7e, 0x2, 0xdb0, 0xdaf, 0x3, 0x2, 0x2, 0x2, 0xdb0, 
       0xdb1, 0x3, 0x2, 0x2, 0x2, 0xdb1, 0xdb3, 0x3, 0x2, 0x2, 0x2, 0xdb2, 
       0xdb4, 0x5, 0xfc, 0x7f, 0x2, 0xdb3, 0xdb2, 0x3, 0x2, 0x2, 0x2, 0xdb3, 
       0xdb4, 0x3, 0x2, 0x2, 0x2, 0xdb4, 0xdb6, 0x3, 0x2, 0x2, 0x2, 0xdb5, 
       0xdb7, 0x5, 0xd0, 0x69, 0x2, 0xdb6, 0xdb5, 0x3, 0x2, 0x2, 0x2, 0xdb6, 
       0xdb7, 0x3, 0x2, 0x2, 0x2, 0xdb7, 0xdb9, 0x3, 0x2, 0x2, 0x2, 0xdb8, 
       0xdba, 0x5, 0x100, 0x81, 0x2, 0xdb9, 0xdb8, 0x3, 0x2, 0x2, 0x2, 0xdb9, 
       0xdba, 0x3, 0x2, 0x2, 0x2, 0xdba, 0xdbc, 0x3, 0x2, 0x2, 0x2, 0xdbb, 
       0xdbd, 0x5, 0xf2, 0x7a, 0x2, 0xdbc, 0xdbb, 0x3, 0x2, 0x2, 0x2, 0xdbc, 
       0xdbd, 0x3, 0x2, 0x2, 0x2, 0xdbd, 0xdbf, 0x3, 0x2, 0x2, 0x2, 0xdbe, 
       0xd8a, 0x3, 0x2, 0x2, 0x2, 0xdbe, 0xda4, 0x3, 0x2, 0x2, 0x2, 0xdbf, 
       0xe5, 0x3, 0x2, 0x2, 0x2, 0xdc0, 0xdc4, 0x7, 0x8b, 0x2, 0x2, 0xdc1, 
       0xdc3, 0x5, 0xec, 0x77, 0x2, 0xdc2, 0xdc1, 0x3, 0x2, 0x2, 0x2, 0xdc3, 
       0xdc6, 0x3, 0x2, 0x2, 0x2, 0xdc4, 0xdc2, 0x3, 0x2, 0x2, 0x2, 0xdc4, 
       0xdc5, 0x3, 0x2, 0x2, 0x2, 0xdc5, 0xdc7, 0x3, 0x2, 0x2, 0x2, 0xdc6, 
       0xdc4, 0x3, 0x2, 0x2, 0x2, 0xdc7, 0xdc9, 0x5, 0xee, 0x78, 0x2, 0xdc8, 
       0xdca, 0x5, 0xf8, 0x7d, 0x2, 0xdc9, 0xdc8, 0x3, 0x2, 0x2, 0x2, 0xdc9, 
       0xdca, 0x3, 0x2, 0x2, 0x2, 0xdca, 0xdcc, 0x3, 0x2, 0x2, 0x2, 0xdcb, 
       0xdcd, 0x5, 0xfa, 0x7e, 0x2, 0xdcc, 0xdcb, 0x3, 0x2, 0x2, 0x2, 0xdcc, 
       0xdcd, 0x3, 0x2, 0x2, 0x2, 0xdcd, 0xdcf, 0x3, 0x2, 0x2, 0x2, 0xdce, 
       0xdd0, 0x5, 0xfc, 0x7f, 0x2, 0xdcf, 0xdce, 0x3, 0x2, 0x2, 0x2, 0xdcf, 
       0xdd0, 0x3, 0x2, 0x2, 0x2, 0xdd0, 0xdd2, 0x3, 0x2, 0x2, 0x2, 0xdd1, 
       0xdd3, 0x5, 0xd0, 0x69, 0x2, 0xdd2, 0xdd1, 0x3, 0x2, 0x2, 0x2, 0xdd2, 
       0xdd3, 0x3, 0x2, 0x2, 0x2, 0xdd3, 0xdd5, 0x3, 0x2, 0x2, 0x2, 0xdd4, 
       0xdd6, 0x5, 0x100, 0x81, 0x2, 0xdd5, 0xdd4, 0x3, 0x2, 0x2, 0x2, 0xdd5, 
       0xdd6, 0x3, 0x2, 0x2, 0x2, 0xdd6, 0xe7, 0x3, 0x2, 0x2, 0x2, 0xdd7, 
       0xdd9, 0x7, 0xa4, 0x2, 0x2, 0xdd8, 0xdda, 0x9, 0x29, 0x2, 0x2, 0xdd9, 
       0xdd8, 0x3, 0x2, 0x2, 0x2, 0xdd9, 0xdda, 0x3, 0x2, 0x2, 0x2, 0xdda, 
       0xddb, 0x3, 0x2, 0x2, 0x2, 0xddb, 0xddc, 0x5, 0xe2, 0x72, 0x2, 0xddc, 
       0xe9, 0x3, 0x2, 0x2, 0x2, 0xddd, 0xddf, 0x7, 0xa4, 0x2, 0x2, 0xdde, 
       0xde0, 0x9, 0x29, 0x2, 0x2, 0xddf, 0xdde, 0x3, 0x2, 0x2, 0x2, 0xddf, 
       0xde0, 0x3, 0x2, 0x2, 0x2, 0xde0, 0xde3, 0x3, 0x2, 0x2, 0x2, 0xde1, 
       0xde4, 0x5, 0xe6, 0x74, 0x2, 0xde2, 0xde4, 0x5, 0xe2, 0x72, 0x2, 
       0xde3, 0xde1, 0x3, 0x2, 0x2, 0x2, 0xde3, 0xde2, 0x3, 0x2, 0x2, 0x2, 
       0xde4, 0xeb, 0x3, 0x2, 0x2, 0x2, 0xde5, 0xdee, 0x9, 0x31, 0x2, 0x2, 
       0xde6, 0xdee, 0x7, 0x46, 0x2, 0x2, 0xde7, 0xdee, 0x7, 0x9b, 0x2, 
       0x2, 0xde8, 0xdee, 0x7, 0x97, 0x2, 0x2, 0xde9, 0xdee, 0x7, 0x95, 
       0x2, 0x2, 0xdea, 0xdee, 0x7, 0x21a, 0x2, 0x2, 0xdeb, 0xdee, 0x9, 
       0x32, 0x2, 0x2, 0xdec, 0xdee, 0x7, 0x96, 0x2, 0x2, 0xded, 0xde5, 
       0x3, 0x2, 0x2, 0x2, 0xded, 0xde6, 0x3, 0x2, 0x2, 0x2, 0xded, 0xde7, 
       0x3, 0x2, 0x2, 0x2, 0xded, 0xde8, 0x3, 0x2, 0x2, 0x2, 0xded, 0xde9, 
       0x3, 0x2, 0x2, 0x2, 0xded, 0xdea, 0x3, 0x2, 0x2, 0x2, 0xded, 0xdeb, 
       0x3, 0x2, 0x2, 0x2, 0xded, 0xdec, 0x3, 0x2, 0x2, 0x2, 0xdee, 0xed, 
       0x3, 0x2, 0x2, 0x2, 0xdef, 0xdf2, 0x7, 0x3f5, 0x2, 0x2, 0xdf0, 0xdf2, 
       0x5, 0xf0, 0x79, 0x2, 0xdf1, 0xdef, 0x3, 0x2, 0x2, 0x2, 0xdf1, 0xdf0, 
       0x3, 0x2, 0x2, 0x2, 0xdf2, 0xdf7, 0x3, 0x2, 0x2, 0x2, 0xdf3, 0xdf4, 
       0x7, 0x408, 0x2, 0x2, 0xdf4, 0xdf6, 0x5, 0xf0, 0x79, 0x2, 0xdf5, 
       0xdf3, 0x3, 0x2, 0x2, 0x2, 0xdf6, 0xdf9, 0x3, 0x2, 0x2, 0x2, 0xdf7, 
       0xdf5, 0x3, 0x2, 0x2, 0x2, 0xdf7, 0xdf8, 0x3, 0x2, 0x2, 0x2, 0xdf8, 
       0xef, 0x3, 0x2, 0x2, 0x2, 0xdf9, 0xdf7, 0x3, 0x2, 0x2, 0x2, 0xdfa, 
       0xdfb, 0x5, 0x1f6, 0xfc, 0x2, 0xdfb, 0xdfc, 0x7, 0x405, 0x2, 0x2, 
       0xdfc, 0xdfd, 0x7, 0x3f5, 0x2, 0x2, 0xdfd, 0xe18, 0x3, 0x2, 0x2, 
       0x2, 0xdfe, 0xe03, 0x5, 0x1fa, 0xfe, 0x2, 0xdff, 0xe01, 0x7, 0xd, 
       0x2, 0x2, 0xe00, 0xdff, 0x3, 0x2, 0x2, 0x2, 0xe00, 0xe01, 0x3, 0x2, 
       0x2, 0x2, 0xe01, 0xe02, 0x3, 0x2, 0x2, 0x2, 0xe02, 0xe04, 0x5, 0x210, 
       0x109, 0x2, 0xe03, 0xe00, 0x3, 0x2, 0x2, 0x2, 0xe03, 0xe04, 0x3, 
       0x2, 0x2, 0x2, 0xe04, 0xe18, 0x3, 0x2, 0x2, 0x2, 0xe05, 0xe0a, 0x5, 
       0x24a, 0x126, 0x2, 0xe06, 0xe08, 0x7, 0xd, 0x2, 0x2, 0xe07, 0xe06, 
       0x3, 0x2, 0x2, 0x2, 0xe07, 0xe08, 0x3, 0x2, 0x2, 0x2, 0xe08, 0xe09, 
       0x3, 0x2, 0x2, 0x2, 0xe09, 0xe0b, 0x5, 0x210, 0x109, 0x2, 0xe0a, 
       0xe07, 0x3, 0x2, 0x2, 0x2, 0xe0a, 0xe0b, 0x3, 0x2, 0x2, 0x2, 0xe0b, 
       0xe18, 0x3, 0x2, 0x2, 0x2, 0xe0c, 0xe0d, 0x7, 0x421, 0x2, 0x2, 0xe0d, 
       0xe0f, 0x7, 0x3ec, 0x2, 0x2, 0xe0e, 0xe0c, 0x3, 0x2, 0x2, 0x2, 0xe0e, 
       0xe0f, 0x3, 0x2, 0x2, 0x2, 0xe0f, 0xe10, 0x3, 0x2, 0x2, 0x2, 0xe10, 
       0xe15, 0x5, 0x25e, 0x130, 0x2, 0xe11, 0xe13, 0x7, 0xd, 0x2, 0x2, 
       0xe12, 0xe11, 0x3, 0x2, 0x2, 0x2, 0xe12, 0xe13, 0x3, 0x2, 0x2, 0x2, 
       0xe13, 0xe14, 0x3, 0x2, 0x2, 0x2, 0xe14, 0xe16, 0x5, 0x210, 0x109, 
       0x2, 0xe15, 0xe12, 0x3, 0x2, 0x2, 0x2, 0xe15, 0xe16, 0x3, 0x2, 0x2, 
       0x2, 0xe16, 0xe18, 0x3, 0x2, 0x2, 0x2, 0xe17, 0xdfa, 0x3, 0x2, 0x2, 
       0x2, 0xe17, 0xdfe, 0x3, 0x2, 0x2, 0x2, 0xe17, 0xe05, 0x3, 0x2, 0x2, 
       0x2, 0xe17, 0xe0e, 0x3, 0x2, 0x2, 0x2, 0xe18, 0xf1, 0x3, 0x2, 0x2, 
       0x2, 0xe19, 0xe1a, 0x7, 0x50, 0x2, 0x2, 0xe1a, 0xe1f, 0x5, 0xbc, 
       0x5f, 0x2, 0xe1b, 0xe1c, 0x7, 0x408, 0x2, 0x2, 0xe1c, 0xe1e, 0x5, 
       0xbc, 0x5f, 0x2, 0xe1d, 0xe1b, 0x3, 0x2, 0x2, 0x2, 0xe1e, 0xe21, 
       0x3, 0x2, 0x2, 0x2, 0xe1f, 0xe1d, 0x3, 0x2, 0x2, 0x2, 0xe1f, 0xe20, 
       0x3, 0x2, 0x2, 0x2, 0xe20, 0xe3e, 0x3, 0x2, 0x2, 0x2, 0xe21, 0xe1f, 
       0x3, 0x2, 0x2, 0x2, 0xe22, 0xe23, 0x7, 0x50, 0x2, 0x2, 0xe23, 0xe24, 
       0x7, 0x151, 0x2, 0x2, 0xe24, 0xe3e, 0x7, 0x415, 0x2, 0x2, 0xe25, 
       0xe26, 0x7, 0x50, 0x2, 0x2, 0xe26, 0xe27, 0x7, 0x74, 0x2, 0x2, 0xe27, 
       0xe2b, 0x7, 0x415, 0x2, 0x2, 0xe28, 0xe29, 0x7, 0x18, 0x2, 0x2, 0xe29, 
       0xe2a, 0x7, 0x8c, 0x2, 0x2, 0xe2a, 0xe2c, 0x5, 0x202, 0x102, 0x2, 
       0xe2b, 0xe28, 0x3, 0x2, 0x2, 0x2, 0xe2b, 0xe2c, 0x3, 0x2, 0x2, 0x2, 
       0xe2c, 0xe33, 0x3, 0x2, 0x2, 0x2, 0xe2d, 0xe2f, 0x9, 0x26, 0x2, 0x2, 
       0xe2e, 0xe30, 0x5, 0xf4, 0x7b, 0x2, 0xe2f, 0xe2e, 0x3, 0x2, 0x2, 
       0x2, 0xe30, 0xe31, 0x3, 0x2, 0x2, 0x2, 0xe31, 0xe2f, 0x3, 0x2, 0x2, 
       0x2, 0xe31, 0xe32, 0x3, 0x2, 0x2, 0x2, 0xe32, 0xe34, 0x3, 0x2, 0x2, 
       0x2, 0xe33, 0xe2d, 0x3, 0x2, 0x2, 0x2, 0xe33, 0xe34, 0x3, 0x2, 0x2, 
       0x2, 0xe34, 0xe3b, 0x3, 0x2, 0x2, 0x2, 0xe35, 0xe37, 0x7, 0x5d, 0x2, 
       0x2, 0xe36, 0xe38, 0x5, 0xf6, 0x7c, 0x2, 0xe37, 0xe36, 0x3, 0x2, 
       0x2, 0x2, 0xe38, 0xe39, 0x3, 0x2, 0x2, 0x2, 0xe39, 0xe37, 0x3, 0x2, 
       0x2, 0x2, 0xe39, 0xe3a, 0x3, 0x2, 0x2, 0x2, 0xe3a, 0xe3c, 0x3, 0x2, 
       0x2, 0x2, 0xe3b, 0xe35, 0x3, 0x2, 0x2, 0x2, 0xe3b, 0xe3c, 0x3, 0x2, 
       0x2, 0x2, 0xe3c, 0xe3e, 0x3, 0x2, 0x2, 0x2, 0xe3d, 0xe19, 0x3, 0x2, 
       0x2, 0x2, 0xe3d, 0xe22, 0x3, 0x2, 0x2, 0x2, 0xe3d, 0xe25, 0x3, 0x2, 
       0x2, 0x2, 0xe3e, 0xf3, 0x3, 0x2, 0x2, 0x2, 0xe3f, 0xe40, 0x7, 0x9d, 
       0x2, 0x2, 0xe40, 0xe41, 0x7, 0x12, 0x2, 0x2, 0xe41, 0xe4c, 0x7, 0x415, 
       0x2, 0x2, 0xe42, 0xe44, 0x7, 0x6f, 0x2, 0x2, 0xe43, 0xe42, 0x3, 0x2, 
       0x2, 0x2, 0xe43, 0xe44, 0x3, 0x2, 0x2, 0x2, 0xe44, 0xe45, 0x3, 0x2, 
       0x2, 0x2, 0xe45, 0xe46, 0x7, 0x35, 0x2, 0x2, 0xe46, 0xe47, 0x7, 0x12, 
       0x2, 0x2, 0xe47, 0xe4c, 0x7, 0x415, 0x2, 0x2, 0xe48, 0xe49, 0x7, 
       0x36, 0x2, 0x2, 0xe49, 0xe4a, 0x7, 0x12, 0x2, 0x2, 0xe4a, 0xe4c, 
       0x7, 0x415, 0x2, 0x2, 0xe4b, 0xe3f, 0x3, 0x2, 0x2, 0x2, 0xe4b, 0xe43, 
       0x3, 0x2, 0x2, 0x2, 0xe4b, 0xe48, 0x3, 0x2, 0x2, 0x2, 0xe4c, 0xf5, 
       0x3, 0x2, 0x2, 0x2, 0xe4d, 0xe4e, 0x7, 0x9a, 0x2, 0x2, 0xe4e, 0xe4f, 
       0x7, 0x12, 0x2, 0x2, 0xe4f, 0xe54, 0x7, 0x415, 0x2, 0x2, 0xe50, 0xe51, 
       0x7, 0x9d, 0x2, 0x2, 0xe51, 0xe52, 0x7, 0x12, 0x2, 0x2, 0xe52, 0xe54, 
       0x7, 0x415, 0x2, 0x2, 0xe53, 0xe4d, 0x3, 0x2, 0x2, 0x2, 0xe53, 0xe50, 
       0x3, 0x2, 0x2, 0x2, 0xe54, 0xf7, 0x3, 0x2, 0x2, 0x2, 0xe55, 0xe56, 
       0x7, 0x3f, 0x2, 0x2, 0xe56, 0xe59, 0x5, 0xd4, 0x6b, 0x2, 0xe57, 0xe58, 
       0x7, 0xae, 0x2, 0x2, 0xe58, 0xe5a, 0x5, 0x25e, 0x130, 0x2, 0xe59, 
       0xe57, 0x3, 0x2, 0x2, 0x2, 0xe59, 0xe5a, 0x3, 0x2, 0x2, 0x2, 0xe5a, 
       0xf9, 0x3, 0x2, 0x2, 0x2, 0xe5b, 0xe5c, 0x7, 0x44, 0x2, 0x2, 0xe5c, 
       0xe5d, 0x7, 0x12, 0x2, 0x2, 0xe5d, 0xe62, 0x5, 0xfe, 0x80, 0x2, 0xe5e, 
       0xe5f, 0x7, 0x408, 0x2, 0x2, 0xe5f, 0xe61, 0x5, 0xfe, 0x80, 0x2, 
       0xe60, 0xe5e, 0x3, 0x2, 0x2, 0x2, 0xe61, 0xe64, 0x3, 0x2, 0x2, 0x2, 
       0xe62, 0xe60, 0x3, 0x2, 0x2, 0x2, 0xe62, 0xe63, 0x3, 0x2, 0x2, 0x2, 
       0xe63, 0xe67, 0x3, 0x2, 0x2, 0x2, 0xe64, 0xe62, 0x3, 0x2, 0x2, 0x2, 
       0xe65, 0xe66, 0x7, 0xb0, 0x2, 0x2, 0xe66, 0xe68, 0x7, 0x201, 0x2, 
       0x2, 0xe67, 0xe65, 0x3, 0x2, 0x2, 0x2, 0xe67, 0xe68, 0x3, 0x2, 0x2, 
       0x2, 0xe68, 0xfb, 0x3, 0x2, 0x2, 0x2, 0xe69, 0xe6a, 0x7, 0x45, 0x2, 
       0x2, 0xe6a, 0xe6b, 0x5, 0x25e, 0x130, 0x2, 0xe6b, 0xfd, 0x3, 0x2, 
       0x2, 0x2, 0xe6c, 0xe6e, 0x5, 0x25e, 0x130, 0x2, 0xe6d, 0xe6f, 0x9, 
       0x2d, 0x2, 0x2, 0xe6e, 0xe6d, 0x3, 0x2, 0x2, 0x2, 0xe6e, 0xe6f, 0x3, 
       0x2, 0x2, 0x2, 0xe6f, 0xff, 0x3, 0x2, 0x2, 0x2, 0xe70, 0xe7b, 0x7, 
       0x5b, 0x2, 0x2, 0xe71, 0xe72, 0x5, 0x102, 0x82, 0x2, 0xe72, 0xe73, 
       0x7, 0x408, 0x2, 0x2, 0xe73, 0xe75, 0x3, 0x2, 0x2, 0x2, 0xe74, 0xe71, 
       0x3, 0x2, 0x2, 0x2, 0xe74, 0xe75, 0x3, 0x2, 0x2, 0x2, 0xe75, 0xe76, 
       0x3, 0x2, 0x2, 0x2, 0xe76, 0xe7c, 0x5, 0x102, 0x82, 0x2, 0xe77, 0xe78, 
       0x5, 0x102, 0x82, 0x2, 0xe78, 0xe79, 0x7, 0x1c7, 0x2, 0x2, 0xe79, 
       0xe7a, 0x5, 0x102, 0x82, 0x2, 0xe7a, 0xe7c, 0x3, 0x2, 0x2, 0x2, 0xe7b, 
       0xe74, 0x3, 0x2, 0x2, 0x2, 0xe7b, 0xe77, 0x3, 0x2, 0x2, 0x2, 0xe7c, 
       0x101, 0x3, 0x2, 0x2, 0x2, 0xe7d, 0xe81, 0x5, 0x216, 0x10c, 0x2, 
       0xe7e, 0xe81, 0x5, 0x200, 0x101, 0x2, 0xe7f, 0xe81, 0x5, 0x212, 0x10a, 
       0x2, 0xe80, 0xe7d, 0x3, 0x2, 0x2, 0x2, 0xe80, 0xe7e, 0x3, 0x2, 0x2, 
       0x2, 0xe80, 0xe7f, 0x3, 0x2, 0x2, 0x2, 0xe81, 0x103, 0x3, 0x2, 0x2, 
       0x2, 0xe82, 0xe83, 0x7, 0x21e, 0x2, 0x2, 0xe83, 0xe8c, 0x7, 0x235, 
       0x2, 0x2, 0xe84, 0xe89, 0x5, 0x11a, 0x8e, 0x2, 0xe85, 0xe86, 0x7, 
       0x408, 0x2, 0x2, 0xe86, 0xe88, 0x5, 0x11a, 0x8e, 0x2, 0xe87, 0xe85, 
       0x3, 0x2, 0x2, 0x2, 0xe88, 0xe8b, 0x3, 0x2, 0x2, 0x2, 0xe89, 0xe87, 
       0x3, 0x2, 0x2, 0x2, 0xe89, 0xe8a, 0x3, 0x2, 0x2, 0x2, 0xe8a, 0xe8d, 
       0x3, 0x2, 0x2, 0x2, 0xe8b, 0xe89, 0x3, 0x2, 0x2, 0x2, 0xe8c, 0xe84, 
       0x3, 0x2, 0x2, 0x2, 0xe8c, 0xe8d, 0x3, 0x2, 0x2, 0x2, 0xe8d, 0x105, 
       0x3, 0x2, 0x2, 0x2, 0xe8e, 0xe90, 0x7, 0x11c, 0x2, 0x2, 0xe8f, 0xe91, 
       0x7, 0x24c, 0x2, 0x2, 0xe90, 0xe8f, 0x3, 0x2, 0x2, 0x2, 0xe90, 0xe91, 
       0x3, 0x2, 0x2, 0x2, 0xe91, 0x107, 0x3, 0x2, 0x2, 0x2, 0xe92, 0xe94, 
       0x7, 0x134, 0x2, 0x2, 0xe93, 0xe95, 0x7, 0x24c, 0x2, 0x2, 0xe94, 
       0xe93, 0x3, 0x2, 0x2, 0x2, 0xe94, 0xe95, 0x3, 0x2, 0x2, 0x2, 0xe95, 
       0xe9b, 0x3, 0x2, 0x2, 0x2, 0xe96, 0xe98, 0x7, 0xc, 0x2, 0x2, 0xe97, 
       0xe99, 0x7, 0x1c3, 0x2, 0x2, 0xe98, 0xe97, 0x3, 0x2, 0x2, 0x2, 0xe98, 
       0xe99, 0x3, 0x2, 0x2, 0x2, 0xe99, 0xe9a, 0x3, 0x2, 0x2, 0x2, 0xe9a, 
       0xe9c, 0x7, 0x125, 0x2, 0x2, 0xe9b, 0xe96, 0x3, 0x2, 0x2, 0x2, 0xe9b, 
       0xe9c, 0x3, 0x2, 0x2, 0x2, 0xe9c, 0xea1, 0x3, 0x2, 0x2, 0x2, 0xe9d, 
       0xe9f, 0x7, 0x1c3, 0x2, 0x2, 0xe9e, 0xe9d, 0x3, 0x2, 0x2, 0x2, 0xe9e, 
       0xe9f, 0x3, 0x2, 0x2, 0x2, 0xe9f, 0xea0, 0x3, 0x2, 0x2, 0x2, 0xea0, 
       0xea2, 0x7, 0x7e, 0x2, 0x2, 0xea1, 0xe9e, 0x3, 0x2, 0x2, 0x2, 0xea1, 
       0xea2, 0x3, 0x2, 0x2, 0x2, 0xea2, 0x109, 0x3, 0x2, 0x2, 0x2, 0xea3, 
       0xea5, 0x7, 0x200, 0x2, 0x2, 0xea4, 0xea6, 0x7, 0x24c, 0x2, 0x2, 
       0xea5, 0xea4, 0x3, 0x2, 0x2, 0x2, 0xea5, 0xea6, 0x3, 0x2, 0x2, 0x2, 
       0xea6, 0xeac, 0x3, 0x2, 0x2, 0x2, 0xea7, 0xea9, 0x7, 0xc, 0x2, 0x2, 
       0xea8, 0xeaa, 0x7, 0x1c3, 0x2, 0x2, 0xea9, 0xea8, 0x3, 0x2, 0x2, 
       0x2, 0xea9, 0xeaa, 0x3, 0x2, 0x2, 0x2, 0xeaa, 0xeab, 0x3, 0x2, 0x2, 
       0x2, 0xeab, 0xead, 0x7, 0x125, 0x2, 0x2, 0xeac, 0xea7, 0x3, 0x2, 
       0x2, 0x2, 0xeac, 0xead, 0x3, 0x2, 0x2, 0x2, 0xead, 0xeb2, 0x3, 0x2, 
       0x2, 0x2, 0xeae, 0xeb0, 0x7, 0x1c3, 0x2, 0x2, 0xeaf, 0xeae, 0x3, 
       0x2, 0x2, 0x2, 0xeaf, 0xeb0, 0x3, 0x2, 0x2, 0x2, 0xeb0, 0xeb1, 0x3, 
       0x2, 0x2, 0x2, 0xeb1, 0xeb3, 0x7, 0x7e, 0x2, 0x2, 0xeb2, 0xeaf, 0x3, 
       0x2, 0x2, 0x2, 0xeb2, 0xeb3, 0x3, 0x2, 0x2, 0x2, 0xeb3, 0x10b, 0x3, 
       0x2, 0x2, 0x2, 0xeb4, 0xeb5, 0x7, 0x206, 0x2, 0x2, 0xeb5, 0xeb6, 
       0x5, 0x210, 0x109, 0x2, 0xeb6, 0x10d, 0x3, 0x2, 0x2, 0x2, 0xeb7, 
       0xeb9, 0x7, 0x200, 0x2, 0x2, 0xeb8, 0xeba, 0x7, 0x24c, 0x2, 0x2, 
       0xeb9, 0xeb8, 0x3, 0x2, 0x2, 0x2, 0xeb9, 0xeba, 0x3, 0x2, 0x2, 0x2, 
       0xeba, 0xebb, 0x3, 0x2, 0x2, 0x2, 0xebb, 0xebd, 0x7, 0x9f, 0x2, 0x2, 
       0xebc, 0xebe, 0x7, 0x206, 0x2, 0x2, 0xebd, 0xebc, 0x3, 0x2, 0x2, 
       0x2, 0xebd, 0xebe, 0x3, 0x2, 0x2, 0x2, 0xebe, 0xebf, 0x3, 0x2, 0x2, 
       0x2, 0xebf, 0xec0, 0x5, 0x210, 0x109, 0x2, 0xec0, 0x10f, 0x3, 0x2, 
       0x2, 0x2, 0xec1, 0xec2, 0x7, 0x7e, 0x2, 0x2, 0xec2, 0xec3, 0x7, 0x206, 
       0x2, 0x2, 0xec3, 0xec4, 0x5, 0x210, 0x109, 0x2, 0xec4, 0x111, 0x3, 
       0x2, 0x2, 0x2, 0xec5, 0xec6, 0x7, 0x5f, 0x2, 0x2, 0xec6, 0xec7, 0x7, 
       0x25e, 0x2, 0x2, 0xec7, 0xecc, 0x5, 0x11c, 0x8f, 0x2, 0xec8, 0xec9, 
       0x7, 0x408, 0x2, 0x2, 0xec9, 0xecb, 0x5, 0x11c, 0x8f, 0x2, 0xeca, 
       0xec8, 0x3, 0x2, 0x2, 0x2, 0xecb, 0xece, 0x3, 0x2, 0x2, 0x2, 0xecc, 
       0xeca, 0x3, 0x2, 0x2, 0x2, 0xecc, 0xecd, 0x3, 0x2, 0x2, 0x2, 0xecd, 
       0x113, 0x3, 0x2, 0x2, 0x2, 0xece, 0xecc, 0x3, 0x2, 0x2, 0x2, 0xecf, 
       0xed0, 0x7, 0xa6, 0x2, 0x2, 0xed0, 0xed1, 0x7, 0x25e, 0x2, 0x2, 0xed1, 
       0x115, 0x3, 0x2, 0x2, 0x2, 0xed2, 0xed3, 0x7, 0x8c, 0x2, 0x2, 0xed3, 
       0xed4, 0x7, 0x118, 0x2, 0x2, 0xed4, 0xed5, 0x7, 0x3fd, 0x2, 0x2, 
       0xed5, 0xed6, 0x9, 0x18, 0x2, 0x2, 0xed6, 0x117, 0x3, 0x2, 0x2, 0x2, 
       0xed7, 0xed9, 0x7, 0x8c, 0x2, 0x2, 0xed8, 0xeda, 0x9, 0x33, 0x2, 
       0x2, 0xed9, 0xed8, 0x3, 0x2, 0x2, 0x2, 0xed9, 0xeda, 0x3, 0x2, 0x2, 
       0x2, 0xeda, 0xedb, 0x3, 0x2, 0x2, 0x2, 0xedb, 0xedc, 0x7, 0x235, 
       0x2, 0x2, 0xedc, 0xee1, 0x5, 0x120, 0x91, 0x2, 0xedd, 0xede, 0x7, 
       0x408, 0x2, 0x2, 0xede, 0xee0, 0x5, 0x120, 0x91, 0x2, 0xedf, 0xedd, 
       0x3, 0x2, 0x2, 0x2, 0xee0, 0xee3, 0x3, 0x2, 0x2, 0x2, 0xee1, 0xedf, 
       0x3, 0x2, 0x2, 0x2, 0xee1, 0xee2, 0x3, 0x2, 0x2, 0x2, 0xee2, 0x119, 
       0x3, 0x2, 0x2, 0x2, 0xee3, 0xee1, 0x3, 0x2, 0x2, 0x2, 0xee4, 0xee5, 
       0x7, 0xb0, 0x2, 0x2, 0xee5, 0xee6, 0x7, 0x13b, 0x2, 0x2, 0xee6, 0xeec, 
       0x7, 0x211, 0x2, 0x2, 0xee7, 0xee8, 0x7, 0x7a, 0x2, 0x2, 0xee8, 0xeec, 
       0x7, 0xb1, 0x2, 0x2, 0xee9, 0xeea, 0x7, 0x7a, 0x2, 0x2, 0xeea, 0xeec, 
       0x7, 0x1cd, 0x2, 0x2, 0xeeb, 0xee4, 0x3, 0x2, 0x2, 0x2, 0xeeb, 0xee7, 
       0x3, 0x2, 0x2, 0x2, 0xeeb, 0xee9, 0x3, 0x2, 0x2, 0x2, 0xeec, 0x11b, 
       0x3, 0x2, 0x2, 0x2, 0xeed, 0xef2, 0x5, 0x1f8, 0xfd, 0x2, 0xeee, 0xef0, 
       0x7, 0xd, 0x2, 0x2, 0xeef, 0xeee, 0x3, 0x2, 0x2, 0x2, 0xeef, 0xef0, 
       0x3, 0x2, 0x2, 0x2, 0xef0, 0xef1, 0x3, 0x2, 0x2, 0x2, 0xef1, 0xef3, 
       0x5, 0x210, 0x109, 0x2, 0xef2, 0xeef, 0x3, 0x2, 0x2, 0x2, 0xef2, 
       0xef3, 0x3, 0x2, 0x2, 0x2, 0xef3, 0xef4, 0x3, 0x2, 0x2, 0x2, 0xef4, 
       0xef5, 0x5, 0x11e, 0x90, 0x2, 0xef5, 0x11d, 0x3, 0x2, 0x2, 0x2, 0xef6, 
       0xef8, 0x7, 0x7a, 0x2, 0x2, 0xef7, 0xef9, 0x7, 0x194, 0x2, 0x2, 0xef8, 
       0xef7, 0x3, 0x2, 0x2, 0x2, 0xef8, 0xef9, 0x3, 0x2, 0x2, 0x2, 0xef9, 
       0xeff, 0x3, 0x2, 0x2, 0x2, 0xefa, 0xefc, 0x7, 0x61, 0x2, 0x2, 0xefb, 
       0xefa, 0x3, 0x2, 0x2, 0x2, 0xefb, 0xefc, 0x3, 0x2, 0x2, 0x2, 0xefc, 
       0xefd, 0x3, 0x2, 0x2, 0x2, 0xefd, 0xeff, 0x7, 0xb1, 0x2, 0x2, 0xefe, 
       0xef6, 0x3, 0x2, 0x2, 0x2, 0xefe, 0xefb, 0x3, 0x2, 0x2, 0x2, 0xeff, 
       0x11f, 0x3, 0x2, 0x2, 0x2, 0xf00, 0xf01, 0x7, 0x18a, 0x2, 0x2, 0xf01, 
       0xf02, 0x7, 0x192, 0x2, 0x2, 0xf02, 0xf08, 0x5, 0x122, 0x92, 0x2, 
       0xf03, 0xf04, 0x7, 0x7a, 0x2, 0x2, 0xf04, 0xf08, 0x7, 0xb1, 0x2, 
       0x2, 0xf05, 0xf06, 0x7, 0x7a, 0x2, 0x2, 0xf06, 0xf08, 0x7, 0x1cd, 
       0x2, 0x2, 0xf07, 0xf00, 0x3, 0x2, 0x2, 0x2, 0xf07, 0xf03, 0x3, 0x2, 
       0x2, 0x2, 0xf07, 0xf05, 0x3, 0x2, 0x2, 0x2, 0xf08, 0x121, 0x3, 0x2, 
       0x2, 0x2, 0xf09, 0xf0a, 0x7, 0x2bb, 0x2, 0x2, 0xf0a, 0xf11, 0x7, 
       0x7a, 0x2, 0x2, 0xf0b, 0xf0c, 0x7, 0x7a, 0x2, 0x2, 0xf0c, 0xf11, 
       0x7, 0x2bc, 0x2, 0x2, 0xf0d, 0xf0e, 0x7, 0x7a, 0x2, 0x2, 0xf0e, 0xf11, 
       0x7, 0x2bd, 0x2, 0x2, 0xf0f, 0xf11, 0x7, 0x2be, 0x2, 0x2, 0xf10, 
       0xf09, 0x3, 0x2, 0x2, 0x2, 0xf10, 0xf0b, 0x3, 0x2, 0x2, 0x2, 0xf10, 
       0xf0d, 0x3, 0x2, 0x2, 0x2, 0xf10, 0xf0f, 0x3, 0x2, 0x2, 0x2, 0xf11, 
       0x123, 0x3, 0x2, 0x2, 0x2, 0xf12, 0xf13, 0x7, 0x17, 0x2, 0x2, 0xf13, 
       0xf14, 0x7, 0x197, 0x2, 0x2, 0xf14, 0xf15, 0x7, 0x9f, 0x2, 0x2, 0xf15, 
       0xf1a, 0x5, 0x136, 0x9c, 0x2, 0xf16, 0xf17, 0x7, 0x408, 0x2, 0x2, 
       0xf17, 0xf19, 0x5, 0x136, 0x9c, 0x2, 0xf18, 0xf16, 0x3, 0x2, 0x2, 
       0x2, 0xf19, 0xf1c, 0x3, 0x2, 0x2, 0x2, 0xf1a, 0xf18, 0x3, 0x2, 0x2, 
       0x2, 0xf1a, 0xf1b, 0x3, 0x2, 0x2, 0x2, 0xf1b, 0xf1e, 0x3, 0x2, 0x2, 
       0x2, 0xf1c, 0xf1a, 0x3, 0x2, 0x2, 0x2, 0xf1d, 0xf1f, 0x5, 0x13e, 
       0xa0, 0x2, 0xf1e, 0xf1d, 0x3, 0x2, 0x2, 0x2, 0xf1e, 0xf1f, 0x3, 0x2, 
       0x2, 0x2, 0xf1f, 0x125, 0x3, 0x2, 0x2, 0x2, 0xf20, 0xf21, 0x7, 0x17, 
       0x2, 0x2, 0xf21, 0xf22, 0x7, 0x1fa, 0x2, 0x2, 0xf22, 0xf23, 0x7, 
       0x16b, 0x2, 0x2, 0xf23, 0xf28, 0x5, 0x140, 0xa1, 0x2, 0xf24, 0xf25, 
       0x7, 0x408, 0x2, 0x2, 0xf25, 0xf27, 0x5, 0x140, 0xa1, 0x2, 0xf26, 
       0xf24, 0x3, 0x2, 0x2, 0x2, 0xf27, 0xf2a, 0x3, 0x2, 0x2, 0x2, 0xf28, 
       0xf26, 0x3, 0x2, 0x2, 0x2, 0xf28, 0xf29, 0x3, 0x2, 0x2, 0x2, 0xf29, 
       0x127, 0x3, 0x2, 0x2, 0x2, 0xf2a, 0xf28, 0x3, 0x2, 0x2, 0x2, 0xf2b, 
       0xf2c, 0x7, 0x78, 0x2, 0x2, 0xf2c, 0xf2d, 0x9, 0x34, 0x2, 0x2, 0xf2d, 
       0xf32, 0x7, 0x196, 0x2, 0x2, 0xf2e, 0xf2f, 0x7, 0x9f, 0x2, 0x2, 0xf2f, 
       0xf33, 0x7, 0x415, 0x2, 0x2, 0xf30, 0xf31, 0x7, 0xf, 0x2, 0x2, 0xf31, 
       0xf33, 0x7, 0x415, 0x2, 0x2, 0xf32, 0xf2e, 0x3, 0x2, 0x2, 0x2, 0xf32, 
       0xf30, 0x3, 0x2, 0x2, 0x2, 0xf33, 0x129, 0x3, 0x2, 0x2, 0x2, 0xf34, 
       0xf35, 0x7, 0x1fb, 0x2, 0x2, 0xf35, 0xf36, 0x7, 0x197, 0x2, 0x2, 
       0xf36, 0x12b, 0x3, 0x2, 0x2, 0x2, 0xf37, 0xf38, 0x7, 0x1fb, 0x2, 
       0x2, 0xf38, 0xf3a, 0x7, 0x20f, 0x2, 0x2, 0xf39, 0xf3b, 0x7, 0x8, 
       0x2, 0x2, 0xf3a, 0xf39, 0x3, 0x2, 0x2, 0x2, 0xf3a, 0xf3b, 0x3, 0x2, 
       0x2, 0x2, 0xf3b, 0xf3d, 0x3, 0x2, 0x2, 0x2, 0xf3c, 0xf3e, 0x5, 0x13e, 
       0xa0, 0x2, 0xf3d, 0xf3c, 0x3, 0x2, 0x2, 0x2, 0xf3d, 0xf3e, 0x3, 0x2, 
       0x2, 0x2, 0xf3e, 0x12d, 0x3, 0x2, 0x2, 0x2, 0xf3f, 0xf40, 0x7, 0x21e, 
       0x2, 0x2, 0xf40, 0xf49, 0x7, 0x20f, 0x2, 0x2, 0xf41, 0xf46, 0x5, 
       0x144, 0xa3, 0x2, 0xf42, 0xf43, 0x7, 0x408, 0x2, 0x2, 0xf43, 0xf45, 
       0x5, 0x144, 0xa3, 0x2, 0xf44, 0xf42, 0x3, 0x2, 0x2, 0x2, 0xf45, 0xf48, 
       0x3, 0x2, 0x2, 0x2, 0xf46, 0xf44, 0x3, 0x2, 0x2, 0x2, 0xf46, 0xf47, 
       0x3, 0x2, 0x2, 0x2, 0xf47, 0xf4a, 0x3, 0x2, 0x2, 0x2, 0xf48, 0xf46, 
       0x3, 0x2, 0x2, 0x2, 0xf49, 0xf41, 0x3, 0x2, 0x2, 0x2, 0xf49, 0xf4a, 
       0x3, 0x2, 0x2, 0x2, 0xf4a, 0xf4d, 0x3, 0x2, 0x2, 0x2, 0xf4b, 0xf4c, 
       0x7, 0x23e, 0x2, 0x2, 0xf4c, 0xf4e, 0x5, 0x146, 0xa4, 0x2, 0xf4d, 
       0xf4b, 0x3, 0x2, 0x2, 0x2, 0xf4d, 0xf4e, 0x3, 0x2, 0x2, 0x2, 0xf4e, 
       0xf52, 0x3, 0x2, 0x2, 0x2, 0xf4f, 0xf51, 0x5, 0x148, 0xa5, 0x2, 0xf50, 
       0xf4f, 0x3, 0x2, 0x2, 0x2, 0xf51, 0xf54, 0x3, 0x2, 0x2, 0x2, 0xf52, 
       0xf50, 0x3, 0x2, 0x2, 0x2, 0xf52, 0xf53, 0x3, 0x2, 0x2, 0x2, 0xf53, 
       0xf56, 0x3, 0x2, 0x2, 0x2, 0xf54, 0xf52, 0x3, 0x2, 0x2, 0x2, 0xf55, 
       0xf57, 0x5, 0x13e, 0xa0, 0x2, 0xf56, 0xf55, 0x3, 0x2, 0x2, 0x2, 0xf56, 
       0xf57, 0x3, 0x2, 0x2, 0x2, 0xf57, 0x12f, 0x3, 0x2, 0x2, 0x2, 0xf58, 
       0xf59, 0x7, 0x224, 0x2, 0x2, 0xf59, 0xf62, 0x7, 0x20f, 0x2, 0x2, 
       0xf5a, 0xf5f, 0x5, 0x144, 0xa3, 0x2, 0xf5b, 0xf5c, 0x7, 0x408, 0x2, 
       0x2, 0xf5c, 0xf5e, 0x5, 0x144, 0xa3, 0x2, 0xf5d, 0xf5b, 0x3, 0x2, 
       0x2, 0x2, 0xf5e, 0xf61, 0x3, 0x2, 0x2, 0x2, 0xf5f, 0xf5d, 0x3, 0x2, 
       0x2, 0x2, 0xf5f, 0xf60, 0x3, 0x2, 0x2, 0x2, 0xf60, 0xf63, 0x3, 0x2, 
       0x2, 0x2, 0xf61, 0xf5f, 0x3, 0x2, 0x2, 0x2, 0xf62, 0xf5a, 0x3, 0x2, 
       0x2, 0x2, 0xf62, 0xf63, 0x3, 0x2, 0x2, 0x2, 0xf63, 0x131, 0x3, 0x2, 
       0x2, 0x2, 0xf64, 0xf65, 0x7, 0x21e, 0x2, 0x2, 0xf65, 0xf66, 0x7, 
       0x176, 0x2, 0x2, 0xf66, 0x133, 0x3, 0x2, 0x2, 0x2, 0xf67, 0xf68, 
       0x7, 0x224, 0x2, 0x2, 0xf68, 0xf69, 0x7, 0x176, 0x2, 0x2, 0xf69, 
       0x135, 0x3, 0x2, 0x2, 0x2, 0xf6a, 0xf6b, 0x5, 0x138, 0x9d, 0x2, 0xf6b, 
       0xf6c, 0x7, 0x3fd, 0x2, 0x2, 0xf6c, 0xf6d, 0x7, 0x415, 0x2, 0x2, 
       0xf6d, 0xf88, 0x3, 0x2, 0x2, 0x2, 0xf6e, 0xf6f, 0x5, 0x13a, 0x9e, 
       0x2, 0xf6f, 0xf70, 0x7, 0x3fd, 0x2, 0x2, 0xf70, 0xf71, 0x5, 0x216, 
       0x10c, 0x2, 0xf71, 0xf88, 0x3, 0x2, 0x2, 0x2, 0xf72, 0xf73, 0x5, 
       0x13c, 0x9f, 0x2, 0xf73, 0xf74, 0x7, 0x3fd, 0x2, 0x2, 0xf74, 0xf75, 
       0x9, 0x18, 0x2, 0x2, 0xf75, 0xf88, 0x3, 0x2, 0x2, 0x2, 0xf76, 0xf77, 
       0x7, 0x19b, 0x2, 0x2, 0xf77, 0xf78, 0x7, 0x3fd, 0x2, 0x2, 0xf78, 
       0xf88, 0x7, 0x418, 0x2, 0x2, 0xf79, 0xf7a, 0x7, 0x17d, 0x2, 0x2, 
       0xf7a, 0xf7b, 0x7, 0x3fd, 0x2, 0x2, 0xf7b, 0xf84, 0x7, 0x406, 0x2, 
       0x2, 0xf7c, 0xf81, 0x5, 0x210, 0x109, 0x2, 0xf7d, 0xf7e, 0x7, 0x408, 
       0x2, 0x2, 0xf7e, 0xf80, 0x5, 0x210, 0x109, 0x2, 0xf7f, 0xf7d, 0x3, 
       0x2, 0x2, 0x2, 0xf80, 0xf83, 0x3, 0x2, 0x2, 0x2, 0xf81, 0xf7f, 0x3, 
       0x2, 0x2, 0x2, 0xf81, 0xf82, 0x3, 0x2, 0x2, 0x2, 0xf82, 0xf85, 0x3, 
       0x2, 0x2, 0x2, 0xf83, 0xf81, 0x3, 0x2, 0x2, 0x2, 0xf84, 0xf7c, 0x3, 
       0x2, 0x2, 0x2, 0xf84, 0xf85, 0x3, 0x2, 0x2, 0x2, 0xf85, 0xf86, 0x3, 
       0x2, 0x2, 0x2, 0xf86, 0xf88, 0x7, 0x407, 0x2, 0x2, 0xf87, 0xf6a, 
       0x3, 0x2, 0x2, 0x2, 0xf87, 0xf6e, 0x3, 0x2, 0x2, 0x2, 0xf87, 0xf72, 
       0x3, 0x2, 0x2, 0x2, 0xf87, 0xf76, 0x3, 0x2, 0x2, 0x2, 0xf87, 0xf79, 
       0x3, 0x2, 0x2, 0x2, 0xf88, 0x137, 0x3, 0x2, 0x2, 0x2, 0xf89, 0xf8a, 
       0x9, 0x35, 0x2, 0x2, 0xf8a, 0x139, 0x3, 0x2, 0x2, 0x2, 0xf8b, 0xf8c, 
       0x9, 0x36, 0x2, 0x2, 0xf8c, 0x13b, 0x3, 0x2, 0x2, 0x2, 0xf8d, 0xf8e, 
       0x9, 0x37, 0x2, 0x2, 0xf8e, 0x13d, 0x3, 0x2, 0x2, 0x2, 0xf8f, 0xf90, 
       0x7, 0x3c, 0x2, 0x2, 0xf90, 0xf91, 0x7, 0x127, 0x2, 0x2, 0xf91, 0xf92, 
       0x7, 0x415, 0x2, 0x2, 0xf92, 0x13f, 0x3, 0x2, 0x2, 0x2, 0xf93, 0xf94, 
       0x7, 0x1f3, 0x2, 0x2, 0xf94, 0xf95, 0x7, 0x3fd, 0x2, 0x2, 0xf95, 
       0xf96, 0x7, 0x406, 0x2, 0x2, 0xf96, 0xf97, 0x5, 0x230, 0x119, 0x2, 
       0xf97, 0xf98, 0x7, 0x407, 0x2, 0x2, 0xf98, 0xfc5, 0x3, 0x2, 0x2, 
       0x2, 0xf99, 0xf9a, 0x7, 0x1f5, 0x2, 0x2, 0xf9a, 0xf9b, 0x7, 0x3fd, 
       0x2, 0x2, 0xf9b, 0xf9c, 0x7, 0x406, 0x2, 0x2, 0xf9c, 0xf9d, 0x5, 
       0x230, 0x119, 0x2, 0xf9d, 0xf9e, 0x7, 0x407, 0x2, 0x2, 0xf9e, 0xfc5, 
       0x3, 0x2, 0x2, 0x2, 0xf9f, 0xfa0, 0x7, 0x1f4, 0x2, 0x2, 0xfa0, 0xfa1, 
       0x7, 0x3fd, 0x2, 0x2, 0xfa1, 0xfa2, 0x7, 0x406, 0x2, 0x2, 0xfa2, 
       0xfa3, 0x5, 0x232, 0x11a, 0x2, 0xfa3, 0xfa4, 0x7, 0x407, 0x2, 0x2, 
       0xfa4, 0xfc5, 0x3, 0x2, 0x2, 0x2, 0xfa5, 0xfa6, 0x7, 0x1f6, 0x2, 
       0x2, 0xfa6, 0xfa7, 0x7, 0x3fd, 0x2, 0x2, 0xfa7, 0xfa8, 0x7, 0x406, 
       0x2, 0x2, 0xfa8, 0xfa9, 0x5, 0x232, 0x11a, 0x2, 0xfa9, 0xfaa, 0x7, 
       0x407, 0x2, 0x2, 0xfaa, 0xfc5, 0x3, 0x2, 0x2, 0x2, 0xfab, 0xfac, 
       0x7, 0x1f8, 0x2, 0x2, 0xfac, 0xfad, 0x7, 0x3fd, 0x2, 0x2, 0xfad, 
       0xfae, 0x7, 0x406, 0x2, 0x2, 0xfae, 0xfaf, 0x5, 0x23c, 0x11f, 0x2, 
       0xfaf, 0xfb0, 0x7, 0x407, 0x2, 0x2, 0xfb0, 0xfc5, 0x3, 0x2, 0x2, 
       0x2, 0xfb1, 0xfb2, 0x7, 0x1f9, 0x2, 0x2, 0xfb2, 0xfb3, 0x7, 0x3fd, 
       0x2, 0x2, 0xfb3, 0xfb4, 0x7, 0x406, 0x2, 0x2, 0xfb4, 0xfb5, 0x5, 
       0x23c, 0x11f, 0x2, 0xfb5, 0xfb6, 0x7, 0x407, 0x2, 0x2, 0xfb6, 0xfc5, 
       0x3, 0x2, 0x2, 0x2, 0xfb7, 0xfb8, 0x7, 0x1f7, 0x2, 0x2, 0xfb8, 0xfb9, 
       0x7, 0x3fd, 0x2, 0x2, 0xfb9, 0xfba, 0x7, 0x406, 0x2, 0x2, 0xfba, 
       0xfbf, 0x5, 0x142, 0xa2, 0x2, 0xfbb, 0xfbc, 0x7, 0x408, 0x2, 0x2, 
       0xfbc, 0xfbe, 0x5, 0x142, 0xa2, 0x2, 0xfbd, 0xfbb, 0x3, 0x2, 0x2, 
       0x2, 0xfbe, 0xfc1, 0x3, 0x2, 0x2, 0x2, 0xfbf, 0xfbd, 0x3, 0x2, 0x2, 
       0x2, 0xfbf, 0xfc0, 0x3, 0x2, 0x2, 0x2, 0xfc0, 0xfc2, 0x3, 0x2, 0x2, 
       0x2, 0xfc1, 0xfbf, 0x3, 0x2, 0x2, 0x2, 0xfc2, 0xfc3, 0x7, 0x407, 
       0x2, 0x2, 0xfc3, 0xfc5, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xf93, 0x3, 0x2, 
       0x2, 0x2, 0xfc4, 0xf99, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xf9f, 0x3, 0x2, 
       0x2, 0x2, 0xfc4, 0xfa5, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xfab, 0x3, 0x2, 
       0x2, 0x2, 0xfc4, 0xfb1, 0x3, 0x2, 0x2, 0x2, 0xfc4, 0xfb7, 0x3, 0x2, 
       0x2, 0x2, 0xfc5, 0x141, 0x3, 0x2, 0x2, 0x2, 0xfc6, 0xfc7, 0x7, 0x406, 
       0x2, 0x2, 0xfc7, 0xfc8, 0x5, 0x1f8, 0xfd, 0x2, 0xfc8, 0xfc9, 0x7, 
       0x408, 0x2, 0x2, 0xfc9, 0xfca, 0x5, 0x1f8, 0xfd, 0x2, 0xfca, 0xfcb, 
       0x7, 0x407, 0x2, 0x2, 0xfcb, 0x143, 0x3, 0x2, 0x2, 0x2, 0xfcc, 0xfcd, 
       0x9, 0x38, 0x2, 0x2, 0xfcd, 0x145, 0x3, 0x2, 0x2, 0x2, 0xfce, 0xfcf, 
       0x9, 0x39, 0x2, 0x2, 0xfcf, 0xfd0, 0x7, 0x3fd, 0x2, 0x2, 0xfd0, 0xfe1, 
       0x5, 0x14a, 0xa6, 0x2, 0xfd1, 0xfd2, 0x7, 0x19d, 0x2, 0x2, 0xfd2, 
       0xfd3, 0x7, 0x3fd, 0x2, 0x2, 0xfd3, 0xfd4, 0x7, 0x415, 0x2, 0x2, 
       0xfd4, 0xfd5, 0x7, 0x408, 0x2, 0x2, 0xfd5, 0xfd6, 0x7, 0x19e, 0x2, 
       0x2, 0xfd6, 0xfd7, 0x7, 0x3fd, 0x2, 0x2, 0xfd7, 0xfe1, 0x5, 0x216, 
       0x10c, 0x2, 0xfd8, 0xfd9, 0x7, 0x1ed, 0x2, 0x2, 0xfd9, 0xfda, 0x7, 
       0x3fd, 0x2, 0x2, 0xfda, 0xfdb, 0x7, 0x415, 0x2, 0x2, 0xfdb, 0xfdc, 
       0x7, 0x408, 0x2, 0x2, 0xfdc, 0xfdd, 0x7, 0x1ee, 0x2, 0x2, 0xfdd, 
       0xfde, 0x7, 0x3fd, 0x2, 0x2, 0xfde, 0xfe1, 0x5, 0x216, 0x10c, 0x2, 
       0xfdf, 0xfe1, 0x7, 0x218, 0x2, 0x2, 0xfe0, 0xfce, 0x3, 0x2, 0x2, 
       0x2, 0xfe0, 0xfd1, 0x3, 0x2, 0x2, 0x2, 0xfe0, 0xfd8, 0x3, 0x2, 0x2, 
       0x2, 0xfe0, 0xfdf, 0x3, 0x2, 0x2, 0x2, 0xfe1, 0x147, 0x3, 0x2, 0x2, 
       0x2, 0xfe2, 0xfe3, 0x7, 0x240, 0x2, 0x2, 0xfe3, 0xfe4, 0x7, 0x3fd, 
       0x2, 0x2, 0xfe4, 0xfef, 0x7, 0x415, 0x2, 0x2, 0xfe5, 0xfe6, 0x7, 
       0x1d8, 0x2, 0x2, 0xfe6, 0xfe7, 0x7, 0x3fd, 0x2, 0x2, 0xfe7, 0xfef, 
       0x7, 0x415, 0x2, 0x2, 0xfe8, 0xfe9, 0x7, 0x148, 0x2, 0x2, 0xfe9, 
       0xfea, 0x7, 0x3fd, 0x2, 0x2, 0xfea, 0xfef, 0x7, 0x415, 0x2, 0x2, 
       0xfeb, 0xfec, 0x7, 0x1db, 0x2, 0x2, 0xfec, 0xfed, 0x7, 0x3fd, 0x2, 
       0x2, 0xfed, 0xfef, 0x7, 0x415, 0x2, 0x2, 0xfee, 0xfe2, 0x3, 0x2, 
       0x2, 0x2, 0xfee, 0xfe5, 0x3, 0x2, 0x2, 0x2, 0xfee, 0xfe8, 0x3, 0x2, 
       0x2, 0x2, 0xfee, 0xfeb, 0x3, 0x2, 0x2, 0x2, 0xfef, 0x149, 0x3, 0x2, 
       0x2, 0x2, 0xff0, 0xff5, 0x5, 0x208, 0x105, 0x2, 0xff1, 0xff2, 0x7, 
       0x408, 0x2, 0x2, 0xff2, 0xff4, 0x5, 0x208, 0x105, 0x2, 0xff3, 0xff1, 
       0x3, 0x2, 0x2, 0x2, 0xff4, 0xff7, 0x3, 0x2, 0x2, 0x2, 0xff5, 0xff3, 
       0x3, 0x2, 0x2, 0x2, 0xff5, 0xff6, 0x3, 0x2, 0x2, 0x2, 0xff6, 0xffa, 
       0x3, 0x2, 0x2, 0x2, 0xff7, 0xff5, 0x3, 0x2, 0x2, 0x2, 0xff8, 0xffa, 
       0x7, 0x415, 0x2, 0x2, 0xff9, 0xff0, 0x3, 0x2, 0x2, 0x2, 0xff9, 0xff8, 
       0x3, 0x2, 0x2, 0x2, 0xffa, 0x14b, 0x3, 0x2, 0x2, 0x2, 0xffb, 0xffc, 
       0x7, 0x24f, 0x2, 0x2, 0xffc, 0xffd, 0x9, 0x3a, 0x2, 0x2, 0xffd, 0xfff, 
       0x5, 0x20a, 0x106, 0x2, 0xffe, 0x1000, 0x9, 0x3b, 0x2, 0x2, 0xfff, 
       0xffe, 0x3, 0x2, 0x2, 0x2, 0xfff, 0x1000, 0x3, 0x2, 0x2, 0x2, 0x1000, 
       0x14d, 0x3, 0x2, 0x2, 0x2, 0x1001, 0x1002, 0x7, 0x24f, 0x2, 0x2, 
       0x1002, 0x1003, 0x7, 0x156, 0x2, 0x2, 0x1003, 0x1009, 0x5, 0x20a, 
       0x106, 0x2, 0x1004, 0x1007, 0x7, 0x22c, 0x2, 0x2, 0x1005, 0x1006, 
       0x7, 0x3c, 0x2, 0x2, 0x1006, 0x1008, 0x7, 0x1b7, 0x2, 0x2, 0x1007, 
       0x1005, 0x3, 0x2, 0x2, 0x2, 0x1007, 0x1008, 0x3, 0x2, 0x2, 0x2, 0x1008, 
       0x100a, 0x3, 0x2, 0x2, 0x2, 0x1009, 0x1004, 0x3, 0x2, 0x2, 0x2, 0x1009, 
       0x100a, 0x3, 0x2, 0x2, 0x2, 0x100a, 0x14f, 0x3, 0x2, 0x2, 0x2, 0x100b, 
       0x100c, 0x7, 0x24f, 0x2, 0x2, 0x100c, 0x100d, 0x7, 0x1df, 0x2, 0x2, 
       0x100d, 0x100e, 0x5, 0x20a, 0x106, 0x2, 0x100e, 0x151, 0x3, 0x2, 
       0x2, 0x2, 0x100f, 0x1010, 0x7, 0x24f, 0x2, 0x2, 0x1010, 0x1011, 0x7, 
       0x134, 0x2, 0x2, 0x1011, 0x1014, 0x5, 0x20a, 0x106, 0x2, 0x1012, 
       0x1013, 0x7, 0x1cb, 0x2, 0x2, 0x1013, 0x1015, 0x7, 0x1d9, 0x2, 0x2, 
       0x1014, 0x1012, 0x3, 0x2, 0x2, 0x2, 0x1014, 0x1015, 0x3, 0x2, 0x2, 
       0x2, 0x1015, 0x153, 0x3, 0x2, 0x2, 0x2, 0x1016, 0x1017, 0x7, 0x24f, 
       0x2, 0x2, 0x1017, 0x1018, 0x7, 0x200, 0x2, 0x2, 0x1018, 0x1019, 0x5, 
       0x20a, 0x106, 0x2, 0x1019, 0x155, 0x3, 0x2, 0x2, 0x2, 0x101a, 0x101b, 
       0x7, 0x24f, 0x2, 0x2, 0x101b, 0x101e, 0x7, 0x1e9, 0x2, 0x2, 0x101c, 
       0x101d, 0x7, 0x1f, 0x2, 0x2, 0x101d, 0x101f, 0x5, 0x20a, 0x106, 0x2, 
       0x101e, 0x101c, 0x3, 0x2, 0x2, 0x2, 0x101e, 0x101f, 0x3, 0x2, 0x2, 
       0x2, 0x101f, 0x157, 0x3, 0x2, 0x2, 0x2, 0x1020, 0x1021, 0x7, 0x1df, 
       0x2, 0x2, 0x1021, 0x1022, 0x5, 0x210, 0x109, 0x2, 0x1022, 0x1025, 
       0x7, 0x3f, 0x2, 0x2, 0x1023, 0x1026, 0x7, 0x415, 0x2, 0x2, 0x1024, 
       0x1026, 0x7, 0x421, 0x2, 0x2, 0x1025, 0x1023, 0x3, 0x2, 0x2, 0x2, 
       0x1025, 0x1024, 0x3, 0x2, 0x2, 0x2, 0x1026, 0x159, 0x3, 0x2, 0x2, 
       0x2, 0x1027, 0x1028, 0x7, 0x260, 0x2, 0x2, 0x1028, 0x102b, 0x5, 0x210, 
       0x109, 0x2, 0x1029, 0x102a, 0x7, 0xab, 0x2, 0x2, 0x102a, 0x102c, 
       0x5, 0x23e, 0x120, 0x2, 0x102b, 0x1029, 0x3, 0x2, 0x2, 0x2, 0x102b, 
       0x102c, 0x3, 0x2, 0x2, 0x2, 0x102c, 0x15b, 0x3, 0x2, 0x2, 0x2, 0x102d, 
       0x102e, 0x9, 0x3c, 0x2, 0x2, 0x102e, 0x102f, 0x7, 0x1df, 0x2, 0x2, 
       0x102f, 0x1030, 0x5, 0x210, 0x109, 0x2, 0x1030, 0x15d, 0x3, 0x2, 
       0x2, 0x2, 0x1031, 0x1034, 0x5, 0x160, 0xb1, 0x2, 0x1032, 0x1034, 
       0x5, 0x6, 0x4, 0x2, 0x1033, 0x1031, 0x3, 0x2, 0x2, 0x2, 0x1033, 0x1032, 
       0x3, 0x2, 0x2, 0x2, 0x1034, 0x15f, 0x3, 0x2, 0x2, 0x2, 0x1035, 0x1036, 
       0x5, 0x210, 0x109, 0x2, 0x1036, 0x1037, 0x7, 0x411, 0x2, 0x2, 0x1037, 
       0x1039, 0x3, 0x2, 0x2, 0x2, 0x1038, 0x1035, 0x3, 0x2, 0x2, 0x2, 0x1038, 
       0x1039, 0x3, 0x2, 0x2, 0x2, 0x1039, 0x103a, 0x3, 0x2, 0x2, 0x2, 0x103a, 
       0x1061, 0x7, 0x11c, 0x2, 0x2, 0x103b, 0x103c, 0x5, 0x174, 0xbb, 0x2, 
       0x103c, 0x103d, 0x7, 0x409, 0x2, 0x2, 0x103d, 0x103f, 0x3, 0x2, 0x2, 
       0x2, 0x103e, 0x103b, 0x3, 0x2, 0x2, 0x2, 0x103f, 0x1042, 0x3, 0x2, 
       0x2, 0x2, 0x1040, 0x103e, 0x3, 0x2, 0x2, 0x2, 0x1040, 0x1041, 0x3, 
       0x2, 0x2, 0x2, 0x1041, 0x1048, 0x3, 0x2, 0x2, 0x2, 0x1042, 0x1040, 
       0x3, 0x2, 0x2, 0x2, 0x1043, 0x1044, 0x5, 0x176, 0xbc, 0x2, 0x1044, 
       0x1045, 0x7, 0x409, 0x2, 0x2, 0x1045, 0x1047, 0x3, 0x2, 0x2, 0x2, 
       0x1046, 0x1043, 0x3, 0x2, 0x2, 0x2, 0x1047, 0x104a, 0x3, 0x2, 0x2, 
       0x2, 0x1048, 0x1046, 0x3, 0x2, 0x2, 0x2, 0x1048, 0x1049, 0x3, 0x2, 
       0x2, 0x2, 0x1049, 0x1050, 0x3, 0x2, 0x2, 0x2, 0x104a, 0x1048, 0x3, 
       0x2, 0x2, 0x2, 0x104b, 0x104c, 0x5, 0x178, 0xbd, 0x2, 0x104c, 0x104d, 
       0x7, 0x409, 0x2, 0x2, 0x104d, 0x104f, 0x3, 0x2, 0x2, 0x2, 0x104e, 
       0x104b, 0x3, 0x2, 0x2, 0x2, 0x104f, 0x1052, 0x3, 0x2, 0x2, 0x2, 0x1050, 
       0x104e, 0x3, 0x2, 0x2, 0x2, 0x1050, 0x1051, 0x3, 0x2, 0x2, 0x2, 0x1051, 
       0x1058, 0x3, 0x2, 0x2, 0x2, 0x1052, 0x1050, 0x3, 0x2, 0x2, 0x2, 0x1053, 
       0x1054, 0x5, 0x17a, 
  };
  static uint16_t serializedATNSegment2[] = {
    0xbe, 0x2, 0x1054, 0x1055, 0x7, 0x409, 0x2, 0x2, 0x1055, 0x1057, 0x3, 
       0x2, 0x2, 0x2, 0x1056, 0x1053, 0x3, 0x2, 0x2, 0x2, 0x1057, 0x105a, 
       0x3, 0x2, 0x2, 0x2, 0x1058, 0x1056, 0x3, 0x2, 0x2, 0x2, 0x1058, 0x1059, 
       0x3, 0x2, 0x2, 0x2, 0x1059, 0x105e, 0x3, 0x2, 0x2, 0x2, 0x105a, 0x1058, 
       0x3, 0x2, 0x2, 0x2, 0x105b, 0x105d, 0x5, 0x17e, 0xc0, 0x2, 0x105c, 
       0x105b, 0x3, 0x2, 0x2, 0x2, 0x105d, 0x1060, 0x3, 0x2, 0x2, 0x2, 0x105e, 
       0x105c, 0x3, 0x2, 0x2, 0x2, 0x105e, 0x105f, 0x3, 0x2, 0x2, 0x2, 0x105f, 
       0x1062, 0x3, 0x2, 0x2, 0x2, 0x1060, 0x105e, 0x3, 0x2, 0x2, 0x2, 0x1061, 
       0x1040, 0x3, 0x2, 0x2, 0x2, 0x1061, 0x1062, 0x3, 0x2, 0x2, 0x2, 0x1062, 
       0x1063, 0x3, 0x2, 0x2, 0x2, 0x1063, 0x1065, 0x7, 0x156, 0x2, 0x2, 
       0x1064, 0x1066, 0x5, 0x210, 0x109, 0x2, 0x1065, 0x1064, 0x3, 0x2, 
       0x2, 0x2, 0x1065, 0x1066, 0x3, 0x2, 0x2, 0x2, 0x1066, 0x161, 0x3, 
       0x2, 0x2, 0x2, 0x1067, 0x106a, 0x7, 0x15, 0x2, 0x2, 0x1068, 0x106b, 
       0x5, 0x210, 0x109, 0x2, 0x1069, 0x106b, 0x5, 0x25e, 0x130, 0x2, 0x106a, 
       0x1068, 0x3, 0x2, 0x2, 0x2, 0x106a, 0x1069, 0x3, 0x2, 0x2, 0x2, 0x106a, 
       0x106b, 0x3, 0x2, 0x2, 0x2, 0x106b, 0x106d, 0x3, 0x2, 0x2, 0x2, 0x106c, 
       0x106e, 0x5, 0x180, 0xc1, 0x2, 0x106d, 0x106c, 0x3, 0x2, 0x2, 0x2, 
       0x106e, 0x106f, 0x3, 0x2, 0x2, 0x2, 0x106f, 0x106d, 0x3, 0x2, 0x2, 
       0x2, 0x106f, 0x1070, 0x3, 0x2, 0x2, 0x2, 0x1070, 0x1077, 0x3, 0x2, 
       0x2, 0x2, 0x1071, 0x1073, 0x7, 0x33, 0x2, 0x2, 0x1072, 0x1074, 0x5, 
       0x17e, 0xc0, 0x2, 0x1073, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x1074, 0x1075, 
       0x3, 0x2, 0x2, 0x2, 0x1075, 0x1073, 0x3, 0x2, 0x2, 0x2, 0x1075, 0x1076, 
       0x3, 0x2, 0x2, 0x2, 0x1076, 0x1078, 0x3, 0x2, 0x2, 0x2, 0x1077, 0x1071, 
       0x3, 0x2, 0x2, 0x2, 0x1077, 0x1078, 0x3, 0x2, 0x2, 0x2, 0x1078, 0x1079, 
       0x3, 0x2, 0x2, 0x2, 0x1079, 0x107a, 0x7, 0x156, 0x2, 0x2, 0x107a, 
       0x107b, 0x7, 0x15, 0x2, 0x2, 0x107b, 0x163, 0x3, 0x2, 0x2, 0x2, 0x107c, 
       0x107d, 0x7, 0x47, 0x2, 0x2, 0x107d, 0x107e, 0x5, 0x25e, 0x130, 0x2, 
       0x107e, 0x1080, 0x7, 0x9e, 0x2, 0x2, 0x107f, 0x1081, 0x5, 0x17e, 
       0xc0, 0x2, 0x1080, 0x107f, 0x3, 0x2, 0x2, 0x2, 0x1081, 0x1082, 0x3, 
       0x2, 0x2, 0x2, 0x1082, 0x1080, 0x3, 0x2, 0x2, 0x2, 0x1082, 0x1083, 
       0x3, 0x2, 0x2, 0x2, 0x1083, 0x1087, 0x3, 0x2, 0x2, 0x2, 0x1084, 0x1086, 
       0x5, 0x182, 0xc2, 0x2, 0x1085, 0x1084, 0x3, 0x2, 0x2, 0x2, 0x1086, 
       0x1089, 0x3, 0x2, 0x2, 0x2, 0x1087, 0x1085, 0x3, 0x2, 0x2, 0x2, 0x1087, 
       0x1088, 0x3, 0x2, 0x2, 0x2, 0x1088, 0x1090, 0x3, 0x2, 0x2, 0x2, 0x1089, 
       0x1087, 0x3, 0x2, 0x2, 0x2, 0x108a, 0x108c, 0x7, 0x33, 0x2, 0x2, 
       0x108b, 0x108d, 0x5, 0x17e, 0xc0, 0x2, 0x108c, 0x108b, 0x3, 0x2, 
       0x2, 0x2, 0x108d, 0x108e, 0x3, 0x2, 0x2, 0x2, 0x108e, 0x108c, 0x3, 
       0x2, 0x2, 0x2, 0x108e, 0x108f, 0x3, 0x2, 0x2, 0x2, 0x108f, 0x1091, 
       0x3, 0x2, 0x2, 0x2, 0x1090, 0x108a, 0x3, 0x2, 0x2, 0x2, 0x1090, 0x1091, 
       0x3, 0x2, 0x2, 0x2, 0x1091, 0x1092, 0x3, 0x2, 0x2, 0x2, 0x1092, 0x1093, 
       0x7, 0x156, 0x2, 0x2, 0x1093, 0x1094, 0x7, 0x47, 0x2, 0x2, 0x1094, 
       0x165, 0x3, 0x2, 0x2, 0x2, 0x1095, 0x1096, 0x7, 0x52, 0x2, 0x2, 0x1096, 
       0x1097, 0x5, 0x210, 0x109, 0x2, 0x1097, 0x167, 0x3, 0x2, 0x2, 0x2, 
       0x1098, 0x1099, 0x7, 0x58, 0x2, 0x2, 0x1099, 0x109a, 0x5, 0x210, 
       0x109, 0x2, 0x109a, 0x169, 0x3, 0x2, 0x2, 0x2, 0x109b, 0x109c, 0x5, 
       0x210, 0x109, 0x2, 0x109c, 0x109d, 0x7, 0x411, 0x2, 0x2, 0x109d, 
       0x109f, 0x3, 0x2, 0x2, 0x2, 0x109e, 0x109b, 0x3, 0x2, 0x2, 0x2, 0x109e, 
       0x109f, 0x3, 0x2, 0x2, 0x2, 0x109f, 0x10a0, 0x3, 0x2, 0x2, 0x2, 0x10a0, 
       0x10a2, 0x7, 0x60, 0x2, 0x2, 0x10a1, 0x10a3, 0x5, 0x17e, 0xc0, 0x2, 
       0x10a2, 0x10a1, 0x3, 0x2, 0x2, 0x2, 0x10a3, 0x10a4, 0x3, 0x2, 0x2, 
       0x2, 0x10a4, 0x10a2, 0x3, 0x2, 0x2, 0x2, 0x10a4, 0x10a5, 0x3, 0x2, 
       0x2, 0x2, 0x10a5, 0x10a6, 0x3, 0x2, 0x2, 0x2, 0x10a6, 0x10a7, 0x7, 
       0x156, 0x2, 0x2, 0x10a7, 0x10a9, 0x7, 0x60, 0x2, 0x2, 0x10a8, 0x10aa, 
       0x5, 0x210, 0x109, 0x2, 0x10a9, 0x10a8, 0x3, 0x2, 0x2, 0x2, 0x10a9, 
       0x10aa, 0x3, 0x2, 0x2, 0x2, 0x10aa, 0x16b, 0x3, 0x2, 0x2, 0x2, 0x10ab, 
       0x10ac, 0x5, 0x210, 0x109, 0x2, 0x10ac, 0x10ad, 0x7, 0x411, 0x2, 
       0x2, 0x10ad, 0x10af, 0x3, 0x2, 0x2, 0x2, 0x10ae, 0x10ab, 0x3, 0x2, 
       0x2, 0x2, 0x10ae, 0x10af, 0x3, 0x2, 0x2, 0x2, 0x10af, 0x10b0, 0x3, 
       0x2, 0x2, 0x2, 0x10b0, 0x10b2, 0x7, 0x80, 0x2, 0x2, 0x10b1, 0x10b3, 
       0x5, 0x17e, 0xc0, 0x2, 0x10b2, 0x10b1, 0x3, 0x2, 0x2, 0x2, 0x10b3, 
       0x10b4, 0x3, 0x2, 0x2, 0x2, 0x10b4, 0x10b2, 0x3, 0x2, 0x2, 0x2, 0x10b4, 
       0x10b5, 0x3, 0x2, 0x2, 0x2, 0x10b5, 0x10b6, 0x3, 0x2, 0x2, 0x2, 0x10b6, 
       0x10b7, 0x7, 0x23e, 0x2, 0x2, 0x10b7, 0x10b8, 0x5, 0x25e, 0x130, 
       0x2, 0x10b8, 0x10b9, 0x7, 0x156, 0x2, 0x2, 0x10b9, 0x10bb, 0x7, 0x80, 
       0x2, 0x2, 0x10ba, 0x10bc, 0x5, 0x210, 0x109, 0x2, 0x10bb, 0x10ba, 
       0x3, 0x2, 0x2, 0x2, 0x10bb, 0x10bc, 0x3, 0x2, 0x2, 0x2, 0x10bc, 0x16d, 
       0x3, 0x2, 0x2, 0x2, 0x10bd, 0x10be, 0x7, 0x85, 0x2, 0x2, 0x10be, 
       0x10bf, 0x5, 0x25e, 0x130, 0x2, 0x10bf, 0x16f, 0x3, 0x2, 0x2, 0x2, 
       0x10c0, 0x10c1, 0x5, 0x210, 0x109, 0x2, 0x10c1, 0x10c2, 0x7, 0x411, 
       0x2, 0x2, 0x10c2, 0x10c4, 0x3, 0x2, 0x2, 0x2, 0x10c3, 0x10c0, 0x3, 
       0x2, 0x2, 0x2, 0x10c3, 0x10c4, 0x3, 0x2, 0x2, 0x2, 0x10c4, 0x10c5, 
       0x3, 0x2, 0x2, 0x2, 0x10c5, 0x10c6, 0x7, 0xaf, 0x2, 0x2, 0x10c6, 
       0x10c7, 0x5, 0x25e, 0x130, 0x2, 0x10c7, 0x10c9, 0x7, 0x150, 0x2, 
       0x2, 0x10c8, 0x10ca, 0x5, 0x17e, 0xc0, 0x2, 0x10c9, 0x10c8, 0x3, 
       0x2, 0x2, 0x2, 0x10ca, 0x10cb, 0x3, 0x2, 0x2, 0x2, 0x10cb, 0x10c9, 
       0x3, 0x2, 0x2, 0x2, 0x10cb, 0x10cc, 0x3, 0x2, 0x2, 0x2, 0x10cc, 0x10cd, 
       0x3, 0x2, 0x2, 0x2, 0x10cd, 0x10ce, 0x7, 0x156, 0x2, 0x2, 0x10ce, 
       0x10d0, 0x7, 0xaf, 0x2, 0x2, 0x10cf, 0x10d1, 0x5, 0x210, 0x109, 0x2, 
       0x10d0, 0x10cf, 0x3, 0x2, 0x2, 0x2, 0x10d0, 0x10d1, 0x3, 0x2, 0x2, 
       0x2, 0x10d1, 0x171, 0x3, 0x2, 0x2, 0x2, 0x10d2, 0x10d3, 0x7, 0x12d, 
       0x2, 0x2, 0x10d3, 0x10e2, 0x5, 0x210, 0x109, 0x2, 0x10d4, 0x10d9, 
       0x7, 0x3b, 0x2, 0x2, 0x10d5, 0x10d7, 0x7, 0x1c2, 0x2, 0x2, 0x10d6, 
       0x10d5, 0x3, 0x2, 0x2, 0x2, 0x10d6, 0x10d7, 0x3, 0x2, 0x2, 0x2, 0x10d7, 
       0x10d8, 0x3, 0x2, 0x2, 0x2, 0x10d8, 0x10da, 0x7, 0x3f, 0x2, 0x2, 
       0x10d9, 0x10d6, 0x3, 0x2, 0x2, 0x2, 0x10d9, 0x10da, 0x3, 0x2, 0x2, 
       0x2, 0x10da, 0x10db, 0x3, 0x2, 0x2, 0x2, 0x10db, 0x10dc, 0x5, 0x210, 
       0x109, 0x2, 0x10dc, 0x10dd, 0x7, 0x50, 0x2, 0x2, 0x10dd, 0x10de, 
       0x5, 0x230, 0x119, 0x2, 0x10de, 0x10e2, 0x3, 0x2, 0x2, 0x2, 0x10df, 
       0x10e0, 0x7, 0x1ce, 0x2, 0x2, 0x10e0, 0x10e2, 0x5, 0x210, 0x109, 
       0x2, 0x10e1, 0x10d2, 0x3, 0x2, 0x2, 0x2, 0x10e1, 0x10d4, 0x3, 0x2, 
       0x2, 0x2, 0x10e1, 0x10df, 0x3, 0x2, 0x2, 0x2, 0x10e2, 0x173, 0x3, 
       0x2, 0x2, 0x2, 0x10e3, 0x10e4, 0x7, 0x27, 0x2, 0x2, 0x10e4, 0x10e5, 
       0x5, 0x230, 0x119, 0x2, 0x10e5, 0x10e8, 0x5, 0x224, 0x113, 0x2, 0x10e6, 
       0x10e7, 0x7, 0x28, 0x2, 0x2, 0x10e7, 0x10e9, 0x5, 0x25e, 0x130, 0x2, 
       0x10e8, 0x10e6, 0x3, 0x2, 0x2, 0x2, 0x10e8, 0x10e9, 0x3, 0x2, 0x2, 
       0x2, 0x10e9, 0x175, 0x3, 0x2, 0x2, 0x2, 0x10ea, 0x10eb, 0x7, 0x27, 
       0x2, 0x2, 0x10eb, 0x10ec, 0x5, 0x210, 0x109, 0x2, 0x10ec, 0x10ed, 
       0x7, 0x1c, 0x2, 0x2, 0x10ed, 0x10f4, 0x7, 0x3c, 0x2, 0x2, 0x10ee, 
       0x10f5, 0x5, 0x216, 0x10c, 0x2, 0x10ef, 0x10f1, 0x7, 0x93, 0x2, 0x2, 
       0x10f0, 0x10f2, 0x7, 0x244, 0x2, 0x2, 0x10f1, 0x10f0, 0x3, 0x2, 0x2, 
       0x2, 0x10f1, 0x10f2, 0x3, 0x2, 0x2, 0x2, 0x10f2, 0x10f3, 0x3, 0x2, 
       0x2, 0x2, 0x10f3, 0x10f5, 0x7, 0x415, 0x2, 0x2, 0x10f4, 0x10ee, 0x3, 
       0x2, 0x2, 0x2, 0x10f4, 0x10ef, 0x3, 0x2, 0x2, 0x2, 0x10f5, 0x177, 
       0x3, 0x2, 0x2, 0x2, 0x10f6, 0x10f7, 0x7, 0x27, 0x2, 0x2, 0x10f7, 
       0x10f8, 0x5, 0x210, 0x109, 0x2, 0x10f8, 0x10f9, 0x7, 0x24, 0x2, 0x2, 
       0x10f9, 0x10fa, 0x7, 0x3c, 0x2, 0x2, 0x10fa, 0x10fb, 0x5, 0xb4, 0x5b, 
       0x2, 0x10fb, 0x179, 0x3, 0x2, 0x2, 0x2, 0x10fc, 0x10fd, 0x7, 0x27, 
       0x2, 0x2, 0x10fd, 0x10fe, 0x9, 0x3d, 0x2, 0x2, 0x10fe, 0x10ff, 0x7, 
       0x177, 0x2, 0x2, 0x10ff, 0x1100, 0x7, 0x3c, 0x2, 0x2, 0x1100, 0x1105, 
       0x5, 0x17c, 0xbf, 0x2, 0x1101, 0x1102, 0x7, 0x408, 0x2, 0x2, 0x1102, 
       0x1104, 0x5, 0x17c, 0xbf, 0x2, 0x1103, 0x1101, 0x3, 0x2, 0x2, 0x2, 
       0x1104, 0x1107, 0x3, 0x2, 0x2, 0x2, 0x1105, 0x1103, 0x3, 0x2, 0x2, 
       0x2, 0x1105, 0x1106, 0x3, 0x2, 0x2, 0x2, 0x1106, 0x1108, 0x3, 0x2, 
       0x2, 0x2, 0x1107, 0x1105, 0x3, 0x2, 0x2, 0x2, 0x1108, 0x1109, 0x5, 
       0x15e, 0xb0, 0x2, 0x1109, 0x17b, 0x3, 0x2, 0x2, 0x2, 0x110a, 0x1116, 
       0x5, 0x216, 0x10c, 0x2, 0x110b, 0x110d, 0x7, 0x93, 0x2, 0x2, 0x110c, 
       0x110e, 0x7, 0x244, 0x2, 0x2, 0x110d, 0x110c, 0x3, 0x2, 0x2, 0x2, 
       0x110d, 0x110e, 0x3, 0x2, 0x2, 0x2, 0x110e, 0x110f, 0x3, 0x2, 0x2, 
       0x2, 0x110f, 0x1116, 0x7, 0x415, 0x2, 0x2, 0x1110, 0x1116, 0x5, 0x210, 
       0x109, 0x2, 0x1111, 0x1116, 0x7, 0x94, 0x2, 0x2, 0x1112, 0x1113, 
       0x7, 0x68, 0x2, 0x2, 0x1113, 0x1116, 0x7, 0x170, 0x2, 0x2, 0x1114, 
       0x1116, 0x7, 0x92, 0x2, 0x2, 0x1115, 0x110a, 0x3, 0x2, 0x2, 0x2, 
       0x1115, 0x110b, 0x3, 0x2, 0x2, 0x2, 0x1115, 0x1110, 0x3, 0x2, 0x2, 
       0x2, 0x1115, 0x1111, 0x3, 0x2, 0x2, 0x2, 0x1115, 0x1112, 0x3, 0x2, 
       0x2, 0x2, 0x1115, 0x1114, 0x3, 0x2, 0x2, 0x2, 0x1116, 0x17d, 0x3, 
       0x2, 0x2, 0x2, 0x1117, 0x111a, 0x5, 0x14, 0xb, 0x2, 0x1118, 0x111a, 
       0x5, 0x6, 0x4, 0x2, 0x1119, 0x1117, 0x3, 0x2, 0x2, 0x2, 0x1119, 0x1118, 
       0x3, 0x2, 0x2, 0x2, 0x111a, 0x111b, 0x3, 0x2, 0x2, 0x2, 0x111b, 0x111c, 
       0x7, 0x409, 0x2, 0x2, 0x111c, 0x17f, 0x3, 0x2, 0x2, 0x2, 0x111d, 
       0x1120, 0x7, 0xad, 0x2, 0x2, 0x111e, 0x1121, 0x5, 0x222, 0x112, 0x2, 
       0x111f, 0x1121, 0x5, 0x25e, 0x130, 0x2, 0x1120, 0x111e, 0x3, 0x2, 
       0x2, 0x2, 0x1120, 0x111f, 0x3, 0x2, 0x2, 0x2, 0x1121, 0x1122, 0x3, 
       0x2, 0x2, 0x2, 0x1122, 0x1124, 0x7, 0x9e, 0x2, 0x2, 0x1123, 0x1125, 
       0x5, 0x17e, 0xc0, 0x2, 0x1124, 0x1123, 0x3, 0x2, 0x2, 0x2, 0x1125, 
       0x1126, 0x3, 0x2, 0x2, 0x2, 0x1126, 0x1124, 0x3, 0x2, 0x2, 0x2, 0x1126, 
       0x1127, 0x3, 0x2, 0x2, 0x2, 0x1127, 0x181, 0x3, 0x2, 0x2, 0x2, 0x1128, 
       0x1129, 0x7, 0x34, 0x2, 0x2, 0x1129, 0x112a, 0x5, 0x25e, 0x130, 0x2, 
       0x112a, 0x112c, 0x7, 0x9e, 0x2, 0x2, 0x112b, 0x112d, 0x5, 0x17e, 
       0xc0, 0x2, 0x112c, 0x112b, 0x3, 0x2, 0x2, 0x2, 0x112d, 0x112e, 0x3, 
       0x2, 0x2, 0x2, 0x112e, 0x112c, 0x3, 0x2, 0x2, 0x2, 0x112e, 0x112f, 
       0x3, 0x2, 0x2, 0x2, 0x112f, 0x183, 0x3, 0x2, 0x2, 0x2, 0x1130, 0x1131, 
       0x7, 0x9, 0x2, 0x2, 0x1131, 0x1132, 0x7, 0x240, 0x2, 0x2, 0x1132, 
       0x1137, 0x5, 0x196, 0xcc, 0x2, 0x1133, 0x1134, 0x7, 0x408, 0x2, 0x2, 
       0x1134, 0x1136, 0x5, 0x196, 0xcc, 0x2, 0x1135, 0x1133, 0x3, 0x2, 
       0x2, 0x2, 0x1136, 0x1139, 0x3, 0x2, 0x2, 0x2, 0x1137, 0x1135, 0x3, 
       0x2, 0x2, 0x2, 0x1137, 0x1138, 0x3, 0x2, 0x2, 0x2, 0x1138, 0x1167, 
       0x3, 0x2, 0x2, 0x2, 0x1139, 0x1137, 0x3, 0x2, 0x2, 0x2, 0x113a, 0x113b, 
       0x7, 0x9, 0x2, 0x2, 0x113b, 0x113d, 0x7, 0x240, 0x2, 0x2, 0x113c, 
       0x113e, 0x5, 0x246, 0x124, 0x2, 0x113d, 0x113c, 0x3, 0x2, 0x2, 0x2, 
       0x113d, 0x113e, 0x3, 0x2, 0x2, 0x2, 0x113e, 0x113f, 0x3, 0x2, 0x2, 
       0x2, 0x113f, 0x1144, 0x5, 0x198, 0xcd, 0x2, 0x1140, 0x1141, 0x7, 
       0x408, 0x2, 0x2, 0x1141, 0x1143, 0x5, 0x198, 0xcd, 0x2, 0x1142, 0x1140, 
       0x3, 0x2, 0x2, 0x2, 0x1143, 0x1146, 0x3, 0x2, 0x2, 0x2, 0x1144, 0x1142, 
       0x3, 0x2, 0x2, 0x2, 0x1144, 0x1145, 0x3, 0x2, 0x2, 0x2, 0x1145, 0x1155, 
       0x3, 0x2, 0x2, 0x2, 0x1146, 0x1144, 0x3, 0x2, 0x2, 0x2, 0x1147, 0x1153, 
       0x7, 0x82, 0x2, 0x2, 0x1148, 0x1154, 0x7, 0x1c5, 0x2, 0x2, 0x1149, 
       0x1150, 0x5, 0x19a, 0xce, 0x2, 0x114a, 0x114c, 0x7, 0xc, 0x2, 0x2, 
       0x114b, 0x114a, 0x3, 0x2, 0x2, 0x2, 0x114b, 0x114c, 0x3, 0x2, 0x2, 
       0x2, 0x114c, 0x114d, 0x3, 0x2, 0x2, 0x2, 0x114d, 0x114f, 0x5, 0x19a, 
       0xce, 0x2, 0x114e, 0x114b, 0x3, 0x2, 0x2, 0x2, 0x114f, 0x1152, 0x3, 
       0x2, 0x2, 0x2, 0x1150, 0x114e, 0x3, 0x2, 0x2, 0x2, 0x1150, 0x1151, 
       0x3, 0x2, 0x2, 0x2, 0x1151, 0x1154, 0x3, 0x2, 0x2, 0x2, 0x1152, 0x1150, 
       0x3, 0x2, 0x2, 0x2, 0x1153, 0x1148, 0x3, 0x2, 0x2, 0x2, 0x1153, 0x1149, 
       0x3, 0x2, 0x2, 0x2, 0x1154, 0x1156, 0x3, 0x2, 0x2, 0x2, 0x1155, 0x1147, 
       0x3, 0x2, 0x2, 0x2, 0x1155, 0x1156, 0x3, 0x2, 0x2, 0x2, 0x1156, 0x115d, 
       0x3, 0x2, 0x2, 0x2, 0x1157, 0x1159, 0x7, 0xb0, 0x2, 0x2, 0x1158, 
       0x115a, 0x5, 0x19c, 0xcf, 0x2, 0x1159, 0x1158, 0x3, 0x2, 0x2, 0x2, 
       0x115a, 0x115b, 0x3, 0x2, 0x2, 0x2, 0x115b, 0x1159, 0x3, 0x2, 0x2, 
       0x2, 0x115b, 0x115c, 0x3, 0x2, 0x2, 0x2, 0x115c, 0x115e, 0x3, 0x2, 
       0x2, 0x2, 0x115d, 0x1157, 0x3, 0x2, 0x2, 0x2, 0x115d, 0x115e, 0x3, 
       0x2, 0x2, 0x2, 0x115e, 0x1163, 0x3, 0x2, 0x2, 0x2, 0x115f, 0x1162, 
       0x5, 0x19e, 0xd0, 0x2, 0x1160, 0x1162, 0x5, 0x1a0, 0xd1, 0x2, 0x1161, 
       0x115f, 0x3, 0x2, 0x2, 0x2, 0x1161, 0x1160, 0x3, 0x2, 0x2, 0x2, 0x1162, 
       0x1165, 0x3, 0x2, 0x2, 0x2, 0x1163, 0x1161, 0x3, 0x2, 0x2, 0x2, 0x1163, 
       0x1164, 0x3, 0x2, 0x2, 0x2, 0x1164, 0x1167, 0x3, 0x2, 0x2, 0x2, 0x1165, 
       0x1163, 0x3, 0x2, 0x2, 0x2, 0x1166, 0x1130, 0x3, 0x2, 0x2, 0x2, 0x1166, 
       0x113a, 0x3, 0x2, 0x2, 0x2, 0x1167, 0x185, 0x3, 0x2, 0x2, 0x2, 0x1168, 
       0x1169, 0x7, 0x20, 0x2, 0x2, 0x1169, 0x116a, 0x7, 0x240, 0x2, 0x2, 
       0x116a, 0x116f, 0x5, 0x198, 0xcd, 0x2, 0x116b, 0x116c, 0x7, 0x408, 
       0x2, 0x2, 0x116c, 0x116e, 0x5, 0x198, 0xcd, 0x2, 0x116d, 0x116b, 
       0x3, 0x2, 0x2, 0x2, 0x116e, 0x1171, 0x3, 0x2, 0x2, 0x2, 0x116f, 0x116d, 
       0x3, 0x2, 0x2, 0x2, 0x116f, 0x1170, 0x3, 0x2, 0x2, 0x2, 0x1170, 0x119f, 
       0x3, 0x2, 0x2, 0x2, 0x1171, 0x116f, 0x3, 0x2, 0x2, 0x2, 0x1172, 0x1173, 
       0x7, 0x20, 0x2, 0x2, 0x1173, 0x1175, 0x7, 0x240, 0x2, 0x2, 0x1174, 
       0x1176, 0x5, 0x248, 0x125, 0x2, 0x1175, 0x1174, 0x3, 0x2, 0x2, 0x2, 
       0x1175, 0x1176, 0x3, 0x2, 0x2, 0x2, 0x1176, 0x1177, 0x3, 0x2, 0x2, 
       0x2, 0x1177, 0x117c, 0x5, 0x198, 0xcd, 0x2, 0x1178, 0x1179, 0x7, 
       0x408, 0x2, 0x2, 0x1179, 0x117b, 0x5, 0x198, 0xcd, 0x2, 0x117a, 0x1178, 
       0x3, 0x2, 0x2, 0x2, 0x117b, 0x117e, 0x3, 0x2, 0x2, 0x2, 0x117c, 0x117a, 
       0x3, 0x2, 0x2, 0x2, 0x117c, 0x117d, 0x3, 0x2, 0x2, 0x2, 0x117d, 0x118d, 
       0x3, 0x2, 0x2, 0x2, 0x117e, 0x117c, 0x3, 0x2, 0x2, 0x2, 0x117f, 0x118b, 
       0x7, 0x82, 0x2, 0x2, 0x1180, 0x118c, 0x7, 0x1c5, 0x2, 0x2, 0x1181, 
       0x1188, 0x5, 0x19a, 0xce, 0x2, 0x1182, 0x1184, 0x7, 0xc, 0x2, 0x2, 
       0x1183, 0x1182, 0x3, 0x2, 0x2, 0x2, 0x1183, 0x1184, 0x3, 0x2, 0x2, 
       0x2, 0x1184, 0x1185, 0x3, 0x2, 0x2, 0x2, 0x1185, 0x1187, 0x5, 0x19a, 
       0xce, 0x2, 0x1186, 0x1183, 0x3, 0x2, 0x2, 0x2, 0x1187, 0x118a, 0x3, 
       0x2, 0x2, 0x2, 0x1188, 0x1186, 0x3, 0x2, 0x2, 0x2, 0x1188, 0x1189, 
       0x3, 0x2, 0x2, 0x2, 0x1189, 0x118c, 0x3, 0x2, 0x2, 0x2, 0x118a, 0x1188, 
       0x3, 0x2, 0x2, 0x2, 0x118b, 0x1180, 0x3, 0x2, 0x2, 0x2, 0x118b, 0x1181, 
       0x3, 0x2, 0x2, 0x2, 0x118c, 0x118e, 0x3, 0x2, 0x2, 0x2, 0x118d, 0x117f, 
       0x3, 0x2, 0x2, 0x2, 0x118d, 0x118e, 0x3, 0x2, 0x2, 0x2, 0x118e, 0x1195, 
       0x3, 0x2, 0x2, 0x2, 0x118f, 0x1191, 0x7, 0xb0, 0x2, 0x2, 0x1190, 
       0x1192, 0x5, 0x19c, 0xcf, 0x2, 0x1191, 0x1190, 0x3, 0x2, 0x2, 0x2, 
       0x1192, 0x1193, 0x3, 0x2, 0x2, 0x2, 0x1193, 0x1191, 0x3, 0x2, 0x2, 
       0x2, 0x1193, 0x1194, 0x3, 0x2, 0x2, 0x2, 0x1194, 0x1196, 0x3, 0x2, 
       0x2, 0x2, 0x1195, 0x118f, 0x3, 0x2, 0x2, 0x2, 0x1195, 0x1196, 0x3, 
       0x2, 0x2, 0x2, 0x1196, 0x119b, 0x3, 0x2, 0x2, 0x2, 0x1197, 0x119a, 
       0x5, 0x19e, 0xd0, 0x2, 0x1198, 0x119a, 0x5, 0x1a0, 0xd1, 0x2, 0x1199, 
       0x1197, 0x3, 0x2, 0x2, 0x2, 0x1199, 0x1198, 0x3, 0x2, 0x2, 0x2, 0x119a, 
       0x119d, 0x3, 0x2, 0x2, 0x2, 0x119b, 0x1199, 0x3, 0x2, 0x2, 0x2, 0x119b, 
       0x119c, 0x3, 0x2, 0x2, 0x2, 0x119c, 0x119f, 0x3, 0x2, 0x2, 0x2, 0x119d, 
       0x119b, 0x3, 0x2, 0x2, 0x2, 0x119e, 0x1168, 0x3, 0x2, 0x2, 0x2, 0x119e, 
       0x1172, 0x3, 0x2, 0x2, 0x2, 0x119f, 0x187, 0x3, 0x2, 0x2, 0x2, 0x11a0, 
       0x11a1, 0x7, 0x31, 0x2, 0x2, 0x11a1, 0x11a3, 0x7, 0x240, 0x2, 0x2, 
       0x11a2, 0x11a4, 0x5, 0x246, 0x124, 0x2, 0x11a3, 0x11a2, 0x3, 0x2, 
       0x2, 0x2, 0x11a3, 0x11a4, 0x3, 0x2, 0x2, 0x2, 0x11a4, 0x11a5, 0x3, 
       0x2, 0x2, 0x2, 0x11a5, 0x11aa, 0x5, 0x1fe, 0x100, 0x2, 0x11a6, 0x11a7, 
       0x7, 0x408, 0x2, 0x2, 0x11a7, 0x11a9, 0x5, 0x1fe, 0x100, 0x2, 0x11a8, 
       0x11a6, 0x3, 0x2, 0x2, 0x2, 0x11a9, 0x11ac, 0x3, 0x2, 0x2, 0x2, 0x11aa, 
       0x11a8, 0x3, 0x2, 0x2, 0x2, 0x11aa, 0x11ab, 0x3, 0x2, 0x2, 0x2, 0x11ab, 
       0x189, 0x3, 0x2, 0x2, 0x2, 0x11ac, 0x11aa, 0x3, 0x2, 0x2, 0x2, 0x11ad, 
       0x11ae, 0x7, 0x43, 0x2, 0x2, 0x11ae, 0x11b3, 0x5, 0x1a2, 0xd2, 0x2, 
       0x11af, 0x11b0, 0x7, 0x408, 0x2, 0x2, 0x11b0, 0x11b2, 0x5, 0x1a2, 
       0xd2, 0x2, 0x11b1, 0x11af, 0x3, 0x2, 0x2, 0x2, 0x11b2, 0x11b5, 0x3, 
       0x2, 0x2, 0x2, 0x11b3, 0x11b1, 0x3, 0x2, 0x2, 0x2, 0x11b3, 0x11b4, 
       0x3, 0x2, 0x2, 0x2, 0x11b4, 0x11b6, 0x3, 0x2, 0x2, 0x2, 0x11b5, 0x11b3, 
       0x3, 0x2, 0x2, 0x2, 0x11b6, 0x11b8, 0x7, 0x6c, 0x2, 0x2, 0x11b7, 
       0x11b9, 0x9, 0x3e, 0x2, 0x2, 0x11b8, 0x11b7, 0x3, 0x2, 0x2, 0x2, 
       0x11b8, 0x11b9, 0x3, 0x2, 0x2, 0x2, 0x11b9, 0x11ba, 0x3, 0x2, 0x2, 
       0x2, 0x11ba, 0x11bb, 0x5, 0x1a6, 0xd4, 0x2, 0x11bb, 0x11bc, 0x7, 
       0x9f, 0x2, 0x2, 0x11bc, 0x11c1, 0x5, 0x198, 0xcd, 0x2, 0x11bd, 0x11be, 
       0x7, 0x408, 0x2, 0x2, 0x11be, 0x11c0, 0x5, 0x198, 0xcd, 0x2, 0x11bf, 
       0x11bd, 0x3, 0x2, 0x2, 0x2, 0x11c0, 0x11c3, 0x3, 0x2, 0x2, 0x2, 0x11c1, 
       0x11bf, 0x3, 0x2, 0x2, 0x2, 0x11c1, 0x11c2, 0x3, 0x2, 0x2, 0x2, 0x11c2, 
       0x11d2, 0x3, 0x2, 0x2, 0x2, 0x11c3, 0x11c1, 0x3, 0x2, 0x2, 0x2, 0x11c4, 
       0x11d0, 0x7, 0x82, 0x2, 0x2, 0x11c5, 0x11d1, 0x7, 0x1c5, 0x2, 0x2, 
       0x11c6, 0x11cd, 0x5, 0x19a, 0xce, 0x2, 0x11c7, 0x11c9, 0x7, 0xc, 
       0x2, 0x2, 0x11c8, 0x11c7, 0x3, 0x2, 0x2, 0x2, 0x11c8, 0x11c9, 0x3, 
       0x2, 0x2, 0x2, 0x11c9, 0x11ca, 0x3, 0x2, 0x2, 0x2, 0x11ca, 0x11cc, 
       0x5, 0x19a, 0xce, 0x2, 0x11cb, 0x11c8, 0x3, 0x2, 0x2, 0x2, 0x11cc, 
       0x11cf, 0x3, 0x2, 0x2, 0x2, 0x11cd, 0x11cb, 0x3, 0x2, 0x2, 0x2, 0x11cd, 
       0x11ce, 0x3, 0x2, 0x2, 0x2, 0x11ce, 0x11d1, 0x3, 0x2, 0x2, 0x2, 0x11cf, 
       0x11cd, 0x3, 0x2, 0x2, 0x2, 0x11d0, 0x11c5, 0x3, 0x2, 0x2, 0x2, 0x11d0, 
       0x11c6, 0x3, 0x2, 0x2, 0x2, 0x11d1, 0x11d3, 0x3, 0x2, 0x2, 0x2, 0x11d2, 
       0x11c4, 0x3, 0x2, 0x2, 0x2, 0x11d2, 0x11d3, 0x3, 0x2, 0x2, 0x2, 0x11d3, 
       0x11dd, 0x3, 0x2, 0x2, 0x2, 0x11d4, 0x11da, 0x7, 0xb0, 0x2, 0x2, 
       0x11d5, 0x11d6, 0x7, 0x43, 0x2, 0x2, 0x11d6, 0x11d9, 0x7, 0x6e, 0x2, 
       0x2, 0x11d7, 0x11d9, 0x5, 0x19c, 0xcf, 0x2, 0x11d8, 0x11d5, 0x3, 
       0x2, 0x2, 0x2, 0x11d8, 0x11d7, 0x3, 0x2, 0x2, 0x2, 0x11d9, 0x11dc, 
       0x3, 0x2, 0x2, 0x2, 0x11da, 0x11d8, 0x3, 0x2, 0x2, 0x2, 0x11da, 0x11db, 
       0x3, 0x2, 0x2, 0x2, 0x11db, 0x11de, 0x3, 0x2, 0x2, 0x2, 0x11dc, 0x11da, 
       0x3, 0x2, 0x2, 0x2, 0x11dd, 0x11d4, 0x3, 0x2, 0x2, 0x2, 0x11dd, 0x11de, 
       0x3, 0x2, 0x2, 0x2, 0x11de, 0x18b, 0x3, 0x2, 0x2, 0x2, 0x11df, 0x11e0, 
       0x7, 0x43, 0x2, 0x2, 0x11e0, 0x11e1, 0x7, 0x1e5, 0x2, 0x2, 0x11e1, 
       0x11e2, 0x7, 0x6c, 0x2, 0x2, 0x11e2, 0x11e3, 0x5, 0x1fe, 0x100, 0x2, 
       0x11e3, 0x11e4, 0x7, 0x9f, 0x2, 0x2, 0x11e4, 0x11e9, 0x5, 0x1fe, 
       0x100, 0x2, 0x11e5, 0x11e6, 0x7, 0x408, 0x2, 0x2, 0x11e6, 0x11e8, 
       0x5, 0x1fe, 0x100, 0x2, 0x11e7, 0x11e5, 0x3, 0x2, 0x2, 0x2, 0x11e8, 
       0x11eb, 0x3, 0x2, 0x2, 0x2, 0x11e9, 0x11e7, 0x3, 0x2, 0x2, 0x2, 0x11e9, 
       0x11ea, 0x3, 0x2, 0x2, 0x2, 0x11ea, 0x11ef, 0x3, 0x2, 0x2, 0x2, 0x11eb, 
       0x11e9, 0x3, 0x2, 0x2, 0x2, 0x11ec, 0x11ed, 0x7, 0xb0, 0x2, 0x2, 
       0x11ed, 0x11ee, 0x7, 0x43, 0x2, 0x2, 0x11ee, 0x11f0, 0x7, 0x6e, 0x2, 
       0x2, 0x11ef, 0x11ec, 0x3, 0x2, 0x2, 0x2, 0x11ef, 0x11f0, 0x3, 0x2, 
       0x2, 0x2, 0x11f0, 0x18d, 0x3, 0x2, 0x2, 0x2, 0x11f1, 0x11f2, 0x7, 
       0x7f, 0x2, 0x2, 0x11f2, 0x11f3, 0x7, 0x240, 0x2, 0x2, 0x11f3, 0x11f8, 
       0x5, 0x1a8, 0xd5, 0x2, 0x11f4, 0x11f5, 0x7, 0x408, 0x2, 0x2, 0x11f5, 
       0x11f7, 0x5, 0x1a8, 0xd5, 0x2, 0x11f6, 0x11f4, 0x3, 0x2, 0x2, 0x2, 
       0x11f7, 0x11fa, 0x3, 0x2, 0x2, 0x2, 0x11f8, 0x11f6, 0x3, 0x2, 0x2, 
       0x2, 0x11f8, 0x11f9, 0x3, 0x2, 0x2, 0x2, 0x11f9, 0x18f, 0x3, 0x2, 
       0x2, 0x2, 0x11fa, 0x11f8, 0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11fc, 0x7, 
       0x86, 0x2, 0x2, 0x11fc, 0x1201, 0x5, 0x1a2, 0xd2, 0x2, 0x11fd, 0x11fe, 
       0x7, 0x408, 0x2, 0x2, 0x11fe, 0x1200, 0x5, 0x1a2, 0xd2, 0x2, 0x11ff, 
       0x11fd, 0x3, 0x2, 0x2, 0x2, 0x1200, 0x1203, 0x3, 0x2, 0x2, 0x2, 0x1201, 
       0x11ff, 0x3, 0x2, 0x2, 0x2, 0x1201, 0x1202, 0x3, 0x2, 0x2, 0x2, 0x1202, 
       0x1204, 0x3, 0x2, 0x2, 0x2, 0x1203, 0x1201, 0x3, 0x2, 0x2, 0x2, 0x1204, 
       0x1206, 0x7, 0x6c, 0x2, 0x2, 0x1205, 0x1207, 0x9, 0x3e, 0x2, 0x2, 
       0x1206, 0x1205, 0x3, 0x2, 0x2, 0x2, 0x1206, 0x1207, 0x3, 0x2, 0x2, 
       0x2, 0x1207, 0x1208, 0x3, 0x2, 0x2, 0x2, 0x1208, 0x1209, 0x5, 0x1a6, 
       0xd4, 0x2, 0x1209, 0x120a, 0x7, 0x3f, 0x2, 0x2, 0x120a, 0x120f, 0x5, 
       0x1fe, 0x100, 0x2, 0x120b, 0x120c, 0x7, 0x408, 0x2, 0x2, 0x120c, 
       0x120e, 0x5, 0x1fe, 0x100, 0x2, 0x120d, 0x120b, 0x3, 0x2, 0x2, 0x2, 
       0x120e, 0x1211, 0x3, 0x2, 0x2, 0x2, 0x120f, 0x120d, 0x3, 0x2, 0x2, 
       0x2, 0x120f, 0x1210, 0x3, 0x2, 0x2, 0x2, 0x1210, 0x1224, 0x3, 0x2, 
       0x2, 0x2, 0x1211, 0x120f, 0x3, 0x2, 0x2, 0x2, 0x1212, 0x1213, 0x7, 
       0x86, 0x2, 0x2, 0x1213, 0x1215, 0x7, 0x8, 0x2, 0x2, 0x1214, 0x1216, 
       0x7, 0x266, 0x2, 0x2, 0x1215, 0x1214, 0x3, 0x2, 0x2, 0x2, 0x1215, 
       0x1216, 0x3, 0x2, 0x2, 0x2, 0x1216, 0x1217, 0x3, 0x2, 0x2, 0x2, 0x1217, 
       0x1218, 0x7, 0x408, 0x2, 0x2, 0x1218, 0x1219, 0x7, 0x43, 0x2, 0x2, 
       0x1219, 0x121a, 0x7, 0x6e, 0x2, 0x2, 0x121a, 0x121b, 0x7, 0x3f, 0x2, 
       0x2, 0x121b, 0x1220, 0x5, 0x1fe, 0x100, 0x2, 0x121c, 0x121d, 0x7, 
       0x408, 0x2, 0x2, 0x121d, 0x121f, 0x5, 0x1fe, 0x100, 0x2, 0x121e, 
       0x121c, 0x3, 0x2, 0x2, 0x2, 0x121f, 0x1222, 0x3, 0x2, 0x2, 0x2, 0x1220, 
       0x121e, 0x3, 0x2, 0x2, 0x2, 0x1220, 0x1221, 0x3, 0x2, 0x2, 0x2, 0x1221, 
       0x1224, 0x3, 0x2, 0x2, 0x2, 0x1222, 0x1220, 0x3, 0x2, 0x2, 0x2, 0x1223, 
       0x11fb, 0x3, 0x2, 0x2, 0x2, 0x1223, 0x1212, 0x3, 0x2, 0x2, 0x2, 0x1224, 
       0x191, 0x3, 0x2, 0x2, 0x2, 0x1225, 0x1226, 0x7, 0x86, 0x2, 0x2, 0x1226, 
       0x1227, 0x7, 0x1e5, 0x2, 0x2, 0x1227, 0x1228, 0x7, 0x6c, 0x2, 0x2, 
       0x1228, 0x1229, 0x5, 0x1fe, 0x100, 0x2, 0x1229, 0x122a, 0x7, 0x3f, 
       0x2, 0x2, 0x122a, 0x122f, 0x5, 0x1fe, 0x100, 0x2, 0x122b, 0x122c, 
       0x7, 0x408, 0x2, 0x2, 0x122c, 0x122e, 0x5, 0x1fe, 0x100, 0x2, 0x122d, 
       0x122b, 0x3, 0x2, 0x2, 0x2, 0x122e, 0x1231, 0x3, 0x2, 0x2, 0x2, 0x122f, 
       0x122d, 0x3, 0x2, 0x2, 0x2, 0x122f, 0x1230, 0x3, 0x2, 0x2, 0x2, 0x1230, 
       0x193, 0x3, 0x2, 0x2, 0x2, 0x1231, 0x122f, 0x3, 0x2, 0x2, 0x2, 0x1232, 
       0x1233, 0x7, 0x8c, 0x2, 0x2, 0x1233, 0x1236, 0x7, 0x1d8, 0x2, 0x2, 
       0x1234, 0x1235, 0x7, 0x3c, 0x2, 0x2, 0x1235, 0x1237, 0x5, 0x1fe, 
       0x100, 0x2, 0x1236, 0x1234, 0x3, 0x2, 0x2, 0x2, 0x1236, 0x1237, 0x3, 
       0x2, 0x2, 0x2, 0x1237, 0x1238, 0x3, 0x2, 0x2, 0x2, 0x1238, 0x123b, 
       0x7, 0x3fd, 0x2, 0x2, 0x1239, 0x123c, 0x5, 0x258, 0x12d, 0x2, 0x123a, 
       0x123c, 0x7, 0x415, 0x2, 0x2, 0x123b, 0x1239, 0x3, 0x2, 0x2, 0x2, 
       0x123b, 0x123a, 0x3, 0x2, 0x2, 0x2, 0x123c, 0x195, 0x3, 0x2, 0x2, 
       0x2, 0x123d, 0x123e, 0x5, 0x1fe, 0x100, 0x2, 0x123e, 0x123f, 0x5, 
       0x19e, 0xd0, 0x2, 0x123f, 0x197, 0x3, 0x2, 0x2, 0x2, 0x1240, 0x1241, 
       0x5, 0x1fe, 0x100, 0x2, 0x1241, 0x1242, 0x7, 0x17c, 0x2, 0x2, 0x1242, 
       0x1243, 0x7, 0x12, 0x2, 0x2, 0x1243, 0x1244, 0x7, 0x1d8, 0x2, 0x2, 
       0x1244, 0x1245, 0x7, 0x415, 0x2, 0x2, 0x1245, 0x1259, 0x3, 0x2, 0x2, 
       0x2, 0x1246, 0x1247, 0x5, 0x1fe, 0x100, 0x2, 0x1247, 0x124a, 0x7, 
       0x17c, 0x2, 0x2, 0x1248, 0x1249, 0x7, 0xb0, 0x2, 0x2, 0x1249, 0x124b, 
       0x5, 0x20e, 0x108, 0x2, 0x124a, 0x1248, 0x3, 0x2, 0x2, 0x2, 0x124a, 
       0x124b, 0x3, 0x2, 0x2, 0x2, 0x124b, 0x124c, 0x3, 0x2, 0x2, 0x2, 0x124c, 
       0x124d, 0x7, 0x12, 0x2, 0x2, 0x124d, 0x124e, 0x7, 0x415, 0x2, 0x2, 
       0x124e, 0x1259, 0x3, 0x2, 0x2, 0x2, 0x124f, 0x1250, 0x5, 0x1fe, 0x100, 
       0x2, 0x1250, 0x1251, 0x7, 0x17c, 0x2, 0x2, 0x1251, 0x1252, 0x7, 0xb0, 
       0x2, 0x2, 0x1252, 0x1255, 0x5, 0x20e, 0x108, 0x2, 0x1253, 0x1254, 
       0x7, 0xd, 0x2, 0x2, 0x1254, 0x1256, 0x7, 0x415, 0x2, 0x2, 0x1255, 
       0x1253, 0x3, 0x2, 0x2, 0x2, 0x1255, 0x1256, 0x3, 0x2, 0x2, 0x2, 0x1256, 
       0x1259, 0x3, 0x2, 0x2, 0x2, 0x1257, 0x1259, 0x5, 0x1fe, 0x100, 0x2, 
       0x1258, 0x1240, 0x3, 0x2, 0x2, 0x2, 0x1258, 0x1246, 0x3, 0x2, 0x2, 
       0x2, 0x1258, 0x124f, 0x3, 0x2, 0x2, 0x2, 0x1258, 0x1257, 0x3, 0x2, 
       0x2, 0x2, 0x1259, 0x199, 0x3, 0x2, 0x2, 0x2, 0x125a, 0x1263, 0x7, 
       0x98, 0x2, 0x2, 0x125b, 0x1263, 0x7, 0x24e, 0x2, 0x2, 0x125c, 0x125d, 
       0x7, 0x12a, 0x2, 0x2, 0x125d, 0x1263, 0x7, 0x415, 0x2, 0x2, 0x125e, 
       0x125f, 0x7, 0x18b, 0x2, 0x2, 0x125f, 0x1263, 0x7, 0x415, 0x2, 0x2, 
       0x1260, 0x1261, 0x7, 0x229, 0x2, 0x2, 0x1261, 0x1263, 0x7, 0x415, 
       0x2, 0x2, 0x1262, 0x125a, 0x3, 0x2, 0x2, 0x2, 0x1262, 0x125b, 0x3, 
       0x2, 0x2, 0x2, 0x1262, 0x125c, 0x3, 0x2, 0x2, 0x2, 0x1262, 0x125e, 
       0x3, 0x2, 0x2, 0x2, 0x1262, 0x1260, 0x3, 0x2, 0x2, 0x2, 0x1263, 0x19b, 
       0x3, 0x2, 0x2, 0x2, 0x1264, 0x1265, 0x7, 0x1ad, 0x2, 0x2, 0x1265, 
       0x126d, 0x5, 0x216, 0x10c, 0x2, 0x1266, 0x1267, 0x7, 0x1b0, 0x2, 
       0x2, 0x1267, 0x126d, 0x5, 0x216, 0x10c, 0x2, 0x1268, 0x1269, 0x7, 
       0x1ac, 0x2, 0x2, 0x1269, 0x126d, 0x5, 0x216, 0x10c, 0x2, 0x126a, 
       0x126b, 0x7, 0x1b1, 0x2, 0x2, 0x126b, 0x126d, 0x5, 0x216, 0x10c, 
       0x2, 0x126c, 0x1264, 0x3, 0x2, 0x2, 0x2, 0x126c, 0x1266, 0x3, 0x2, 
       0x2, 0x2, 0x126c, 0x1268, 0x3, 0x2, 0x2, 0x2, 0x126c, 0x126a, 0x3, 
       0x2, 0x2, 0x2, 0x126d, 0x19d, 0x3, 0x2, 0x2, 0x2, 0x126e, 0x126f, 
       0x7, 0x1d8, 0x2, 0x2, 0x126f, 0x1276, 0x7, 0x163, 0x2, 0x2, 0x1270, 
       0x1277, 0x7, 0x28, 0x2, 0x2, 0x1271, 0x1277, 0x7, 0x1c1, 0x2, 0x2, 
       0x1272, 0x1273, 0x7, 0x4f, 0x2, 0x2, 0x1273, 0x1274, 0x5, 0x216, 
       0x10c, 0x2, 0x1274, 0x1275, 0x7, 0x258, 0x2, 0x2, 0x1275, 0x1277, 
       0x3, 0x2, 0x2, 0x2, 0x1276, 0x1270, 0x3, 0x2, 0x2, 0x2, 0x1276, 0x1271, 
       0x3, 0x2, 0x2, 0x2, 0x1276, 0x1272, 0x3, 0x2, 0x2, 0x2, 0x1276, 0x1277, 
       0x3, 0x2, 0x2, 0x2, 0x1277, 0x19f, 0x3, 0x2, 0x2, 0x2, 0x1278, 0x1279, 
       0x7, 0x110, 0x2, 0x2, 0x1279, 0x127a, 0x9, 0x3f, 0x2, 0x2, 0x127a, 
       0x1a1, 0x3, 0x2, 0x2, 0x2, 0x127b, 0x1280, 0x5, 0x1a4, 0xd3, 0x2, 
       0x127c, 0x127d, 0x7, 0x406, 0x2, 0x2, 0x127d, 0x127e, 0x5, 0x230, 
       0x119, 0x2, 0x127e, 0x127f, 0x7, 0x407, 0x2, 0x2, 0x127f, 0x1281, 
       0x3, 0x2, 0x2, 0x2, 0x1280, 0x127c, 0x3, 0x2, 0x2, 0x2, 0x1280, 0x1281, 
       0x3, 0x2, 0x2, 0x2, 0x1281, 0x1a3, 0x3, 0x2, 0x2, 0x2, 0x1282, 0x1284, 
       0x7, 0x8, 0x2, 0x2, 0x1283, 0x1285, 0x7, 0x266, 0x2, 0x2, 0x1284, 
       0x1283, 0x3, 0x2, 0x2, 0x2, 0x1284, 0x1285, 0x3, 0x2, 0x2, 0x2, 0x1285, 
       0x12d2, 0x3, 0x2, 0x2, 0x2, 0x1286, 0x1288, 0x7, 0x9, 0x2, 0x2, 0x1287, 
       0x1289, 0x7, 0x25f, 0x2, 0x2, 0x1288, 0x1287, 0x3, 0x2, 0x2, 0x2, 
       0x1288, 0x1289, 0x3, 0x2, 0x2, 0x2, 0x1289, 0x12d2, 0x3, 0x2, 0x2, 
       0x2, 0x128a, 0x1292, 0x7, 0x20, 0x2, 0x2, 0x128b, 0x128c, 0x7, 0x231, 
       0x2, 0x2, 0x128c, 0x1293, 0x7, 0x25e, 0x2, 0x2, 0x128d, 0x1293, 0x7, 
       0x25f, 0x2, 0x2, 0x128e, 0x1293, 0x7, 0x246, 0x2, 0x2, 0x128f, 0x1293, 
       0x7, 0x240, 0x2, 0x2, 0x1290, 0x1293, 0x7, 0x230, 0x2, 0x2, 0x1291, 
       0x1293, 0x7, 0x1ff, 0x2, 0x2, 0x1292, 0x128b, 0x3, 0x2, 0x2, 0x2, 
       0x1292, 0x128d, 0x3, 0x2, 0x2, 0x2, 0x1292, 0x128e, 0x3, 0x2, 0x2, 
       0x2, 0x1292, 0x128f, 0x3, 0x2, 0x2, 0x2, 0x1292, 0x1290, 0x3, 0x2, 
       0x2, 0x2, 0x1292, 0x1291, 0x3, 0x2, 0x2, 0x2, 0x1292, 0x1293, 0x3, 
       0x2, 0x2, 0x2, 0x1293, 0x12d2, 0x3, 0x2, 0x2, 0x2, 0x1294, 0x12d2, 
       0x7, 0x2a, 0x2, 0x2, 0x1295, 0x1297, 0x7, 0x31, 0x2, 0x2, 0x1296, 
       0x1298, 0x7, 0x1ff, 0x2, 0x2, 0x1297, 0x1296, 0x3, 0x2, 0x2, 0x2, 
       0x1297, 0x1298, 0x3, 0x2, 0x2, 0x2, 0x1298, 0x12d2, 0x3, 0x2, 0x2, 
       0x2, 0x1299, 0x12d2, 0x7, 0x15e, 0x2, 0x2, 0x129a, 0x12d2, 0x7, 0x260, 
       0x2, 0x2, 0x129b, 0x12d2, 0x7, 0x261, 0x2, 0x2, 0x129c, 0x129d, 0x7, 
       0x43, 0x2, 0x2, 0x129d, 0x12d2, 0x7, 0x6e, 0x2, 0x2, 0x129e, 0x12d2, 
       0x7, 0x4a, 0x2, 0x2, 0x129f, 0x12d2, 0x7, 0x4e, 0x2, 0x2, 0x12a0, 
       0x12a1, 0x7, 0x5f, 0x2, 0x2, 0x12a1, 0x12d2, 0x7, 0x25e, 0x2, 0x2, 
       0x12a2, 0x12d2, 0x7, 0x262, 0x2, 0x2, 0x12a3, 0x12d2, 0x7, 0x1e5, 
       0x2, 0x2, 0x12a4, 0x12d2, 0x7, 0x7c, 0x2, 0x2, 0x12a5, 0x12d2, 0x7, 
       0x263, 0x2, 0x2, 0x12a6, 0x12a7, 0x7, 0x1fa, 0x2, 0x2, 0x12a7, 0x12d2, 
       0x9, 0x40, 0x2, 0x2, 0x12a8, 0x12d2, 0x7, 0x8b, 0x2, 0x2, 0x12a9, 
       0x12aa, 0x7, 0x8e, 0x2, 0x2, 0x12aa, 0x12d2, 0x9, 0x41, 0x2, 0x2, 
       0x12ab, 0x12d2, 0x7, 0x264, 0x2, 0x2, 0x12ac, 0x12d2, 0x7, 0x265, 
       0x2, 0x2, 0x12ad, 0x12d2, 0x7, 0xa1, 0x2, 0x2, 0x12ae, 0x12d2, 0x7, 
       0xa8, 0x2, 0x2, 0x12af, 0x12d2, 0x7, 0xa9, 0x2, 0x2, 0x12b0, 0x12d2, 
       0x7, 0x267, 0x2, 0x2, 0x12b1, 0x12d2, 0x7, 0x268, 0x2, 0x2, 0x12b2, 
       0x12d2, 0x7, 0x269, 0x2, 0x2, 0x12b3, 0x12d2, 0x7, 0x26a, 0x2, 0x2, 
       0x12b4, 0x12d2, 0x7, 0x26b, 0x2, 0x2, 0x12b5, 0x12d2, 0x7, 0x26c, 
       0x2, 0x2, 0x12b6, 0x12d2, 0x7, 0x26d, 0x2, 0x2, 0x12b7, 0x12d2, 0x7, 
       0x26e, 0x2, 0x2, 0x12b8, 0x12d2, 0x7, 0x26f, 0x2, 0x2, 0x12b9, 0x12d2, 
       0x7, 0x270, 0x2, 0x2, 0x12ba, 0x12d2, 0x7, 0x271, 0x2, 0x2, 0x12bb, 
       0x12d2, 0x7, 0x272, 0x2, 0x2, 0x12bc, 0x12d2, 0x7, 0x273, 0x2, 0x2, 
       0x12bd, 0x12d2, 0x7, 0x274, 0x2, 0x2, 0x12be, 0x12d2, 0x7, 0x275, 
       0x2, 0x2, 0x12bf, 0x12d2, 0x7, 0x276, 0x2, 0x2, 0x12c0, 0x12d2, 0x7, 
       0x277, 0x2, 0x2, 0x12c1, 0x12d2, 0x7, 0x278, 0x2, 0x2, 0x12c2, 0x12d2, 
       0x7, 0x279, 0x2, 0x2, 0x12c3, 0x12d2, 0x7, 0x27a, 0x2, 0x2, 0x12c4, 
       0x12d2, 0x7, 0x27b, 0x2, 0x2, 0x12c5, 0x12d2, 0x7, 0x27c, 0x2, 0x2, 
       0x12c6, 0x12d2, 0x7, 0x27d, 0x2, 0x2, 0x12c7, 0x12d2, 0x7, 0x27e, 
       0x2, 0x2, 0x12c8, 0x12d2, 0x7, 0x27f, 0x2, 0x2, 0x12c9, 0x12d2, 0x7, 
       0x280, 0x2, 0x2, 0x12ca, 0x12d2, 0x7, 0x281, 0x2, 0x2, 0x12cb, 0x12d2, 
       0x7, 0x282, 0x2, 0x2, 0x12cc, 0x12d2, 0x7, 0x3ce, 0x2, 0x2, 0x12cd, 
       0x12d2, 0x7, 0x283, 0x2, 0x2, 0x12ce, 0x12d2, 0x7, 0x284, 0x2, 0x2, 
       0x12cf, 0x12d2, 0x7, 0x285, 0x2, 0x2, 0x12d0, 0x12d2, 0x7, 0x286, 
       0x2, 0x2, 0x12d1, 0x1282, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x1286, 0x3, 
       0x2, 0x2, 0x2, 0x12d1, 0x128a, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x1294, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x1295, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x1299, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x129a, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x129b, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x129c, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x129e, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x129f, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a0, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a2, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a3, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a4, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a5, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a6, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a8, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12a9, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ab, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ac, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ad, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ae, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12af, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b0, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b1, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b2, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b3, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b4, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b5, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b6, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b7, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b8, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12b9, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ba, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12bb, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12bc, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12bd, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12be, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12bf, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c0, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c1, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c2, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c3, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c4, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c5, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c6, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c7, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c8, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12c9, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ca, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12cb, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12cc, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12cd, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12ce, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12cf, 
       0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12d0, 0x3, 0x2, 0x2, 0x2, 0x12d2, 0x1a5, 
       0x3, 0x2, 0x2, 0x2, 0x12d3, 0x12e4, 0x7, 0x3f5, 0x2, 0x2, 0x12d4, 
       0x12d5, 0x7, 0x3f5, 0x2, 0x2, 0x12d5, 0x12d6, 0x7, 0x405, 0x2, 0x2, 
       0x12d6, 0x12e4, 0x7, 0x3f5, 0x2, 0x2, 0x12d7, 0x12d8, 0x5, 0x210, 
       0x109, 0x2, 0x12d8, 0x12d9, 0x7, 0x405, 0x2, 0x2, 0x12d9, 0x12da, 
       0x7, 0x3f5, 0x2, 0x2, 0x12da, 0x12e4, 0x3, 0x2, 0x2, 0x2, 0x12db, 
       0x12dc, 0x5, 0x210, 0x109, 0x2, 0x12dc, 0x12dd, 0x7, 0x405, 0x2, 
       0x2, 0x12dd, 0x12de, 0x5, 0x210, 0x109, 0x2, 0x12de, 0x12e4, 0x3, 
       0x2, 0x2, 0x2, 0x12df, 0x12e0, 0x5, 0x210, 0x109, 0x2, 0x12e0, 0x12e1, 
       0x5, 0x214, 0x10b, 0x2, 0x12e1, 0x12e4, 0x3, 0x2, 0x2, 0x2, 0x12e2, 
       0x12e4, 0x5, 0x210, 0x109, 0x2, 0x12e3, 0x12d3, 0x3, 0x2, 0x2, 0x2, 
       0x12e3, 0x12d4, 0x3, 0x2, 0x2, 0x2, 0x12e3, 0x12d7, 0x3, 0x2, 0x2, 
       0x2, 0x12e3, 0x12db, 0x3, 0x2, 0x2, 0x2, 0x12e3, 0x12df, 0x3, 0x2, 
       0x2, 0x2, 0x12e3, 0x12e2, 0x3, 0x2, 0x2, 0x2, 0x12e4, 0x1a7, 0x3, 
       0x2, 0x2, 0x2, 0x12e5, 0x12e6, 0x5, 0x1fe, 0x100, 0x2, 0x12e6, 0x12e7, 
       0x7, 0x9f, 0x2, 0x2, 0x12e7, 0x12e8, 0x5, 0x1fe, 0x100, 0x2, 0x12e8, 
       0x1a9, 0x3, 0x2, 0x2, 0x2, 0x12e9, 0x12eb, 0x7, 0xb, 0x2, 0x2, 0x12ea, 
       0x12ec, 0x9, 0x42, 0x2, 0x2, 0x12eb, 0x12ea, 0x3, 0x2, 0x2, 0x2, 
       0x12eb, 0x12ec, 0x3, 0x2, 0x2, 0x2, 0x12ec, 0x12ed, 0x3, 0x2, 0x2, 
       0x2, 0x12ed, 0x12ee, 0x7, 0x9c, 0x2, 0x2, 0x12ee, 0x12ef, 0x5, 0x232, 
       0x11a, 0x2, 0x12ef, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0x12f0, 0x12f1, 0x7, 
       0x19, 0x2, 0x2, 0x12f1, 0x12f2, 0x7, 0x9c, 0x2, 0x2, 0x12f2, 0x12f6, 
       0x5, 0x232, 0x11a, 0x2, 0x12f3, 0x12f5, 0x5, 0x1b4, 0xdb, 0x2, 0x12f4, 
       0x12f3, 0x3, 0x2, 0x2, 0x2, 0x12f5, 0x12f8, 0x3, 0x2, 0x2, 0x2, 0x12f6, 
       0x12f4, 0x3, 0x2, 0x2, 0x2, 0x12f6, 0x12f7, 0x3, 0x2, 0x2, 0x2, 0x12f7, 
       0x1ad, 0x3, 0x2, 0x2, 0x2, 0x12f8, 0x12f6, 0x3, 0x2, 0x2, 0x2, 0x12f9, 
       0x12fa, 0x7, 0x128, 0x2, 0x2, 0x12fa, 0x12fb, 0x7, 0x9c, 0x2, 0x2, 
       0x12fb, 0x12fd, 0x5, 0x232, 0x11a, 0x2, 0x12fc, 0x12fe, 0x9, 0x43, 
       0x2, 0x2, 0x12fd, 0x12fc, 0x3, 0x2, 0x2, 0x2, 0x12fd, 0x12fe, 0x3, 
       0x2, 0x2, 0x2, 0x12fe, 0x1af, 0x3, 0x2, 0x2, 0x2, 0x12ff, 0x1301, 
       0x7, 0x6d, 0x2, 0x2, 0x1300, 0x1302, 0x9, 0x42, 0x2, 0x2, 0x1301, 
       0x1300, 0x3, 0x2, 0x2, 0x2, 0x1301, 0x1302, 0x3, 0x2, 0x2, 0x2, 0x1302, 
       0x1303, 0x3, 0x2, 0x2, 0x2, 0x1303, 0x1304, 0x9, 0x44, 0x2, 0x2, 
       0x1304, 0x1305, 0x5, 0x232, 0x11a, 0x2, 0x1305, 0x1b1, 0x3, 0x2, 
       0x2, 0x2, 0x1306, 0x1308, 0x7, 0x1f2, 0x2, 0x2, 0x1307, 0x1309, 0x9, 
       0x42, 0x2, 0x2, 0x1308, 0x1307, 0x3, 0x2, 0x2, 0x2, 0x1308, 0x1309, 
       0x3, 0x2, 0x2, 0x2, 0x1309, 0x130a, 0x3, 0x2, 0x2, 0x2, 0x130a, 0x130b, 
       0x7, 0x9c, 0x2, 0x2, 0x130b, 0x130d, 0x5, 0x232, 0x11a, 0x2, 0x130c, 
       0x130e, 0x7, 0x1e7, 0x2, 0x2, 0x130d, 0x130c, 0x3, 0x2, 0x2, 0x2, 
       0x130d, 0x130e, 0x3, 0x2, 0x2, 0x2, 0x130e, 0x1310, 0x3, 0x2, 0x2, 
       0x2, 0x130f, 0x1311, 0x7, 0x165, 0x2, 0x2, 0x1310, 0x130f, 0x3, 0x2, 
       0x2, 0x2, 0x1310, 0x1311, 0x3, 0x2, 0x2, 0x2, 0x1311, 0x1313, 0x3, 
       0x2, 0x2, 0x2, 0x1312, 0x1314, 0x7, 0x241, 0x2, 0x2, 0x1313, 0x1312, 
       0x3, 0x2, 0x2, 0x2, 0x1313, 0x1314, 0x3, 0x2, 0x2, 0x2, 0x1314, 0x1b3, 
       0x3, 0x2, 0x2, 0x2, 0x1315, 0x1316, 0x7, 0x3c, 0x2, 0x2, 0x1316, 
       0x131d, 0x7, 0x23f, 0x2, 0x2, 0x1317, 0x131d, 0x7, 0x1e7, 0x2, 0x2, 
       0x1318, 0x131d, 0x7, 0x167, 0x2, 0x2, 0x1319, 0x131d, 0x7, 0x1b2, 
       0x2, 0x2, 0x131a, 0x131d, 0x7, 0x165, 0x2, 0x2, 0x131b, 0x131d, 0x7, 
       0x126, 0x2, 0x2, 0x131c, 0x1315, 0x3, 0x2, 0x2, 0x2, 0x131c, 0x1317, 
       0x3, 0x2, 0x2, 0x2, 0x131c, 0x1318, 0x3, 0x2, 0x2, 0x2, 0x131c, 0x1319, 
       0x3, 0x2, 0x2, 0x2, 0x131c, 0x131a, 0x3, 0x2, 0x2, 0x2, 0x131c, 0x131b, 
       0x3, 0x2, 0x2, 0x2, 0x131d, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0x131e, 0x1320, 
       0x7, 0x20, 0x2, 0x2, 0x131f, 0x1321, 0x7, 0x113, 0x2, 0x2, 0x1320, 
       0x131f, 0x3, 0x2, 0x2, 0x2, 0x1320, 0x1321, 0x3, 0x2, 0x2, 0x2, 0x1321, 
       0x1322, 0x3, 0x2, 0x2, 0x2, 0x1322, 0x1323, 0x7, 0x172, 0x2, 0x2, 
       0x1323, 0x1324, 0x5, 0x210, 0x109, 0x2, 0x1324, 0x1325, 0x7, 0x1fe, 
       0x2, 0x2, 0x1325, 0x1326, 0x9, 0x45, 0x2, 0x2, 0x1326, 0x1327, 0x7, 
       0x214, 0x2, 0x2, 0x1327, 0x1328, 0x7, 0x415, 0x2, 0x2, 0x1328, 0x1b7, 
       0x3, 0x2, 0x2, 0x2, 0x1329, 0x132a, 0x7, 0x183, 0x2, 0x2, 0x132a, 
       0x132b, 0x7, 0x1da, 0x2, 0x2, 0x132b, 0x132c, 0x5, 0x210, 0x109, 
       0x2, 0x132c, 0x132d, 0x7, 0x214, 0x2, 0x2, 0x132d, 0x132e, 0x7, 0x415, 
       0x2, 0x2, 0x132e, 0x1b9, 0x3, 0x2, 0x2, 0x2, 0x132f, 0x1330, 0x7, 
       0x23c, 0x2, 0x2, 0x1330, 0x1331, 0x7, 0x1da, 0x2, 0x2, 0x1331, 0x1332, 
       0x5, 0x210, 0x109, 0x2, 0x1332, 0x1bb, 0x3, 0x2, 0x2, 0x2, 0x1333, 
       0x1334, 0x7, 0x8c, 0x2, 0x2, 0x1334, 0x1335, 0x5, 0x1c0, 0xe1, 0x2, 
       0x1335, 0x1336, 0x9, 0x46, 0x2, 0x2, 0x1336, 0x133e, 0x5, 0x25e, 
       0x130, 0x2, 0x1337, 0x1338, 0x7, 0x408, 0x2, 0x2, 0x1338, 0x1339, 
       0x5, 0x1c0, 0xe1, 0x2, 0x1339, 0x133a, 0x9, 0x46, 0x2, 0x2, 0x133a, 
       0x133b, 0x5, 0x25e, 0x130, 0x2, 0x133b, 0x133d, 0x3, 0x2, 0x2, 0x2, 
       0x133c, 0x1337, 0x3, 0x2, 0x2, 0x2, 0x133d, 0x1340, 0x3, 0x2, 0x2, 
       0x2, 0x133e, 0x133c, 0x3, 0x2, 0x2, 0x2, 0x133e, 0x133f, 0x3, 0x2, 
       0x2, 0x2, 0x133f, 0x1367, 0x3, 0x2, 0x2, 0x2, 0x1340, 0x133e, 0x3, 
       0x2, 0x2, 0x2, 0x1341, 0x1345, 0x7, 0x8c, 0x2, 0x2, 0x1342, 0x1343, 
       0x7, 0x18, 0x2, 0x2, 0x1343, 0x1346, 0x7, 0x8c, 0x2, 0x2, 0x1344, 
       0x1346, 0x7, 0x2e5, 0x2, 0x2, 0x1345, 0x1342, 0x3, 0x2, 0x2, 0x2, 
       0x1345, 0x1344, 0x3, 0x2, 0x2, 0x2, 0x1346, 0x1349, 0x3, 0x2, 0x2, 
       0x2, 0x1347, 0x134a, 0x5, 0x202, 0x102, 0x2, 0x1348, 0x134a, 0x7, 
       0x28, 0x2, 0x2, 0x1349, 0x1347, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x1348, 
       0x3, 0x2, 0x2, 0x2, 0x134a, 0x1367, 0x3, 0x2, 0x2, 0x2, 0x134b, 0x134c, 
       0x7, 0x8c, 0x2, 0x2, 0x134c, 0x1353, 0x7, 0x1bf, 0x2, 0x2, 0x134d, 
       0x1350, 0x5, 0x202, 0x102, 0x2, 0x134e, 0x134f, 0x7, 0x1a, 0x2, 0x2, 
       0x134f, 0x1351, 0x5, 0x204, 0x103, 0x2, 0x1350, 0x134e, 0x3, 0x2, 
       0x2, 0x2, 0x1350, 0x1351, 0x3, 0x2, 0x2, 0x2, 0x1351, 0x1354, 0x3, 
       0x2, 0x2, 0x2, 0x1352, 0x1354, 0x7, 0x28, 0x2, 0x2, 0x1353, 0x134d, 
       0x3, 0x2, 0x2, 0x2, 0x1353, 0x1352, 0x3, 0x2, 0x2, 0x2, 0x1354, 0x1367, 
       0x3, 0x2, 0x2, 0x2, 0x1355, 0x1367, 0x5, 0x194, 0xcb, 0x2, 0x1356, 
       0x1367, 0x5, 0x118, 0x8d, 0x2, 0x1357, 0x1367, 0x5, 0x116, 0x8c, 
       0x2, 0x1358, 0x1359, 0x7, 0x8c, 0x2, 0x2, 0x1359, 0x135a, 0x5, 0x1f6, 
       0xfc, 0x2, 0x135a, 0x135b, 0x9, 0x46, 0x2, 0x2, 0x135b, 0x1363, 0x5, 
       0x25e, 0x130, 0x2, 0x135c, 0x135d, 0x7, 0x408, 0x2, 0x2, 0x135d, 
       0x135e, 0x5, 0x1f6, 0xfc, 0x2, 0x135e, 0x135f, 0x9, 0x46, 0x2, 0x2, 
       0x135f, 0x1360, 0x5, 0x25e, 0x130, 0x2, 0x1360, 0x1362, 0x3, 0x2, 
       0x2, 0x2, 0x1361, 0x135c, 0x3, 0x2, 0x2, 0x2, 0x1362, 0x1365, 0x3, 
       0x2, 0x2, 0x2, 0x1363, 0x1361, 0x3, 0x2, 0x2, 0x2, 0x1363, 0x1364, 
       0x3, 0x2, 0x2, 0x2, 0x1364, 0x1367, 0x3, 0x2, 0x2, 0x2, 0x1365, 0x1363, 
       0x3, 0x2, 0x2, 0x2, 0x1366, 0x1333, 0x3, 0x2, 0x2, 0x2, 0x1366, 0x1341, 
       0x3, 0x2, 0x2, 0x2, 0x1366, 0x134b, 0x3, 0x2, 0x2, 0x2, 0x1366, 0x1355, 
       0x3, 0x2, 0x2, 0x2, 0x1366, 0x1356, 0x3, 0x2, 0x2, 0x2, 0x1366, 0x1357, 
       0x3, 0x2, 0x2, 0x2, 0x1366, 0x1358, 0x3, 0x2, 0x2, 0x2, 0x1367, 0x1bd, 
       0x3, 0x2, 0x2, 0x2, 0x1368, 0x1369, 0x7, 0x8e, 0x2, 0x2, 0x1369, 
       0x136a, 0x9, 0x34, 0x2, 0x2, 0x136a, 0x1400, 0x7, 0x196, 0x2, 0x2, 
       0x136b, 0x136c, 0x7, 0x8e, 0x2, 0x2, 0x136c, 0x136d, 0x9, 0x47, 0x2, 
       0x2, 0x136d, 0x1370, 0x7, 0x15f, 0x2, 0x2, 0x136e, 0x136f, 0x7, 0x49, 
       0x2, 0x2, 0x136f, 0x1371, 0x7, 0x415, 0x2, 0x2, 0x1370, 0x136e, 0x3, 
       0x2, 0x2, 0x2, 0x1370, 0x1371, 0x3, 0x2, 0x2, 0x2, 0x1371, 0x1374, 
       0x3, 0x2, 0x2, 0x2, 0x1372, 0x1373, 0x7, 0x3f, 0x2, 0x2, 0x1373, 
       0x1375, 0x5, 0x216, 0x10c, 0x2, 0x1374, 0x1372, 0x3, 0x2, 0x2, 0x2, 
       0x1374, 0x1375, 0x3, 0x2, 0x2, 0x2, 0x1375, 0x137d, 0x3, 0x2, 0x2, 
       0x2, 0x1376, 0x137a, 0x7, 0x5b, 0x2, 0x2, 0x1377, 0x1378, 0x5, 0x216, 
       0x10c, 0x2, 0x1378, 0x1379, 0x7, 0x408, 0x2, 0x2, 0x1379, 0x137b, 
       0x3, 0x2, 0x2, 0x2, 0x137a, 0x1377, 0x3, 0x2, 0x2, 0x2, 0x137a, 0x137b, 
       0x3, 0x2, 0x2, 0x2, 0x137b, 0x137c, 0x3, 0x2, 0x2, 0x2, 0x137c, 0x137e, 
       0x5, 0x216, 0x10c, 0x2, 0x137d, 0x1376, 0x3, 0x2, 0x2, 0x2, 0x137d, 
       0x137e, 0x3, 0x2, 0x2, 0x2, 0x137e, 0x1400, 0x3, 0x2, 0x2, 0x2, 0x137f, 
       0x1380, 0x7, 0x8e, 0x2, 0x2, 0x1380, 0x1382, 0x5, 0x1c2, 0xe2, 0x2, 
       0x1381, 0x1383, 0x5, 0x1c4, 0xe3, 0x2, 0x1382, 0x1381, 0x3, 0x2, 
       0x2, 0x2, 0x1382, 0x1383, 0x3, 0x2, 0x2, 0x2, 0x1383, 0x1400, 0x3, 
       0x2, 0x2, 0x2, 0x1384, 0x1386, 0x7, 0x8e, 0x2, 0x2, 0x1385, 0x1387, 
       0x7, 0x171, 0x2, 0x2, 0x1386, 0x1385, 0x3, 0x2, 0x2, 0x2, 0x1386, 
       0x1387, 0x3, 0x2, 0x2, 0x2, 0x1387, 0x1388, 0x3, 0x2, 0x2, 0x2, 0x1388, 
       0x1389, 0x9, 0x26, 0x2, 0x2, 0x1389, 0x138a, 0x9, 0x48, 0x2, 0x2, 
       0x138a, 0x138d, 0x5, 0x1f8, 0xfd, 0x2, 0x138b, 0x138c, 0x9, 0x48, 
       0x2, 0x2, 0x138c, 0x138e, 0x5, 0x210, 0x109, 0x2, 0x138d, 0x138b, 
       0x3, 0x2, 0x2, 0x2, 0x138d, 0x138e, 0x3, 0x2, 0x2, 0x2, 0x138e, 0x1390, 
       0x3, 0x2, 0x2, 0x2, 0x138f, 0x1391, 0x5, 0x1c4, 0xe3, 0x2, 0x1390, 
       0x138f, 0x3, 0x2, 0x2, 0x2, 0x1390, 0x1391, 0x3, 0x2, 0x2, 0x2, 0x1391, 
       0x1400, 0x3, 0x2, 0x2, 0x2, 0x1392, 0x1393, 0x7, 0x8e, 0x2, 0x2, 
       0x1393, 0x1394, 0x7, 0x20, 0x2, 0x2, 0x1394, 0x1396, 0x9, 0x2, 0x2, 
       0x2, 0x1395, 0x1397, 0x5, 0x248, 0x125, 0x2, 0x1396, 0x1395, 0x3, 
       0x2, 0x2, 0x2, 0x1396, 0x1397, 0x3, 0x2, 0x2, 0x2, 0x1397, 0x1398, 
       0x3, 0x2, 0x2, 0x2, 0x1398, 0x1400, 0x5, 0x210, 0x109, 0x2, 0x1399, 
       0x139a, 0x7, 0x8e, 0x2, 0x2, 0x139a, 0x139b, 0x7, 0x20, 0x2, 0x2, 
       0x139b, 0x139c, 0x9, 0x49, 0x2, 0x2, 0x139c, 0x1400, 0x5, 0x1f6, 
       0xfc, 0x2, 0x139d, 0x139e, 0x7, 0x8e, 0x2, 0x2, 0x139e, 0x139f, 0x7, 
       0x20, 0x2, 0x2, 0x139f, 0x13a0, 0x7, 0x240, 0x2, 0x2, 0x13a0, 0x1400, 
       0x5, 0x1fe, 0x100, 0x2, 0x13a1, 0x13a2, 0x7, 0x8e, 0x2, 0x2, 0x13a2, 
       0x13a3, 0x7, 0x158, 0x2, 0x2, 0x13a3, 0x13a4, 0x5, 0x206, 0x104, 
       0x2, 0x13a4, 0x13a5, 0x9, 0x4a, 0x2, 0x2, 0x13a5, 0x1400, 0x3, 0x2, 
       0x2, 0x2, 0x13a6, 0x13a7, 0x7, 0x8e, 0x2, 0x2, 0x13a7, 0x1400, 0x5, 
       0x1c6, 0xe4, 0x2, 0x13a8, 0x13a9, 0x7, 0x8e, 0x2, 0x2, 0x13a9, 0x13aa, 
       0x9, 0x4b, 0x2, 0x2, 0x13aa, 0x13ae, 0x7, 0x5b, 0x2, 0x2, 0x13ab, 
       0x13ac, 0x5, 0x216, 0x10c, 0x2, 0x13ac, 0x13ad, 0x7, 0x408, 0x2, 
       0x2, 0x13ad, 0x13af, 0x3, 0x2, 0x2, 0x2, 0x13ae, 0x13ab, 0x3, 0x2, 
       0x2, 0x2, 0x13ae, 0x13af, 0x3, 0x2, 0x2, 0x2, 0x13af, 0x13b0, 0x3, 
       0x2, 0x2, 0x2, 0x13b0, 0x1400, 0x5, 0x216, 0x10c, 0x2, 0x13b1, 0x13b2, 
       0x7, 0x8e, 0x2, 0x2, 0x13b2, 0x13b3, 0x7, 0xf1, 0x2, 0x2, 0x13b3, 
       0x13b4, 0x7, 0x406, 0x2, 0x2, 0x13b4, 0x13b5, 0x7, 0x3f5, 0x2, 0x2, 
       0x13b5, 0x13b6, 0x7, 0x407, 0x2, 0x2, 0x13b6, 0x1400, 0x9, 0x4b, 
       0x2, 0x2, 0x13b7, 0x13b8, 0x7, 0x8e, 0x2, 0x2, 0x13b8, 0x13bb, 0x5, 
       0x1c8, 0xe5, 0x2, 0x13b9, 0x13ba, 0x9, 0x48, 0x2, 0x2, 0x13ba, 0x13bc, 
       0x5, 0x210, 0x109, 0x2, 0x13bb, 0x13b9, 0x3, 0x2, 0x2, 0x2, 0x13bb, 
       0x13bc, 0x3, 0x2, 0x2, 0x2, 0x13bc, 0x13be, 0x3, 0x2, 0x2, 0x2, 0x13bd, 
       0x13bf, 0x5, 0x1c4, 0xe3, 0x2, 0x13be, 0x13bd, 0x3, 0x2, 0x2, 0x2, 
       0x13be, 0x13bf, 0x3, 0x2, 0x2, 0x2, 0x13bf, 0x1400, 0x3, 0x2, 0x2, 
       0x2, 0x13c0, 0x13c1, 0x7, 0x8e, 0x2, 0x2, 0x13c1, 0x13c2, 0x9, 0x4c, 
       0x2, 0x2, 0x13c2, 0x13c3, 0x7, 0x12f, 0x2, 0x2, 0x13c3, 0x1400, 0x5, 
       0x1f6, 0xfc, 0x2, 0x13c4, 0x13c5, 0x7, 0x8e, 0x2, 0x2, 0x13c5, 0x13c8, 
       0x7, 0x175, 0x2, 0x2, 0x13c6, 0x13c7, 0x7, 0x3c, 0x2, 0x2, 0x13c7, 
       0x13c9, 0x5, 0x1fe, 0x100, 0x2, 0x13c8, 0x13c6, 0x3, 0x2, 0x2, 0x2, 
       0x13c8, 0x13c9, 0x3, 0x2, 0x2, 0x2, 0x13c9, 0x1400, 0x3, 0x2, 0x2, 
       0x2, 0x13ca, 0x13cb, 0x7, 0x8e, 0x2, 0x2, 0x13cb, 0x13cc, 0x9, 0x4d, 
       0x2, 0x2, 0x13cc, 0x13cd, 0x9, 0x48, 0x2, 0x2, 0x13cd, 0x13d0, 0x5, 
       0x1f8, 0xfd, 0x2, 0x13ce, 0x13cf, 0x9, 0x48, 0x2, 0x2, 0x13cf, 0x13d1, 
       0x5, 0x210, 0x109, 0x2, 0x13d0, 0x13ce, 0x3, 0x2, 0x2, 0x2, 0x13d0, 
       0x13d1, 0x3, 0x2, 0x2, 0x2, 0x13d1, 0x13d4, 0x3, 0x2, 0x2, 0x2, 0x13d2, 
       0x13d3, 0x7, 0xae, 0x2, 0x2, 0x13d3, 0x13d5, 0x5, 0x25e, 0x130, 0x2, 
       0x13d4, 0x13d2, 0x3, 0x2, 0x2, 0x2, 0x13d4, 0x13d5, 0x3, 0x2, 0x2, 
       0x2, 0x13d5, 0x1400, 0x3, 0x2, 0x2, 0x2, 0x13d6, 0x13d7, 0x7, 0x8e, 
       0x2, 0x2, 0x13d7, 0x13d8, 0x7, 0x1ce, 0x2, 0x2, 0x13d8, 0x13db, 0x7, 
       0x25e, 0x2, 0x2, 0x13d9, 0x13da, 0x9, 0x48, 0x2, 0x2, 0x13da, 0x13dc, 
       0x5, 0x210, 0x109, 0x2, 0x13db, 0x13d9, 0x3, 0x2, 0x2, 0x2, 0x13db, 
       0x13dc, 0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13de, 0x3, 0x2, 0x2, 0x2, 0x13dd, 
       0x13df, 0x5, 0x1c4, 0xe3, 0x2, 0x13de, 0x13dd, 0x3, 0x2, 0x2, 0x2, 
       0x13de, 0x13df, 0x3, 0x2, 0x2, 0x2, 0x13df, 0x1400, 0x3, 0x2, 0x2, 
       0x2, 0x13e0, 0x13e1, 0x7, 0x8e, 0x2, 0x2, 0x13e1, 0x13e2, 0x7, 0x1e3, 
       0x2, 0x2, 0x13e2, 0x13e7, 0x5, 0x1ca, 0xe6, 0x2, 0x13e3, 0x13e4, 
       0x7, 0x408, 0x2, 0x2, 0x13e4, 0x13e6, 0x5, 0x1ca, 0xe6, 0x2, 0x13e5, 
       0x13e3, 0x3, 0x2, 0x2, 0x2, 0x13e6, 0x13e9, 0x3, 0x2, 0x2, 0x2, 0x13e7, 
       0x13e5, 0x3, 0x2, 0x2, 0x2, 0x13e7, 0x13e8, 0x3, 0x2, 0x2, 0x2, 0x13e8, 
       0x13ed, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x13e7, 0x3, 0x2, 0x2, 0x2, 0x13ea, 
       0x13eb, 0x7, 0x3c, 0x2, 0x2, 0x13eb, 0x13ec, 0x7, 0x1e6, 0x2, 0x2, 
       0x13ec, 0x13ee, 0x5, 0x216, 0x10c, 0x2, 0x13ed, 0x13ea, 0x3, 0x2, 
       0x2, 0x2, 0x13ed, 0x13ee, 0x3, 0x2, 0x2, 0x2, 0x13ee, 0x13ef, 0x3, 
       0x2, 0x2, 0x2, 0x13ef, 0x13f3, 0x7, 0x5b, 0x2, 0x2, 0x13f0, 0x13f1, 
       0x5, 0x216, 0x10c, 0x2, 0x13f1, 0x13f2, 0x7, 0x408, 0x2, 0x2, 0x13f2, 
       0x13f4, 0x3, 0x2, 0x2, 0x2, 0x13f3, 0x13f0, 0x3, 0x2, 0x2, 0x2, 0x13f3, 
       0x13f4, 0x3, 0x2, 0x2, 0x2, 0x13f4, 0x13f5, 0x3, 0x2, 0x2, 0x2, 0x13f5, 
       0x13f6, 0x5, 0x216, 0x10c, 0x2, 0x13f6, 0x1400, 0x3, 0x2, 0x2, 0x2, 
       0x13f7, 0x13f8, 0x7, 0x8e, 0x2, 0x2, 0x13f8, 0x13f9, 0x7, 0x20f, 
       0x2, 0x2, 0x13f9, 0x13fd, 0x7, 0x223, 0x2, 0x2, 0x13fa, 0x13fb, 0x7, 
       0x3c, 0x2, 0x2, 0x13fb, 0x13fc, 0x7, 0x127, 0x2, 0x2, 0x13fc, 0x13fe, 
       0x7, 0x415, 0x2, 0x2, 0x13fd, 0x13fa, 0x3, 0x2, 0x2, 0x2, 0x13fd, 
       0x13fe, 0x3, 0x2, 0x2, 0x2, 0x13fe, 0x1400, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x1368, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x136b, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x137f, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x1384, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x1392, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x1399, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x139d, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13a1, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x13a6, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13a8, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x13b1, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13b7, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x13c0, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13c4, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x13ca, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13d6, 0x3, 0x2, 0x2, 0x2, 0x13ff, 
       0x13e0, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13f7, 0x3, 0x2, 0x2, 0x2, 0x1400, 
       0x1bf, 0x3, 0x2, 0x2, 0x2, 0x1401, 0x140c, 0x7, 0x421, 0x2, 0x2, 
       0x1402, 0x140c, 0x7, 0x422, 0x2, 0x2, 0x1403, 0x1404, 0x7, 0x40a, 
       0x2, 0x2, 0x1404, 0x1406, 0x7, 0x40a, 0x2, 0x2, 0x1405, 0x1403, 0x3, 
       0x2, 0x2, 0x2, 0x1405, 0x1406, 0x3, 0x2, 0x2, 0x2, 0x1406, 0x1407, 
       0x3, 0x2, 0x2, 0x2, 0x1407, 0x1409, 0x9, 0x4e, 0x2, 0x2, 0x1408, 
       0x1405, 0x3, 0x2, 0x2, 0x2, 0x1408, 0x1409, 0x3, 0x2, 0x2, 0x2, 0x1409, 
       0x140a, 0x3, 0x2, 0x2, 0x2, 0x140a, 0x140c, 0x5, 0x210, 0x109, 0x2, 
       0x140b, 0x1401, 0x3, 0x2, 0x2, 0x2, 0x140b, 0x1402, 0x3, 0x2, 0x2, 
       0x2, 0x140b, 0x1408, 0x3, 0x2, 0x2, 0x2, 0x140c, 0x1c1, 0x3, 0x2, 
       0x2, 0x2, 0x140d, 0x140e, 0x7, 0x18, 0x2, 0x2, 0x140e, 0x141b, 0x7, 
       0x8c, 0x2, 0x2, 0x140f, 0x141b, 0x7, 0x2e8, 0x2, 0x2, 0x1410, 0x141b, 
       0x7, 0x26, 0x2, 0x2, 0x1411, 0x141b, 0x7, 0x8a, 0x2, 0x2, 0x1412, 
       0x1413, 0x7, 0x172, 0x2, 0x2, 0x1413, 0x141b, 0x7, 0x223, 0x2, 0x2, 
       0x1414, 0x1415, 0x7, 0x77, 0x2, 0x2, 0x1415, 0x141b, 0x7, 0x223, 
       0x2, 0x2, 0x1416, 0x1418, 0x9, 0x33, 0x2, 0x2, 0x1417, 0x1416, 0x3, 
       0x2, 0x2, 0x2, 0x1417, 0x1418, 0x3, 0x2, 0x2, 0x2, 0x1418, 0x1419, 
       0x3, 0x2, 0x2, 0x2, 0x1419, 0x141b, 0x9, 0x4f, 0x2, 0x2, 0x141a, 
       0x140d, 0x3, 0x2, 0x2, 0x2, 0x141a, 0x140f, 0x3, 0x2, 0x2, 0x2, 0x141a, 
       0x1410, 0x3, 0x2, 0x2, 0x2, 0x141a, 0x1411, 0x3, 0x2, 0x2, 0x2, 0x141a, 
       0x1412, 0x3, 0x2, 0x2, 0x2, 0x141a, 0x1414, 0x3, 0x2, 0x2, 0x2, 0x141a, 
       0x1417, 0x3, 0x2, 0x2, 0x2, 0x141b, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0x141c, 
       0x141d, 0x7, 0x5a, 0x2, 0x2, 0x141d, 0x1421, 0x7, 0x415, 0x2, 0x2, 
       0x141e, 0x141f, 0x7, 0xae, 0x2, 0x2, 0x141f, 0x1421, 0x5, 0x25e, 
       0x130, 0x2, 0x1420, 0x141c, 0x3, 0x2, 0x2, 0x2, 0x1420, 0x141e, 0x3, 
       0x2, 0x2, 0x2, 0x1421, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0x1422, 0x1424, 
       0x7, 0x225, 0x2, 0x2, 0x1423, 0x1422, 0x3, 0x2, 0x2, 0x2, 0x1423, 
       0x1424, 0x3, 0x2, 0x2, 0x2, 0x1424, 0x1425, 0x3, 0x2, 0x2, 0x2, 0x1425, 
       0x1434, 0x7, 0x159, 0x2, 0x2, 0x1426, 0x1427, 0x7, 0x197, 0x2, 0x2, 
       0x1427, 0x1434, 0x7, 0x223, 0x2, 0x2, 0x1428, 0x1434, 0x7, 0x1dc, 
       0x2, 0x2, 0x1429, 0x1434, 0x7, 0x266, 0x2, 0x2, 0x142a, 0x142c, 0x7, 
       0x171, 0x2, 0x2, 0x142b, 0x142a, 0x3, 0x2, 0x2, 0x2, 0x142b, 0x142c, 
       0x3, 0x2, 0x2, 0x2, 0x142c, 0x142d, 0x3, 0x2, 0x2, 0x2, 0x142d, 0x1434, 
       0x7, 0x1e2, 0x2, 0x2, 0x142e, 0x1434, 0x7, 0x1e4, 0x2, 0x2, 0x142f, 
       0x1430, 0x7, 0x20f, 0x2, 0x2, 0x1430, 0x1434, 0x7, 0x17b, 0x2, 0x2, 
       0x1431, 0x1434, 0x7, 0x117, 0x2, 0x2, 0x1432, 0x1434, 0x7, 0x141, 
       0x2, 0x2, 0x1433, 0x1423, 0x3, 0x2, 0x2, 0x2, 0x1433, 0x1426, 0x3, 
       0x2, 0x2, 0x2, 0x1433, 0x1428, 0x3, 0x2, 0x2, 0x2, 0x1433, 0x1429, 
       0x3, 0x2, 0x2, 0x2, 0x1433, 0x142b, 0x3, 0x2, 0x2, 0x2, 0x1433, 0x142e, 
       0x3, 0x2, 0x2, 0x2, 0x1433, 0x142f, 0x3, 0x2, 0x2, 0x2, 0x1433, 0x1431, 
       0x3, 0x2, 0x2, 0x2, 0x1433, 0x1432, 0x3, 0x2, 0x2, 0x2, 0x1434, 0x1c7, 
       0x3, 0x2, 0x2, 0x2, 0x1435, 0x143e, 0x7, 0x15f, 0x2, 0x2, 0x1436, 
       0x1437, 0x7, 0x9c, 0x2, 0x2, 0x1437, 0x143e, 0x7, 0x223, 0x2, 0x2, 
       0x1438, 0x143a, 0x7, 0x171, 0x2, 0x2, 0x1439, 0x1438, 0x3, 0x2, 0x2, 
       0x2, 0x1439, 0x143a, 0x3, 0x2, 0x2, 0x2, 0x143a, 0x143b, 0x3, 0x2, 
       0x2, 0x2, 0x143b, 0x143e, 0x7, 0x25e, 0x2, 0x2, 0x143c, 0x143e, 0x7, 
       0x237, 0x2, 0x2, 0x143d, 0x1435, 0x3, 0x2, 0x2, 0x2, 0x143d, 0x1436, 
       0x3, 0x2, 0x2, 0x2, 0x143d, 0x1439, 0x3, 0x2, 0x2, 0x2, 0x143d, 0x143c, 
       0x3, 0x2, 0x2, 0x2, 0x143e, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0x143f, 0x144c, 
       0x7, 0x8, 0x2, 0x2, 0x1440, 0x1441, 0x7, 0x11f, 0x2, 0x2, 0x1441, 
       0x144c, 0x7, 0x187, 0x2, 0x2, 0x1442, 0x1443, 0x7, 0x140, 0x2, 0x2, 
       0x1443, 0x144c, 0x7, 0x22e, 0x2, 0x2, 0x1444, 0x144c, 0x7, 0x143, 
       0x2, 0x2, 0x1445, 0x144c, 0x7, 0x189, 0x2, 0x2, 0x1446, 0x144c, 0x7, 
       0x2b4, 0x2, 0x2, 0x1447, 0x1448, 0x7, 0x1d3, 0x2, 0x2, 0x1448, 0x144c, 
       0x7, 0x168, 0x2, 0x2, 0x1449, 0x144c, 0x7, 0x216, 0x2, 0x2, 0x144a, 
       0x144c, 0x7, 0x22d, 0x2, 0x2, 0x144b, 0x143f, 0x3, 0x2, 0x2, 0x2, 
       0x144b, 0x1440, 0x3, 0x2, 0x2, 0x2, 0x144b, 0x1442, 0x3, 0x2, 0x2, 
       0x2, 0x144b, 0x1444, 0x3, 0x2, 0x2, 0x2, 0x144b, 0x1445, 0x3, 0x2, 
       0x2, 0x2, 0x144b, 0x1446, 0x3, 0x2, 0x2, 0x2, 0x144b, 0x1447, 0x3, 
       0x2, 0x2, 0x2, 0x144b, 0x1449, 0x3, 0x2, 0x2, 0x2, 0x144b, 0x144a, 
       0x3, 0x2, 0x2, 0x2, 0x144c, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0x144d, 0x144e, 
       0x7, 0x11d, 0x2, 0x2, 0x144e, 0x144f, 0x7, 0x415, 0x2, 0x2, 0x144f, 
       0x1cd, 0x3, 0x2, 0x2, 0x2, 0x1450, 0x1451, 0x7, 0x123, 0x2, 0x2, 
       0x1451, 0x1452, 0x7, 0x4a, 0x2, 0x2, 0x1452, 0x1457, 0x5, 0x1da, 
       0xee, 0x2, 0x1453, 0x1454, 0x7, 0x408, 0x2, 0x2, 0x1454, 0x1456, 
       0x5, 0x1da, 0xee, 0x2, 0x1455, 0x1453, 0x3, 0x2, 0x2, 0x2, 0x1456, 
       0x1459, 0x3, 0x2, 0x2, 0x2, 0x1457, 0x1455, 0x3, 0x2, 0x2, 0x2, 0x1457, 
       0x1458, 0x3, 0x2, 0x2, 0x2, 0x1458, 0x1461, 0x3, 0x2, 0x2, 0x2, 0x1459, 
       0x1457, 0x3, 0x2, 0x2, 0x2, 0x145a, 0x145b, 0x7, 0x75, 0x2, 0x2, 
       0x145b, 0x145e, 0x7, 0x406, 0x2, 0x2, 0x145c, 0x145f, 0x5, 0x230, 
       0x119, 0x2, 0x145d, 0x145f, 0x7, 0x8, 0x2, 0x2, 0x145e, 0x145c, 0x3, 
       0x2, 0x2, 0x2, 0x145e, 0x145d, 0x3, 0x2, 0x2, 0x2, 0x145f, 0x1460, 
       0x3, 0x2, 0x2, 0x2, 0x1460, 0x1462, 0x7, 0x407, 0x2, 0x2, 0x1461, 
       0x145a, 0x3, 0x2, 0x2, 0x2, 0x1461, 0x1462, 0x3, 0x2, 0x2, 0x2, 0x1462, 
       0x1463, 0x3, 0x2, 0x2, 0x2, 0x1463, 0x1464, 0x7, 0x49, 0x2, 0x2, 
       0x1464, 0x1465, 0x5, 0x210, 0x109, 0x2, 0x1465, 0x1cf, 0x3, 0x2, 
       0x2, 0x2, 0x1466, 0x1468, 0x7, 0x16e, 0x2, 0x2, 0x1467, 0x1469, 0x9, 
       0x42, 0x2, 0x2, 0x1468, 0x1467, 0x3, 0x2, 0x2, 0x2, 0x1468, 0x1469, 
       0x3, 0x2, 0x2, 0x2, 0x1469, 0x146a, 0x3, 0x2, 0x2, 0x2, 0x146a, 0x146f, 
       0x5, 0x1dc, 0xef, 0x2, 0x146b, 0x146c, 0x7, 0x408, 0x2, 0x2, 0x146c, 
       0x146e, 0x5, 0x1dc, 0xef, 0x2, 0x146d, 0x146b, 0x3, 0x2, 0x2, 0x2, 
       0x146e, 0x1471, 0x3, 0x2, 0x2, 0x2, 0x146f, 0x146d, 0x3, 0x2, 0x2, 
       0x2, 0x146f, 0x1470, 0x3, 0x2, 0x2, 0x2, 0x1470, 0x1d1, 0x3, 0x2, 
       0x2, 0x2, 0x1471, 0x146f, 0x3, 0x2, 0x2, 0x2, 0x1472, 0x1474, 0x7, 
       0x56, 0x2, 0x2, 0x1473, 0x1475, 0x9, 0x50, 0x2, 0x2, 0x1474, 0x1473, 
       0x3, 0x2, 0x2, 0x2, 0x1474, 0x1475, 0x3, 0x2, 0x2, 0x2, 0x1475, 0x1477, 
       0x3, 0x2, 0x2, 0x2, 0x1476, 0x1478, 0x5, 0x216, 0x10c, 0x2, 0x1477, 
       0x1476, 0x3, 0x2, 0x2, 0x2, 0x1478, 0x1479, 0x3, 0x2, 0x2, 0x2, 0x1479, 
       0x1477, 0x3, 0x2, 0x2, 0x2, 0x1479, 0x147a, 0x3, 0x2, 0x2, 0x2, 0x147a, 
       0x1d3, 0x3, 0x2, 0x2, 0x2, 0x147b, 0x147c, 0x7, 0x5e, 0x2, 0x2, 0x147c, 
       0x147d, 0x7, 0x4a, 0x2, 0x2, 0x147d, 0x147e, 0x7, 0x50, 0x2, 0x2, 
       0x147e, 0x147f, 0x7, 0x123, 0x2, 0x2, 0x147f, 0x1484, 0x5, 0x1e0, 
       0xf1, 0x2, 0x1480, 0x1481, 0x7, 0x408, 0x2, 0x2, 0x1481, 0x1483, 
       0x5, 0x1e0, 0xf1, 0x2, 0x1482, 0x1480, 0x3, 0x2, 0x2, 0x2, 0x1483, 
       0x1486, 0x3, 0x2, 0x2, 0x2, 0x1484, 0x1482, 0x3, 0x2, 0x2, 0x2, 0x1484, 
       0x1485, 0x3, 0x2, 0x2, 0x2, 0x1485, 0x1d5, 0x3, 0x2, 0x2, 0x2, 0x1486, 
       0x1484, 0x3, 0x2, 0x2, 0x2, 0x1487, 0x1488, 0x7, 0x1fb, 0x2, 0x2, 
       0x1488, 0x1489, 0x7, 0x1e6, 0x2, 0x2, 0x1489, 0x148a, 0x7, 0x123, 
       0x2, 0x2, 0x148a, 0x1d7, 0x3, 0x2, 0x2, 0x2, 0x148b, 0x148c, 0x7, 
       0x264, 0x2, 0x2, 0x148c, 0x1d9, 0x3, 0x2, 0x2, 0x2, 0x148d, 0x1495, 
       0x5, 0x1f8, 0xfd, 0x2, 0x148e, 0x1490, 0x9, 0x14, 0x2, 0x2, 0x148f, 
       0x148e, 0x3, 0x2, 0x2, 0x2, 0x148f, 0x1490, 0x3, 0x2, 0x2, 0x2, 0x1490, 
       0x1491, 0x3, 0x2, 0x2, 0x2, 0x1491, 0x1492, 0x7, 0x406, 0x2, 0x2, 
       0x1492, 0x1493, 0x5, 0x230, 0x119, 0x2, 0x1493, 0x1494, 0x7, 0x407, 
       0x2, 0x2, 0x1494, 0x1496, 0x3, 0x2, 0x2, 0x2, 0x1495, 0x148f, 0x3, 
       0x2, 0x2, 0x2, 0x1495, 0x1496, 0x3, 0x2, 0x2, 0x2, 0x1496, 0x1db, 
       0x3, 0x2, 0x2, 0x2, 0x1497, 0x14aa, 0x7, 0x14b, 0x2, 0x2, 0x1498, 
       0x14aa, 0x7, 0x17b, 0x2, 0x2, 0x1499, 0x149b, 0x9, 0x51, 0x2, 0x2, 
       0x149a, 0x1499, 0x3, 0x2, 0x2, 0x2, 0x149a, 0x149b, 0x3, 0x2, 0x2, 
       0x2, 0x149b, 0x149c, 0x3, 0x2, 0x2, 0x2, 0x149c, 0x14aa, 0x7, 0x196, 
       0x2, 0x2, 0x149d, 0x14aa, 0x7, 0x1cf, 0x2, 0x2, 0x149e, 0x14aa, 0x7, 
       0x266, 0x2, 0x2, 0x149f, 0x14a0, 0x7, 0x1e6, 0x2, 0x2, 0x14a0, 0x14aa, 
       0x7, 0x123, 0x2, 0x2, 0x14a1, 0x14aa, 0x7, 0x223, 0x2, 0x2, 0x14a2, 
       0x14aa, 0x7, 0x242, 0x2, 0x2, 0x14a3, 0x14a7, 0x7, 0x25e, 0x2, 0x2, 
       0x14a4, 0x14a5, 0x7, 0xb0, 0x2, 0x2, 0x14a5, 0x14a6, 0x7, 0x7a, 0x2, 
       0x2, 0x14a6, 0x14a8, 0x7, 0x5f, 0x2, 0x2, 0x14a7, 0x14a4, 0x3, 0x2, 
       0x2, 0x2, 0x14a7, 0x14a8, 0x3, 0x2, 0x2, 0x2, 0x14a8, 0x14aa, 0x3, 
       0x2, 0x2, 0x2, 0x14a9, 0x1497, 0x3, 0x2, 0x2, 0x2, 0x14a9, 0x1498, 
       0x3, 0x2, 0x2, 0x2, 0x14a9, 0x149a, 0x3, 0x2, 0x2, 0x2, 0x14a9, 0x149d, 
       0x3, 0x2, 0x2, 0x2, 0x14a9, 0x149e, 0x3, 0x2, 0x2, 0x2, 0x14a9, 0x149f, 
       0x3, 0x2, 0x2, 0x2, 0x14a9, 0x14a1, 0x3, 0x2, 0x2, 0x2, 0x14a9, 0x14a2, 
       0x3, 0x2, 0x2, 0x2, 0x14a9, 0x14a3, 0x3, 0x2, 0x2, 0x2, 0x14aa, 0x14b6, 
       0x3, 0x2, 0x2, 0x2, 0x14ab, 0x14ac, 0x7, 0x1ec, 0x2, 0x2, 0x14ac, 
       0x14ae, 0x7, 0x196, 0x2, 0x2, 0x14ad, 0x14af, 0x5, 0x13e, 0xa0, 0x2, 
       0x14ae, 0x14ad, 0x3, 0x2, 0x2, 0x2, 0x14ae, 0x14af, 0x3, 0x2, 0x2, 
       0x2, 0x14af, 0x14b6, 0x3, 0x2, 0x2, 0x2, 0x14b0, 0x14b1, 0x7, 0x25e, 
       0x2, 0x2, 0x14b1, 0x14b3, 0x5, 0x232, 0x11a, 0x2, 0x14b2, 0x14b4, 
       0x5, 0x1de, 0xf0, 0x2, 0x14b3, 0x14b2, 0x3, 0x2, 0x2, 0x2, 0x14b3, 
       0x14b4, 0x3, 0x2, 0x2, 0x2, 0x14b4, 0x14b6, 0x3, 0x2, 0x2, 0x2, 0x14b5, 
       0x14a9, 0x3, 0x2, 0x2, 0x2, 0x14b5, 0x14ab, 0x3, 0x2, 0x2, 0x2, 0x14b5, 
       0x14b0, 0x3, 0x2, 0x2, 0x2, 0x14b6, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0x14b7, 
       0x14b8, 0x7, 0xb0, 0x2, 0x2, 0x14b8, 0x14b9, 0x7, 0x7a, 0x2, 0x2, 
       0x14b9, 0x14bd, 0x7, 0x5f, 0x2, 0x2, 0x14ba, 0x14bb, 0x7, 0x3c, 0x2, 
       0x2, 0x14bb, 0x14bd, 0x7, 0x164, 0x2, 0x2, 0x14bc, 0x14b7, 0x3, 0x2, 
       0x2, 0x2, 0x14bc, 0x14ba, 0x3, 0x2, 0x2, 0x2, 0x14bd, 0x1df, 0x3, 
       0x2, 0x2, 0x2, 0x14be, 0x14c6, 0x5, 0x1f8, 0xfd, 0x2, 0x14bf, 0x14c0, 
       0x7, 0x75, 0x2, 0x2, 0x14c0, 0x14c3, 0x7, 0x406, 0x2, 0x2, 0x14c1, 
       0x14c4, 0x5, 0x230, 0x119, 0x2, 0x14c2, 0x14c4, 0x7, 0x8, 0x2, 0x2, 
       0x14c3, 0x14c1, 0x3, 0x2, 0x2, 0x2, 0x14c3, 0x14c2, 0x3, 0x2, 0x2, 
       0x2, 0x14c4, 0x14c5, 0x3, 0x2, 0x2, 0x2, 0x14c5, 0x14c7, 0x7, 0x407, 
       0x2, 0x2, 0x14c6, 0x14bf, 0x3, 0x2, 0x2, 0x2, 0x14c6, 0x14c7, 0x3, 
       0x2, 0x2, 0x2, 0x14c7, 0x14cf, 0x3, 0x2, 0x2, 0x2, 0x14c8, 0x14ca, 
       0x9, 0x14, 0x2, 0x2, 0x14c9, 0x14c8, 0x3, 0x2, 0x2, 0x2, 0x14c9, 
       0x14ca, 0x3, 0x2, 0x2, 0x2, 0x14ca, 0x14cb, 0x3, 0x2, 0x2, 0x2, 0x14cb, 
       0x14cc, 0x7, 0x406, 0x2, 0x2, 0x14cc, 0x14cd, 0x5, 0x230, 0x119, 
       0x2, 0x14cd, 0x14ce, 0x7, 0x407, 0x2, 0x2, 0x14ce, 0x14d0, 0x3, 0x2, 
       0x2, 0x2, 0x14cf, 0x14c9, 0x3, 0x2, 0x2, 0x2, 0x14cf, 0x14d0, 0x3, 
       0x2, 0x2, 0x2, 0x14d0, 0x14d3, 0x3, 0x2, 0x2, 0x2, 0x14d1, 0x14d2, 
       0x7, 0x48, 0x2, 0x2, 0x14d2, 0x14d4, 0x7, 0x190, 0x2, 0x2, 0x14d3, 
       0x14d1, 0x3, 0x2, 0x2, 0x2, 0x14d3, 0x14d4, 0x3, 0x2, 0x2, 0x2, 0x14d4, 
       0x1e1, 0x3, 0x2, 0x2, 0x2, 0x14d5, 0x14d6, 0x9, 0x52, 0x2, 0x2, 0x14d6, 
       0x14d9, 0x5, 0x1f8, 0xfd, 0x2, 0x14d7, 0x14da, 0x5, 0x210, 0x109, 
       0x2, 0x14d8, 0x14da, 0x7, 0x415, 0x2, 0x2, 0x14d9, 0x14d7, 0x3, 0x2, 
       0x2, 0x2, 0x14d9, 0x14d8, 0x3, 0x2, 0x2, 0x2, 0x14d9, 0x14da, 0x3, 
       0x2, 0x2, 0x2, 0x14da, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0x14db, 0x14df, 
       0x9, 0x52, 0x2, 0x2, 0x14dc, 0x14dd, 0x9, 0x53, 0x2, 0x2, 0x14dd, 
       0x14de, 0x7, 0x3fd, 0x2, 0x2, 0x14de, 0x14e0, 0x9, 0x54, 0x2, 0x2, 
       0x14df, 0x14dc, 0x3, 0x2, 0x2, 0x2, 0x14df, 0x14e0, 0x3, 0x2, 0x2, 
       0x2, 0x14e0, 0x14e1, 0x3, 0x2, 0x2, 0x2, 0x14e1, 0x14e2, 0x5, 0x1f4, 
       0xfb, 0x2, 0x14e2, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0x14e3, 0x14e4, 0x7, 
       0x179, 0x2, 0x2, 0x14e4, 0x14e5, 0x7, 0x415, 0x2, 0x2, 0x14e5, 0x1e7, 
       0x3, 0x2, 0x2, 0x2, 0x14e6, 0x14e7, 0x7, 0xaa, 0x2, 0x2, 0x14e7, 
       0x14e8, 0x5, 0x210, 0x109, 0x2, 0x14e8, 0x1e9, 0x3, 0x2, 0x2, 0x2, 
       0x14e9, 0x14f1, 0x7, 0x8f, 0x2, 0x2, 0x14ea, 0x14ec, 0x7, 0x93, 0x2, 
       0x2, 0x14eb, 0x14ed, 0x7, 0x244, 0x2, 0x2, 0x14ec, 0x14eb, 0x3, 0x2, 
       0x2, 0x2, 0x14ec, 0x14ed, 0x3, 0x2, 0x2, 0x2, 0x14ed, 0x14ee, 0x3, 
       0x2, 0x2, 0x2, 0x14ee, 0x14f2, 0x5, 0x21a, 0x10e, 0x2, 0x14ef, 0x14f2, 
       0x7, 0x41d, 0x2, 0x2, 0x14f0, 0x14f2, 0x7, 0x41e, 0x2, 0x2, 0x14f1, 
       0x14ea, 0x3, 0x2, 0x2, 0x2, 0x14f1, 0x14ef, 0x3, 0x2, 0x2, 0x2, 0x14f1, 
       0x14f0, 0x3, 0x2, 0x2, 0x2, 0x14f2, 0x14fc, 0x3, 0x2, 0x2, 0x2, 0x14f3, 
       0x14f4, 0x7, 0x8c, 0x2, 0x2, 0x14f4, 0x14f9, 0x5, 0x1ee, 0xf8, 0x2, 
       0x14f5, 0x14f6, 0x7, 0x408, 0x2, 0x2, 0x14f6, 0x14f8, 0x5, 0x1ee, 
       0xf8, 0x2, 0x14f7, 0x14f5, 0x3, 0x2, 0x2, 0x2, 0x14f8, 0x14fb, 0x3, 
       0x2, 0x2, 0x2, 0x14f9, 0x14f7, 0x3, 0x2, 0x2, 0x2, 0x14f9, 0x14fa, 
       0x3, 0x2, 0x2, 0x2, 0x14fa, 0x14fd, 0x3, 0x2, 0x2, 0x2, 0x14fb, 0x14f9, 
       0x3, 0x2, 0x2, 0x2, 0x14fc, 0x14f3, 0x3, 0x2, 0x2, 0x2, 0x14fc, 0x14fd, 
       0x3, 0x2, 0x2, 0x2, 0x14fd, 0x1eb, 0x3, 0x2, 0x2, 0x2, 0x14fe, 0x1506, 
       0x7, 0x83, 0x2, 0x2, 0x14ff, 0x1501, 0x7, 0x93, 0x2, 0x2, 0x1500, 
       0x1502, 0x7, 0x244, 0x2, 0x2, 0x1501, 0x1500, 0x3, 0x2, 0x2, 0x2, 
       0x1501, 0x1502, 0x3, 0x2, 0x2, 0x2, 0x1502, 0x1503, 0x3, 0x2, 0x2, 
       0x2, 0x1503, 0x1507, 0x5, 0x21a, 0x10e, 0x2, 0x1504, 0x1507, 0x7, 
       0x41d, 0x2, 0x2, 0x1505, 0x1507, 0x7, 0x41e, 0x2, 0x2, 0x1506, 0x14ff, 
       0x3, 0x2, 0x2, 0x2, 0x1506, 0x1504, 0x3, 0x2, 0x2, 0x2, 0x1506, 0x1505, 
       0x3, 0x2, 0x2, 0x2, 0x1506, 0x1507, 0x3, 0x2, 0x2, 0x2, 0x1507, 0x1511, 
       0x3, 0x2, 0x2, 0x2, 0x1508, 0x1509, 0x7, 0x8c, 0x2, 0x2, 0x1509, 
       0x150e, 0x5, 0x1ee, 0xf8, 0x2, 0x150a, 0x150b, 0x7, 0x408, 0x2, 0x2, 
       0x150b, 0x150d, 0x5, 0x1ee, 0xf8, 0x2, 0x150c, 0x150a, 0x3, 0x2, 
       0x2, 0x2, 0x150d, 0x1510, 0x3, 0x2, 0x2, 0x2, 0x150e, 0x150c, 0x3, 
       0x2, 0x2, 0x2, 0x150e, 0x150f, 0x3, 0x2, 0x2, 0x2, 0x150f, 0x1512, 
       0x3, 0x2, 0x2, 0x2, 0x1510, 0x150e, 0x3, 0x2, 0x2, 0x2, 0x1511, 0x1508, 
       0x3, 0x2, 0x2, 0x2, 0x1511, 0x1512, 0x3, 0x2, 0x2, 0x2, 0x1512, 0x1ed, 
       0x3, 0x2, 0x2, 0x2, 0x1513, 0x1514, 0x9, 0x55, 0x2, 0x2, 0x1514, 
       0x1519, 0x7, 0x3fd, 0x2, 0x2, 0x1515, 0x151a, 0x5, 0x21a, 0x10e, 
       0x2, 0x1516, 0x151a, 0x7, 0x416, 0x2, 0x2, 0x1517, 0x151a, 0x5, 0x200, 
       0x101, 0x2, 0x1518, 0x151a, 0x5, 0x212, 0x10a, 0x2, 0x1519, 0x1515, 
       0x3, 0x2, 0x2, 0x2, 0x1519, 0x1516, 0x3, 0x2, 0x2, 0x2, 0x1519, 0x1517, 
       0x3, 0x2, 0x2, 0x2, 0x1519, 0x1518, 0x3, 0x2, 0x2, 0x2, 0x151a, 0x1ef, 
       0x3, 0x2, 0x2, 0x2, 0x151b, 0x151d, 0x7, 0x42, 0x2, 0x2, 0x151c, 
       0x151e, 0x9, 0x56, 0x2, 0x2, 0x151d, 0x151c, 0x3, 0x2, 0x2, 0x2, 
       0x151d, 0x151e, 0x3, 0x2, 0x2, 0x2, 0x151e, 0x151f, 0x3, 0x2, 0x2, 
       0x2, 0x151f, 0x153f, 0x7, 0x2e, 0x2, 0x2, 0x1520, 0x1521, 0x5, 0x1c0, 
       0xe1, 0x2, 0x1521, 0x1522, 0x7, 0x3fd, 0x2, 0x2, 0x1522, 0x152a, 
       0x9, 0x57, 0x2, 0x2, 0x1523, 0x1524, 0x7, 0x408, 0x2, 0x2, 0x1524, 
       0x1525, 0x5, 0x1c0, 0xe1, 0x2, 0x1525, 0x1526, 0x7, 0x3fd, 0x2, 0x2, 
       0x1526, 0x1527, 0x9, 0x57, 0x2, 0x2, 0x1527, 0x1529, 0x3, 0x2, 0x2, 
       0x2, 0x1528, 0x1523, 0x3, 0x2, 0x2, 0x2, 0x1529, 0x152c, 0x3, 0x2, 
       0x2, 0x2, 0x152a, 0x1528, 0x3, 0x2, 0x2, 0x2, 0x152a, 0x152b, 0x3, 
       0x2, 0x2, 0x2, 0x152b, 0x1540, 0x3, 0x2, 0x2, 0x2, 0x152c, 0x152a, 
       0x3, 0x2, 0x2, 0x2, 0x152d, 0x1530, 0x7, 0x1c, 0x2, 0x2, 0x152e, 
       0x1531, 0x5, 0x216, 0x10c, 0x2, 0x152f, 0x1531, 0x5, 0x1c0, 0xe1, 
       0x2, 0x1530, 0x152e, 0x3, 0x2, 0x2, 0x2, 0x1530, 0x152f, 0x3, 0x2, 
       0x2, 0x2, 0x1531, 0x1532, 0x3, 0x2, 0x2, 0x2, 0x1532, 0x1533, 0x5, 
       0x1c0, 0xe1, 0x2, 0x1533, 0x1534, 0x7, 0x3fd, 0x2, 0x2, 0x1534, 0x153c, 
       0x5, 0x1f2, 0xfa, 0x2, 0x1535, 0x1536, 0x7, 0x408, 0x2, 0x2, 0x1536, 
       0x1537, 0x5, 0x1c0, 0xe1, 0x2, 0x1537, 0x1538, 0x7, 0x3fd, 0x2, 0x2, 
       0x1538, 0x1539, 0x5, 0x1f2, 0xfa, 0x2, 0x1539, 0x153b, 0x3, 0x2, 
       0x2, 0x2, 0x153a, 0x1535, 0x3, 0x2, 0x2, 0x2, 0x153b, 0x153e, 0x3, 
       0x2, 0x2, 0x2, 0x153c, 0x153a, 0x3, 0x2, 0x2, 0x2, 0x153c, 0x153d, 
       0x3, 0x2, 0x2, 0x2, 0x153d, 0x1540, 0x3, 0x2, 0x2, 0x2, 0x153e, 0x153c, 
       0x3, 0x2, 0x2, 0x2, 0x153f, 0x1520, 0x3, 0x2, 0x2, 0x2, 0x153f, 0x152d, 
       0x3, 0x2, 0x2, 0x2, 0x1540, 0x1f1, 0x3, 0x2, 0x2, 0x2, 0x1541, 0x1542, 
       0x9, 0x58, 0x2, 0x2, 0x1542, 0x1f3, 0x3, 0x2, 0x2, 0x2, 0x1543, 0x1549, 
       0x5, 0xb4, 0x5b, 0x2, 0x1544, 0x1549, 0x5, 0xa6, 0x54, 0x2, 0x1545, 
       0x1549, 0x5, 0xac, 0x57, 0x2, 0x1546, 0x1549, 0x5, 0xb2, 0x5a, 0x2, 
       0x1547, 0x1549, 0x5, 0xb6, 0x5c, 0x2, 0x1548, 0x1543, 0x3, 0x2, 0x2, 
       0x2, 0x1548, 0x1544, 0x3, 0x2, 0x2, 0x2, 0x1548, 0x1545, 0x3, 0x2, 
       0x2, 0x2, 0x1548, 0x1546, 0x3, 0x2, 0x2, 0x2, 0x1548, 0x1547, 0x3, 
       0x2, 0x2, 0x2, 0x1549, 0x154e, 0x3, 0x2, 0x2, 0x2, 0x154a, 0x154b, 
       0x7, 0x3c, 0x2, 0x2, 0x154b, 0x154c, 0x7, 0x13a, 0x2, 0x2, 0x154c, 
       0x154e, 0x5, 0x210, 0x109, 0x2, 0x154d, 0x1548, 0x3, 0x2, 0x2, 0x2, 
       0x154d, 0x154a, 0x3, 0x2, 0x2, 0x2, 0x154e, 0x1f5, 0x3, 0x2, 0x2, 
       0x2, 0x154f, 0x1553, 0x5, 0x210, 0x109, 0x2, 0x1550, 0x1554, 0x7, 
       0x41c, 0x2, 0x2, 0x1551, 0x1552, 0x7, 0x405, 0x2, 0x2, 0x1552, 0x1554, 
       0x5, 0x210, 0x109, 0x2, 0x1553, 0x1550, 0x3, 0x2, 0x2, 0x2, 0x1553, 
       0x1551, 0x3, 0x2, 0x2, 0x2, 0x1553, 0x1554, 0x3, 0x2, 0x2, 0x2, 0x1554, 
       0x1f7, 0x3, 0x2, 0x2, 0x2, 0x1555, 0x1556, 0x5, 0x1f6, 0xfc, 0x2, 
       0x1556, 0x1f9, 0x3, 0x2, 0x2, 0x2, 0x1557, 0x155c, 0x5, 0x210, 0x109, 
       0x2, 0x1558, 0x155a, 0x5, 0x214, 0x10b, 0x2, 0x1559, 0x155b, 0x5, 
       0x214, 0x10b, 0x2, 0x155a, 0x1559, 0x3, 0x2, 0x2, 0x2, 0x155a, 0x155b, 
       0x3, 0x2, 0x2, 0x2, 0x155b, 0x155d, 0x3, 0x2, 0x2, 0x2, 0x155c, 0x1558, 
       0x3, 0x2, 0x2, 0x2, 0x155c, 0x155d, 0x3, 0x2, 0x2, 0x2, 0x155d, 0x1564, 
       0x3, 0x2, 0x2, 0x2, 0x155e, 0x155f, 0xb, 0x2, 0x2, 0x2, 0x155f, 0x1561, 
       0x5, 0x214, 0x10b, 0x2, 0x1560, 0x1562, 0x5, 0x214, 0x10b, 0x2, 0x1561, 
       0x1560, 0x3, 0x2, 0x2, 0x2, 0x1561, 0x1562, 0x3, 0x2, 0x2, 0x2, 0x1562, 
       0x1564, 0x3, 0x2, 0x2, 0x2, 0x1563, 0x1557, 0x3, 0x2, 0x2, 0x2, 0x1563, 
       0x155e, 0x3, 0x2, 0x2, 0x2, 0x1564, 0x1fb, 0x3, 0x2, 0x2, 0x2, 0x1565, 
       0x1568, 0x5, 0x210, 0x109, 0x2, 0x1566, 0x1568, 0x7, 0x415, 0x2, 
       0x2, 0x1567, 0x1565, 0x3, 0x2, 0x2, 0x2, 0x1567, 0x1566, 0x3, 0x2, 
       0x2, 0x2, 0x1568, 0x156d, 0x3, 0x2, 0x2, 0x2, 0x1569, 0x156a, 0x7, 
       0x406, 0x2, 0x2, 0x156a, 0x156b, 0x5, 0x216, 0x10c, 0x2, 0x156b, 
       0x156c, 0x7, 0x407, 0x2, 0x2, 0x156c, 0x156e, 0x3, 0x2, 0x2, 0x2, 
       0x156d, 0x1569, 0x3, 0x2, 0x2, 0x2, 0x156d, 0x156e, 0x3, 0x2, 0x2, 
       0x2, 0x156e, 0x1570, 0x3, 0x2, 0x2, 0x2, 0x156f, 0x1571, 0x9, 0x2d, 
       0x2, 0x2, 0x1570, 0x156f, 0x3, 0x2, 0x2, 0x2, 0x1570, 0x1571, 0x3, 
       0x2, 0x2, 0x2, 0x1571, 0x1fd, 0x3, 0x2, 0x2, 0x2, 0x1572, 0x1573, 
       0x9, 0x59, 0x2, 0x2, 0x1573, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0x1574, 0x1575, 
       0x9, 0x5a, 0x2, 0x2, 0x1575, 0x201, 0x3, 0x2, 0x2, 0x2, 0x1576, 0x157b, 
       0x7, 0xd2, 0x2, 0x2, 0x1577, 0x157b, 0x5, 0x270, 0x139, 0x2, 0x1578, 
       0x157b, 0x7, 0x415, 0x2, 0x2, 0x1579, 0x157b, 0x7, 0x412, 0x2, 0x2, 
       0x157a, 0x1576, 0x3, 0x2, 0x2, 0x2, 0x157a, 0x1577, 0x3, 0x2, 0x2, 
       0x2, 0x157a, 0x1578, 0x3, 0x2, 0x2, 0x2, 0x157a, 0x1579, 0x3, 0x2, 
       0x2, 0x2, 0x157b, 0x203, 0x3, 0x2, 0x2, 0x2, 0x157c, 0x157f, 0x5, 
       0x210, 0x109, 0x2, 0x157d, 0x157f, 0x7, 0x415, 0x2, 0x2, 0x157e, 
       0x157c, 0x3, 0x2, 0x2, 0x2, 0x157e, 0x157d, 0x3, 0x2, 0x2, 0x2, 0x157f, 
       0x205, 0x3, 0x2, 0x2, 0x2, 0x1580, 0x1581, 0x9, 0x5b, 0x2, 0x2, 0x1581, 
       0x207, 0x3, 0x2, 0x2, 0x2, 0x1582, 0x1583, 0x5, 0x216, 0x10c, 0x2, 
       0x1583, 0x1584, 0x7, 0x3fa, 0x2, 0x2, 0x1584, 0x1585, 0x5, 0x216, 
       0x10c, 0x2, 0x1585, 0x1586, 0x7, 0x3fa, 0x2, 0x2, 0x1586, 0x1587, 
       0x5, 0x216, 0x10c, 0x2, 0x1587, 0x1588, 0x7, 0x3fa, 0x2, 0x2, 0x1588, 
       0x1589, 0x5, 0x216, 0x10c, 0x2, 0x1589, 0x158a, 0x7, 0x3fa, 0x2, 
       0x2, 0x158a, 0x1590, 0x5, 0x216, 0x10c, 0x2, 0x158b, 0x158c, 0x7, 
       0x411, 0x2, 0x2, 0x158c, 0x158d, 0x5, 0x216, 0x10c, 0x2, 0x158d, 
       0x158e, 0x7, 0x3fa, 0x2, 0x2, 0x158e, 0x158f, 0x5, 0x216, 0x10c, 
       0x2, 0x158f, 0x1591, 0x3, 0x2, 0x2, 0x2, 0x1590, 0x158b, 0x3, 0x2, 
       0x2, 0x2, 0x1591, 0x1592, 0x3, 0x2, 0x2, 0x2, 0x1592, 0x1590, 0x3, 
       0x2, 0x2, 0x2, 0x1592, 0x1593, 0x3, 0x2, 0x2, 0x2, 0x1593, 0x209, 
       0x3, 0x2, 0x2, 0x2, 0x1594, 0x159b, 0x5, 0x20c, 0x107, 0x2, 0x1595, 
       0x1596, 0x7, 0x408, 0x2, 0x2, 0x1596, 0x1599, 0x5, 0x20c, 0x107, 
       0x2, 0x1597, 0x1598, 0x7, 0x408, 0x2, 0x2, 0x1598, 0x159a, 0x5, 0x216, 
       0x10c, 0x2, 0x1599, 0x1597, 0x3, 0x2, 0x2, 0x2, 0x1599, 0x159a, 0x3, 
       0x2, 0x2, 0x2, 0x159a, 0x159c, 0x3, 0x2, 0x2, 0x2, 0x159b, 0x1595, 
       0x3, 0x2, 0x2, 0x2, 0x159b, 0x159c, 0x3, 0x2, 0x2, 0x2, 0x159c, 0x20b, 
       0x3, 0x2, 0x2, 0x2, 0x159d, 0x15a5, 0x7, 0x415, 0x2, 0x2, 0x159e, 
       0x15a5, 0x7, 0x41a, 0x2, 0x2, 0x159f, 0x15a1, 0x7, 0x417, 0x2, 0x2, 
       0x15a0, 0x159f, 0x3, 0x2, 0x2, 0x2, 0x15a1, 0x15a2, 0x3, 0x2, 0x2, 
       0x2, 0x15a2, 0x15a0, 0x3, 0x2, 0x2, 0x2, 0x15a2, 0x15a3, 0x3, 0x2, 
       0x2, 0x2, 0x15a3, 0x15a5, 0x3, 0x2, 0x2, 0x2, 0x15a4, 0x159d, 0x3, 
       0x2, 0x2, 0x2, 0x15a4, 0x159e, 0x3, 0x2, 0x2, 0x2, 0x15a4, 0x15a0, 
       0x3, 0x2, 0x2, 0x2, 0x15a5, 0x20d, 0x3, 0x2, 0x2, 0x2, 0x15a6, 0x15a9, 
       0x5, 0x210, 0x109, 0x2, 0x15a7, 0x15a9, 0x7, 0x415, 0x2, 0x2, 0x15a8, 
       0x15a6, 0x3, 0x2, 0x2, 0x2, 0x15a8, 0x15a7, 0x3, 0x2, 0x2, 0x2, 0x15a9, 
       0x20f, 0x3, 0x2, 0x2, 0x2, 0x15aa, 0x15ae, 0x5, 0x212, 0x10a, 0x2, 
       0x15ab, 0x15ae, 0x7, 0x41e, 0x2, 0x2, 0x15ac, 0x15ae, 0x7, 0x412, 
       0x2, 0x2, 0x15ad, 0x15aa, 0x3, 0x2, 0x2, 0x2, 0x15ad, 0x15ab, 0x3, 
       0x2, 0x2, 0x2, 0x15ad, 0x15ac, 0x3, 0x2, 0x2, 0x2, 0x15ae, 0x211, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x15b9, 0x7, 0x41d, 0x2, 0x2, 0x15b0, 
       0x15b9, 0x5, 0x270, 0x139, 0x2, 0x15b1, 0x15b9, 0x5, 0x272, 0x13a, 
       0x2, 0x15b2, 0x15b9, 0x5, 0x206, 0x104, 0x2, 0x15b3, 0x15b9, 0x5, 
       0x274, 0x13b, 0x2, 0x15b4, 0x15b9, 0x5, 0x276, 0x13c, 0x2, 0x15b5, 
       0x15b9, 0x5, 0x278, 0x13d, 0x2, 0x15b6, 0x15b9, 0x5, 0x27a, 0x13e, 
       0x2, 0x15b7, 0x15b9, 0x5, 0x27c, 0x13f, 0x2, 0x15b8, 0x15af, 0x3, 
       0x2, 0x2, 0x2, 0x15b8, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b1, 
       0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b2, 0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b3, 
       0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b4, 0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b5, 
       0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b6, 0x3, 0x2, 0x2, 0x2, 0x15b8, 0x15b7, 
       0x3, 0x2, 0x2, 0x2, 0x15b9, 0x213, 0x3, 0x2, 0x2, 0x2, 0x15ba, 0x15be, 
       0x7, 0x41c, 0x2, 0x2, 0x15bb, 0x15bc, 0x7, 0x405, 0x2, 0x2, 0x15bc, 
       0x15be, 0x5, 0x210, 0x109, 0x2, 0x15bd, 0x15ba, 0x3, 0x2, 0x2, 0x2, 
       0x15bd, 0x15bb, 0x3, 0x2, 0x2, 0x2, 0x15be, 0x215, 0x3, 0x2, 0x2, 
       0x2, 0x15bf, 0x15c0, 0x9, 0x5c, 0x2, 0x2, 0x15c0, 0x217, 0x3, 0x2, 
       0x2, 0x2, 0x15c1, 0x15c4, 0x7, 0x413, 0x2, 0x2, 0x15c2, 0x15c4, 0x5, 
       0x216, 0x10c, 0x2, 0x15c3, 0x15c1, 0x3, 0x2, 0x2, 0x2, 0x15c3, 0x15c2, 
       0x3, 0x2, 0x2, 0x2, 0x15c4, 0x219, 0x3, 0x2, 0x2, 0x2, 0x15c5, 0x15c7, 
       0x7, 0x41b, 0x2, 0x2, 0x15c6, 0x15c5, 0x3, 0x2, 0x2, 0x2, 0x15c6, 
       0x15c7, 0x3, 0x2, 0x2, 0x2, 0x15c7, 0x15c8, 0x3, 0x2, 0x2, 0x2, 0x15c8, 
       0x15cb, 0x7, 0x415, 0x2, 0x2, 0x15c9, 0x15cb, 0x7, 0x414, 0x2, 0x2, 
       0x15ca, 0x15c6, 0x3, 0x2, 0x2, 0x2, 0x15ca, 0x15c9, 0x3, 0x2, 0x2, 
       0x2, 0x15cb, 0x15cd, 0x3, 0x2, 0x2, 0x2, 0x15cc, 0x15ce, 0x7, 0x415, 
       0x2, 0x2, 0x15cd, 0x15cc, 0x3, 0x2, 0x2, 0x2, 0x15ce, 0x15cf, 0x3, 
       0x2, 0x2, 0x2, 0x15cf, 0x15cd, 0x3, 0x2, 0x2, 0x2, 0x15cf, 0x15d0, 
       0x3, 0x2, 0x2, 0x2, 0x15d0, 0x15dd, 0x3, 0x2, 0x2, 0x2, 0x15d1, 0x15d3, 
       0x7, 0x41b, 0x2, 0x2, 0x15d2, 0x15d1, 0x3, 0x2, 0x2, 0x2, 0x15d2, 
       0x15d3, 0x3, 0x2, 0x2, 0x2, 0x15d3, 0x15d4, 0x3, 0x2, 0x2, 0x2, 0x15d4, 
       0x15d7, 0x7, 0x415, 0x2, 0x2, 0x15d5, 0x15d7, 0x7, 0x414, 0x2, 0x2, 
       0x15d6, 0x15d2, 0x3, 0x2, 0x2, 0x2, 0x15d6, 0x15d5, 0x3, 0x2, 0x2, 
       0x2, 0x15d7, 0x15da, 0x3, 0x2, 0x2, 0x2, 0x15d8, 0x15d9, 0x7, 0x1a, 
       0x2, 0x2, 0x15d9, 0x15db, 0x5, 0x204, 0x103, 0x2, 0x15da, 0x15d8, 
       0x3, 0x2, 0x2, 0x2, 0x15da, 0x15db, 0x3, 0x2, 0x2, 0x2, 0x15db, 0x15dd, 
       0x3, 0x2, 0x2, 0x2, 0x15dc, 0x15ca, 0x3, 0x2, 0x2, 0x2, 0x15dc, 0x15d6, 
       0x3, 0x2, 0x2, 0x2, 0x15dd, 0x21b, 0x3, 0x2, 0x2, 0x2, 0x15de, 0x15df, 
       0x9, 0x5d, 0x2, 0x2, 0x15df, 0x21d, 0x3, 0x2, 0x2, 0x2, 0x15e0, 0x15e2, 
       0x7, 0x41b, 0x2, 0x2, 0x15e1, 0x15e0, 0x3, 0x2, 0x2, 0x2, 0x15e1, 
       0x15e2, 0x3, 0x2, 0x2, 0x2, 0x15e2, 0x15e3, 0x3, 0x2, 0x2, 0x2, 0x15e3, 
       0x15e4, 0x7, 0x417, 0x2, 0x2, 0x15e4, 0x21f, 0x3, 0x2, 0x2, 0x2, 
       0x15e5, 0x15e7, 0x7, 0x68, 0x2, 0x2, 0x15e6, 0x15e5, 0x3, 0x2, 0x2, 
       0x2, 0x15e6, 0x15e7, 0x3, 0x2, 0x2, 0x2, 0x15e7, 0x15e8, 0x3, 0x2, 
       0x2, 0x2, 0x15e8, 0x15e9, 0x9, 0x5e, 0x2, 0x2, 0x15e9, 0x221, 0x3, 
       0x2, 0x2, 0x2, 0x15ea, 0x15f7, 0x5, 0x21a, 0x10e, 0x2, 0x15eb, 0x15f7, 
       0x5, 0x216, 0x10c, 0x2, 0x15ec, 0x15ed, 0x7, 0x3fa, 0x2, 0x2, 0x15ed, 
       0x15f7, 0x5, 0x216, 0x10c, 0x2, 0x15ee, 0x15f7, 0x5, 0x21e, 0x110, 
       0x2, 0x15ef, 0x15f7, 0x5, 0x21c, 0x10f, 0x2, 0x15f0, 0x15f7, 0x7, 
       0x418, 0x2, 0x2, 0x15f1, 0x15f7, 0x7, 0x41a, 0x2, 0x2, 0x15f2, 0x15f4, 
       0x7, 0x68, 0x2, 0x2, 0x15f3, 0x15f2, 0x3, 0x2, 0x2, 0x2, 0x15f3, 
       0x15f4, 0x3, 0x2, 0x2, 0x2, 0x15f4, 0x15f5, 0x3, 0x2, 0x2, 0x2, 0x15f5, 
       0x15f7, 0x9, 0x5e, 0x2, 0x2, 0x15f6, 0x15ea, 0x3, 0x2, 0x2, 0x2, 
       0x15f6, 0x15eb, 0x3, 0x2, 0x2, 0x2, 0x15f6, 0x15ec, 0x3, 0x2, 0x2, 
       0x2, 0x15f6, 0x15ee, 0x3, 0x2, 0x2, 0x2, 0x15f6, 0x15ef, 0x3, 0x2, 
       0x2, 0x2, 0x15f6, 0x15f0, 0x3, 0x2, 0x2, 0x2, 0x15f6, 0x15f1, 0x3, 
       0x2, 0x2, 0x2, 0x15f6, 0x15f3, 0x3, 0x2, 0x2, 0x2, 0x15f7, 0x223, 
       0x3, 0x2, 0x2, 0x2, 0x15f8, 0x15fa, 0x9, 0x5f, 0x2, 0x2, 0x15f9, 
       0x15fb, 0x7, 0xde, 0x2, 0x2, 0x15fa, 0x15f9, 0x3, 0x2, 0x2, 0x2, 
       0x15fa, 0x15fb, 0x3, 0x2, 0x2, 0x2, 0x15fb, 0x15fd, 0x3, 0x2, 0x2, 
       0x2, 0x15fc, 0x15fe, 0x5, 0x22a, 0x116, 0x2, 0x15fd, 0x15fc, 0x3, 
       0x2, 0x2, 0x2, 0x15fd, 0x15fe, 0x3, 0x2, 0x2, 0x2, 0x15fe, 0x1600, 
       0x3, 0x2, 0x2, 0x2, 0x15ff, 0x1601, 0x7, 0xd2, 0x2, 0x2, 0x1600, 
       0x15ff, 0x3, 0x2, 0x2, 0x2, 0x1600, 0x1601, 0x3, 0x2, 0x2, 0x2, 0x1601, 
       0x1608, 0x3, 0x2, 0x2, 0x2, 0x1602, 0x1603, 0x7, 0x18, 0x2, 0x2, 
       0x1603, 0x1606, 0x7, 0x8c, 0x2, 0x2, 0x1604, 0x1606, 0x7, 0x2e5, 
       0x2, 0x2, 0x1605, 0x1602, 0x3, 0x2, 0x2, 0x2, 0x1605, 0x1604, 0x3, 
       0x2, 0x2, 0x2, 0x1606, 0x1607, 0x3, 0x2, 0x2, 0x2, 0x1607, 0x1609, 
       0x5, 0x202, 0x102, 0x2, 0x1608, 0x1605, 0x3, 0x2, 0x2, 0x2, 0x1608, 
       0x1609, 0x3, 0x2, 0x2, 0x2, 0x1609, 0x160d, 0x3, 0x2, 0x2, 0x2, 0x160a, 
       0x160b, 0x7, 0x1a, 0x2, 0x2, 0x160b, 0x160e, 0x5, 0x204, 0x103, 0x2, 
       0x160c, 0x160e, 0x7, 0xd2, 0x2, 0x2, 0x160d, 0x160a, 0x3, 0x2, 0x2, 
       0x2, 0x160d, 0x160c, 0x3, 0x2, 0x2, 0x2, 0x160d, 0x160e, 0x3, 0x2, 
       0x2, 0x2, 0x160e, 0x167c, 0x3, 0x2, 0x2, 0x2, 0x160f, 0x1610, 0x7, 
       0xd1, 0x2, 0x2, 0x1610, 0x1612, 0x9, 0x60, 0x2, 0x2, 0x1611, 0x1613, 
       0x5, 0x22a, 0x116, 0x2, 0x1612, 0x1611, 0x3, 0x2, 0x2, 0x2, 0x1612, 
       0x1613, 0x3, 0x2, 0x2, 0x2, 0x1613, 0x1615, 0x3, 0x2, 0x2, 0x2, 0x1614, 
       0x1616, 0x7, 0xd2, 0x2, 0x2, 0x1615, 0x1614, 0x3, 0x2, 0x2, 0x2, 
       0x1615, 0x1616, 0x3, 0x2, 0x2, 0x2, 0x1616, 0x167c, 0x3, 0x2, 0x2, 
       0x2, 0x1617, 0x1618, 0x7, 0x1c0, 0x2, 0x2, 0x1618, 0x161a, 0x7, 0xcf, 
       0x2, 0x2, 0x1619, 0x161b, 0x5, 0x22a, 0x116, 0x2, 0x161a, 0x1619, 
       0x3, 0x2, 0x2, 0x2, 0x161a, 0x161b, 0x3, 0x2, 0x2, 0x2, 0x161b, 0x161d, 
       0x3, 0x2, 0x2, 0x2, 0x161c, 0x161e, 0x7, 0xd2, 0x2, 0x2, 0x161d, 
       0x161c, 0x3, 0x2, 0x2, 0x2, 0x161d, 0x161e, 0x3, 0x2, 0x2, 0x2, 0x161e, 
       0x167c, 0x3, 0x2, 0x2, 0x2, 0x161f, 0x1620, 0x7, 0xd1, 0x2, 0x2, 
       0x1620, 0x1621, 0x9, 0x61, 0x2, 0x2, 0x1621, 0x1623, 0x7, 0xde, 0x2, 
       0x2, 0x1622, 0x1624, 0x5, 0x22a, 0x116, 0x2, 0x1623, 0x1622, 0x3, 
       0x2, 0x2, 0x2, 0x1623, 0x1624, 0x3, 0x2, 0x2, 0x2, 0x1624, 0x1626, 
       0x3, 0x2, 0x2, 0x2, 0x1625, 0x1627, 0x7, 0xd2, 0x2, 0x2, 0x1626, 
       0x1625, 0x3, 0x2, 0x2, 0x2, 0x1626, 0x1627, 0x3, 0x2, 0x2, 0x2, 0x1627, 
       0x167c, 0x3, 0x2, 0x2, 0x2, 0x1628, 0x162a, 0x9, 0x62, 0x2, 0x2, 
       0x1629, 0x162b, 0x5, 0x22a, 0x116, 0x2, 0x162a, 0x1629, 0x3, 0x2, 
       0x2, 0x2, 0x162a, 0x162b, 0x3, 0x2, 0x2, 0x2, 0x162b, 0x162d, 0x3, 
       0x2, 0x2, 0x2, 0x162c, 0x162e, 0x9, 0x63, 0x2, 0x2, 0x162d, 0x162c, 
       0x3, 0x2, 0x2, 0x2, 0x162d, 0x162e, 0x3, 0x2, 0x2, 0x2, 0x162e, 0x1630, 
       0x3, 0x2, 0x2, 0x2, 0x162f, 0x1631, 0x7, 0xb3, 0x2, 0x2, 0x1630, 
       0x162f, 0x3, 0x2, 0x2, 0x2, 0x1630, 0x1631, 0x3, 0x2, 0x2, 0x2, 0x1631, 
       0x167c, 0x3, 0x2, 0x2, 0x2, 0x1632, 0x1634, 0x7, 0xc0, 0x2, 0x2, 
       0x1633, 0x1635, 0x5, 0x22c, 0x117, 0x2, 0x1634, 0x1633, 0x3, 0x2, 
       0x2, 0x2, 0x1634, 0x1635, 0x3, 0x2, 0x2, 0x2, 0x1635, 0x1637, 0x3, 
       0x2, 0x2, 0x2, 0x1636, 0x1638, 0x9, 0x63, 0x2, 0x2, 0x1637, 0x1636, 
       0x3, 0x2, 0x2, 0x2, 0x1637, 0x1638, 0x3, 0x2, 0x2, 0x2, 0x1638, 0x163a, 
       0x3, 0x2, 0x2, 0x2, 0x1639, 0x163b, 0x7, 0xb3, 0x2, 0x2, 0x163a, 
       0x1639, 0x3, 0x2, 0x2, 0x2, 0x163a, 0x163b, 0x3, 0x2, 0x2, 0x2, 0x163b, 
       0x167c, 0x3, 0x2, 0x2, 0x2, 0x163c, 0x163e, 0x7, 0xc1, 0x2, 0x2, 
       0x163d, 0x163f, 0x7, 0xc2, 0x2, 0x2, 0x163e, 0x163d, 0x3, 0x2, 0x2, 
       0x2, 0x163e, 0x163f, 0x3, 0x2, 0x2, 0x2, 0x163f, 0x1641, 0x3, 0x2, 
       0x2, 0x2, 0x1640, 0x1642, 0x5, 0x22c, 0x117, 0x2, 0x1641, 0x1640, 
       0x3, 0x2, 0x2, 0x2, 0x1641, 0x1642, 0x3, 0x2, 0x2, 0x2, 0x1642, 0x1644, 
       0x3, 0x2, 0x2, 0x2, 0x1643, 0x1645, 0x9, 0x63, 0x2, 0x2, 0x1644, 
       0x1643, 0x3, 0x2, 0x2, 0x2, 0x1644, 0x1645, 0x3, 0x2, 0x2, 0x2, 0x1645, 
       0x1647, 0x3, 0x2, 0x2, 0x2, 0x1646, 0x1648, 0x7, 0xb3, 0x2, 0x2, 
       0x1647, 0x1646, 0x3, 0x2, 0x2, 0x2, 0x1647, 0x1648, 0x3, 0x2, 0x2, 
       0x2, 0x1648, 0x167c, 0x3, 0x2, 0x2, 0x2, 0x1649, 0x164b, 0x9, 0x64, 
       0x2, 0x2, 0x164a, 0x164c, 0x5, 0x22e, 0x118, 0x2, 0x164b, 0x164a, 
       0x3, 0x2, 0x2, 0x2, 0x164b, 0x164c, 0x3, 0x2, 0x2, 0x2, 0x164c, 0x164e, 
       0x3, 0x2, 0x2, 0x2, 0x164d, 0x164f, 0x9, 0x63, 0x2, 0x2, 0x164e, 
       0x164d, 0x3, 0x2, 0x2, 0x2, 0x164e, 0x164f, 0x3, 0x2, 0x2, 0x2, 0x164f, 
       0x1651, 0x3, 0x2, 0x2, 0x2, 0x1650, 0x1652, 0x7, 0xb3, 0x2, 0x2, 
       0x1651, 0x1650, 0x3, 0x2, 0x2, 0x2, 0x1651, 0x1652, 0x3, 0x2, 0x2, 
       0x2, 0x1652, 0x167c, 0x3, 0x2, 0x2, 0x2, 0x1653, 0x167c, 0x9, 0x65, 
       0x2, 0x2, 0x1654, 0x1656, 0x9, 0x66, 0x2, 0x2, 0x1655, 0x1657, 0x5, 
       0x22a, 0x116, 0x2, 0x1656, 0x1655, 0x3, 0x2, 0x2, 0x2, 0x1656, 0x1657, 
       0x3, 0x2, 0x2, 0x2, 0x1657, 0x167c, 0x3, 0x2, 0x2, 0x2, 0x1658, 0x1659, 
       0x9, 0x67, 0x2, 0x2, 0x1659, 0x165b, 0x5, 0x226, 0x114, 0x2, 0x165a, 
       0x165c, 0x7, 0xd2, 0x2, 0x2, 0x165b, 0x165a, 0x3, 0x2, 0x2, 0x2, 
       0x165b, 0x165c, 0x3, 0x2, 0x2, 0x2, 0x165c, 0x1663, 0x3, 0x2, 0x2, 
       0x2, 0x165d, 0x165e, 0x7, 0x18, 0x2, 0x2, 0x165e, 0x1661, 0x7, 0x8c, 
       0x2, 0x2, 0x165f, 0x1661, 0x7, 0x2e5, 0x2, 0x2, 0x1660, 0x165d, 0x3, 
       0x2, 0x2, 0x2, 0x1660, 0x165f, 0x3, 0x2, 0x2, 0x2, 0x1661, 0x1662, 
       0x3, 0x2, 0x2, 0x2, 0x1662, 0x1664, 0x5, 0x202, 0x102, 0x2, 0x1663, 
       0x1660, 0x3, 0x2, 0x2, 0x2, 0x1663, 0x1664, 0x3, 0x2, 0x2, 0x2, 0x1664, 
       0x167c, 0x3, 0x2, 0x2, 0x2, 0x1665, 0x167c, 0x9, 0x68, 0x2, 0x2, 
       0x1666, 0x1668, 0x7, 0xd7, 0x2, 0x2, 0x1667, 0x1669, 0x7, 0xcf, 0x2, 
       0x2, 0x1668, 0x1667, 0x3, 0x2, 0x2, 0x2, 0x1668, 0x1669, 0x3, 0x2, 
       0x2, 0x2, 0x1669, 0x166b, 0x3, 0x2, 0x2, 0x2, 0x166a, 0x166c, 0x7, 
       0xd2, 0x2, 0x2, 0x166b, 0x166a, 0x3, 0x2, 0x2, 0x2, 0x166b, 0x166c, 
       0x3, 0x2, 0x2, 0x2, 0x166c, 0x1673, 0x3, 0x2, 0x2, 0x2, 0x166d, 0x166e, 
       0x7, 0x18, 0x2, 0x2, 0x166e, 0x1671, 0x7, 0x8c, 0x2, 0x2, 0x166f, 
       0x1671, 0x7, 0x2e5, 0x2, 0x2, 0x1670, 0x166d, 0x3, 0x2, 0x2, 0x2, 
       0x1670, 0x166f, 0x3, 0x2, 0x2, 0x2, 0x1671, 0x1672, 0x3, 0x2, 0x2, 
       0x2, 0x1672, 0x1674, 0x5, 0x202, 0x102, 0x2, 0x1673, 0x1670, 0x3, 
       0x2, 0x2, 0x2, 0x1673, 0x1674, 0x3, 0x2, 0x2, 0x2, 0x1674, 0x1677, 
       0x3, 0x2, 0x2, 0x2, 0x1675, 0x1676, 0x7, 0x1a, 0x2, 0x2, 0x1676, 
       0x1678, 0x5, 0x204, 0x103, 0x2, 0x1677, 0x1675, 0x3, 0x2, 0x2, 0x2, 
       0x1677, 0x1678, 0x3, 0x2, 0x2, 0x2, 0x1678, 0x167c, 0x3, 0x2, 0x2, 
       0x2, 0x1679, 0x167a, 0x7, 0xd7, 0x2, 0x2, 0x167a, 0x167c, 0x7, 0xd3, 
       0x2, 0x2, 0x167b, 0x15f8, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x160f, 0x3, 
       0x2, 0x2, 0x2, 0x167b, 0x1617, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x161f, 
       0x3, 0x2, 0x2, 0x2, 0x167b, 0x1628, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x1632, 
       0x3, 0x2, 0x2, 0x2, 0x167b, 0x163c, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x1649, 
       0x3, 0x2, 0x2, 0x2, 0x167b, 0x1653, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x1654, 
       0x3, 0x2, 0x2, 0x2, 0x167b, 0x1658, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x1665, 
       0x3, 0x2, 0x2, 0x2, 0x167b, 0x1666, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x1679, 
       0x3, 0x2, 0x2, 0x2, 0x167c, 0x225, 0x3, 0x2, 0x2, 0x2, 0x167d, 0x167e, 
       0x7, 0x406, 0x2, 0x2, 0x167e, 0x1683, 0x7, 0x415, 0x2, 0x2, 0x167f, 
       0x1680, 0x7, 0x408, 0x2, 0x2, 0x1680, 0x1682, 0x7, 0x415, 0x2, 0x2, 
       0x1681, 0x167f, 0x3, 0x2, 0x2, 0x2, 0x1682, 0x1685, 0x3, 0x2, 0x2, 
       0x2, 0x1683, 0x1681, 0x3, 0x2, 0x2, 0x2, 0x1683, 0x1684, 0x3, 0x2, 
       0x2, 0x2, 0x1684, 0x1686, 0x3, 0x2, 0x2, 0x2, 0x1685, 0x1683, 0x3, 
       0x2, 0x2, 0x2, 0x1686, 0x1687, 0x7, 0x407, 0x2, 0x2, 0x1687, 0x227, 
       0x3, 0x2, 0x2, 0x2, 0x1688, 0x168a, 0x9, 0x69, 0x2, 0x2, 0x1689, 
       0x168b, 0x5, 0x22a, 0x116, 0x2, 0x168a, 0x1689, 0x3, 0x2, 0x2, 0x2, 
       0x168a, 0x168b, 0x3, 0x2, 0x2, 0x2, 0x168b, 0x16a2, 0x3, 0x2, 0x2, 
       0x2, 0x168c, 0x168e, 0x7, 0xce, 0x2, 0x2, 0x168d, 0x168f, 0x5, 0x22a, 
       0x116, 0x2, 0x168e, 0x168d, 0x3, 0x2, 0x2, 0x2, 0x168e, 0x168f, 0x3, 
       0x2, 0x2, 0x2, 0x168f, 0x1696, 0x3, 0x2, 0x2, 0x2, 0x1690, 0x1691, 
       0x7, 0x18, 0x2, 0x2, 0x1691, 0x1694, 0x7, 0x8c, 0x2, 0x2, 0x1692, 
       0x1694, 0x7, 0x2e5, 0x2, 0x2, 0x1693, 0x1690, 0x3, 0x2, 0x2, 0x2, 
       0x1693, 0x1692, 0x3, 0x2, 0x2, 0x2, 0x1694, 0x1695, 0x3, 0x2, 0x2, 
       0x2, 0x1695, 0x1697, 0x5, 0x202, 0x102, 0x2, 0x1696, 0x1693, 0x3, 
       0x2, 0x2, 0x2, 0x1696, 0x1697, 0x3, 0x2, 0x2, 0x2, 0x1697, 0x16a2, 
       0x3, 0x2, 0x2, 0x2, 0x1698, 0x16a2, 0x9, 0x6a, 0x2, 0x2, 0x1699, 
       0x169b, 0x7, 0xc6, 0x2, 0x2, 0x169a, 0x169c, 0x5, 0x22c, 0x117, 0x2, 
       0x169b, 0x169a, 0x3, 0x2, 0x2, 0x2, 0x169b, 0x169c, 0x3, 0x2, 0x2, 
       0x2, 0x169c, 0x16a2, 0x3, 0x2, 0x2, 0x2, 0x169d, 0x169f, 0x9, 0x63, 
       0x2, 0x2, 0x169e, 0x16a0, 0x7, 0xbe, 0x2, 0x2, 0x169f, 0x169e, 0x3, 
       0x2, 0x2, 0x2, 0x169f, 0x16a0, 0x3, 0x2, 0x2, 0x2, 0x16a0, 0x16a2, 
       0x3, 0x2, 0x2, 0x2, 0x16a1, 0x1688, 0x3, 0x2, 0x2, 0x2, 0x16a1, 0x168c, 
       0x3, 0x2, 0x2, 0x2, 0x16a1, 0x1698, 0x3, 0x2, 0x2, 0x2, 0x16a1, 0x1699, 
       0x3, 0x2, 0x2, 0x2, 0x16a1, 0x169d, 0x3, 0x2, 0x2, 0x2, 0x16a2, 0x229, 
       0x3, 0x2, 0x2, 0x2, 0x16a3, 0x16a4, 0x7, 0x406, 0x2, 0x2, 0x16a4, 
       0x16a5, 0x5, 0x216, 0x10c, 0x2, 0x16a5, 0x16a6, 0x7, 0x407, 0x2, 
       0x2, 0x16a6, 0x22b, 0x3, 0x2, 0x2, 0x2, 0x16a7, 0x16a8, 0x7, 0x406, 
       0x2, 0x2, 0x16a8, 0x16a9, 0x5, 0x216, 0x10c, 0x2, 0x16a9, 0x16aa, 
       0x7, 0x408, 0x2, 0x2, 0x16aa, 0x16ab, 0x5, 0x216, 0x10c, 0x2, 0x16ab, 
       0x16ac, 0x7, 0x407, 0x2, 0x2, 0x16ac, 0x22d, 0x3, 0x2, 0x2, 0x2, 
       0x16ad, 0x16ae, 0x7, 0x406, 0x2, 0x2, 0x16ae, 0x16b1, 0x5, 0x216, 
       0x10c, 0x2, 0x16af, 0x16b0, 0x7, 0x408, 0x2, 0x2, 0x16b0, 0x16b2, 
       0x5, 0x216, 0x10c, 0x2, 0x16b1, 0x16af, 0x3, 0x2, 0x2, 0x2, 0x16b1, 
       0x16b2, 0x3, 0x2, 0x2, 0x2, 0x16b2, 0x16b3, 0x3, 0x2, 0x2, 0x2, 0x16b3, 
       0x16b4, 0x7, 0x407, 0x2, 0x2, 0x16b4, 0x22f, 0x3, 0x2, 0x2, 0x2, 
       0x16b5, 0x16ba, 0x5, 0x210, 0x109, 0x2, 0x16b6, 0x16b7, 0x7, 0x408, 
       0x2, 0x2, 0x16b7, 0x16b9, 0x5, 0x210, 0x109, 0x2, 0x16b8, 0x16b6, 
       0x3, 0x2, 0x2, 0x2, 0x16b9, 0x16bc, 0x3, 0x2, 0x2, 0x2, 0x16ba, 0x16b8, 
       0x3, 0x2, 0x2, 0x2, 0x16ba, 0x16bb, 0x3, 0x2, 0x2, 0x2, 0x16bb, 0x231, 
       0x3, 0x2, 0x2, 0x2, 0x16bc, 0x16ba, 0x3, 0x2, 0x2, 0x2, 0x16bd, 0x16c2, 
       0x5, 0x1f8, 0xfd, 0x2, 0x16be, 0x16bf, 0x7, 0x408, 0x2, 0x2, 0x16bf, 
       0x16c1, 0x5, 0x1f8, 0xfd, 0x2, 0x16c0, 0x16be, 0x3, 0x2, 0x2, 0x2, 
       0x16c1, 0x16c4, 0x3, 0x2, 0x2, 0x2, 0x16c2, 0x16c0, 0x3, 0x2, 0x2, 
       0x2, 0x16c2, 0x16c3, 0x3, 0x2, 0x2, 0x2, 0x16c3, 0x233, 0x3, 0x2, 
       0x2, 0x2, 0x16c4, 0x16c2, 0x3, 0x2, 0x2, 0x2, 0x16c5, 0x16c6, 0x7, 
       0x406, 0x2, 0x2, 0x16c6, 0x16cb, 0x5, 0x1fc, 0xff, 0x2, 0x16c7, 0x16c8, 
       0x7, 0x408, 0x2, 0x2, 0x16c8, 0x16ca, 0x5, 0x1fc, 0xff, 0x2, 0x16c9, 
       0x16c7, 0x3, 0x2, 0x2, 0x2, 0x16ca, 0x16cd, 0x3, 0x2, 0x2, 0x2, 0x16cb, 
       0x16c9, 0x3, 0x2, 0x2, 0x2, 0x16cb, 0x16cc, 0x3, 0x2, 0x2, 0x2, 0x16cc, 
       0x16ce, 0x3, 0x2, 0x2, 0x2, 0x16cd, 0x16cb, 0x3, 0x2, 0x2, 0x2, 0x16ce, 
       0x16cf, 0x7, 0x407, 0x2, 0x2, 0x16cf, 0x235, 0x3, 0x2, 0x2, 0x2, 
       0x16d0, 0x16d5, 0x5, 0x25e, 0x130, 0x2, 0x16d1, 0x16d2, 0x7, 0x408, 
       0x2, 0x2, 0x16d2, 0x16d4, 0x5, 0x25e, 0x130, 0x2, 0x16d3, 0x16d1, 
       0x3, 0x2, 0x2, 0x2, 0x16d4, 0x16d7, 0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d3, 
       0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d6, 0x3, 0x2, 0x2, 0x2, 0x16d6, 0x237, 
       0x3, 0x2, 0x2, 0x2, 0x16d7, 0x16d5, 0x3, 0x2, 0x2, 0x2, 0x16d8, 0x16dd, 
       0x5, 0x244, 0x123, 0x2, 0x16d9, 0x16da, 0x7, 0x408, 0x2, 0x2, 0x16da, 
       0x16dc, 0x5, 0x244, 0x123, 0x2, 0x16db, 0x16d9, 0x3, 0x2, 0x2, 0x2, 
       0x16dc, 0x16df, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16db, 0x3, 0x2, 0x2, 
       0x2, 0x16dd, 0x16de, 0x3, 0x2, 0x2, 0x2, 0x16de, 0x239, 0x3, 0x2, 
       0x2, 0x2, 0x16df, 0x16dd, 0x3, 0x2, 0x2, 0x2, 0x16e0, 0x16e5, 0x5, 
       0x222, 0x112, 0x2, 0x16e1, 0x16e2, 0x7, 0x408, 0x2, 0x2, 0x16e2, 
       0x16e4, 0x5, 0x222, 0x112, 0x2, 0x16e3, 0x16e1, 0x3, 0x2, 0x2, 0x2, 
       0x16e4, 0x16e7, 0x3, 0x2, 0x2, 0x2, 0x16e5, 0x16e3, 0x3, 0x2, 0x2, 
       0x2, 0x16e5, 0x16e6, 0x3, 0x2, 0x2, 0x2, 0x16e6, 0x23b, 0x3, 0x2, 
       0x2, 0x2, 0x16e7, 0x16e5, 0x3, 0x2, 0x2, 0x2, 0x16e8, 0x16ed, 0x7, 
       0x415, 0x2, 0x2, 0x16e9, 0x16ea, 0x7, 0x408, 0x2, 0x2, 0x16ea, 0x16ec, 
       0x7, 0x415, 0x2, 0x2, 0x16eb, 0x16e9, 0x3, 0x2, 0x2, 0x2, 0x16ec, 
       0x16ef, 0x3, 0x2, 0x2, 0x2, 0x16ed, 0x16eb, 0x3, 0x2, 0x2, 0x2, 0x16ed, 
       0x16ee, 0x3, 0x2, 0x2, 0x2, 0x16ee, 0x23d, 0x3, 0x2, 0x2, 0x2, 0x16ef, 
       0x16ed, 0x3, 0x2, 0x2, 0x2, 0x16f0, 0x16f5, 0x7, 0x421, 0x2, 0x2, 
       0x16f1, 0x16f2, 0x7, 0x408, 0x2, 0x2, 0x16f2, 0x16f4, 0x7, 0x421, 
       0x2, 0x2, 0x16f3, 0x16f1, 0x3, 0x2, 0x2, 0x2, 0x16f4, 0x16f7, 0x3, 
       0x2, 0x2, 0x2, 0x16f5, 0x16f3, 0x3, 0x2, 0x2, 0x2, 0x16f5, 0x16f6, 
       0x3, 0x2, 0x2, 0x2, 0x16f6, 0x23f, 0x3, 0x2, 0x2, 0x2, 0x16f7, 0x16f5, 
       0x3, 0x2, 0x2, 0x2, 0x16f8, 0x1703, 0x7, 0x6a, 0x2, 0x2, 0x16f9, 
       0x16fb, 0x5, 0x264, 0x133, 0x2, 0x16fa, 0x16f9, 0x3, 0x2, 0x2, 0x2, 
       0x16fa, 0x16fb, 0x3, 0x2, 0x2, 0x2, 0x16fb, 0x16fc, 0x3, 0x2, 0x2, 
       0x2, 0x16fc, 0x1703, 0x5, 0x222, 0x112, 0x2, 0x16fd, 0x1703, 0x5, 
       0x242, 0x122, 0x2, 0x16fe, 0x16ff, 0x7, 0x406, 0x2, 0x2, 0x16ff, 
       0x1700, 0x5, 0x25e, 0x130, 0x2, 0x1700, 0x1701, 0x7, 0x407, 0x2, 
       0x2, 0x1701, 0x1703, 0x3, 0x2, 0x2, 0x2, 0x1702, 0x16f8, 0x3, 0x2, 
       0x2, 0x2, 0x1702, 0x16fa, 0x3, 0x2, 0x2, 0x2, 0x1702, 0x16fd, 0x3, 
       0x2, 0x2, 0x2, 0x1702, 0x16fe, 0x3, 0x2, 0x2, 0x2, 0x1703, 0x1707, 
       0x3, 0x2, 0x2, 0x2, 0x1704, 0x1705, 0x7, 0x6c, 0x2, 0x2, 0x1705, 
       0x1706, 0x7, 0xa8, 0x2, 0x2, 0x1706, 0x1708, 0x5, 0x242, 0x122, 0x2, 
       0x1707, 0x1704, 0x3, 0x2, 0x2, 0x2, 0x1707, 0x1708, 0x3, 0x2, 0x2, 
       0x2, 0x1708, 0x241, 0x3, 0x2, 0x2, 0x2, 0x1709, 0x170f, 0x9, 0x6b, 
       0x2, 0x2, 0x170a, 0x170c, 0x7, 0x406, 0x2, 0x2, 0x170b, 0x170d, 0x5, 
       0x216, 0x10c, 0x2, 0x170c, 0x170b, 0x3, 0x2, 0x2, 0x2, 0x170c, 0x170d, 
       0x3, 0x2, 0x2, 0x2, 0x170d, 0x170e, 0x3, 0x2, 0x2, 0x2, 0x170e, 0x1710, 
       0x7, 0x407, 0x2, 0x2, 0x170f, 0x170a, 0x3, 0x2, 0x2, 0x2, 0x170f, 
       0x1710, 0x3, 0x2, 0x2, 0x2, 0x1710, 0x1718, 0x3, 0x2, 0x2, 0x2, 0x1711, 
       0x1712, 0x7, 0x107, 0x2, 0x2, 0x1712, 0x1714, 0x7, 0x406, 0x2, 0x2, 
       0x1713, 0x1715, 0x5, 0x216, 0x10c, 0x2, 0x1714, 0x1713, 0x3, 0x2, 
       0x2, 0x2, 0x1714, 0x1715, 0x3, 0x2, 0x2, 0x2, 0x1715, 0x1716, 0x3, 
       0x2, 0x2, 0x2, 0x1716, 0x1718, 0x7, 0x407, 0x2, 0x2, 0x1717, 0x1709, 
       0x3, 0x2, 0x2, 0x2, 0x1717, 0x1711, 0x3, 0x2, 0x2, 0x2, 0x1718, 0x243, 
       0x3, 0x2, 0x2, 0x2, 0x1719, 0x171c, 0x5, 0x25e, 0x130, 0x2, 0x171a, 
       0x171c, 0x7, 0x28, 0x2, 0x2, 0x171b, 0x1719, 0x3, 0x2, 0x2, 0x2, 
       0x171b, 0x171a, 0x3, 0x2, 0x2, 0x2, 0x171c, 0x245, 0x3, 0x2, 0x2, 
       0x2, 0x171d, 0x171e, 0x7, 0x47, 0x2, 0x2, 0x171e, 0x171f, 0x7, 0x37, 
       0x2, 0x2, 0x171f, 0x247, 0x3, 0x2, 0x2, 0x2, 0x1720, 0x1721, 0x7, 
       0x47, 0x2, 0x2, 0x1721, 0x1722, 0x7, 0x68, 0x2, 0x2, 0x1722, 0x1723, 
       0x7, 0x37, 0x2, 0x2, 0x1723, 0x249, 0x3, 0x2, 0x2, 0x2, 0x1724, 0x1736, 
       0x5, 0x24c, 0x127, 0x2, 0x1725, 0x1736, 0x5, 0x254, 0x12b, 0x2, 0x1726, 
       0x1727, 0x5, 0x256, 0x12c, 0x2, 0x1727, 0x1729, 0x7, 0x406, 0x2, 
       0x2, 0x1728, 0x172a, 0x5, 0x25a, 0x12e, 0x2, 0x1729, 0x1728, 0x3, 
       0x2, 0x2, 0x2, 0x1729, 0x172a, 0x3, 0x2, 0x2, 0x2, 0x172a, 0x172b, 
       0x3, 0x2, 0x2, 0x2, 0x172b, 0x172c, 0x7, 0x407, 0x2, 0x2, 0x172c, 
       0x1736, 0x3, 0x2, 0x2, 0x2, 0x172d, 0x172e, 0x5, 0x1f6, 0xfc, 0x2, 
       0x172e, 0x1730, 0x7, 0x406, 0x2, 0x2, 0x172f, 0x1731, 0x5, 0x25a, 
       0x12e, 0x2, 0x1730, 0x172f, 0x3, 0x2, 0x2, 0x2, 0x1730, 0x1731, 0x3, 
       0x2, 0x2, 0x2, 0x1731, 0x1732, 0x3, 0x2, 0x2, 0x2, 0x1732, 0x1733, 
       0x7, 0x407, 0x2, 0x2, 0x1733, 0x1736, 0x3, 0x2, 0x2, 0x2, 0x1734, 
       0x1736, 0x5, 0x258, 0x12d, 0x2, 0x1735, 0x1724, 0x3, 0x2, 0x2, 0x2, 
       0x1735, 0x1725, 0x3, 0x2, 0x2, 0x2, 0x1735, 0x1726, 0x3, 0x2, 0x2, 
       0x2, 0x1735, 0x172d, 0x3, 0x2, 0x2, 0x2, 0x1735, 0x1734, 0x3, 0x2, 
       0x2, 0x2, 0x1736, 0x24b, 0x3, 0x2, 0x2, 0x2, 0x1737, 0x173a, 0x9, 
       0x6c, 0x2, 0x2, 0x1738, 0x1739, 0x7, 0x406, 0x2, 0x2, 0x1739, 0x173b, 
       0x7, 0x407, 0x2, 0x2, 0x173a, 0x1738, 0x3, 0x2, 0x2, 0x2, 0x173a, 
       0x173b, 0x3, 0x2, 0x2, 0x2, 0x173b, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x173c, 
       0x173d, 0x7, 0x1f, 0x2, 0x2, 0x173d, 0x173e, 0x7, 0x406, 0x2, 0x2, 
       0x173e, 0x173f, 0x5, 0x25e, 0x130, 0x2, 0x173f, 0x1740, 0x7, 0x408, 
       0x2, 0x2, 0x1740, 0x1741, 0x5, 0x228, 0x115, 0x2, 0x1741, 0x1742, 
       0x7, 0x407, 0x2, 0x2, 0x1742, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1743, 
       0x1744, 0x7, 0x1f, 0x2, 0x2, 0x1744, 0x1745, 0x7, 0x406, 0x2, 0x2, 
       0x1745, 0x1746, 0x5, 0x25e, 0x130, 0x2, 0x1746, 0x1747, 0x7, 0xab, 
       0x2, 0x2, 0x1747, 0x1748, 0x5, 0x202, 0x102, 0x2, 0x1748, 0x1749, 
       0x7, 0x407, 0x2, 0x2, 0x1749, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x174a, 
       0x174b, 0x7, 0x16, 0x2, 0x2, 0x174b, 0x174c, 0x7, 0x406, 0x2, 0x2, 
       0x174c, 0x174d, 0x5, 0x25e, 0x130, 0x2, 0x174d, 0x174e, 0x7, 0xd, 
       0x2, 0x2, 0x174e, 0x174f, 0x5, 0x228, 0x115, 0x2, 0x174f, 0x1750, 
       0x7, 0x407, 0x2, 0x2, 0x1750, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1751, 
       0x1752, 0x7, 0xac, 0x2, 0x2, 0x1752, 0x1753, 0x7, 0x406, 0x2, 0x2, 
       0x1753, 0x1754, 0x5, 0x1fa, 0xfe, 0x2, 0x1754, 0x1755, 0x7, 0x407, 
       0x2, 0x2, 0x1755, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1756, 0x1757, 0x7, 
       0x15, 0x2, 0x2, 0x1757, 0x1759, 0x5, 0x25e, 0x130, 0x2, 0x1758, 0x175a, 
       0x5, 0x24e, 0x128, 0x2, 0x1759, 0x1758, 0x3, 0x2, 0x2, 0x2, 0x175a, 
       0x175b, 0x3, 0x2, 0x2, 0x2, 0x175b, 0x1759, 0x3, 0x2, 0x2, 0x2, 0x175b, 
       0x175c, 0x3, 0x2, 0x2, 0x2, 0x175c, 0x175f, 0x3, 0x2, 0x2, 0x2, 0x175d, 
       0x175e, 0x7, 0x33, 0x2, 0x2, 0x175e, 0x1760, 0x5, 0x25c, 0x12f, 0x2, 
       0x175f, 0x175d, 0x3, 0x2, 0x2, 0x2, 0x175f, 0x1760, 0x3, 0x2, 0x2, 
       0x2, 0x1760, 0x1761, 0x3, 0x2, 0x2, 0x2, 0x1761, 0x1762, 0x7, 0x156, 
       0x2, 0x2, 0x1762, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1763, 0x1765, 0x7, 
       0x15, 0x2, 0x2, 0x1764, 0x1766, 0x5, 0x24e, 0x128, 0x2, 0x1765, 0x1764, 
       0x3, 0x2, 0x2, 0x2, 0x1766, 0x1767, 0x3, 0x2, 0x2, 0x2, 0x1767, 0x1765, 
       0x3, 0x2, 0x2, 0x2, 0x1767, 0x1768, 0x3, 0x2, 0x2, 0x2, 0x1768, 0x176b, 
       0x3, 0x2, 0x2, 0x2, 0x1769, 0x176a, 0x7, 0x33, 0x2, 0x2, 0x176a, 
       0x176c, 0x5, 0x25c, 0x12f, 0x2, 0x176b, 0x1769, 0x3, 0x2, 0x2, 0x2, 
       0x176b, 0x176c, 0x3, 0x2, 0x2, 0x2, 0x176c, 0x176d, 0x3, 0x2, 0x2, 
       0x2, 0x176d, 0x176e, 0x7, 0x156, 0x2, 0x2, 0x176e, 0x17d9, 0x3, 0x2, 
       0x2, 0x2, 0x176f, 0x1770, 0x7, 0xce, 0x2, 0x2, 0x1770, 0x1771, 0x7, 
       0x406, 0x2, 0x2, 0x1771, 0x1774, 0x5, 0x25a, 0x12e, 0x2, 0x1772, 
       0x1773, 0x7, 0xab, 0x2, 0x2, 0x1773, 0x1775, 0x5, 0x202, 0x102, 0x2, 
       0x1774, 0x1772, 0x3, 0x2, 0x2, 0x2, 0x1774, 0x1775, 0x3, 0x2, 0x2, 
       0x2, 0x1775, 0x1776, 0x3, 0x2, 0x2, 0x2, 0x1776, 0x1777, 0x7, 0x407, 
       0x2, 0x2, 0x1777, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1778, 0x1779, 0x7, 
       0x108, 0x2, 0x2, 0x1779, 0x177c, 0x7, 0x406, 0x2, 0x2, 0x177a, 0x177d, 
       0x5, 0x21a, 0x10e, 0x2, 0x177b, 0x177d, 0x5, 0x25e, 0x130, 0x2, 0x177c, 
       0x177a, 0x3, 0x2, 0x2, 0x2, 0x177c, 0x177b, 0x3, 0x2, 0x2, 0x2, 0x177d, 
       0x177e, 0x3, 0x2, 0x2, 0x2, 0x177e, 0x1781, 0x7, 0x49, 0x2, 0x2, 
       0x177f, 0x1782, 0x5, 0x21a, 0x10e, 0x2, 0x1780, 0x1782, 0x5, 0x25e, 
       0x130, 0x2, 0x1781, 0x177f, 0x3, 0x2, 0x2, 0x2, 0x1781, 0x1780, 0x3, 
       0x2, 0x2, 0x2, 0x1782, 0x1783, 0x3, 0x2, 0x2, 0x2, 0x1783, 0x1784, 
       0x7, 0x407, 0x2, 0x2, 0x1784, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1785, 
       0x1786, 0x9, 0x6d, 0x2, 0x2, 0x1786, 0x1789, 0x7, 0x406, 0x2, 0x2, 
       0x1787, 0x178a, 0x5, 0x21a, 0x10e, 0x2, 0x1788, 0x178a, 0x5, 0x25e, 
       0x130, 0x2, 0x1789, 0x1787, 0x3, 0x2, 0x2, 0x2, 0x1789, 0x1788, 0x3, 
       0x2, 0x2, 0x2, 0x178a, 0x178b, 0x3, 0x2, 0x2, 0x2, 0x178b, 0x178e, 
       0x7, 0x3f, 0x2, 0x2, 0x178c, 0x178f, 0x5, 0x216, 0x10c, 0x2, 0x178d, 
       0x178f, 0x5, 0x25e, 0x130, 0x2, 0x178e, 0x178c, 0x3, 0x2, 0x2, 0x2, 
       0x178e, 0x178d, 0x3, 0x2, 0x2, 0x2, 0x178f, 0x1795, 0x3, 0x2, 0x2, 
       0x2, 0x1790, 0x1793, 0x7, 0x3c, 0x2, 0x2, 0x1791, 0x1794, 0x5, 0x216, 
       0x10c, 0x2, 0x1792, 0x1794, 0x5, 0x25e, 0x130, 0x2, 0x1793, 0x1791, 
       0x3, 0x2, 0x2, 0x2, 0x1793, 0x1792, 0x3, 0x2, 0x2, 0x2, 0x1794, 0x1796, 
       0x3, 0x2, 0x2, 0x2, 0x1795, 0x1790, 0x3, 0x2, 0x2, 0x2, 0x1795, 0x1796, 
       0x3, 0x2, 0x2, 0x2, 0x1796, 0x1797, 0x3, 0x2, 0x2, 0x2, 0x1797, 0x1798, 
       0x7, 0x407, 0x2, 0x2, 0x1798, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x1799, 
       0x179a, 0x7, 0x10c, 0x2, 0x2, 0x179a, 0x179b, 0x7, 0x406, 0x2, 0x2, 
       0x179b, 0x179e, 0x9, 0x6e, 0x2, 0x2, 0x179c, 0x179f, 0x5, 0x21a, 
       0x10e, 0x2, 0x179d, 0x179f, 0x5, 0x25e, 0x130, 0x2, 0x179e, 0x179c, 
       0x3, 0x2, 0x2, 0x2, 0x179e, 0x179d, 0x3, 0x2, 0x2, 0x2, 0x179e, 0x179f, 
       0x3, 0x2, 0x2, 0x2, 0x179f, 0x17a0, 0x3, 0x2, 0x2, 0x2, 0x17a0, 0x17a3, 
       0x7, 0x3f, 0x2, 0x2, 0x17a1, 0x17a4, 0x5, 0x21a, 0x10e, 0x2, 0x17a2, 
       0x17a4, 0x5, 0x25e, 0x130, 0x2, 0x17a3, 0x17a1, 0x3, 0x2, 0x2, 0x2, 
       0x17a3, 0x17a2, 0x3, 0x2, 0x2, 0x2, 0x17a4, 0x17a5, 0x3, 0x2, 0x2, 
       0x2, 0x17a5, 0x17a6, 0x7, 0x407, 0x2, 0x2, 0x17a6, 0x17d9, 0x3, 0x2, 
       0x2, 0x2, 0x17a7, 0x17a8, 0x7, 0x10c, 0x2, 0x2, 0x17a8, 0x17ab, 0x7, 
       0x406, 0x2, 0x2, 0x17a9, 0x17ac, 0x5, 0x21a, 0x10e, 0x2, 0x17aa, 
       0x17ac, 0x5, 0x25e, 0x130, 0x2, 0x17ab, 0x17a9, 0x3, 0x2, 0x2, 0x2, 
       0x17ab, 0x17aa, 0x3, 0x2, 0x2, 0x2, 0x17ac, 0x17ad, 0x3, 0x2, 0x2, 
       0x2, 0x17ad, 0x17b0, 0x7, 0x3f, 0x2, 0x2, 0x17ae, 0x17b1, 0x5, 0x21a, 
       0x10e, 0x2, 0x17af, 0x17b1, 0x5, 0x25e, 0x130, 0x2, 0x17b0, 0x17ae, 
       0x3, 0x2, 0x2, 0x2, 0x17b0, 0x17af, 0x3, 0x2, 0x2, 0x2, 0x17b1, 0x17b2, 
       0x3, 0x2, 0x2, 0x2, 0x17b2, 0x17b3, 0x7, 0x407, 0x2, 0x2, 0x17b3, 
       0x17d9, 0x3, 0x2, 0x2, 0x2, 0x17b4, 0x17b5, 0x7, 0x3e7, 0x2, 0x2, 
       0x17b5, 0x17b8, 0x7, 0x406, 0x2, 0x2, 0x17b6, 0x17b9, 0x5, 0x21a, 
       0x10e, 0x2, 0x17b7, 0x17b9, 0x5, 0x25e, 0x130, 0x2, 0x17b8, 0x17b6, 
       0x3, 0x2, 0x2, 0x2, 0x17b8, 0x17b7, 0x3, 0x2, 0x2, 0x2, 0x17b9, 0x17c0, 
       0x3, 0x2, 0x2, 0x2, 0x17ba, 0x17bb, 0x7, 0xd, 0x2, 0x2, 0x17bb, 0x17bc, 
       0x9, 0x6f, 0x2, 0x2, 0x17bc, 0x17bd, 0x7, 0x406, 0x2, 0x2, 0x17bd, 
       0x17be, 0x5, 0x216, 0x10c, 0x2, 0x17be, 0x17bf, 0x7, 0x407, 0x2, 
       0x2, 0x17bf, 0x17c1, 0x3, 0x2, 0x2, 0x2, 0x17c0, 0x17ba, 0x3, 0x2, 
       0x2, 0x2, 0x17c0, 0x17c1, 0x3, 0x2, 0x2, 0x2, 0x17c1, 0x17c3, 0x3, 
       0x2, 0x2, 0x2, 0x17c2, 0x17c4, 0x5, 0x250, 0x129, 0x2, 0x17c3, 0x17c2, 
       0x3, 0x2, 0x2, 0x2, 0x17c3, 0x17c4, 0x3, 0x2, 0x2, 0x2, 0x17c4, 0x17c5, 
       0x3, 0x2, 0x2, 0x2, 0x17c5, 0x17c6, 0x7, 0x407, 0x2, 0x2, 0x17c6, 
       0x17d9, 0x3, 0x2, 0x2, 0x2, 0x17c7, 0x17c8, 0x7, 0x105, 0x2, 0x2, 
       0x17c8, 0x17c9, 0x7, 0x406, 0x2, 0x2, 0x17c9, 0x17ca, 0x5, 0x3c, 
       0x1f, 0x2, 0x17ca, 0x17cd, 0x7, 0x3f, 0x2, 0x2, 0x17cb, 0x17ce, 0x5, 
       0x21a, 0x10e, 0x2, 0x17cc, 0x17ce, 0x5, 0x25e, 0x130, 0x2, 0x17cd, 
       0x17cb, 0x3, 0x2, 0x2, 0x2, 0x17cd, 0x17cc, 0x3, 0x2, 0x2, 0x2, 0x17ce, 
       0x17cf, 0x3, 0x2, 0x2, 0x2, 0x17cf, 0x17d0, 0x7, 0x407, 0x2, 0x2, 
       0x17d0, 0x17d9, 0x3, 0x2, 0x2, 0x2, 0x17d1, 0x17d2, 0x7, 0x31f, 0x2, 
       0x2, 0x17d2, 0x17d3, 0x7, 0x406, 0x2, 0x2, 0x17d3, 0x17d4, 0x9, 0x70, 
       0x2, 0x2, 0x17d4, 0x17d5, 0x7, 0x408, 0x2, 0x2, 0x17d5, 0x17d6, 0x5, 
       0x21a, 0x10e, 0x2, 0x17d6, 0x17d7, 0x7, 0x407, 0x2, 0x2, 0x17d7, 
       0x17d9, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x1737, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x173c, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x1743, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x174a, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x1751, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x1756, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x1763, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x176f, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x1778, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x1785, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x1799, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x17a7, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x17b4, 0x3, 0x2, 0x2, 0x2, 0x17d8, 
       0x17c7, 0x3, 0x2, 0x2, 0x2, 0x17d8, 0x17d1, 0x3, 0x2, 0x2, 0x2, 0x17d9, 
       0x24d, 0x3, 0x2, 0x2, 0x2, 0x17da, 0x17db, 0x7, 0xad, 0x2, 0x2, 0x17db, 
       0x17dc, 0x5, 0x25c, 0x12f, 0x2, 0x17dc, 0x17dd, 0x7, 0x9e, 0x2, 0x2, 
       0x17dd, 0x17de, 0x5, 0x25c, 0x12f, 0x2, 0x17de, 0x24f, 0x3, 0x2, 
       0x2, 0x2, 0x17df, 0x17e0, 0x7, 0x192, 0x2, 0x2, 0x17e0, 0x17e5, 0x5, 
       0x252, 0x12a, 0x2, 0x17e1, 0x17e2, 0x7, 0x408, 0x2, 0x2, 0x17e2, 
       0x17e4, 0x5, 0x252, 0x12a, 0x2, 0x17e3, 0x17e1, 0x3, 0x2, 0x2, 0x2, 
       0x17e4, 0x17e7, 0x3, 0x2, 0x2, 0x2, 0x17e5, 0x17e3, 0x3, 0x2, 0x2, 
       0x2, 0x17e5, 0x17e6, 0x3, 0x2, 0x2, 0x2, 0x17e6, 0x17ee, 0x3, 0x2, 
       0x2, 0x2, 0x17e7, 0x17e5, 0x3, 0x2, 0x2, 0x2, 0x17e8, 0x17e9, 0x7, 
       0x192, 0x2, 0x2, 0x17e9, 0x17ea, 0x5, 0x216, 0x10c, 0x2, 0x17ea, 
       0x17eb, 0x7, 0x3fa, 0x2, 0x2, 0x17eb, 0x17ec, 0x5, 0x216, 0x10c, 
       0x2, 0x17ec, 0x17ee, 0x3, 0x2, 0x2, 0x2, 0x17ed, 0x17df, 0x3, 0x2, 
       0x2, 0x2, 0x17ed, 0x17e8, 0x3, 0x2, 0x2, 0x2, 0x17ee, 0x251, 0x3, 
       0x2, 0x2, 0x2, 0x17ef, 0x17f1, 0x5, 0x216, 0x10c, 0x2, 0x17f0, 0x17f2, 
       0x9, 0x71, 0x2, 0x2, 0x17f1, 0x17f0, 0x3, 0x2, 0x2, 0x2, 0x17f1, 
       0x17f2, 0x3, 0x2, 0x2, 0x2, 0x17f2, 0x253, 0x3, 0x2, 0x2, 0x2, 0x17f3, 
       0x17f4, 0x9, 0x72, 0x2, 0x2, 0x17f4, 0x17f6, 0x7, 0x406, 0x2, 0x2, 
       0x17f5, 0x17f7, 0x9, 0x29, 0x2, 0x2, 0x17f6, 0x17f5, 0x3, 0x2, 0x2, 
       0x2, 0x17f6, 0x17f7, 0x3, 0x2, 0x2, 0x2, 0x17f7, 0x17f8, 0x3, 0x2, 
       0x2, 0x2, 0x17f8, 0x17f9, 0x5, 0x25c, 0x12f, 0x2, 0x17f9, 0x17fa, 
       0x7, 0x407, 0x2, 0x2, 0x17fa, 0x182c, 0x3, 0x2, 0x2, 0x2, 0x17fb, 
       0x17fc, 0x7, 0xf1, 0x2, 0x2, 0x17fc, 0x1802, 0x7, 0x406, 0x2, 0x2, 
       0x17fd, 0x1803, 0x7, 0x3f5, 0x2, 0x2, 0x17fe, 0x1800, 0x7, 0x8, 0x2, 
       0x2, 0x17ff, 0x17fe, 0x3, 0x2, 0x2, 0x2, 0x17ff, 0x1800, 0x3, 0x2, 
       0x2, 0x2, 0x1800, 0x1801, 0x3, 0x2, 0x2, 0x2, 0x1801, 0x1803, 0x5, 
       0x25c, 0x12f, 0x2, 0x1802, 0x17fd, 0x3, 0x2, 0x2, 0x2, 0x1802, 0x17ff, 
       0x3, 0x2, 0x2, 0x2, 0x1803, 0x1804, 0x3, 0x2, 0x2, 0x2, 0x1804, 0x182c, 
       0x7, 0x407, 0x2, 0x2, 0x1805, 0x1806, 0x7, 0xf1, 0x2, 0x2, 0x1806, 
       0x1807, 0x7, 0x406, 0x2, 0x2, 0x1807, 0x1808, 0x7, 0x2f, 0x2, 0x2, 
       0x1808, 0x1809, 0x5, 0x25a, 0x12e, 0x2, 0x1809, 0x180a, 0x7, 0x407, 
       0x2, 0x2, 0x180a, 0x182c, 0x3, 0x2, 0x2, 0x2, 0x180b, 0x180c, 0x9, 
       0x73, 0x2, 0x2, 0x180c, 0x180e, 0x7, 0x406, 0x2, 0x2, 0x180d, 0x180f, 
       0x7, 0x8, 0x2, 0x2, 0x180e, 0x180d, 0x3, 0x2, 0x2, 0x2, 0x180e, 0x180f, 
       0x3, 0x2, 0x2, 0x2, 0x180f, 0x1810, 0x3, 0x2, 0x2, 0x2, 0x1810, 0x1811, 
       0x5, 0x25c, 0x12f, 0x2, 0x1811, 0x1812, 0x7, 0x407, 0x2, 0x2, 0x1812, 
       0x182c, 0x3, 0x2, 0x2, 0x2, 0x1813, 0x1814, 0x7, 0xf2, 0x2, 0x2, 
       0x1814, 0x1816, 0x7, 0x406, 0x2, 0x2, 0x1815, 0x1817, 0x7, 0x2f, 
       0x2, 0x2, 0x1816, 0x1815, 0x3, 0x2, 0x2, 0x2, 0x1816, 0x1817, 0x3, 
       0x2, 0x2, 0x2, 0x1817, 0x1818, 0x3, 0x2, 0x2, 0x2, 0x1818, 0x1823, 
       0x5, 0x25a, 0x12e, 0x2, 0x1819, 0x181a, 0x7, 0x71, 0x2, 0x2, 0x181a, 
       0x181b, 0x7, 0x12, 0x2, 0x2, 0x181b, 0x1820, 0x5, 0xd2, 0x6a, 0x2, 
       0x181c, 0x181d, 0x7, 0x408, 0x2, 0x2, 0x181d, 0x181f, 0x5, 0xd2, 
       0x6a, 0x2, 0x181e, 0x181c, 0x3, 0x2, 0x2, 0x2, 0x181f, 0x1822, 0x3, 
       0x2, 0x2, 0x2, 0x1820, 0x181e, 0x3, 0x2, 0x2, 0x2, 0x1820, 0x1821, 
       0x3, 0x2, 0x2, 0x2, 0x1821, 0x1824, 0x3, 0x2, 0x2, 0x2, 0x1822, 0x1820, 
       0x3, 0x2, 0x2, 0x2, 0x1823, 0x1819, 0x3, 0x2, 0x2, 0x2, 0x1823, 0x1824, 
       0x3, 0x2, 0x2, 0x2, 0x1824, 0x1827, 0x3, 0x2, 0x2, 0x2, 0x1825, 0x1826, 
       0x7, 0x8d, 0x2, 0x2, 0x1826, 0x1828, 0x7, 0x415, 0x2, 0x2, 0x1827, 
       0x1825, 0x3, 0x2, 0x2, 0x2, 0x1827, 0x1828, 0x3, 0x2, 0x2, 0x2, 0x1828, 
       0x1829, 0x3, 0x2, 0x2, 0x2, 0x1829, 0x182a, 0x7, 0x407, 0x2, 0x2, 
       0x182a, 0x182c, 0x3, 0x2, 0x2, 0x2, 0x182b, 0x17f3, 0x3, 0x2, 0x2, 
       0x2, 0x182b, 0x17fb, 0x3, 0x2, 0x2, 0x2, 0x182b, 0x1805, 0x3, 0x2, 
       0x2, 0x2, 0x182b, 0x180b, 0x3, 0x2, 0x2, 0x2, 0x182b, 0x1813, 0x3, 
       0x2, 0x2, 0x2, 0x182c, 0x255, 0x3, 0x2, 0x2, 0x2, 0x182d, 0x1845, 
       0x5, 0x27c, 0x13f, 0x2, 0x182e, 0x1845, 0x7, 0x288, 0x2, 0x2, 0x182f, 
       0x1845, 0x7, 0x101, 0x2, 0x2, 0x1830, 0x1845, 0x7, 0xfd, 0x2, 0x2, 
       0x1831, 0x1845, 0x7, 0xfe, 0x2, 0x2, 0x1832, 0x1845, 0x7, 0xff, 0x2, 
       0x2, 0x1833, 0x1845, 0x7, 0x102, 0x2, 0x2, 0x1834, 0x1845, 0x7, 0x103, 
       0x2, 0x2, 0x1835, 0x1845, 0x7, 0x104, 0x2, 0x2, 0x1836, 0x1845, 0x7, 
       0x47, 0x2, 0x2, 0x1837, 0x1845, 0x7, 0x4e, 0x2, 0x2, 0x1838, 0x1845, 
       0x7, 0x100, 0x2, 0x2, 0x1839, 0x1845, 0x7, 0x106, 0x2, 0x2, 0x183a, 
       0x1845, 0x7, 0x1b6, 0x2, 0x2, 0x183b, 0x1845, 0x7, 0x107, 0x2, 0x2, 
       0x183c, 0x1845, 0x7, 0x81, 0x2, 0x2, 0x183d, 0x1845, 0x7, 0x109, 
       0x2, 0x2, 0x183e, 0x1845, 0x7, 0x10a, 0x2, 0x2, 0x183f, 0x1845, 0x7, 
       0x10b, 0x2, 0x2, 0x1840, 0x1845, 0x7, 0x10c, 0x2, 0x2, 0x1841, 0x1845, 
       0x7, 0x10d, 0x2, 0x2, 0x1842, 0x1845, 0x7, 0x10e, 0x2, 0x2, 0x1843, 
       0x1845, 0x7, 0x10f, 0x2, 0x2, 0x1844, 0x182d, 0x3, 0x2, 0x2, 0x2, 
       0x1844, 0x182e, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x182f, 0x3, 0x2, 0x2, 
       0x2, 0x1844, 0x1830, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1831, 0x3, 0x2, 
       0x2, 0x2, 0x1844, 0x1832, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1833, 0x3, 
       0x2, 0x2, 0x2, 0x1844, 0x1834, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1835, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x1836, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1837, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x1838, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1839, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x183a, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x183b, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x183c, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x183d, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x183e, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x183f, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x1840, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1841, 
       0x3, 0x2, 0x2, 0x2, 0x1844, 0x1842, 0x3, 0x2, 0x2, 0x2, 0x1844, 0x1843, 
       0x3, 0x2, 0x2, 0x2, 0x1845, 0x257, 0x3, 0x2, 0x2, 0x2, 0x1846, 0x1847, 
       0x9, 0x74, 0x2, 0x2, 0x1847, 0x1848, 0x7, 0x406, 0x2, 0x2, 0x1848, 
       0x1849, 0x5, 0x25c, 0x12f, 0x2, 0x1849, 0x184a, 0x7, 0x407, 0x2, 
       0x2, 0x184a, 0x259, 0x3, 0x2, 0x2, 0x2, 0x184b, 0x1850, 0x5, 0x222, 
       0x112, 0x2, 0x184c, 0x1850, 0x5, 0x1fa, 0xfe, 0x2, 0x184d, 0x1850, 
       0x5, 0x24a, 0x126, 0x2, 0x184e, 0x1850, 0x5, 0x25e, 0x130, 0x2, 0x184f, 
       0x184b, 0x3, 0x2, 0x2, 0x2, 0x184f, 0x184c, 0x3, 0x2, 0x2, 0x2, 0x184f, 
       0x184d, 0x3, 0x2, 0x2, 0x2, 0x184f, 0x184e, 0x3, 0x2, 0x2, 0x2, 0x1850, 
       0x185a, 0x3, 0x2, 0x2, 0x2, 0x1851, 0x1856, 0x7, 0x408, 0x2, 0x2, 
       0x1852, 0x1857, 0x5, 0x222, 0x112, 0x2, 0x1853, 0x1857, 0x5, 0x1fa, 
       0xfe, 0x2, 0x1854, 0x1857, 0x5, 0x24a, 0x126, 0x2, 0x1855, 0x1857, 
       0x5, 0x25e, 0x130, 0x2, 0x1856, 0x1852, 0x3, 0x2, 0x2, 0x2, 0x1856, 
       0x1853, 0x3, 0x2, 0x2, 0x2, 0x1856, 0x1854, 0x3, 0x2, 0x2, 0x2, 0x1856, 
       0x1855, 0x3, 0x2, 0x2, 0x2, 0x1857, 0x1859, 0x3, 0x2, 0x2, 0x2, 0x1858, 
       0x1851, 0x3, 0x2, 0x2, 0x2, 0x1859, 0x185c, 0x3, 0x2, 0x2, 0x2, 0x185a, 
       0x1858, 0x3, 0x2, 0x2, 0x2, 0x185a, 0x185b, 0x3, 0x2, 0x2, 0x2, 0x185b, 
       0x25b, 0x3, 0x2, 0x2, 0x2, 0x185c, 0x185a, 0x3, 0x2, 0x2, 0x2, 0x185d, 
       0x1862, 0x5, 0x222, 0x112, 0x2, 0x185e, 0x1862, 0x5, 0x1fa, 0xfe, 
       0x2, 0x185f, 0x1862, 0x5, 0x24a, 0x126, 0x2, 0x1860, 0x1862, 0x5, 
       0x25e, 0x130, 0x2, 0x1861, 0x185d, 0x3, 0x2, 0x2, 0x2, 0x1861, 0x185e, 
       0x3, 0x2, 0x2, 0x2, 0x1861, 0x185f, 0x3, 0x2, 0x2, 0x2, 0x1861, 0x1860, 
       0x3, 0x2, 0x2, 0x2, 0x1862, 0x25d, 0x3, 0x2, 0x2, 0x2, 0x1863, 0x1864, 
       0x8, 0x130, 0x1, 0x2, 0x1864, 0x1865, 0x9, 0x75, 0x2, 0x2, 0x1865, 
       0x186f, 0x5, 0x25e, 0x130, 0x6, 0x1866, 0x1867, 0x5, 0x260, 0x131, 
       0x2, 0x1867, 0x1869, 0x7, 0x51, 0x2, 0x2, 0x1868, 0x186a, 0x7, 0x68, 
       0x2, 0x2, 0x1869, 0x1868, 0x3, 0x2, 0x2, 0x2, 0x1869, 0x186a, 0x3, 
       0x2, 0x2, 0x2, 0x186a, 0x186b, 0x3, 0x2, 0x2, 0x2, 0x186b, 0x186c, 
       0x9, 0x76, 0x2, 0x2, 0x186c, 0x186f, 0x3, 0x2, 0x2, 0x2, 0x186d, 
       0x186f, 0x5, 0x260, 0x131, 0x2, 0x186e, 0x1863, 0x3, 0x2, 0x2, 0x2, 
       0x186e, 0x1866, 0x3, 0x2, 0x2, 0x2, 0x186e, 0x186d, 0x3, 0x2, 0x2, 
       0x2, 0x186f, 0x1876, 0x3, 0x2, 0x2, 0x2, 0x1870, 0x1871, 0xc, 0x5, 
       0x2, 0x2, 0x1871, 0x1872, 0x5, 0x268, 0x135, 0x2, 0x1872, 0x1873, 
       0x5, 0x25e, 0x130, 0x6, 0x1873, 0x1875, 0x3, 0x2, 0x2, 0x2, 0x1874, 
       0x1870, 0x3, 0x2, 0x2, 0x2, 0x1875, 0x1878, 0x3, 0x2, 0x2, 0x2, 0x1876, 
       0x1874, 0x3, 0x2, 0x2, 0x2, 0x1876, 0x1877, 0x3, 0x2, 0x2, 0x2, 0x1877, 
       0x25f, 0x3, 0x2, 0x2, 0x2, 0x1878, 0x1876, 0x3, 0x2, 0x2, 0x2, 0x1879, 
       0x187c, 0x8, 0x131, 0x1, 0x2, 0x187a, 0x187b, 0x7, 0x421, 0x2, 0x2, 
       0x187b, 0x187d, 0x7, 0x3ec, 0x2, 0x2, 0x187c, 0x187a, 0x3, 0x2, 0x2, 
       0x2, 0x187c, 0x187d, 0x3, 0x2, 0x2, 0x2, 0x187d, 0x187e, 0x3, 0x2, 
       0x2, 0x2, 0x187e, 0x187f, 0x5, 0x262, 0x132, 0x2, 0x187f, 0x18c0, 
       0x3, 0x2, 0x2, 0x2, 0x1880, 0x1881, 0xc, 0xa, 0x2, 0x2, 0x1881, 0x1882, 
       0x5, 0x266, 0x134, 0x2, 0x1882, 0x1883, 0x5, 0x260, 0x131, 0xb, 0x1883, 
       0x18bf, 0x3, 0x2, 0x2, 0x2, 0x1884, 0x1886, 0xc, 0x8, 0x2, 0x2, 0x1885, 
       0x1887, 0x7, 0x68, 0x2, 0x2, 0x1886, 0x1885, 0x3, 0x2, 0x2, 0x2, 
       0x1886, 0x1887, 0x3, 0x2, 0x2, 0x2, 0x1887, 0x1888, 0x3, 0x2, 0x2, 
       0x2, 0x1888, 0x1889, 0x7, 0x10, 0x2, 0x2, 0x1889, 0x188a, 0x5, 0x260, 
       0x131, 0x2, 0x188a, 0x188b, 0x7, 0xc, 0x2, 0x2, 0x188b, 0x188c, 0x5, 
       0x260, 0x131, 0x9, 0x188c, 0x18bf, 0x3, 0x2, 0x2, 0x2, 0x188d, 0x188e, 
       0xc, 0x7, 0x2, 0x2, 0x188e, 0x188f, 0x7, 0x215, 0x2, 0x2, 0x188f, 
       0x1890, 0x7, 0x5a, 0x2, 0x2, 0x1890, 0x18bf, 0x5, 0x260, 0x131, 0x8, 
       0x1891, 0x1893, 0xc, 0x5, 0x2, 0x2, 0x1892, 0x1894, 0x7, 0x68, 0x2, 
       0x2, 0x1893, 0x1892, 0x3, 0x2, 0x2, 0x2, 0x1893, 0x1894, 0x3, 0x2, 
       0x2, 0x2, 0x1894, 0x1895, 0x3, 0x2, 0x2, 0x2, 0x1895, 0x1896, 0x9, 
       0x77, 0x2, 0x2, 0x1896, 0x18bf, 0x5, 0x260, 0x131, 0x6, 0x1897, 0x1899, 
       0xc, 0xc, 0x2, 0x2, 0x1898, 0x189a, 0x7, 0x68, 0x2, 0x2, 0x1899, 
       0x1898, 0x3, 0x2, 0x2, 0x2, 0x1899, 0x189a, 0x3, 0x2, 0x2, 0x2, 0x189a, 
       0x189b, 0x3, 0x2, 0x2, 0x2, 0x189b, 0x189c, 0x7, 0x49, 0x2, 0x2, 
       0x189c, 0x189f, 0x7, 0x406, 0x2, 0x2, 0x189d, 0x18a0, 0x5, 0xb4, 
       0x5b, 0x2, 0x189e, 0x18a0, 0x5, 0x236, 0x11c, 0x2, 0x189f, 0x189d, 
       0x3, 0x2, 0x2, 0x2, 0x189f, 0x189e, 0x3, 0x2, 0x2, 0x2, 0x18a0, 0x18a1, 
       0x3, 0x2, 0x2, 0x2, 0x18a1, 0x18a2, 0x7, 0x407, 0x2, 0x2, 0x18a2, 
       0x18bf, 0x3, 0x2, 0x2, 0x2, 0x18a3, 0x18a4, 0xc, 0xb, 0x2, 0x2, 0x18a4, 
       0x18a5, 0x7, 0x51, 0x2, 0x2, 0x18a5, 0x18bf, 0x5, 0x220, 0x111, 0x2, 
       0x18a6, 0x18a7, 0xc, 0x9, 0x2, 0x2, 0x18a7, 0x18a8, 0x5, 0x266, 0x134, 
       0x2, 0x18a8, 0x18a9, 0x9, 0x78, 0x2, 0x2, 0x18a9, 0x18aa, 0x7, 0x406, 
       0x2, 0x2, 0x18aa, 0x18ab, 0x5, 0xb4, 0x5b, 0x2, 0x18ab, 0x18ac, 0x7, 
       0x407, 0x2, 0x2, 0x18ac, 0x18bf, 0x3, 0x2, 0x2, 0x2, 0x18ad, 0x18af, 
       0xc, 0x6, 0x2, 0x2, 0x18ae, 0x18b0, 0x7, 0x68, 0x2, 0x2, 0x18af, 
       0x18ae, 0x3, 0x2, 0x2, 0x2, 0x18af, 0x18b0, 0x3, 0x2, 0x2, 0x2, 0x18b0, 
       0x18b1, 0x3, 0x2, 0x2, 0x2, 0x18b1, 0x18b2, 0x7, 0x5a, 0x2, 0x2, 
       0x18b2, 0x18b5, 0x5, 0x260, 0x131, 0x2, 0x18b3, 0x18b4, 0x7, 0x15c, 
       0x2, 0x2, 0x18b4, 0x18b6, 0x7, 0x415, 0x2, 0x2, 0x18b5, 0x18b3, 0x3, 
       0x2, 0x2, 0x2, 0x18b5, 0x18b6, 0x3, 0x2, 0x2, 0x2, 0x18b6, 0x18bf, 
       0x3, 0x2, 0x2, 0x2, 0x18b7, 0x18b8, 0xc, 0x3, 0x2, 0x2, 0x18b8, 0x18b9, 
       0x7, 0x1b3, 0x2, 0x2, 0x18b9, 0x18ba, 0x7, 0x1c8, 0x2, 0x2, 0x18ba, 
       0x18bb, 0x7, 0x406, 0x2, 0x2, 0x18bb, 0x18bc, 0x5, 0x260, 0x131, 
       0x2, 0x18bc, 0x18bd, 0x7, 0x407, 0x2, 0x2, 0x18bd, 0x18bf, 0x3, 0x2, 
       0x2, 0x2, 0x18be, 0x1880, 0x3, 0x2, 0x2, 0x2, 0x18be, 0x1884, 0x3, 
       0x2, 0x2, 0x2, 0x18be, 0x188d, 0x3, 0x2, 0x2, 0x2, 0x18be, 0x1891, 
       0x3, 0x2, 0x2, 0x2, 0x18be, 0x1897, 0x3, 0x2, 0x2, 0x2, 0x18be, 0x18a3, 
       0x3, 0x2, 0x2, 0x2, 0x18be, 0x18a6, 0x3, 0x2, 0x2, 0x2, 0x18be, 0x18ad, 
       0x3, 0x2, 0x2, 0x2, 0x18be, 0x18b7, 0x3, 0x2, 0x2, 0x2, 0x18bf, 0x18c2, 
       0x3, 0x2, 0x2, 0x2, 0x18c0, 0x18be, 0x3, 0x2, 0x2, 0x2, 0x18c0, 0x18c1, 
       0x3, 0x2, 0x2, 0x2, 0x18c1, 0x261, 0x3, 0x2, 0x2, 0x2, 0x18c2, 0x18c0, 
       0x3, 0x2, 0x2, 0x2, 0x18c3, 0x18c4, 0x8, 0x132, 0x1, 0x2, 0x18c4, 
       0x18f1, 0x5, 0x222, 0x112, 0x2, 0x18c5, 0x18f1, 0x5, 0x1fa, 0xfe, 
       0x2, 0x18c6, 0x18f1, 0x5, 0x24a, 0x126, 0x2, 0x18c7, 0x18f1, 0x5, 
       0x200, 0x101, 0x2, 0x18c8, 0x18c9, 0x5, 0x264, 0x133, 0x2, 0x18c9, 
       0x18ca, 0x5, 0x262, 0x132, 0xc, 0x18ca, 0x18f1, 0x3, 0x2, 0x2, 0x2, 
       0x18cb, 0x18cc, 0x7, 0xd2, 0x2, 0x2, 0x18cc, 0x18f1, 0x5, 0x262, 
       0x132, 0xb, 0x18cd, 0x18ce, 0x7, 0x406, 0x2, 0x2, 0x18ce, 0x18d3, 
       0x5, 0x25e, 0x130, 0x2, 0x18cf, 0x18d0, 0x7, 0x408, 0x2, 0x2, 0x18d0, 
       0x18d2, 0x5, 0x25e, 0x130, 0x2, 0x18d1, 0x18cf, 0x3, 0x2, 0x2, 0x2, 
       0x18d2, 0x18d5, 0x3, 0x2, 0x2, 0x2, 0x18d3, 0x18d1, 0x3, 0x2, 0x2, 
       0x2, 0x18d3, 0x18d4, 0x3, 0x2, 0x2, 0x2, 0x18d4, 0x18d6, 0x3, 0x2, 
       0x2, 0x2, 0x18d5, 0x18d3, 0x3, 0x2, 0x2, 0x2, 0x18d6, 0x18d7, 0x7, 
       0x407, 0x2, 0x2, 0x18d7, 0x18f1, 0x3, 0x2, 0x2, 0x2, 0x18d8, 0x18d9, 
       0x7, 0x203, 0x2, 0x2, 0x18d9, 0x18da, 0x7, 0x406, 0x2, 0x2, 0x18da, 
       0x18dd, 0x5, 0x25e, 0x130, 0x2, 0x18db, 0x18dc, 0x7, 0x408, 0x2, 
       0x2, 0x18dc, 0x18de, 0x5, 0x25e, 0x130, 0x2, 0x18dd, 0x18db, 0x3, 
       0x2, 0x2, 0x2, 0x18de, 0x18df, 0x3, 0x2, 0x2, 0x2, 0x18df, 0x18dd, 
       0x3, 0x2, 0x2, 0x2, 0x18df, 0x18e0, 0x3, 0x2, 0x2, 0x2, 0x18e0, 0x18e1, 
       0x3, 0x2, 0x2, 0x2, 0x18e1, 0x18e2, 0x7, 0x407, 0x2, 0x2, 0x18e2, 
       0x18f1, 0x3, 0x2, 0x2, 0x2, 0x18e3, 0x18e4, 0x7, 0x37, 0x2, 0x2, 
       0x18e4, 0x18e5, 0x7, 0x406, 0x2, 0x2, 0x18e5, 0x18e6, 0x5, 0xb4, 
       0x5b, 0x2, 0x18e6, 0x18e7, 0x7, 0x407, 0x2, 0x2, 0x18e7, 0x18f1, 
       0x3, 0x2, 0x2, 0x2, 0x18e8, 0x18e9, 0x7, 0x406, 0x2, 0x2, 0x18e9, 
       0x18ea, 0x5, 0xb4, 0x5b, 0x2, 0x18ea, 0x18eb, 0x7, 0x407, 0x2, 0x2, 
       0x18eb, 0x18f1, 0x3, 0x2, 0x2, 0x2, 0x18ec, 0x18ed, 0x7, 0x4f, 0x2, 
       0x2, 0x18ed, 0x18ee, 0x5, 0x25e, 0x130, 0x2, 0x18ee, 0x18ef, 0x5, 
       0x3c, 0x1f, 0x2, 0x18ef, 0x18f1, 0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18c3, 
       0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18c5, 0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18c6, 
       0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18c7, 0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18c8, 
       0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18cb, 0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18cd, 
       0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18d8, 0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18e3, 
       0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18e8, 0x3, 0x2, 0x2, 0x2, 0x18f0, 0x18ec, 
       0x3, 0x2, 0x2, 0x2, 0x18f1, 0x1903, 0x3, 0x2, 0x2, 0x2, 0x18f2, 0x18f3, 
       0xc, 0x5, 0x2, 0x2, 0x18f3, 0x18f4, 0x5, 0x26a, 0x136, 0x2, 0x18f4, 
       0x18f5, 0x5, 0x262, 0x132, 0x6, 0x18f5, 0x1902, 0x3, 0x2, 0x2, 0x2, 
       0x18f6, 0x18f7, 0xc, 0x4, 0x2, 0x2, 0x18f7, 0x18f8, 0x5, 0x26c, 0x137, 
       0x2, 0x18f8, 0x18f9, 0x5, 0x262, 0x132, 0x5, 0x18f9, 0x1902, 0x3, 
       0x2, 0x2, 0x2, 0x18fa, 0x18fb, 0xc, 0x3, 0x2, 0x2, 0x18fb, 0x18fc, 
       0x5, 0x26e, 0x138, 0x2, 0x18fc, 0x18fd, 0x5, 0x262, 0x132, 0x4, 0x18fd, 
       0x1902, 0x3, 0x2, 0x2, 0x2, 0x18fe, 0x18ff, 0xc, 0xe, 0x2, 0x2, 0x18ff, 
       0x1900, 0x7, 0x1a, 0x2, 0x2, 0x1900, 0x1902, 0x5, 0x204, 0x103, 0x2, 
       0x1901, 0x18f2, 0x3, 0x2, 0x2, 0x2, 0x1901, 0x18f6, 0x3, 0x2, 0x2, 
       0x2, 0x1901, 0x18fa, 0x3, 0x2, 0x2, 0x2, 0x1901, 0x18fe, 0x3, 0x2, 
       0x2, 0x2, 0x1902, 0x1905, 0x3, 0x2, 0x2, 0x2, 0x1903, 0x1901, 0x3, 
       0x2, 0x2, 0x2, 0x1903, 0x1904, 0x3, 0x2, 0x2, 0x2, 0x1904, 0x263, 
       0x3, 0x2, 0x2, 0x2, 0x1905, 0x1903, 0x3, 0x2, 0x2, 0x2, 0x1906, 0x1907, 
       0x9, 0x79, 0x2, 0x2, 0x1907, 0x265, 0x3, 0x2, 0x2, 0x2, 0x1908, 0x1917, 
       0x7, 0x3fd, 0x2, 0x2, 0x1909, 0x1917, 0x7, 0x3fe, 0x2, 0x2, 0x190a, 
       0x1917, 0x7, 0x3ff, 0x2, 0x2, 0x190b, 0x190c, 0x7, 0x3ff, 0x2, 0x2, 
       0x190c, 0x1917, 0x7, 0x3fd, 0x2, 0x2, 0x190d, 0x190e, 0x7, 0x3fe, 
       0x2, 0x2, 0x190e, 0x1917, 0x7, 0x3fd, 0x2, 0x2, 0x190f, 0x1910, 0x7, 
       0x3ff, 0x2, 0x2, 0x1910, 0x1917, 0x7, 0x3fe, 0x2, 0x2, 0x1911, 0x1912, 
       0x7, 0x400, 0x2, 0x2, 0x1912, 0x1917, 0x7, 0x3fd, 0x2, 0x2, 0x1913, 
       0x1914, 0x7, 0x3ff, 0x2, 0x2, 0x1914, 0x1915, 0x7, 0x3fd, 0x2, 0x2, 
       0x1915, 0x1917, 0x7, 0x3fe, 0x2, 0x2, 0x1916, 0x1908, 0x3, 0x2, 0x2, 
       0x2, 0x1916, 0x1909, 0x3, 0x2, 0x2, 0x2, 0x1916, 0x190a, 0x3, 0x2, 
       0x2, 0x2, 0x1916, 0x190b, 0x3, 0x2, 0x2, 0x2, 0x1916, 0x190d, 0x3, 
       0x2, 0x2, 0x2, 0x1916, 0x190f, 0x3, 0x2, 0x2, 0x2, 0x1916, 0x1911, 
       0x3, 0x2, 0x2, 0x2, 0x1916, 0x1913, 0x3, 0x2, 0x2, 0x2, 0x1917, 0x267, 
       0x3, 0x2, 0x2, 0x2, 0x1918, 0x1920, 0x7, 0xc, 0x2, 0x2, 0x1919, 0x191a, 
       0x7, 0x403, 0x2, 0x2, 0x191a, 0x1920, 0x7, 0x403, 0x2, 0x2, 0x191b, 
       0x1920, 0x7, 0xb2, 0x2, 0x2, 0x191c, 0x1920, 0x7, 0x70, 0x2, 0x2, 
       0x191d, 0x191e, 0x7, 0x402, 0x2, 0x2, 0x191e, 0x1920, 0x7, 0x402, 
       0x2, 0x2, 0x191f, 0x1918, 0x3, 0x2, 0x2, 0x2, 0x191f, 0x1919, 0x3, 
       0x2, 0x2, 0x2, 0x191f, 0x191b, 0x3, 0x2, 0x2, 0x2, 0x191f, 0x191c, 
       0x3, 0x2, 0x2, 0x2, 0x191f, 0x191d, 0x3, 0x2, 0x2, 0x2, 0x1920, 0x269, 
       0x3, 0x2, 0x2, 0x2, 0x1921, 0x1922, 0x7, 0x3ff, 0x2, 0x2, 0x1922, 
       0x1929, 0x7, 0x3ff, 0x2, 0x2, 0x1923, 0x1924, 0x7, 0x3fe, 0x2, 0x2, 
       0x1924, 0x1929, 0x7, 0x3fe, 0x2, 0x2, 0x1925, 0x1929, 0x7, 0x403, 
       0x2, 0x2, 0x1926, 0x1929, 0x7, 0x404, 0x2, 0x2, 0x1927, 0x1929, 0x7, 
       0x402, 0x2, 0x2, 0x1928, 0x1921, 0x3, 0x2, 0x2, 0x2, 0x1928, 0x1923, 
       0x3, 0x2, 0x2, 0x2, 0x1928, 0x1925, 0x3, 0x2, 0x2, 0x2, 0x1928, 0x1926, 
       0x3, 0x2, 0x2, 0x2, 0x1928, 0x1927, 0x3, 0x2, 0x2, 0x2, 0x1929, 0x26b, 
       0x3, 0x2, 0x2, 0x2, 0x192a, 0x192b, 0x9, 0x7a, 0x2, 0x2, 0x192b, 
       0x26d, 0x3, 0x2, 0x2, 0x2, 0x192c, 0x192d, 0x7, 0x3fa, 0x2, 0x2, 
       0x192d, 0x1932, 0x7, 0x3fe, 0x2, 0x2, 0x192e, 0x192f, 0x7, 0x3fa, 
       0x2, 0x2, 0x192f, 0x1930, 0x7, 0x3fe, 0x2, 0x2, 0x1930, 0x1932, 0x7, 
       0x3fe, 0x2, 0x2, 0x1931, 0x192c, 0x3, 0x2, 0x2, 0x2, 0x1931, 0x192e, 
       0x3, 0x2, 0x2, 0x2, 0x1932, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x1933, 0x1934, 
       0x9, 0x7b, 0x2, 0x2, 0x1934, 0x271, 0x3, 0x2, 0x2, 0x2, 0x1935, 0x1936, 
       0x9, 0x7c, 0x2, 0x2, 0x1936, 0x273, 0x3, 0x2, 0x2, 0x2, 0x1937, 0x1938, 
       0x9, 0x7d, 0x2, 0x2, 0x1938, 0x275, 0x3, 0x2, 0x2, 0x2, 0x1939, 0x193a, 
       0x9, 0x7e, 0x2, 0x2, 0x193a, 0x277, 0x3, 0x2, 0x2, 0x2, 0x193b, 0x193c, 
       0x9, 0x7f, 0x2, 0x2, 0x193c, 0x279, 0x3, 0x2, 0x2, 0x2, 0x193d, 0x193e, 
       0x9, 0x80, 0x2, 0x2, 0x193e, 0x27b, 0x3, 0x2, 0x2, 0x2, 0x193f, 0x1940, 
       0x9, 0x81, 0x2, 0x2, 0x1940, 0x27d, 0x3, 0x2, 0x2, 0x2, 0x3ab, 0x27f, 
       0x282, 0x288, 0x28b, 0x28e, 0x290, 0x295, 0x298, 0x29b, 0x2a4, 0x2cb, 
       0x2d7, 0x2e2, 0x2f3, 0x2f8, 0x304, 0x31f, 0x328, 0x32d, 0x333, 0x338, 
       0x33c, 0x345, 0x348, 0x34b, 0x34f, 0x356, 0x359, 0x35e, 0x366, 0x36b, 
       0x370, 0x373, 0x375, 0x381, 0x384, 0x388, 0x38b, 0x38f, 0x392, 0x396, 
       0x399, 0x39c, 0x3a0, 0x3a3, 0x3a7, 0x3ad, 0x3b3, 0x3b9, 0x3c0, 0x3c7, 
       0x3cd, 0x3d3, 0x3dc, 0x3e1, 0x3f1, 0x3f8, 0x3fc, 0x406, 0x40a, 0x40e, 
       0x412, 0x416, 0x41b, 0x41e, 0x421, 0x424, 0x427, 0x42d, 0x431, 0x437, 
       0x43c, 0x43f, 0x442, 0x444, 0x44f, 0x453, 0x456, 0x464, 0x467, 0x46b, 
       0x46e, 0x472, 0x475, 0x479, 0x47c, 0x480, 0x483, 0x486, 0x48a, 0x48d, 
       0x491, 0x497, 0x4a4, 0x4ab, 0x4b0, 0x4b3, 0x4b8, 0x4c0, 0x4c6, 0x4ca, 
       0x4cd, 0x4d2, 0x4d5, 0x4d9, 0x4dc, 0x4e0, 0x4e3, 0x4eb, 0x4ed, 0x4f4, 
       0x4fa, 0x502, 0x505, 0x50c, 0x50f, 0x511, 0x517, 0x51d, 0x52e, 0x535, 
       0x53c, 0x547, 0x54a, 0x557, 0x564, 0x569, 0x579, 0x581, 0x58b, 0x591, 
       0x59b, 0x59e, 0x5a3, 0x5b0, 0x5b7, 0x5be, 0x5c0, 0x5c7, 0x5cb, 0x5cd, 
       0x5d2, 0x5d5, 0x5db, 0x5e0, 0x5e2, 0x5e6, 0x5e9, 0x5ec, 0x5f2, 0x5f7, 
       0x5f9, 0x5fe, 0x605, 0x607, 0x60e, 0x613, 0x617, 0x61a, 0x622, 0x62a, 
       0x62c, 0x634, 0x638, 0x63b, 0x641, 0x646, 0x649, 0x64f, 0x652, 0x656, 
       0x65b, 0x660, 0x664, 0x669, 0x66c, 0x670, 0x674, 0x678, 0x67c, 0x681, 
       0x686, 0x68b, 0x691, 0x696, 0x69b, 0x6a1, 0x6a6, 0x6ab, 0x6b0, 0x6b5, 
       0x6ba, 0x6bf, 0x6c4, 0x6c9, 0x6ce, 0x6d3, 0x6d9, 0x6de, 0x6e4, 0x6ee, 
       0x6f5, 0x6f7, 0x6ff, 0x704, 0x707, 0x70f, 0x715, 0x725, 0x731, 0x733, 
       0x736, 0x73e, 0x744, 0x74a, 0x757, 0x75e, 0x767, 0x76c, 0x777, 0x780, 
       0x785, 0x791, 0x798, 0x7a1, 0x7a6, 0x7b2, 0x7b9, 0x7c2, 0x7c7, 0x7ce, 
       0x7d7, 0x7dc, 0x7de, 0x7e3, 0x7eb, 0x7f4, 0x7f8, 0x7fc, 0x801, 0x807, 
       0x80d, 0x812, 0x817, 0x81c, 0x821, 0x824, 0x829, 0x82e, 0x838, 0x83c, 
       0x843, 0x848, 0x84b, 0x850, 0x853, 0x857, 0x85b, 0x863, 0x876, 0x879, 
       0x87c, 0x880, 0x88a, 0x897, 0x89e, 0x8a1, 0x8aa, 0x8ad, 0x8b0, 0x8bb, 
       0x8be, 0x8c2, 0x8ca, 0x8cd, 0x8d2, 0x8da, 0x8e0, 0x8e4, 0x8e8, 0x8ed, 
       0x8f2, 0x8f9, 0x8fd, 0x908, 0x910, 0x913, 0x919, 0x91f, 0x921, 0x926, 
       0x929, 0x92f, 0x935, 0x937, 0x93b, 0x93e, 0x941, 0x947, 0x94d, 0x950, 
       0x956, 0x95c, 0x95e, 0x963, 0x96b, 0x96d, 0x976, 0x97b, 0x983, 0x987, 
       0x98f, 0x999, 0x99e, 0x9a5, 0x9a9, 0x9ad, 0x9cd, 0x9d1, 0x9dd, 0x9e0, 
       0x9e9, 0x9fa, 0xa06, 0xa0d, 0xa14, 0xa23, 0xa30, 0xa36, 0xa3c, 0xa42, 
       0xa48, 0xa4e, 0xa54, 0xa59, 0xa60, 0xa67, 0xa6e, 0xa73, 0xa76, 0xa78, 
       0xa86, 0xa8d, 0xa94, 0xa9a, 0xa9e, 0xaa2, 0xaa9, 0xaac, 0xab1, 0xab8, 
       0xabf, 0xac3, 0xacc, 0xad5, 0xade, 0xae1, 0xae5, 0xaee, 0xaf2, 0xaf5, 
       0xaf8, 0xafe, 0xb01, 0xb07, 0xb10, 0xb13, 0xb1e, 0xb21, 0xb26, 0xb29, 
       0xb2e, 0xb38, 0xb3d, 0xb43, 0xb45, 0xb4b, 0xb4d, 0xb53, 0xb5b, 0xb60, 
       0xb68, 0xb6b, 0xb70, 0xb73, 0xb78, 0xb80, 0xb88, 0xb8e, 0xb96, 0xb9b, 
       0xba3, 0xba6, 0xbaa, 0xbad, 0xbb5, 0xbbb, 0xbc4, 0xbc7, 0xbcb, 0xbcf, 
       0xbd5, 0xbd9, 0xbdd, 0xbdf, 0xbe2, 0xbe5, 0xbe8, 0xbee, 0xbf2, 0xbf5, 
       0xbf8, 0xbfb, 0xbfe, 0xc00, 0xc04, 0xc0a, 0xc10, 0xc15, 0xc18, 0xc1e, 
       0xc22, 0xc2a, 0xc2e, 0xc31, 0xc34, 0xc3d, 0xc41, 0xc44, 0xc48, 0xc4c, 
       0xc4f, 0xc52, 0xc57, 0xc5d, 0xc61, 0xc6b, 0xc71, 0xc75, 0xc7b, 0xc7f, 
       0xc85, 0xc88, 0xc94, 0xc98, 0xc9c, 0xca4, 0xca8, 0xcb0, 0xcb3, 0xcb7, 
       0xcba, 0xcc2, 0xcc7, 0xcca, 0xccd, 0xcd1, 0xcd4, 0xcdd, 0xce2, 0xceb, 
       0xcf0, 0xcf7, 0xcfe, 0xd06, 0xd0b, 0xd13, 0xd16, 0xd19, 0xd20, 0xd23, 
       0xd2a, 0xd2d, 0xd35, 0xd3b, 0xd46, 0xd49, 0xd54, 0xd5a, 0xd5e, 0xd69, 
       0xd6e, 0xd70, 0xd74, 0xd7e, 0xd88, 0xd8e, 0xd93, 0xd96, 0xd99, 0xd9c, 
       0xd9f, 0xda2, 0xda8, 0xdad, 0xdb0, 0xdb3, 0xdb6, 0xdb9, 0xdbc, 0xdbe, 
       0xdc4, 0xdc9, 0xdcc, 0xdcf, 0xdd2, 0xdd5, 0xdd9, 0xddf, 0xde3, 0xded, 
       0xdf1, 0xdf7, 0xe00, 0xe03, 0xe07, 0xe0a, 0xe0e, 0xe12, 0xe15, 0xe17, 
       0xe1f, 0xe2b, 0xe31, 0xe33, 0xe39, 0xe3b, 0xe3d, 0xe43, 0xe4b, 0xe53, 
       0xe59, 0xe62, 0xe67, 0xe6e, 0xe74, 0xe7b, 0xe80, 0xe89, 0xe8c, 0xe90, 
       0xe94, 0xe98, 0xe9b, 0xe9e, 0xea1, 0xea5, 0xea9, 0xeac, 0xeaf, 0xeb2, 
       0xeb9, 0xebd, 0xecc, 0xed9, 0xee1, 0xeeb, 0xeef, 0xef2, 0xef8, 0xefb, 
       0xefe, 0xf07, 0xf10, 0xf1a, 0xf1e, 0xf28, 0xf32, 0xf3a, 0xf3d, 0xf46, 
       0xf49, 0xf4d, 0xf52, 0xf56, 0xf5f, 0xf62, 0xf81, 0xf84, 0xf87, 0xfbf, 
       0xfc4, 0xfe0, 0xfee, 0xff5, 0xff9, 0xfff, 0x1007, 0x1009, 0x1014, 
       0x101e, 0x1025, 0x102b, 0x1033, 0x1038, 0x1040, 0x1048, 0x1050, 0x1058, 
       0x105e, 0x1061, 0x1065, 0x106a, 0x106f, 0x1075, 0x1077, 0x1082, 0x1087, 
       0x108e, 0x1090, 0x109e, 0x10a4, 0x10a9, 0x10ae, 0x10b4, 0x10bb, 0x10c3, 
       0x10cb, 0x10d0, 0x10d6, 0x10d9, 0x10e1, 0x10e8, 0x10f1, 0x10f4, 0x1105, 
       0x110d, 0x1115, 0x1119, 0x1120, 0x1126, 0x112e, 0x1137, 0x113d, 0x1144, 
       0x114b, 0x1150, 0x1153, 0x1155, 0x115b, 0x115d, 0x1161, 0x1163, 0x1166, 
       0x116f, 0x1175, 0x117c, 0x1183, 0x1188, 0x118b, 0x118d, 0x1193, 0x1195, 
       0x1199, 0x119b, 0x119e, 0x11a3, 0x11aa, 0x11b3, 0x11b8, 0x11c1, 0x11c8, 
       0x11cd, 0x11d0, 0x11d2, 0x11d8, 0x11da, 0x11dd, 0x11e9, 0x11ef, 0x11f8, 
       0x1201, 0x1206, 0x120f, 0x1215, 0x1220, 0x1223, 0x122f, 0x1236, 0x123b, 
       0x124a, 0x1255, 0x1258, 0x1262, 0x126c, 0x1276, 0x1280, 0x1284, 0x1288, 
       0x1292, 0x1297, 0x12d1, 0x12e3, 0x12eb, 0x12f6, 0x12fd, 0x1301, 0x1308, 
       0x130d, 0x1310, 0x1313, 0x131c, 0x1320, 0x133e, 0x1345, 0x1349, 0x1350, 
       0x1353, 0x1363, 0x1366, 0x1370, 0x1374, 0x137a, 0x137d, 0x1382, 0x1386, 
       0x138d, 0x1390, 0x1396, 0x13ae, 0x13bb, 0x13be, 0x13c8, 0x13d0, 0x13d4, 
       0x13db, 0x13de, 0x13e7, 0x13ed, 0x13f3, 0x13fd, 0x13ff, 0x1405, 0x1408, 
       0x140b, 0x1417, 0x141a, 0x1420, 0x1423, 0x142b, 0x1433, 0x1439, 0x143d, 
       0x144b, 0x1457, 0x145e, 0x1461, 0x1468, 0x146f, 0x1474, 0x1479, 0x1484, 
       0x148f, 0x1495, 0x149a, 0x14a7, 0x14a9, 0x14ae, 0x14b3, 0x14b5, 0x14bc, 
       0x14c3, 0x14c6, 0x14c9, 0x14cf, 0x14d3, 0x14d9, 0x14df, 0x14ec, 0x14f1, 
       0x14f9, 0x14fc, 0x1501, 0x1506, 0x150e, 0x1511, 0x1519, 0x151d, 0x152a, 
       0x1530, 0x153c, 0x153f, 0x1548, 0x154d, 0x1553, 0x155a, 0x155c, 0x1561, 
       0x1563, 0x1567, 0x156d, 0x1570, 0x157a, 0x157e, 0x1592, 0x1599, 0x159b, 
       0x15a2, 0x15a4, 0x15a8, 0x15ad, 0x15b8, 0x15bd, 0x15c3, 0x15c6, 0x15ca, 
       0x15cf, 0x15d2, 0x15d6, 0x15da, 0x15dc, 0x15e1, 0x15e6, 0x15f3, 0x15f6, 
       0x15fa, 0x15fd, 0x1600, 0x1605, 0x1608, 0x160d, 0x1612, 0x1615, 0x161a, 
       0x161d, 0x1623, 0x1626, 0x162a, 0x162d, 0x1630, 0x1634, 0x1637, 0x163a, 
       0x163e, 0x1641, 0x1644, 0x1647, 0x164b, 0x164e, 0x1651, 0x1656, 0x165b, 
       0x1660, 0x1663, 0x1668, 0x166b, 0x1670, 0x1673, 0x1677, 0x167b, 0x1683, 
       0x168a, 0x168e, 0x1693, 0x1696, 0x169b, 0x169f, 0x16a1, 0x16b1, 0x16ba, 
       0x16c2, 0x16cb, 0x16d5, 0x16dd, 0x16e5, 0x16ed, 0x16f5, 0x16fa, 0x1702, 
       0x1707, 0x170c, 0x170f, 0x1714, 0x1717, 0x171b, 0x1729, 0x1730, 0x1735, 
       0x173a, 0x175b, 0x175f, 0x1767, 0x176b, 0x1774, 0x177c, 0x1781, 0x1789, 
       0x178e, 0x1793, 0x1795, 0x179e, 0x17a3, 0x17ab, 0x17b0, 0x17b8, 0x17c0, 
       0x17c3, 0x17cd, 0x17d8, 0x17e5, 0x17ed, 0x17f1, 0x17f6, 0x17ff, 0x1802, 
       0x180e, 0x1816, 0x1820, 0x1823, 0x1827, 0x182b, 0x1844, 0x184f, 0x1856, 
       0x185a, 0x1861, 0x1869, 0x186e, 0x1876, 0x187c, 0x1886, 0x1893, 0x1899, 
       0x189f, 0x18af, 0x18b5, 0x18be, 0x18c0, 0x18d3, 0x18df, 0x18f0, 0x1901, 
       0x1903, 0x1916, 0x191f, 0x1928, 0x1931, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment2,
    serializedATNSegment2 + sizeof(serializedATNSegment2) / sizeof(serializedATNSegment2[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

MySqlParser::Initializer MySqlParser::_init;
